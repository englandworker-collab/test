           else
                    {
                        StatsAndSkills.Add(XPUILabel($"{XPLang("donothavepermission", player.UserIDString, data)}", row, height, TextAnchor.MiddleCenter, 10, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                    break;
                case "might":
                    // Disabled
                    if (config.might.maxlvl == 0)
                    {
                        StatsAndSkills.Add(XPUILabel($"{XPLang("disabledbyadmin", player.UserIDString, data)}", row, height, TextAnchor.LowerCenter, 12, ".01", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                    // Enabled / Permissions
                    else if ((config.defaultOptions.userpermissions && permission.UserHasPermission(player.UserIDString, PermMight)) || !config.defaultOptions.userpermissions)
                    {
                        // Statistics
                        #region Statistics
                        stat = xprecord.Might;
                        int MightCost = (stat + 1) * config.might.costmultiplier;
                        if (stat < 1)
                        {
                            MightCost = config.might.pointcoststart;
                        }
                        if (stat < config.might.maxlvl)
                        {
                            level = $"{stat}";
                            cost = $"{MightCost}";
                            levelcolor = stat;
                        }
                        for (int i = 1; i <= config.might.maxlvl; i++)
                        {
                            int costmultiplier = config.might.costmultiplier * i;
                            totalpoints += costmultiplier;
                        }
                        totalpoints += config.might.pointcoststart - config.might.costmultiplier;
                        pointsleft = totalpoints - xprecord.MightP;
                        pointsspent = xprecord.MightP;
                        maxlevel = config.might.maxlvl;
                        showdata = true;
                        #endregion
                        // Options
                        #region Options
                        // Level Up
                        if (xprecord.Might < config.might.maxlvl && (MightCost <= xprecord.statpoint))
                        {
                            levelup = true;
                        }
                        // Reset
                        if (xprecord.Might > 0 && !config.defaultOptions.hardcorenoreset)
                        {
                            reset = true;
                        }
                        #endregion
                        // Abilities
                        #region Abilities
                        StatsAndSkills.Add(XPUILabel($"◂════ ⋆ {XPLang("abilities", player.UserIDString)} ⋆ ════▸", rowtwo, height, TextAnchor.MiddleCenter, 10, "0.50", "0.99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                        rowtwo++;
                        if ((xprecord.Might > 0 || config.playerprofilesettings.showunusedeffects) && config.might.maxlvl != 0)
                        {
                            if (config.might.armor != 0)
                            {
                                double teatime = 0;
                                double teaboost = 0;
                                bool teamodified = false;
                                // Check for TeaModifier Plugin and Values
                                if (TeaModifiers != null)
                                {
                                    teatime = TeaModifiers.Call<float>("GetTeaDuration", player, xprecord.teatype, Modifier.ModifierType.Max_Health);
                                    teaboost = TeaModifiers.Call<float>("GetTeaValue", player, xprecord.teatype, Modifier.ModifierType.Max_Health) * 100;
                                    teamodified = true;
                                }
                                if (GetTeaCooldown(player) != 0)
                                {
                                    switch (GetTeaTypes(player))
                                    {
                                        case "none":
                                            teaboost = 0;
                                            break;
                                        case "maxhealthtea":
                                            if (teamodified)
                                            { teaboost = (teaboost * config.might.armor) * xprecord.Might; }
                                            if (!teamodified)
                                            { teaboost = (5 * config.might.armor) * xprecord.Might; }
                                            break;
                                        case "maxhealthtea.advanced":
                                            if (teamodified)
                                            { teaboost = (teaboost * config.might.armor) * xprecord.Might; }
                                            if (!teamodified)
                                            { teaboost = (12.5 * config.might.armor) * xprecord.Might; }
                                            break;
                                        case "maxhealthtea.pure":
                                            if (teamodified)
                                            { teaboost = (teaboost * config.might.armor) * xprecord.Might; }
                                            if (!teamodified)
                                            { teaboost = (20 * config.might.armor) * xprecord.Might; }
                                            break;
                                    }
                                    teatime = Math.Ceiling(GetTeaCooldown(player) / 60);
                                }
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.might}>{XPLang("armor", player.UserIDString)}</color>: <size=8>(<color=yellow>{XPLang("tea", player.UserIDString)}: {XPLang($"teatype{xprecord.teatype}", player.UserIDString)} ({teatime} mins)</color>)</size>", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.might.armor)}>+{(xprecord.Might * config.might.armor) * 100}</color> (<color=yellow>+{Math.Ceiling(teaboost)}</color>)", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.might.meleedmg != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.might}>{XPLang("melee", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, "0.50", ".75", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", config.might.meleedmg, config.Rankboostssettings.meleedmg)}>+{RankBoosts(player, "stat", (xprecord.Might * config.might.meleedmg), config.Rankboostssettings.meleedmg) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.might.metabolism != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.might}>{XPLang("calories", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, "0.50", ".75", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", config.might.metabolism, config.Rankboostssettings.metabolism)}>+{(int)(RankBoosts(player, "stat", (config.might.metabolism * xprecord.Might) * player.metabolism.calories.max, config.Rankboostssettings.metabolism))}</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.might.metabolism != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.might}>{XPLang("hydration", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, "0.50", ".75", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", config.might.metabolism, config.Rankboostssettings.metabolism)}>+{(int)(RankBoosts(player, "stat", (config.might.metabolism * xprecord.Might) * player.metabolism.hydration.max, config.Rankboostssettings.metabolism))}</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.might.bleedreduction != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.might}>{XPLang("bleed", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, "0.50", ".75", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.might.bleedreduction)}>-{(config.might.bleedreduction * xprecord.Might) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.might.radreduction != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.might}>{XPLang("radiation", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, "0.50", ".75", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.might.radreduction)}>-{(config.might.radreduction * xprecord.Might) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.might}>{XPLang("radiationpoison", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, "0.50", ".75", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.might.radreduction)}>-{(config.might.radreduction * xprecord.Might) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.might.heattolerance != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.might}>{XPLang("heat", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, "0.50", ".75", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.might.heattolerance)}>+{(config.might.heattolerance * xprecord.Might) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.might.coldtolerance != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.might}>{XPLang("cold", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.might.coldtolerance)}>+{(config.might.coldtolerance * xprecord.Might) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (Backpacks != null && config.backpacksmod.enablebackpacks && config.backpacksmod.statorskill == data)
                            {
                                var sizes = config.backpacksmod.BackPackSlots;
                                int sizeearned = 0;
                                int maxsize = 0;
                                foreach (var size in sizes)
                                {
                                    if (size.Value.level == stat)
                                    {
                                        sizeearned = size.Value.slots;
                                    }
                                    if (size.Value.level == maxlevel)
                                    {
                                        maxsize = size.Value.slots;
                                    }
                                }
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.might}>Backpack Size</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", stat)}> {sizeearned} / {maxsize} </color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                        }
                        #endregion
                    }
                    // Enabled / No Permission
                    else
                    {
                        StatsAndSkills.Add(XPUILabel($"{XPLang("donothavepermission", player.UserIDString, data)}", row, height, TextAnchor.MiddleCenter, 10, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                    break;
                case "weaponry":
                    // Disabled
                    if (config.weaponry.maxlvl == 0)
                    {
                        StatsAndSkills.Add(XPUILabel($"{XPLang("disabledbyadmin", player.UserIDString, data)}", row, height, TextAnchor.LowerCenter, 12, ".01", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                    // Enabled / Permissions
                    else if ((config.defaultOptions.userpermissions && permission.UserHasPermission(player.UserIDString, PermWeaponry)) || !config.defaultOptions.userpermissions)
                    {
                        // Statistics
                        #region Statistics
                        stat = xprecord.Weaponry;
                        int WeaponryCost = (xprecord.Weaponry + 1) * config.weaponry.costmultiplier;
                        if (xprecord.Weaponry < 1)
                        {
                            WeaponryCost = config.weaponry.pointcoststart;
                        }
                        if (xprecord.Weaponry < config.weaponry.maxlvl)
                        {
                            level = $"{xprecord.Weaponry}";
                            cost = $"{WeaponryCost}";
                            levelcolor = xprecord.Weaponry;
                        }
                        for (int i = 1; i <= config.weaponry.maxlvl; i++)
                        {
                            int costmultiplier = config.weaponry.costmultiplier * i;
                            totalpoints += costmultiplier;
                        }
                        totalpoints += config.weaponry.pointcoststart - config.weaponry.costmultiplier;
                        pointsleft = totalpoints - xprecord.WeaponryP;
                        pointsspent = xprecord.WeaponryP;
                        maxlevel = config.weaponry.maxlvl;
                        showdata = true;
                        #endregion
                        // Options
                        #region Options
                        // Level Up
                        if (xprecord.Weaponry < config.weaponry.maxlvl && (WeaponryCost <= xprecord.statpoint))
                        {
                            levelup = true;
                        }
                        // Reset
                        if (xprecord.Weaponry > 0 && !config.defaultOptions.hardcorenoreset)
                        {
                            reset = true;
                        }
                        #endregion
                        // Abilities
                        #region Abilities
                        StatsAndSkills.Add(XPUILabel($"◂════ ⋆ {XPLang("abilities", player.UserIDString)} ⋆ ════▸", rowtwo, height, TextAnchor.MiddleCenter, 10, "0.50", "0.99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                        rowtwo++;
                        if ((xprecord.Weaponry > 0 || config.playerprofilesettings.showunusedeffects) && config.weaponry.maxlvl != 0)
                        {
                            bool tooldurability = true;
                            bool weapondurability = true;
                            if (NeverWear != null && !config.weaponry.neverweartools)
                            {
                                tooldurability = false;
                            }
                            if (NeverWear != null && !config.weaponry.neverwearweapons)
                            {
                                weapondurability = false;
                            }
                            if (config.weaponry.reductionchance != 0 && (tooldurability || weapondurability))
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.weaponry}>{XPLang("weaponrychance", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".5", ".80", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.weaponry.reductionchance)}>+{(xprecord.Weaponry * config.weaponry.reductionchance) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                                if (config.weaponry.tool != 0 && tooldurability)
                                {
                                    StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.weaponry}>{XPLang("weaponrytools", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".5", ".80", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                    StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.weaponry.tool)}>-{(xprecord.Weaponry * config.weaponry.tool) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                    rowtwo++;
                                }
                                if (config.weaponry.powertools != 0 && tooldurability)
                                {
                                    StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.weaponry}>{XPLang("weaponrypowertools", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".5", ".80", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                    StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.weaponry.powertools)}>-{(xprecord.Weaponry * config.weaponry.powertools) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                    rowtwo++;
                                }
                                if (config.weaponry.meleeweapons != 0 && weapondurability)
                                {
                                    StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.weaponry}>{XPLang("weaponryweaponsmelee", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".5", ".80", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                    StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.weaponry.meleeweapons)}>-{(xprecord.Weaponry * config.weaponry.meleeweapons) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                    rowtwo++;
                                }
                                if (config.weaponry.projectileweapons != 0 && weapondurability)
                                {
                                    StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.weaponry}>{XPLang("weaponryweaponsprojectile", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".5", ".80", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                    StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.weaponry.projectileweapons)}>-{(xprecord.Weaponry * config.weaponry.projectileweapons) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                    rowtwo++;
                                }
                            }
                            if (config.weaponry.maxammo != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.weaponry}>{XPLang("weaponryweaponsammo", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".5", ".75", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.weaponry.maxammo)}>+{(xprecord.Weaponry * config.weaponry.maxammo) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (XPerienceAddon != null)
                            {
                                double getaddonweaponryammochance = Convert.ToDouble(XPerienceAddon.Call("GetExtraFeatures", player, "weaponry", "ammochance"));
                                double getaddonreload = Convert.ToDouble(XPerienceAddon.Call("GetExtraFeatures", player, "weaponry", "reload"));
                                double getaddondistance = Convert.ToDouble(XPerienceAddon.Call("GetExtraFeatures", player, "weaponry", "distance"));
                                double getaddonrange = Convert.ToDouble(XPerienceAddon.Call("GetExtraFeatures", player, "weaponry", "range"));
                                if (getaddonweaponryammochance != 0)
                                {
                                    StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.weaponry}>{XPLang("weaponryaddonammochance", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".5", ".80", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                    StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", xprecord.Weaponry)}>+{(xprecord.Weaponry * getaddonweaponryammochance) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                    rowtwo++;
                                }
                                if (getaddondistance != 0)
                                {
                                    StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.weaponry}>{XPLang("weaponryaddondistance", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".5", ".80", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                    StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", xprecord.Weaponry)}>+{(xprecord.Weaponry * getaddondistance) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                    rowtwo++;
                                }
                                if (getaddonrange != 0)
                                {
                                    StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.weaponry}>{XPLang("weaponryaddonrange", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".5", ".80", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                    StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", xprecord.Weaponry)}>+{(xprecord.Weaponry * getaddonrange) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                    rowtwo++;
                                }
                            }
                            if (Backpacks != null && config.backpacksmod.enablebackpacks && config.backpacksmod.statorskill == data)
                            {
                                var sizes = config.backpacksmod.BackPackSlots;
                                int sizeearned = 0;
                                int maxsize = 0;
                                foreach (var size in sizes)
                                {
                                    if (size.Value.level == stat)
                                    {
                                        sizeearned = size.Value.slots;
                                    }
                                    if (size.Value.level == maxlevel)
                                    {
                                        maxsize = size.Value.slots;
                                    }
                                }
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.might}>Backpack Size</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", stat)}> {sizeearned} / {maxsize} </color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                        }
                        #endregion
                    }
                    // Enabled / No Permission
                    else
                    {
                        StatsAndSkills.Add(XPUILabel($"{XPLang("donothavepermission", player.UserIDString, data)}", row, height, TextAnchor.MiddleCenter, 10, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                    break;
                case "ninjary":
                    // Disabled
                    if (config.ninjary.maxlvl == 0)
                    {
                        StatsAndSkills.Add(XPUILabel($"{XPLang("disabledbyadmin", player.UserIDString, data)}", row, height, TextAnchor.LowerCenter, 12, ".01", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                    // Enabled / Permissions
                    else if ((config.defaultOptions.userpermissions && permission.UserHasPermission(player.UserIDString, PermNinjary)) || !config.defaultOptions.userpermissions)
                    {
                        // Statistics
                        #region Statistics
                        stat = xprecord.Ninjary;
                        int NinjaryCost = (xprecord.Ninjary + 1) * config.ninjary.costmultiplier;
                        if (xprecord.Ninjary < 1)
                        {
                            NinjaryCost = config.ninjary.pointcoststart;
                        }
                        if (xprecord.Ninjary < config.ninjary.maxlvl)
                        {
                            level = $"{xprecord.Ninjary}";
                            cost = $"{NinjaryCost}";
                            levelcolor = xprecord.Ninjary;
                        }
                        for (int i = 1; i <= config.ninjary.maxlvl; i++)
                        {
                            int costmultiplier = config.ninjary.costmultiplier * i;
                            totalpoints += costmultiplier;
                        }
                        totalpoints += config.ninjary.pointcoststart - config.ninjary.costmultiplier;
                        pointsleft = totalpoints - xprecord.NinjaryP;
                        pointsspent = xprecord.NinjaryP;
                        maxlevel = config.ninjary.maxlvl;
                        showdata = true;
                        #endregion
                        // Options
                        #region Options
                        // Level Up
                        if (xprecord.Ninjary < config.ninjary.maxlvl && (NinjaryCost <= xprecord.statpoint))
                        {
                            levelup = true;
                        }
                        // Reset
                        if (xprecord.Ninjary > 0 && !config.defaultOptions.hardcorenoreset)
                        {
                            reset = true;
                        }
                        #endregion
                        // Abilities
                        #region Abilities
                        StatsAndSkills.Add(XPUILabel($"◂════ ⋆ {XPLang("abilities", player.UserIDString)} ⋆ ════▸", rowtwo, height, TextAnchor.MiddleCenter, 10, "0.50", "0.99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                        rowtwo++;
                        if ((xprecord.Ninjary > 0 || config.playerprofilesettings.showunusedeffects) && config.ninjary.maxlvl != 0)
                        {
                            if (config.ninjary.patrolstealth != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.Ninjary}>{XPLang("Ninjarypatrolstealth", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".5", ".75", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.ninjary.patrolstealth)}>+{(xprecord.Ninjary * config.ninjary.patrolstealth) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.ninjary.ch47stealth != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.Ninjary}>{XPLang("Ninjarych47stealth", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".5", ".75", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.ninjary.ch47stealth)}>+{(xprecord.Ninjary * config.ninjary.ch47stealth) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.ninjary.bradleystealth != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.Ninjary}>{XPLang("Ninjarybradleystealth", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".5", ".75", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.ninjary.bradleystealth)}>+{(xprecord.Ninjary * config.ninjary.bradleystealth) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.ninjary.npcstealth != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.Ninjary}>{XPLang("Ninjarynpcstealth", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".5", ".75", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.ninjary.npcstealth)}>+{(xprecord.Ninjary * config.ninjary.npcstealth) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.ninjary.turretstealth != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.Ninjary}>{XPLang("Ninjaryturretstealth", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".5", ".75", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.ninjary.turretstealth)}>+{(xprecord.Ninjary * config.ninjary.turretstealth) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.ninjary.knifeincrease != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.Ninjary}>{XPLang("Ninjaryknifeincrease", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".5", ".75", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.ninjary.knifeincrease)}>+{(xprecord.Ninjary * config.ninjary.knifeincrease) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.ninjary.swordincrease != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.Ninjary}>{XPLang("Ninjaryswordincrease", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".5", ".75", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.ninjary.swordincrease)}>+{(xprecord.Ninjary * config.ninjary.swordincrease) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (Backpacks != null && config.backpacksmod.enablebackpacks && config.backpacksmod.statorskill == data)
                            {
                                var sizes = config.backpacksmod.BackPackSlots;
                                int sizeearned = 0;
                                int maxsize = 0;
                                foreach (var size in sizes)
                                {
                                    if (size.Value.level == stat)
                                    {
                                        sizeearned = size.Value.slots;
                                    }
                                    if (size.Value.level == maxlevel)
                                    {
                                        maxsize = size.Value.slots;
                                    }
                                }
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.might}>Backpack Size</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", stat)}> {sizeearned} / {maxsize} </color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                        }
                        #endregion
                    }
                    // Enabled / No Permission
                    else
                    {
                        StatsAndSkills.Add(XPUILabel($"{XPLang("donothavepermission", player.UserIDString, data)}", row, height, TextAnchor.MiddleCenter, 10, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                    break;
                case "captaincy":
                    // Disabled
                    if (config.captaincy.maxlvl == 0)
                    {
                        StatsAndSkills.Add(XPUILabel($"{XPLang("disabledbyadmin", player.UserIDString, data)}", row, height, TextAnchor.LowerCenter, 12, ".01", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                    // Enabled / Permissions
                    else if ((config.defaultOptions.userpermissions && permission.UserHasPermission(player.UserIDString, PermCaptaincy)) || !config.defaultOptions.userpermissions)
                    {
                        // Statistics
                        #region Statistics
                        stat = xprecord.Captaincy;
                        int CaptaincyCost = (xprecord.Captaincy + 1) * config.captaincy.costmultiplier;
                        if (xprecord.Captaincy < 1)
                        {
                            CaptaincyCost = config.captaincy.pointcoststart;
                        }
                        if (xprecord.Captaincy < config.captaincy.maxlvl)
                        {
                            level = $"{xprecord.Captaincy}";
                            cost = $"{CaptaincyCost}";
                            levelcolor = xprecord.Captaincy;
                        }
                        for (int i = 1; i <= config.captaincy.maxlvl; i++)
                        {
                            int costmultiplier = config.captaincy.costmultiplier * i;
                            totalpoints += costmultiplier;
                        }
                        totalpoints += config.captaincy.pointcoststart - config.captaincy.costmultiplier;
                        pointsleft = totalpoints - xprecord.CaptaincyP;
                        pointsspent = xprecord.CaptaincyP;
                        maxlevel = config.captaincy.maxlvl;
                        showdata = true;
                        #endregion
                        // Options
                        #region Options
                        // Level Up
                        if (xprecord.Captaincy < config.captaincy.maxlvl && (CaptaincyCost <= xprecord.statpoint))
                        {
                            levelup = true;
                        }
                        // Reset
                        if (xprecord.Captaincy > 0 && !config.defaultOptions.hardcorenoreset)
                        {
                            reset = true;
                        }
                        #endregion
                        // Abilities
                        #region Abilities
                        StatsAndSkills.Add(XPUILabel($"◂════ ⋆ {XPLang("abilities", player.UserIDString)} ⋆ ════▸", rowtwo, height, TextAnchor.MiddleCenter, 10, "0.50", "0.99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                        rowtwo++;
                        if ((xprecord.Captaincy > 0 || config.playerprofilesettings.showunusedeffects) && config.captaincy.maxlvl != 0)
                        {
                            if (config.captaincy.skillboost != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.captaincy}>{XPLang("captaincyskillboost", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".5", ".75", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.captaincy.skillboost)}>+{(xprecord.Captaincy * config.captaincy.skillboost) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.captaincy.xpboost != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.captaincy}>{XPLang("captaincyxpboost", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".5", ".75", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.captaincy.xpboost)}>+{(xprecord.Captaincy * config.captaincy.xpboost) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.captaincy.captaincydistance != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.captaincy}>{XPLang("captaincydistance", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".5", ".75", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", config.captaincy.captaincydistance, config.Rankboostssettings.distance)}>+{RankBoosts(player, "stat", xprecord.Captaincy * config.captaincy.captaincydistance, config.Rankboostssettings.distance)} FT</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (Backpacks != null && config.backpacksmod.enablebackpacks && config.backpacksmod.statorskill == data)
                            {
                                var sizes = config.backpacksmod.BackPackSlots;
                                int sizeearned = 0;
                                int maxsize = 0;
                                foreach (var size in sizes)
                                {
                                    if (size.Value.level == stat)
                                    {
                                        sizeearned = size.Value.slots;
                                    }
                                    if (size.Value.level == maxlevel)
                                    {
                                        maxsize = size.Value.slots;
                                    }
                                }
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.might}>Backpack Size</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", stat)}> {sizeearned} / {maxsize} </color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                        }
                        #endregion
                    }
                    // Enabled / No Permission
                    else
                    {
                        StatsAndSkills.Add(XPUILabel($"{XPLang("donothavepermission", player.UserIDString, data)}", row, height, TextAnchor.MiddleCenter, 10, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                    break;
                // Skills
                case "woodcutter":
                    // Disabled
                    if (config.woodcutter.maxlvl == 0)
                    {
                        StatsAndSkills.Add(XPUILabel($"{XPLang("disabledbyadmin", player.UserIDString, data)}", row, height, TextAnchor.LowerCenter, 12, ".01", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                    // Enabled / Permissions
                    else if ((config.defaultOptions.userpermissions && permission.UserHasPermission(player.UserIDString, PermWoodCutter)) || !config.defaultOptions.userpermissions)
                    {
                        // Statistics
                        #region Statistics
                        skill = xprecord.WoodCutter;
                        int WoodCutterCost = (xprecord.WoodCutter + 1) * config.woodcutter.costmultiplier;
                        if (xprecord.WoodCutter < 1)
                        {
                            WoodCutterCost = config.woodcutter.pointcoststart;
                        }
                        if (xprecord.WoodCutter < config.woodcutter.maxlvl)
                        {
                            level = $"{xprecord.WoodCutter}";
                            cost = $"{WoodCutterCost}";
                            levelcolor = xprecord.WoodCutter;
                        }
                        for (int i = 1; i <= config.woodcutter.maxlvl; i++)
                        {
                            int costmultiplier = config.woodcutter.costmultiplier * i;
                            totalpoints += costmultiplier;
                        }
                        totalpoints += config.woodcutter.pointcoststart - config.woodcutter.costmultiplier;
                        pointsleft = totalpoints - xprecord.WoodCutterP;
                        pointsspent = xprecord.WoodCutterP;
                        maxlevel = config.woodcutter.maxlvl;
                        showdata = true;
                        #endregion
                        // Options
                        #region Options
                        // Level Up
                        if (xprecord.WoodCutter < config.woodcutter.maxlvl && (WoodCutterCost <= xprecord.skillpoint))
                        {
                            levelup = true;
                        }
                        // Reset
                        if (xprecord.WoodCutter > 0 && !config.defaultOptions.hardcorenoreset)
                        {
                            reset = true;
                        }
                        #endregion
                        // Abilities
                        #region Abilities
                        StatsAndSkills.Add(XPUILabel($"◂════ ⋆ {XPLang("abilities", player.UserIDString)} ⋆ ════▸", rowtwo, height, TextAnchor.MiddleCenter, 10, "0.50", "0.99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                        rowtwo++;
                        if ((xprecord.WoodCutter > 0 || config.playerprofilesettings.showunusedeffects) && config.woodcutter.maxlvl != 0)
                        {
                            if (config.woodcutter.gatherrate != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.woodcutter}>{XPLang("woodgather", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", config.woodcutter.gatherrate, config.Rankboostssettings.woodcuttergr)}>{ValueSymbol("perk", config.woodcutter.gatherrate, "pos")}{RankBoosts(player, "skill", (xprecord.WoodCutter * config.woodcutter.gatherrate), config.Rankboostssettings.woodcuttergr)}x</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.woodcutter}>{XPLang("clothgather", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", config.woodcutter.gatherrate, config.Rankboostssettings.woodcuttergr)}>{ValueSymbol("perk", config.woodcutter.gatherrate, "pos")}{RankBoosts(player, "skill", (xprecord.WoodCutter * config.woodcutter.gatherrate), config.Rankboostssettings.woodcuttergr)}x</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.woodcutter.bonusincrease != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.woodcutter}>Wood Bonus</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", config.woodcutter.bonusincrease, config.Rankboostssettings.woodcutterbonus)}>{ValueSymbol("perk", config.woodcutter.bonusincrease, "pos")}{RankBoosts(player, "skill", (xprecord.WoodCutter * config.woodcutter.bonusincrease), config.Rankboostssettings.woodcutterbonus)}x</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.woodcutter.applechance != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.woodcutter}>{XPLang("woodapple", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.woodcutter.applechance)}>{ValueSymbol("perk", config.woodcutter.applechance, "pos")}{(xprecord.WoodCutter * config.woodcutter.applechance) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (Backpacks != null && config.backpacksmod.enablebackpacks && config.backpacksmod.statorskill == data)
                            {
                                var sizes = config.backpacksmod.BackPackSlots;
                                int sizeearned = 0;
                                int maxsize = 0;
                                foreach (var size in sizes)
                                {
                                    if (size.Value.level == skill)
                                    {
                                        sizeearned = size.Value.slots;
                                    }
                                    if (size.Value.level == maxlevel)
                                    {
                                        maxsize = size.Value.slots;
                                    }
                                }
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.might}>Backpack Size</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", skill)}> {sizeearned} / {maxsize} </color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                        }
                        #endregion
                    }
                    // Enabled / No Permission
                    else
                    {
                        StatsAndSkills.Add(XPUILabel($"{XPLang("donothavepermission", player.UserIDString, data)}", row, height, TextAnchor.MiddleCenter, 10, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                    break;
                case "smithy":
                    // Disabled
                    if (config.smithy.maxlvl == 0)
                    {
                        StatsAndSkills.Add(XPUILabel($"{XPLang("disabledbyadmin", player.UserIDString, data)}", row, height, TextAnchor.LowerCenter, 12, ".01", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                    // Enabled / Permissions
                    else if ((config.defaultOptions.userpermissions && permission.UserHasPermission(player.UserIDString, PermSmithy)) || !config.defaultOptions.userpermissions)
                    {
                        // Statistics
                        #region Statistics
                        skill = xprecord.WoodCutter;
                        int SmithyCost = (xprecord.Smithy + 1) * config.smithy.costmultiplier;
                        if (xprecord.Smithy < 1)
                        {
                            SmithyCost = config.smithy.pointcoststart;
                        }
                        if (xprecord.Smithy < config.smithy.maxlvl)
                        {
                            level = $"{xprecord.Smithy}";
                            cost = $"{SmithyCost}";
                            levelcolor = xprecord.Smithy;
                        }
                        for (int i = 1; i <= config.smithy.maxlvl; i++)
                        {
                            int costmultiplier = config.smithy.costmultiplier * i;
                            totalpoints += costmultiplier;
                        }
                        totalpoints += config.smithy.pointcoststart - config.smithy.costmultiplier;
                        pointsleft = totalpoints - xprecord.SmithyP;
                        pointsspent = xprecord.SmithyP;
                        maxlevel = config.smithy.maxlvl;
                        showdata = true;
                        #endregion
                        // Options
                        #region Options
                        // Level Up
                        if (xprecord.Smithy < config.smithy.maxlvl && (SmithyCost <= xprecord.skillpoint))
                        {
                            levelup = true;
                        }
                        // Reset
                        if (xprecord.Smithy > 0 && !config.defaultOptions.hardcorenoreset)
                        {
                            reset = true;
                        }
                        #endregion
                        // Abilities
                        #region Abilities
                        StatsAndSkills.Add(XPUILabel($"◂════ ⋆ {XPLang("abilities", player.UserIDString)} ⋆ ════▸", rowtwo, height, TextAnchor.MiddleCenter, 10, "0.50", "0.99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                        rowtwo++;
                        if ((xprecord.Smithy > 0 || config.playerprofilesettings.showunusedeffects) && config.smithy.maxlvl != 0)
                        {
                            if (config.smithy.productionrate != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.smithy}>{XPLang("productionrate", player.UserIDString)}</color>: (<color=yellow>{XPLang("productionamount", player.UserIDString)}</color>)", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", xprecord.Smithy, config.Rankboostssettings.smithypr)}>{ValueSymbol("perk", config.smithy.productionrate, "pos")}{RankBoosts(player, "skill", (xprecord.Smithy * config.smithy.productionrate), config.Rankboostssettings.smithypr) * 100}%</color> (<color=yellow>+{Math.Ceiling(RankBoosts(player, "skill", (xprecord.Smithy * config.smithy.productionrate) * 5, config.Rankboostssettings.smithypr))}</color>)", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.smithy.productionspeed != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.smithy}>{XPLang("productionspeed", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", xprecord.Smithy, config.Rankboostssettings.smithyps)}>{ValueSymbol("perk", config.smithy.productionspeed, "pos")}{RankBoosts(player, "skill", (xprecord.Smithy * config.smithy.productionspeed), config.Rankboostssettings.smithyps) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.smithy.fuelconsumption != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.smithy}>{XPLang("fuelconsumption", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", xprecord.Smithy, config.Rankboostssettings.smithyfc)}>{ValueSymbol("perk", config.smithy.fuelconsumption, "neg")}{RankBoosts(player, "skill", (xprecord.Smithy * config.smithy.fuelconsumption), config.Rankboostssettings.smithyfc) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.smithy.metalchance != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.smithy}>{XPLang("hmetalchance", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", xprecord.Smithy, config.Rankboostssettings.smithyhqmc)}>{ValueSymbol("perk", config.smithy.metalchance, "pos")}{RankBoosts(player, "skill", (xprecord.Smithy * config.smithy.metalchance), config.Rankboostssettings.smithyhqmc) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.smithy.metalamount != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.smithy}>{XPLang("hmetalamount", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", xprecord.Smithy, config.Rankboostssettings.smithyhqma)}>{ValueSymbol("perk", config.smithy.metalamount, "pos")}{RankBoosts(player, "skill", xprecord.Smithy * config.smithy.metalamount, config.Rankboostssettings.smithyhqma)}</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (Backpacks != null && config.backpacksmod.enablebackpacks && config.backpacksmod.statorskill == data)
                            {
                                var sizes = config.backpacksmod.BackPackSlots;
                                int sizeearned = 0;
                                int maxsize = 0;
                                foreach (var size in sizes)
                                {
                                    if (size.Value.level == skill)
                                    {
                                        sizeearned = size.Value.slots;
                                    }
                                    if (size.Value.level == maxlevel)
                                    {
                                        maxsize = size.Value.slots;
                                    }
                                }
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.might}>Backpack Size</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", skill)}> {sizeearned} / {maxsize} </color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }

                        }
                        #endregion
                    }
                    // Enabled / No Permission
                    else
                    {
                        StatsAndSkills.Add(XPUILabel($"{XPLang("donothavepermission", player.UserIDString, data)}", row, height, TextAnchor.MiddleCenter, 10, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                    break;
                case "miner":
                    // Disabled
                    if (config.miner.maxlvl == 0)
                    {
                        StatsAndSkills.Add(XPUILabel($"{XPLang("disabledbyadmin", player.UserIDString, data)}", row, height, TextAnchor.LowerCenter, 12, ".01", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                    // Enabled / Permissions
                    else if ((config.defaultOptions.userpermissions && permission.UserHasPermission(player.UserIDString, PermMiner)) || !config.defaultOptions.userpermissions)
                    {
                        // Statistics
                        #region Statistics
                        skill = xprecord.WoodCutter;
                        int MinerCost = (xprecord.Miner + 1) * config.miner.costmultiplier;
                        if (xprecord.Miner < 1)
                        {
                            MinerCost = config.miner.pointcoststart;
                        }
                        if (xprecord.Miner < config.miner.maxlvl)
                        {
                            level = $"{xprecord.Miner}";
                            cost = $"{MinerCost}";
                            levelcolor = xprecord.Miner;
                        }
                        for (int i = 1; i <= config.miner.maxlvl; i++)
                        {
                            int costmultiplier = config.miner.costmultiplier * i;
                            totalpoints += costmultiplier;
                        }
                        totalpoints += config.miner.pointcoststart - config.miner.costmultiplier;
                        pointsleft = totalpoints - xprecord.MinerP;
                        pointsspent = xprecord.MinerP;
                        maxlevel = config.miner.maxlvl;
                        showdata = true;
                        #endregion
                        // Options
                        #region Options
                        // Level Up
                        if (xprecord.Miner < config.miner.maxlvl && (MinerCost <= xprecord.skillpoint))
                        {
                            levelup = true;
                        }
                        // Reset
                        if (xprecord.Miner > 0 && !config.defaultOptions.hardcorenoreset)
                        {
                            reset = true;
                        }
                        #endregion
                        // Abilities
                        #region Abilities
                        StatsAndSkills.Add(XPUILabel($"◂════ ⋆ {XPLang("abilities", player.UserIDString)} ⋆ ════▸", rowtwo, height, TextAnchor.MiddleCenter, 10, "0.50", "0.99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                        rowtwo++;
                        if ((xprecord.Miner > 0 || config.playerprofilesettings.showunusedeffects) && config.miner.maxlvl != 0)
                        {
                            if (config.miner.gatherrate != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.miner}>{XPLang("oregather", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", xprecord.Miner, config.Rankboostssettings.minergr)}>{ValueSymbol("perk", config.miner.gatherrate, "pos")}{RankBoosts(player, "skill", (xprecord.Miner * config.miner.gatherrate), config.Rankboostssettings.minergr)}x</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.miner.bonusincrease != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.miner}>Ore Bonus</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", xprecord.Miner, config.Rankboostssettings.minerbonus)}>{ValueSymbol("perk", config.miner.bonusincrease, "pos")}{RankBoosts(player, "skill", (xprecord.Miner * config.miner.bonusincrease), config.Rankboostssettings.minerbonus)}x</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.miner.fuelconsumption != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.miner}>{XPLang("fuelconsumptionhats", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", xprecord.Miner, config.Rankboostssettings.minerfuel)}>{ValueSymbol("perk", config.miner.fuelconsumption, "neg")}{RankBoosts(player, "skill", (xprecord.Miner * config.miner.fuelconsumption), config.Rankboostssettings.minerfuel) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.miner.metalchance != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.miner}>{XPLang("metalchance", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", xprecord.Miner, config.Rankboostssettings.minermfc)}>{ValueSymbol("perk", config.miner.metalchance, "pos")}{RankBoosts(player, "skill", (xprecord.Miner * config.miner.metalchance), config.Rankboostssettings.minermfc) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.miner.metalamount != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.miner}>{XPLang("metalamount", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", xprecord.Miner, config.Rankboostssettings.minermfa)}>{ValueSymbol("perk", config.miner.metalamount, "pos")}{RankBoosts(player, "skill", xprecord.Miner * config.miner.metalamount, config.Rankboostssettings.minermfa)}</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (XPerienceAddon != null)
                            {
                                double quarryboost = Convert.ToDouble(XPerienceAddon.Call("GetExtraFeatures", player, "miner", "amount"));
                                if (quarryboost != 0)
                                {
                                    StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.miner}>{XPLang("quarryboost", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                    StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", xprecord.Miner)}>{ValueSymbol("perk", quarryboost, "pos")}{quarryboost * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                    rowtwo++;
                                    int quarryduration = Convert.ToInt32(XPerienceAddon.Call("GetExtraFeatures", player, "miner", "duration"));
                                    StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.miner}>{XPLang("quarryduration", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                    StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", xprecord.Miner)}>{(xprecord.Miner * quarryduration) / 60} mins</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                    rowtwo++;
                                    int quarrycooldown = Convert.ToInt32(XPerienceAddon.Call("GetExtraFeatures", player, "miner", "cooldown"));
                                    StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.miner}>{XPLang("quarrycooldown", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                    StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", xprecord.Miner)}>{((xprecord.Miner * 60) - quarrycooldown) / 60} mins</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                }
                            }
                            if (Backpacks != null && config.backpacksmod.enablebackpacks && config.backpacksmod.statorskill == data)
                            {
                                var sizes = config.backpacksmod.BackPackSlots;
                                int sizeearned = 0;
                                int maxsize = 0;
                                foreach (var size in sizes)
                                {
                                    if (size.Value.level == skill)
                                    {
                                        sizeearned = size.Value.slots;
                                    }
                                    if (size.Value.level == maxlevel)
                                    {
                                        maxsize = size.Value.slots;
                                    }
                                }
                                rowtwo++;
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.might}>Backpack Size</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", skill)}> {sizeearned} / {maxsize} </color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                        }
                        #endregion
                    }
                    // Enabled / No Permission
                    else
                    {
                        StatsAndSkills.Add(XPUILabel($"{XPLang("donothavepermission", player.UserIDString, data)}", row, height, TextAnchor.MiddleCenter, 10, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                    break;
                case "forager":
                    // Disabled
                    if (config.forager.maxlvl == 0)
                    {
                        StatsAndSkills.Add(XPUILabel($"{XPLang("disabledbyadmin", player.UserIDString, data)}", row, height, TextAnchor.LowerCenter, 12, ".01", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                    // Enabled / Permissions
                    else if ((config.defaultOptions.userpermissions && permission.UserHasPermission(player.UserIDString, PermForager)) || !config.defaultOptions.userpermissions)
                    {
                        // Statistics
                        #region Statistics
                        skill = xprecord.WoodCutter;
                        int ForagerCost = (xprecord.Forager + 1) * config.forager.costmultiplier;
                        if (xprecord.Forager < 1)
                        {
                            ForagerCost = config.forager.pointcoststart;
                        }
                        if (xprecord.Forager < config.forager.maxlvl)
                        {
                            level = $"{xprecord.Forager}";
                            cost = $"{ForagerCost}";
                            levelcolor = xprecord.Forager;
                        }
                        for (int i = 1; i <= config.forager.maxlvl; i++)
                        {
                            int costmultiplier = config.forager.costmultiplier * i;
                            totalpoints += costmultiplier;
                        }
                        totalpoints += config.forager.pointcoststart - config.forager.costmultiplier;
                        pointsleft = totalpoints - xprecord.ForagerP;
                        pointsspent = xprecord.ForagerP;
                        maxlevel = config.forager.maxlvl;
                        showdata = true;
                        #endregion
                        // Options
                        #region Options
                        // Level Up
                        if (xprecord.Forager < config.forager.maxlvl && (ForagerCost <= xprecord.skillpoint))
                        {
                            levelup = true;
                        }
                        // Reset
                        if (xprecord.Forager > 0 && !config.defaultOptions.hardcorenoreset)
                        {
                            reset = true;
                        }
                        #endregion
                        // Abilities
                        #region Abilities
                        StatsAndSkills.Add(XPUILabel($"◂════ ⋆ {XPLang("abilities", player.UserIDString)} ⋆ ════▸", rowtwo, height, TextAnchor.MiddleCenter, 10, "0.50", "0.99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                        rowtwo++;
                        if ((xprecord.Forager > 0 || config.playerprofilesettings.showunusedeffects) && config.forager.maxlvl != 0)
                        {
                            if (config.forager.gatherrate != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.forager}>Ground {XPLang("gather", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", xprecord.Forager, config.Rankboostssettings.foragergr)}>{ValueSymbol("perk", config.forager.gatherrate, "pos")}{RankBoosts(player, "skill", (xprecord.Forager * config.forager.gatherrate), config.Rankboostssettings.foragergr)}x</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.forager.chanceincrease != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.forager}>{XPLang("seedbonus", player.UserIDString)}</color>: (<color=yellow>Amount</color>)", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", xprecord.Forager)}>{ValueSymbol("perk", config.forager.chanceincrease, "pos")}{(config.forager.chanceincrease * xprecord.Forager) * 100}%</color> (<color=yellow>{(config.forager.chanceincrease * xprecord.Forager) * 10}</color>)", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.forager.randomchance != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.forager}>{XPLang("randomitem", player.UserIDString)} Chance</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", xprecord.Forager, config.Rankboostssettings.foragerric)}>{ValueSymbol("perk", config.forager.randomchance, "pos")}{RankBoosts(player, "skill", (xprecord.Forager * config.forager.randomchance), config.Rankboostssettings.foragerric) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.forager.grubwormincrease != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.forager}>{XPLang("grubworm", player.UserIDString)} Chance</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", xprecord.Forager)}>{ValueSymbol("perk", config.forager.grubwormincrease, "pos")}{(xprecord.Forager * config.forager.grubwormincrease) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (XPerienceAddon != null)
                            {
                                double recyclerchance = Convert.ToDouble(XPerienceAddon.Call("GetExtraFeatures", player, "forager", "foragerrecyclerchance"));
                                if (recyclerchance != 0)
                                {
                                    StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.forager}>{XPLang("addonrecyclerchance", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                    StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", xprecord.Forager)}>{ValueSymbol("perk", recyclerchance, "pos")}{(recyclerchance * xprecord.Forager) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                    rowtwo++;
                                }
                                double recyclerspeed = Convert.ToDouble(XPerienceAddon.Call("GetExtraFeatures", player, "forager", "foragerrecyclerspeed"));
                                if (recyclerspeed != 0)
                                {
                                    StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.forager}>{XPLang("addonrecyclerspeed", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                    StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", xprecord.Forager)}>{ValueSymbol("perk", recyclerspeed, "pos")}{(recyclerspeed * xprecord.Forager) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                }
                            }
                            if (Backpacks != null && config.backpacksmod.enablebackpacks && config.backpacksmod.statorskill == data)
                            {
                                var sizes = config.backpacksmod.BackPackSlots;
                                int sizeearned = 0;
                                int maxsize = 0;
                                foreach (var size in sizes)
                                {
                                    if (size.Value.level == skill)
                                    {
                                        sizeearned = size.Value.slots;
                                    }
                                    if (size.Value.level == maxlevel)
                                    {
                                        maxsize = size.Value.slots;
                                    }
                                }
                                rowtwo++;
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.might}>Backpack Size</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", skill)}> {sizeearned} / {maxsize} </color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                        }
                        #endregion
                    }
                    // Enabled / No Permission
                    else
                    {
                        StatsAndSkills.Add(XPUILabel($"{XPLang("donothavepermission", player.UserIDString, data)}", row, height, TextAnchor.MiddleCenter, 10, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                    break;
                case "hunter":
                    // Disabled
                    if (config.hunter.maxlvl == 0)
                    {
                        StatsAndSkills.Add(XPUILabel($"{XPLang("disabledbyadmin", player.UserIDString, data)}", row, height, TextAnchor.LowerCenter, 12, ".01", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                    // Enabled / Permissions
                    else if ((config.defaultOptions.userpermissions && permission.UserHasPermission(player.UserIDString, PermHunter)) || !config.defaultOptions.userpermissions)
                    {
                        // Statistics
                        #region Statistics
                        skill = xprecord.Hunter;
                        int HunterCost = (xprecord.Hunter + 1) * config.hunter.costmultiplier;
                        if (xprecord.Hunter < 1)
                        {
                            HunterCost = config.hunter.pointcoststart;
                        }
                        if (xprecord.Hunter < config.hunter.maxlvl)
                        {
                            level = $"{xprecord.Hunter}";
                            cost = $"{HunterCost}";
                            levelcolor = xprecord.Hunter;
                        }
                        totalpoints = 0;
                        for (int i = 1; i <= config.hunter.maxlvl; i++)
                        {
                            int costmultiplier = config.hunter.costmultiplier * i;
                            totalpoints += costmultiplier;
                        }
                        totalpoints += config.hunter.pointcoststart - config.hunter.costmultiplier;
                        pointsleft = totalpoints - xprecord.HunterP;
                        pointsspent = xprecord.HunterP;
                        maxlevel = config.hunter.maxlvl;
                        showdata = true;
                        #endregion
                        // Options
                        #region Options
                        // Level Up
                        if (xprecord.Hunter < config.hunter.maxlvl && (HunterCost <= xprecord.skillpoint))
                        {
                            levelup = true;
                        }
                        // Reset
                        if (xprecord.Hunter > 0 && !config.defaultOptions.hardcorenoreset)
                        {
                            reset = true;
                        }
                        #endregion
                        // Abilities
                        #region Abilities
                        StatsAndSkills.Add(XPUILabel($"◂════ ⋆ {XPLang("abilities", player.UserIDString)} ⋆ ════▸", rowtwo, height, TextAnchor.MiddleCenter, 10, "0.50", "0.99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                        rowtwo++;
                        if ((xprecord.Hunter > 0 || config.playerprofilesettings.showunusedeffects) && config.hunter.maxlvl != 0)
                        {
                            if (config.hunter.gatherrate != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.hunter}>{XPLang("foodgather", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", xprecord.Hunter, config.Rankboostssettings.huntergr)}>{ValueSymbol("perk", config.hunter.gatherrate, "pos")}{RankBoosts(player, "skill", (xprecord.Hunter * config.hunter.gatherrate), config.Rankboostssettings.huntergr)}x</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.hunter.bonusincrease != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.hunter}>Food Bonus</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", xprecord.Hunter, config.Rankboostssettings.hunterbonus)}>{ValueSymbol("perk", config.hunter.bonusincrease, "pos")}{RankBoosts(player, "skill", (xprecord.Hunter * config.hunter.bonusincrease), config.Rankboostssettings.hunterbonus)}x</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.hunter.damageincrease != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.hunter}>{XPLang("damagewildlife", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", xprecord.Hunter, config.Rankboostssettings.hunterdmg)}>{ValueSymbol("perk", config.hunter.damageincrease, "pos")}{RankBoosts(player, "skill", (xprecord.Hunter * config.hunter.damageincrease), config.Rankboostssettings.hunterdmg) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.hunter.nightdmgincrease != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.hunter}>{XPLang("nightdamage", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", xprecord.Hunter, config.Rankboostssettings.hunterndmg)}>{ValueSymbol("perk", config.hunter.nightdmgincrease, "pos")}{RankBoosts(player, "skill", (xprecord.Hunter * config.hunter.nightdmgincrease), config.Rankboostssettings.hunterndmg) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.hunter.bowdmgincrease != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.hunter}>{XPLang("bowdamage", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", xprecord.Hunter)}>{ValueSymbol("perk", config.hunter.bowdmgincrease, "pos")}{(xprecord.Hunter * config.hunter.bowdmgincrease) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                            }
                            if (Backpacks != null && config.backpacksmod.enablebackpacks && config.backpacksmod.statorskill == data)
                            {
                                var sizes = config.backpacksmod.BackPackSlots;
                                int sizeearned = 0;
                                int maxsize = 0;
                                foreach (var size in sizes)
                                {
                                    if (size.Value.level == skill)
                                    {
                                        sizeearned = size.Value.slots;
                                    }
                                    if (size.Value.level == maxlevel)
                                    {
                                        maxsize = size.Value.slots;
                                    }
                                }
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.might}>Backpack Size</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", skill)}> {sizeearned} / {maxsize} </color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                        }
                        #endregion
                    }
                    // Enabled / No Permission
                    else
                    {
                        StatsAndSkills.Add(XPUILabel($"{XPLang("donothavepermission", player.UserIDString, data)}", row, height, TextAnchor.MiddleCenter, 10, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                    break;
                case "crafter":
                    // Disabled
                    if (config.crafter.maxlvl == 0)
                    {
                        StatsAndSkills.Add(XPUILabel($"{XPLang("disabledbyadmin", player.UserIDString, data)}", row, height, TextAnchor.LowerCenter, 12, ".01", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                    // Enabled / Permissions
                    else if ((config.defaultOptions.userpermissions && permission.UserHasPermission(player.UserIDString, PermCrafter)) || !config.defaultOptions.userpermissions)
                    {
                        // Statistics
                        #region Statistics
                        skill = xprecord.Crafter;
                        int CrafterCost = (xprecord.Crafter + 1) * config.crafter.costmultiplier;
                        if (xprecord.Crafter < 1)
                        {
                            CrafterCost = config.crafter.pointcoststart;
                        }
                        if (xprecord.Crafter < config.crafter.maxlvl)
                        {
                            level = $"{xprecord.Crafter}";
                            cost = $"{CrafterCost}";
                            levelcolor = xprecord.Crafter;
                        }
                        for (int i = 1; i <= config.crafter.maxlvl; i++)
                        {
                            int costmultiplier = config.crafter.costmultiplier * i;
                            totalpoints += costmultiplier;
                        }
                        totalpoints += config.crafter.pointcoststart - config.crafter.costmultiplier;
                        pointsleft = totalpoints - xprecord.CrafterP;
                        pointsspent = xprecord.CrafterP;
                        maxlevel = config.crafter.maxlvl;
                        showdata = true;
                        #endregion
                        // Options
                        #region Options
                        // Level Up
                        if (xprecord.Crafter < config.crafter.maxlvl && (CrafterCost <= xprecord.skillpoint))
                        {
                            levelup = true;
                        }
                        // Reset
                        if (xprecord.Crafter > 0 && !config.defaultOptions.hardcorenoreset)
                        {
                            reset = true;
                        }
                        #endregion
                        // Abilities
                        #region Abilities
                        StatsAndSkills.Add(XPUILabel($"◂════ ⋆ {XPLang("abilities", player.UserIDString)} ⋆ ════▸", rowtwo, height, TextAnchor.MiddleCenter, 10, "0.50", "0.99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                        rowtwo++;
                        if ((xprecord.Crafter > 0 || config.playerprofilesettings.showunusedeffects) && config.crafter.maxlvl != 0)
                        {
                            if (config.crafter.craftspeed != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.crafter}>{XPLang("craftspeed", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", config.crafter.craftspeed, config.Rankboostssettings.crafterspeed)}>{ValueSymbol("perk", config.crafter.craftspeed, "neg")}{RankBoosts(player, "skill", (config.crafter.craftspeed * xprecord.Crafter), config.Rankboostssettings.crafterspeed) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.crafter.craftcost != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.crafter}>{XPLang("costreduction", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", config.crafter.craftcost, config.Rankboostssettings.craftercost)}>{ValueSymbol("perk", config.crafter.craftcost, "neg")}{RankBoosts(player, "skill", (xprecord.Crafter * config.crafter.craftcost), config.Rankboostssettings.craftercost) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.crafter.repairincrease != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.crafter}>{XPLang("fullrepair", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", config.crafter.repairincrease, config.Rankboostssettings.crafterri)}>{RankBoosts(player, "skill", (xprecord.Crafter * config.crafter.repairincrease), config.Rankboostssettings.crafterri) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.crafter.repaircost != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.crafter}>{XPLang("repaircost", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", config.crafter.repaircost, config.Rankboostssettings.crafterrc)}>{ValueSymbol("perk", config.crafter.repaircost, "neg")}{RankBoosts(player, "skill", (xprecord.Crafter * config.crafter.repaircost), config.Rankboostssettings.crafterrc) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.crafter.conditionchance != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.crafter}>{XPLang("highcond", player.UserIDString)}</color>: (<color=yellow>Amount</color>)", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", config.crafter.conditionchance, config.Rankboostssettings.craftercc)}>{ValueSymbol("perk", config.crafter.conditionchance, "pos")}{RankBoosts(player, "skill", (config.crafter.conditionchance * xprecord.Crafter), config.Rankboostssettings.craftercc) * 100}%</color> (<color=yellow>+{config.crafter.conditionamount * 100}%</color>)", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (Backpacks != null && config.backpacksmod.enablebackpacks && config.backpacksmod.statorskill == data)
                            {
                                var sizes = config.backpacksmod.BackPackSlots;
                                int sizeearned = 0;
                                int maxsize = 0;
                                foreach (var size in sizes)
                                {
                                    if (size.Value.level == skill)
                                    {
                                        sizeearned = size.Value.slots;
                                    }
                                    if (size.Value.level == maxlevel)
                                    {
                                        maxsize = size.Value.slots;
                                    }
                                }
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.might}>Backpack Size</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", skill)}> {sizeearned} / {maxsize} </color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                        }
                        #endregion
                    }
                    // Enabled / No Permission
                    else
                    {
                        StatsAndSkills.Add(XPUILabel($"{XPLang("donothavepermission", player.UserIDString, data)}", row, height, TextAnchor.MiddleCenter, 10, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                    break;
                case "framer":
                    // Disabled
                    if (config.framer.maxlvl == 0)
                    {
                        StatsAndSkills.Add(XPUILabel($"{XPLang("disabledbyadmin", player.UserIDString, data)}", row, height, TextAnchor.LowerCenter, 12, ".01", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                    // Enabled / Permissions
                    else if ((config.defaultOptions.userpermissions && permission.UserHasPermission(player.UserIDString, PermFramer)) || !config.defaultOptions.userpermissions)
                    {
                        // Statistics
                        #region Statistics
                        skill = xprecord.Framer;
                        int FramerCost = (xprecord.Framer + 1) * config.framer.costmultiplier;
                        if (xprecord.Framer < 1)
                        {
                            FramerCost = config.framer.pointcoststart;
                        }
                        if (xprecord.Framer < config.framer.maxlvl)
                        {
                            level = $"{xprecord.Framer}";
                            cost = $"{FramerCost}";
                            levelcolor = xprecord.Framer;
                        }
                        for (int i = 1; i <= config.framer.maxlvl; i++)
                        {
                            int costmultiplier = config.framer.costmultiplier * i;
                            totalpoints += costmultiplier;
                        }
                        totalpoints += config.framer.pointcoststart - config.framer.costmultiplier;
                        pointsleft = totalpoints - xprecord.FramerP;
                        pointsspent = xprecord.FramerP;
                        maxlevel = config.framer.maxlvl;
                        showdata = true;
                        #endregion
                        // Options
                        #region Options
                        // Level Up
                        if (xprecord.Framer < config.framer.maxlvl && (FramerCost <= xprecord.skillpoint))
                        {
                            levelup = true;
                        }
                        // Reset
                        if (xprecord.Framer > 0 && !config.defaultOptions.hardcorenoreset)
                        {
                            reset = true;
                        }
                        #endregion
                        // Abilities
                        #region Abilities
                        StatsAndSkills.Add(XPUILabel($"◂════ ⋆ {XPLang("abilities", player.UserIDString)} ⋆ ════▸", rowtwo, height, TextAnchor.MiddleCenter, 10, "0.50", "0.99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                        rowtwo++;
                        if ((xprecord.Framer > 0 || config.playerprofilesettings.showunusedeffects) && config.framer.maxlvl != 0)
                        {
                            if (config.framer.upgradecost != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.framer}>Building {XPLang("upgradecost", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", config.framer.upgradecost, config.Rankboostssettings.framerucost)}>{ValueSymbol("perk", config.framer.upgradecost, "neg")}{RankBoosts(player, "skill", (config.framer.upgradecost * xprecord.Framer), config.Rankboostssettings.framerucost) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.framer.repairtime != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.framer}>Building {XPLang("repairtime", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.framer.repairtime)}>{ValueSymbol("perk", config.framer.repairtime, "neg")}{(xprecord.Framer * config.framer.repairtime) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.framer.repaircost != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.framer}>Building {XPLang("repaircost", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", config.framer.repaircost, config.Rankboostssettings.framerrcost)}>{ValueSymbol("perk", config.framer.repaircost, "neg")}{RankBoosts(player, "skill", (xprecord.Framer * config.framer.repaircost), config.Rankboostssettings.framerrcost) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (Backpacks != null && config.backpacksmod.enablebackpacks && config.backpacksmod.statorskill == data)
                            {
                                var sizes = config.backpacksmod.BackPackSlots;
                                int sizeearned = 0;
                                int maxsize = 0;
                                foreach (var size in sizes)
                                {
                                    if (size.Value.level == skill)
                                    {
                                        sizeearned = size.Value.slots;
                                    }
                                    if (size.Value.level == maxlevel)
                                    {
                                        maxsize = size.Value.slots;
                                    }
                                }
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.might}>Backpack Size</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", skill)}> {sizeearned} / {maxsize} </color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                        }
                        #endregion
                    }
                    // Enabled / No Permission
                    else
                    {
                        StatsAndSkills.Add(XPUILabel($"{XPLang("donothavepermission", player.UserIDString, data)}", row, height, TextAnchor.MiddleCenter, 10, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                    break;
                case "fisher":
                    // Disabled
                    if (config.fisher.maxlvl == 0)
                    {
                        StatsAndSkills.Add(XPUILabel($"{XPLang("disabledbyadmin", player.UserIDString, data)}", row, height, TextAnchor.LowerCenter, 12, ".01", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                    // Enabled / Permissions
                    else if ((config.defaultOptions.userpermissions && permission.UserHasPermission(player.UserIDString, PermFisher)) || !config.defaultOptions.userpermissions)
                    {
                        // Statistics
                        #region Statistics
                        skill = xprecord.Fisher;
                        int FisherCost = (xprecord.Fisher + 1) * config.fisher.costmultiplier;
                        if (xprecord.Fisher < 1)
                        {
                            FisherCost = config.fisher.pointcoststart;
                        }
                        if (xprecord.Fisher < config.fisher.maxlvl)
                        {
                            level = $"{xprecord.Fisher}";
                            cost = $"{FisherCost}";
                            levelcolor = xprecord.Fisher;
                        }
                        for (int i = 1; i <= config.fisher.maxlvl; i++)
                        {
                            int costmultiplier = config.fisher.costmultiplier * i;
                            totalpoints += costmultiplier;
                        }
                        totalpoints += config.fisher.pointcoststart - config.fisher.costmultiplier;
                        pointsleft = totalpoints - xprecord.FisherP;
                        pointsspent = xprecord.FisherP;
                        maxlevel = config.fisher.maxlvl;
                        showdata = true;
                        #endregion
                        // Options
                        #region Options
                        // Level Up
                        if (xprecord.Fisher < config.fisher.maxlvl && (FisherCost <= xprecord.skillpoint))
                        {
                            levelup = true;
                        }
                        // Reset
                        if (xprecord.Fisher > 0 && !config.defaultOptions.hardcorenoreset)
                        {
                            reset = true;
                        }
                        #endregion
                        // Abilities
                        #region Abilities
                        StatsAndSkills.Add(XPUILabel($"◂════ ⋆ {XPLang("abilities", player.UserIDString)} ⋆ ════▸", rowtwo, height, TextAnchor.MiddleCenter, 10, "0.50", "0.99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                        rowtwo++;
                        if ((xprecord.Fisher > 0 || config.playerprofilesettings.showunusedeffects) && config.fisher.maxlvl != 0)
                        {
                            if (config.fisher.fishamountincrease != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.fisher}>{XPLang("fishamount", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", config.fisher.fishamountincrease, config.Rankboostssettings.fisherfa)}>{ValueSymbol("perk", config.fisher.fishamountincrease, "pos")}{Math.Round(RankBoosts(player, "skill", xprecord.Fisher * config.fisher.fishamountincrease, config.Rankboostssettings.fisherfa))}</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.fisher.itemamountincrease != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.fisher}>{XPLang("fishitems", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", config.fisher.itemamountincrease, config.Rankboostssettings.fisheria)}>{ValueSymbol("perk", config.fisher.itemamountincrease, "pos")}{Math.Round(RankBoosts(player, "skill", xprecord.Fisher * config.fisher.itemamountincrease, config.Rankboostssettings.fisheria))}</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.fisher.oxygenreduction != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.fisher}>{XPLang("fishoxygen", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.fisher.oxygenreduction)}>{ValueSymbol("perk", config.fisher.oxygenreduction, "neg")}{Math.Round((xprecord.Fisher * config.fisher.oxygenreduction) * 100)}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.fisher.oxygentankreduction != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.fisher}>{XPLang("fishoxygentank", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", config.fisher.oxygentankreduction, config.Rankboostssettings.fisherotr)}>{ValueSymbol("perk", config.fisher.oxygentankreduction, "neg")}{Math.Round(RankBoosts(player, "skill", (xprecord.Fisher * config.fisher.oxygentankreduction), config.Rankboostssettings.fisherotr) * 100)}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (Backpacks != null && config.backpacksmod.enablebackpacks && config.backpacksmod.statorskill == data)
                            {
                                var sizes = config.backpacksmod.BackPackSlots;
                                int sizeearned = 0;
                                int maxsize = 0;
                                foreach (var size in sizes)
                                {
                                    if (size.Value.level == skill)
                                    {
                                        sizeearned = size.Value.slots;
                                    }
                                    if (size.Value.level == maxlevel)
                                    {
                                        maxsize = size.Value.slots;
                                    }
                                }
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.might}>Backpack Size</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", skill)}> {sizeearned} / {maxsize} </color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                        }
                        #endregion
                    }
                    // Enabled / No Permission
                    else
                    {
                        StatsAndSkills.Add(XPUILabel($"{XPLang("donothavepermission", player.UserIDString, data)}", row, height, TextAnchor.MiddleCenter, 10, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                    break;
                case "medic":
                    // Disabled
                    if (config.medic.maxlvl == 0)
                    {
                        StatsAndSkills.Add(XPUILabel($"{XPLang("disabledbyadmin", player.UserIDString, data)}", row, height, TextAnchor.LowerCenter, 12, ".01", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                    // Enabled / Permissions
                    else if ((config.defaultOptions.userpermissions && permission.UserHasPermission(player.UserIDString, PermMedic)) || !config.defaultOptions.userpermissions)
                    {
                        // Statistics
                        #region Statistics
                        skill = xprecord.Medic;
                        int MedicCost = (xprecord.Medic + 1) * config.medic.costmultiplier;
                        if (xprecord.Medic < 1)
                        {
                            MedicCost = config.medic.pointcoststart;
                        }
                        if (xprecord.Medic < config.medic.maxlvl)
                        {
                            level = $"{xprecord.Medic}";
                            cost = $"{MedicCost}";
                            levelcolor = xprecord.Medic;
                        }
                        for (int i = 1; i <= config.medic.maxlvl; i++)
                        {
                            int costmultiplier = config.medic.costmultiplier * i;
                            totalpoints += costmultiplier;
                        }
                        totalpoints += config.medic.pointcoststart - config.medic.costmultiplier;
                        pointsleft = totalpoints - xprecord.MedicP;
                        pointsspent = xprecord.MedicP;
                        maxlevel = config.medic.maxlvl;
                        showdata = true;
                        #endregion
                        // Options
                        #region Options
                        // Level Up
                        if (xprecord.Medic < config.medic.maxlvl && (MedicCost <= xprecord.skillpoint))
                        {
                            levelup = true;
                        }
                        // Reset
                        if (xprecord.Medic > 0 && !config.defaultOptions.hardcorenoreset)
                        {
                            reset = true;
                        }
                        #endregion
                        // Abilities
                        #region Abilities
                        StatsAndSkills.Add(XPUILabel($"◂════ ⋆ {XPLang("abilities", player.UserIDString)} ⋆ ════▸", rowtwo, height, TextAnchor.MiddleCenter, 10, ".50", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                        rowtwo++;
                        if ((xprecord.Medic > 0 || config.playerprofilesettings.showunusedeffects) && config.medic.maxlvl != 0)
                        {
                            if (config.medic.recoverhp != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.medic}>{XPLang("medicrecover", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", config.medic.recoverhp, config.Rankboostssettings.medicrecovera)}>{ValueSymbol("perk", config.medic.recoverhp, "pos")}{Math.Round(RankBoosts(player, "skill", xprecord.Medic * config.medic.recoverhp, config.Rankboostssettings.medicrecovera))}</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.medic.revivehp != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.medic}>{XPLang("medicrevive", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", config.medic.revivehp, config.Rankboostssettings.medicrevivala)}>{ValueSymbol("perk", config.medic.revivehp, "pos")}{Math.Round(RankBoosts(player, "skill", xprecord.Medic * config.medic.revivehp, config.Rankboostssettings.medicrevivala))}</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.medic.tools != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.medic}>{XPLang("medictools", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", config.medic.tools, config.Rankboostssettings.medictools)}>{ValueSymbol("perk", config.medic.tools, "pos")}{Math.Round(RankBoosts(player, "skill", xprecord.Medic * config.medic.tools, config.Rankboostssettings.medictools))}</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.medic.crafttime != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.medic}>{XPLang("mediccrafting", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.medic.crafttime)}>{ValueSymbol("perk", config.medic.crafttime, "pos")}{Math.Round((xprecord.Medic * config.medic.crafttime) * 100)}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.medic.teas != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.medic}>{XPLang("medicteas", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.medic.teas)}>{ValueSymbol("perk", config.medic.teas, "pos")}{Math.Round((xprecord.Medic * config.medic.teas) * 100)}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (XPerienceAddon != null)
                            {
                                if (XPerienceAddon.Call<bool>("PassiveHealing", player))
                                {
                                    double healingtimer = Convert.ToDouble(XPerienceAddon.Call("GetExtraFeatures", player, "medic", "medicpassivehealingtimer"));
                                    double healingamount = Convert.ToDouble(XPerienceAddon.Call("GetExtraFeatures", player, "medic", "medicpassivehealingamount"));
                                    StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.medic}>{XPLang("medichealingtimer", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                    StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.medic.maxlvl)}>{healingtimer - (xprecord.Medic / 2)} s</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                    rowtwo++;
                                    StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.medic}>{XPLang("medichealingamount", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                    StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.medic.maxlvl)}>{ValueSymbol("perk", config.medic.maxlvl, "pos")}{(xprecord.Medic * healingamount) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                    rowtwo++;
                                }
                            }
                            if (Backpacks != null && config.backpacksmod.enablebackpacks && config.backpacksmod.statorskill == data)
                            {
                                var sizes = config.backpacksmod.BackPackSlots;
                                int sizeearned = 0;
                                int maxsize = 0;
                                foreach (var size in sizes)
                                {
                                    if (size.Value.level == skill)
                                    {
                                        sizeearned = size.Value.slots;
                                    }
                                    if (size.Value.level == maxlevel)
                                    {
                                        maxsize = size.Value.slots;
                                    }
                                }
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.might}>Backpack Size</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", skill)}> {sizeearned} / {maxsize} </color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                        }
                        #endregion
                    }
                    // Enabled / No Permission
                    else
                    {
                        StatsAndSkills.Add(XPUILabel($"{XPLang("donothavepermission", player.UserIDString, data)}", row, height, TextAnchor.MiddleCenter, 10, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                    break;
                case "scavenger":
                    // Disabled
                    if (config.scavenger.maxlvl == 0)
                    {
                        StatsAndSkills.Add(XPUILabel($"{XPLang("disabledbyadmin", player.UserIDString, data)}", row, height, TextAnchor.LowerCenter, 12, ".01", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                    // Enabled / Permissions
                    else if ((config.defaultOptions.userpermissions && permission.UserHasPermission(player.UserIDString, PermScavenger)) || !config.defaultOptions.userpermissions)
                    {
                        // Statistics
                        #region Statistics
                        skill = xprecord.Scavenger;
                        int ScavengerCost = (xprecord.Scavenger + 1) * config.scavenger.costmultiplier;
                        if (xprecord.Scavenger < 1)
                        {
                            ScavengerCost = config.scavenger.pointcoststart;
                        }
                        if (xprecord.Scavenger < config.scavenger.maxlvl)
                        {
                            level = $"{xprecord.Scavenger}";
                            cost = $"{ScavengerCost}";
                            levelcolor = xprecord.Scavenger;
                        }
                        for (int i = 1; i <= config.scavenger.maxlvl; i++)
                        {
                            int costmultiplier = config.scavenger.costmultiplier * i;
                            totalpoints += costmultiplier;
                        }
                        totalpoints += config.scavenger.pointcoststart - config.scavenger.costmultiplier;
                        pointsleft = totalpoints - xprecord.ScavengerP;
                        pointsspent = xprecord.ScavengerP;
                        maxlevel = config.scavenger.maxlvl;
                        showdata = true;
                        #endregion
                        // Options
                        #region Options
                        // Level Up
                        if (xprecord.Scavenger < config.scavenger.maxlvl && (ScavengerCost <= xprecord.skillpoint))
                        {
                            levelup = true;
                        }
                        // Reset
                        if (xprecord.Scavenger > 0 && !config.defaultOptions.hardcorenoreset)
                        {
                            reset = true;
                        }
                        #endregion
                        // Abilities
                        #region Abilities
                        StatsAndSkills.Add(XPUILabel($"◂════ ⋆ {XPLang("abilities", player.UserIDString)} ⋆ ════▸", rowtwo, height, TextAnchor.MiddleCenter, 10, "0.50", "0.99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                        rowtwo++;
                        if ((xprecord.Scavenger > 0 || config.playerprofilesettings.showunusedeffects) && config.scavenger.maxlvl != 0)
                        {
                            if (config.scavenger.scavlootchance != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.scavenger}>{XPLang("scavchance", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", config.scavenger.scavlootchance, config.Rankboostssettings.scavelc)}>{ValueSymbol("perk", config.scavenger.scavlootchance, "pos")}{Math.Round(RankBoosts(player, "skill", (xprecord.Scavenger * config.scavenger.scavlootchance), config.Rankboostssettings.scavelc) * 100)}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.scavenger.scavmultiplier != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.scavenger}>{XPLang("scavmultiplier", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", config.scavenger.scavmultiplier, config.Rankboostssettings.scavelm)}>x{Math.Ceiling(RankBoosts(player, "skill", xprecord.Scavenger * config.scavenger.scavmultiplier, config.Rankboostssettings.scavelm))}</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.scavenger.scavchance != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.scavenger}>{XPLang("customscavchance", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", config.scavenger.scavchance, config.Rankboostssettings.scavcic)}>{ValueSymbol("perk", config.scavenger.scavchance, "pos")}{Math.Round(RankBoosts(player, "skill", (xprecord.Scavenger * config.scavenger.scavchance), config.Rankboostssettings.scavcic) * 100)}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.scavenger.customscavmultiplier != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.scavenger}>{XPLang("customscavmultiplier", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, $"{textcolor}", config.scavenger.customscavmultiplier, config.Rankboostssettings.scavcim)}>x{Math.Ceiling(RankBoosts(player, "skill", xprecord.Scavenger * config.scavenger.customscavmultiplier, config.Rankboostssettings.scavelm))}</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (XPerienceAddon != null)
                            {
                                double getaddonscavengerchance = Convert.ToDouble(XPerienceAddon.Call("GetExtraFeatures", player, "scavenger", "scavengervendingchance"));
                                if (getaddonscavengerchance != 0)
                                {
                                    StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.scavenger}>{XPLang("addonscavengervendorchance", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                    StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", getaddonscavengerchance)}>{(getaddonscavengerchance * xprecord.Scavenger) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                    rowtwo++;
                                    double getaddonscavengeramount = Convert.ToDouble(XPerienceAddon.Call("GetExtraFeatures", player, "scavenger", "scavengervendingamount"));
                                    StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.scavenger}>{XPLang("addonscavengervendoramount", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                    StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", getaddonscavengeramount)}>{(getaddonscavengeramount * xprecord.Scavenger) * 100}%</color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                    rowtwo++;
                                }
                            }
                            if (Backpacks != null && config.backpacksmod.enablebackpacks && config.backpacksmod.statorskill == data)
                            {
                                var sizes = config.backpacksmod.BackPackSlots;
                                int sizeearned = 0;
                                int maxsize = 0;
                                foreach (var size in sizes)
                                {
                                    if (size.Value.level == skill)
                                    {
                                        sizeearned = size.Value.slots;
                                    }
                                    if (size.Value.level == maxlevel)
                                    {
                                        maxsize = size.Value.slots;
                                    }
                                }
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.might}>Backpack Size</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", skill)}> {sizeearned} / {maxsize} </color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                        }
                        #endregion
                    }
                    // Enabled / No Permission
                    else
                    {
                        StatsAndSkills.Add(XPUILabel($"{XPLang("donothavepermission", player.UserIDString, data)}", row, height, TextAnchor.MiddleCenter, 10, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                    break;
                case "electrician":
                    // Disabled
                    if (config.electrician.maxlvl == 0)
                    {
                        StatsAndSkills.Add(XPUILabel($"{XPLang("disabledbyadmin", player.UserIDString, data)}", row, height, TextAnchor.LowerCenter, 12, ".01", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                    // Enabled / Permissions
                    else if ((config.defaultOptions.userpermissions && permission.UserHasPermission(player.UserIDString, PermElectrician)) || !config.defaultOptions.userpermissions)
                    {
                        // Statistics
                        #region Statistics
                        skill = xprecord.Electrician;
                        int ElectricianCost = (xprecord.Electrician + 1) * config.electrician.costmultiplier;
                        if (xprecord.Electrician < 1)
                        {
                            ElectricianCost = config.electrician.pointcoststart;
                        }
                        if (xprecord.Electrician < config.electrician.maxlvl)
                        {
                            level = $"{xprecord.Electrician}";
                            cost = $"{ElectricianCost}";
                            levelcolor = xprecord.Electrician;
                        }
                        for (int i = 1; i <= config.electrician.maxlvl; i++)
                        {
                            int costmultiplier = config.electrician.costmultiplier * i;
                            totalpoints += costmultiplier;
                        }
                        totalpoints += config.electrician.pointcoststart - config.electrician.costmultiplier;
                        pointsleft = totalpoints - xprecord.ElectricianP;
                        pointsspent = xprecord.ElectricianP;
                        maxlevel = config.electrician.maxlvl;
                        showdata = true;
                        #endregion
                        // Options
                        #region Options
                        // Level Up
                        if (xprecord.Electrician < config.electrician.maxlvl && (ElectricianCost <= xprecord.skillpoint))
                        {
                            levelup = true;
                        }
                        // Reset
                        if (xprecord.Electrician > 0 && !config.defaultOptions.hardcorenoreset)
                        {
                            reset = true;
                        }
                        #endregion
                        // Abilities
                        #region Abilities
                        StatsAndSkills.Add(XPUILabel($"◂════ ⋆ {XPLang("abilities", player.UserIDString)} ⋆ ════▸", rowtwo, height, TextAnchor.MiddleCenter, 10, "0.50", "0.99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                        rowtwo++;
                        if ((xprecord.Electrician > 0 || config.playerprofilesettings.showunusedeffects) && config.electrician.maxlvl != 0)
                        {
                            if (config.electrician.minsolarinput != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.electrician}>{XPLang("minsolarpanelinput", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.electrician.minsolarinput)}>{xprecord.Electrician * config.electrician.minsolarinput}</color>", rowtwo, height, TextAnchor.MiddleLeft, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.electrician.solarpanelinputincrease != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.electrician}>{XPLang("solarpanelinput", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.electrician.solarpanelinputincrease)}>{ValueSymbol("perk", config.electrician.solarpanelinputincrease, "pos")}{(xprecord.Electrician * config.electrician.solarpanelinputincrease) * 100}%</color>", rowtwo, height, TextAnchor.MiddleLeft, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.electrician.solarpanelmaxincrease != 0)
                            {
                                int solarpanel = (int)((xprecord.Electrician * config.electrician.solarpanelinputincrease) * config.electrician.solarpaneldefault) + config.electrician.solarpaneldefault;
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.electrician}>{XPLang("solarpaneloutput", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.electrician.solarpanelmaxincrease)}>{ValueSymbol("perk", config.electrician.solarpanelmaxincrease, "pos")}{(xprecord.Electrician * config.electrician.solarpanelmaxincrease) * 100}%</color> (<color=yellow>{solarpanel}</color>)", rowtwo, height, TextAnchor.MiddleLeft, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.electrician.smallbatterymaxincrease != 0)
                            {
                                int smallbattery = (int)((xprecord.Electrician * config.electrician.smallbatterymaxincrease) * config.electrician.smallbatterydefault) + config.electrician.smallbatterydefault;
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.electrician}>{XPLang("smallbatteryoutput", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.electrician.smallbatterymaxincrease)}>{ValueSymbol("perk", config.electrician.smallbatterymaxincrease, "pos")}{(xprecord.Electrician * config.electrician.smallbatterymaxincrease) * 100}%</color> (<color=yellow>{smallbattery}</color>)", rowtwo, height, TextAnchor.MiddleLeft, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.electrician.mediumbatterymaxincrease != 0)
                            {
                                int mediumbattery = (int)((xprecord.Electrician * config.electrician.mediumbatterymaxincrease) * config.electrician.mediumbatterydefault) + config.electrician.mediumbatterydefault;
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.electrician}>{XPLang("mediumbatteryoutput", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.electrician.smallbatterymaxincrease)}>{ValueSymbol("perk", config.electrician.mediumbatterymaxincrease, "pos")}{(xprecord.Electrician * config.electrician.mediumbatterymaxincrease) * 100}%</color> (<color=yellow>{mediumbattery}</color>)", rowtwo, height, TextAnchor.MiddleLeft, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.electrician.largebatterymaxincrease != 0)
                            {
                                int largebattery = (int)((xprecord.Electrician * config.electrician.largebatterymaxincrease) * config.electrician.largebatterydefault) + config.electrician.largebatterydefault;
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.electrician}>{XPLang("largebatteryoutput", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.electrician.largebatterymaxincrease)}>{ValueSymbol("perk", config.electrician.largebatterymaxincrease, "pos")}{(xprecord.Electrician * config.electrician.largebatterymaxincrease) * 100}%</color> (<color=yellow>{largebattery}</color>)", rowtwo, height, TextAnchor.MiddleLeft, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.electrician.smallgeneratormaxincrease != 0)
                            {
                                int smallgenerator = (int)((xprecord.Electrician * config.electrician.smallgeneratormaxincrease) * config.electrician.smallgeneratordefault) + config.electrician.smallgeneratordefault;
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.electrician}>{XPLang("smallgeneratoroutput", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.electrician.smallgeneratormaxincrease)}>{ValueSymbol("perk", config.electrician.smallgeneratormaxincrease, "pos")}{(xprecord.Electrician * config.electrician.smallgeneratormaxincrease) * 100}%</color> (<color=yellow>{smallgenerator}</color>)", rowtwo, height, TextAnchor.MiddleLeft, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.electrician.electricwindmillincrease != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.electrician}>{XPLang("windmilloutput", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.electrician.electricwindmillincrease)}>{ValueSymbol("perk", config.electrician.electricwindmillincrease, "pos")}{(xprecord.Electrician * config.electrician.electricwindmillincrease) * 100}%</color>", rowtwo, height, TextAnchor.MiddleLeft, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.electrician.electricwindmillmaxincrease != 0)
                            {
                                int windmill = (int)((xprecord.Electrician * config.electrician.electricwindmillmaxincrease) * config.electrician.electricwindmilldefault) + config.electrician.electricwindmilldefault;
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.electrician}>{XPLang("windmillmaxoutput", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.electrician.electricwindmillmaxincrease)}>{ValueSymbol("perk", config.electrician.electricwindmillmaxincrease, "pos")}{(xprecord.Electrician * config.electrician.electricwindmillmaxincrease) * 100}%</color> (<color=yellow>{windmill}</color>)", rowtwo, height, TextAnchor.MiddleLeft, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.electrician.testgeneratormaxincrease != 0)
                            {
                                int testgenerator = (int)((xprecord.Electrician * config.electrician.testgeneratormaxincrease) * config.electrician.testgeneratordefault) + config.electrician.testgeneratordefault;
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.electrician}>{XPLang("testgeneratoroutput", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.electrician.testgeneratormaxincrease)}>{ValueSymbol("perk", config.electrician.testgeneratormaxincrease, "pos")}{(xprecord.Electrician * config.electrician.testgeneratormaxincrease) * 100}%</color> (<color=yellow>{testgenerator}</color>)", rowtwo, height, TextAnchor.MiddleLeft, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (Backpacks != null && config.backpacksmod.enablebackpacks && config.backpacksmod.statorskill == data)
                            {
                                var sizes = config.backpacksmod.BackPackSlots;
                                int sizeearned = 0;
                                int maxsize = 0;
                                foreach (var size in sizes)
                                {
                                    if (size.Value.level == skill)
                                    {
                                        sizeearned = size.Value.slots;
                                    }
                                    if (size.Value.level == maxlevel)
                                    {
                                        maxsize = size.Value.slots;
                                    }
                                }
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.might}>Backpack Size</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", skill)}> {sizeearned} / {maxsize} </color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                        }
                        #endregion
                    }
                    // Enabled / No Permission
                    else
                    {
                        StatsAndSkills.Add(XPUILabel($"{XPLang("donothavepermission", player.UserIDString, data)}", row, height, TextAnchor.MiddleCenter, 10, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                    break;
                case "demolitionist":
                    // Disabled
                    if (config.demolitionist.maxlvl == 0)
                    {
                        StatsAndSkills.Add(XPUILabel($"{XPLang("disabledbyadmin", player.UserIDString, data)}", row, height, TextAnchor.LowerCenter, 12, ".01", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                    // Enabled / Permissions
                    else if ((config.defaultOptions.userpermissions && permission.UserHasPermission(player.UserIDString, PermDemolitionist)) || !config.defaultOptions.userpermissions)
                    {
                        // Statistics
                        #region Statistics
                        skill = xprecord.Demolitionist;
                        int DemolitionistCost = (xprecord.Demolitionist + 1) * config.demolitionist.costmultiplier;
                        if (xprecord.Demolitionist < 1)
                        {
                            DemolitionistCost = config.demolitionist.pointcoststart;
                        }
                        if (xprecord.Demolitionist < config.demolitionist.maxlvl)
                        {
                            level = $"{xprecord.Demolitionist}";
                            cost = $"{DemolitionistCost}";
                            levelcolor = xprecord.Demolitionist;
                        }
                        for (int i = 1; i <= config.demolitionist.maxlvl; i++)
                        {
                            int costmultiplier = config.demolitionist.costmultiplier * i;
                            totalpoints += costmultiplier;
                        }
                        totalpoints += config.demolitionist.pointcoststart - config.demolitionist.costmultiplier;
                        pointsleft = totalpoints - xprecord.DemolitionistP;
                        pointsspent = xprecord.DemolitionistP;
                        maxlevel = config.demolitionist.maxlvl;
                        showdata = true;
                        #endregion
                        // Options
                        #region Options
                        // Level Up
                        if (xprecord.Demolitionist < config.demolitionist.maxlvl && (DemolitionistCost <= xprecord.skillpoint))
                        {
                            levelup = true;
                        }
                        // Reset
                        if (xprecord.Demolitionist > 0 && !config.defaultOptions.hardcorenoreset)
                        {
                            reset = true;
                        }
                        #endregion
                        // Abilities
                        #region Abilities
                        StatsAndSkills.Add(XPUILabel($"◂════ ⋆ {XPLang("abilities", player.UserIDString)} ⋆ ════▸", rowtwo, height, TextAnchor.MiddleCenter, 10, "0.50", "0.99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                        rowtwo++;
                        if ((xprecord.Demolitionist > 0 || config.playerprofilesettings.showunusedeffects) && config.demolitionist.maxlvl != 0)
                        {
                            if (config.demolitionist.explosivedudreduction != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.demolitionist}>{XPLang("explosivedudreduction", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.demolitionist.explosivedudreduction)}>{ValueSymbol("perk", config.demolitionist.explosivedudreduction, "neg")}{(xprecord.Demolitionist * config.demolitionist.explosivedudreduction) * 100}%</color>", rowtwo, height, TextAnchor.MiddleLeft, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.demolitionist.explosivedamage != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.demolitionist}>{XPLang("explosivedamage", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.demolitionist.explosivedamage)}>{ValueSymbol("perk", config.demolitionist.explosivedamage, "pos")}{(xprecord.Demolitionist * config.demolitionist.explosivedamage) * 100}%</color>", rowtwo, height, TextAnchor.MiddleLeft, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (config.demolitionist.explosiveradius != 0)
                            {
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.demolitionist}>{XPLang("explosiveradius", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", config.demolitionist.explosiveradius)}>{ValueSymbol("perk", config.demolitionist.explosiveradius, "pos")}{(xprecord.Demolitionist * config.demolitionist.explosiveradius) * 100}%</color>", rowtwo, height, TextAnchor.MiddleLeft, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                            if (XPerienceAddon != null)
                            {
                                bool rocketlock = Convert.ToBoolean(XPerienceAddon.Call("GetExtraFeatures", player, "demolitionist", "rocketlock"));
                                if (rocketlock)
                                {
                                    double rocketlockchance = Convert.ToDouble(XPerienceAddon.Call("GetExtraFeatures", player, "demolitionist", "rocketlockchance"));
                                    double rocketlocktime = Convert.ToDouble(XPerienceAddon.Call("GetExtraFeatures", player, "demolitionist", "rocketlocktime"));
                                    int rocketlockmindistance = Convert.ToInt32(XPerienceAddon.Call("GetExtraFeatures", player, "demolitionist", "rocketlockmindistance"));
                                    double rocketlockdistanceincrease = Convert.ToDouble(XPerienceAddon.Call("GetExtraFeatures", player, "demolitionist", "rocketlockdistanceincrease"));
                                    double rocketexplode = Convert.ToDouble(XPerienceAddon.Call("GetExtraFeatures", player, "demolitionist", "rocketexplode"));
                                    double rocketspeed = Convert.ToDouble(XPerienceAddon.Call("GetExtraFeatures", player, "demolitionist", "rocketspeed"));
                                    double rocketdmg = Convert.ToDouble(XPerienceAddon.Call("GetExtraFeatures", player, "demolitionist", "rocketdmg"));
                                    if (rocketlockdistanceincrease != 0)
                                    {
                                        rocketlockmindistance += ((int)(rocketlockdistanceincrease * rocketlockmindistance) * xprecord.Demolitionist);
                                    }
                                    if (rocketlockchance != 0)
                                    {
                                        StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.demolitionist}>{XPLang("rocketlockchance", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                        StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", rocketlockchance)}>{ValueSymbol("perk", rocketlockchance, "pos")}{(xprecord.Demolitionist * rocketlockchance) * 100}%</color>", rowtwo, height, TextAnchor.MiddleLeft, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                        rowtwo++;
                                    }
                                    if (rocketlocktime != 0)
                                    {
                                        StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.demolitionist}>{XPLang("rocketlocktime", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                        StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", rocketlocktime)}>{rocketlocktime - xprecord.Demolitionist}</color>", rowtwo, height, TextAnchor.MiddleLeft, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                        rowtwo++;
                                    }
                                    if (rocketlockmindistance != 0)
                                    {
                                        StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.demolitionist}>{XPLang("rocketlockmindistance", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                        StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", rocketlockmindistance)}>{rocketlockmindistance}m</color>", rowtwo, height, TextAnchor.MiddleLeft, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                        rowtwo++;
                                    }
                                    if (rocketexplode != 0)
                                    {
                                        StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.demolitionist}>{XPLang("rocketexplode", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                        StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", rocketexplode)}>{rocketexplode + xprecord.Demolitionist}</color>", rowtwo, height, TextAnchor.MiddleLeft, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                        rowtwo++;
                                    }
                                    if (rocketspeed != 0)
                                    {
                                        StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.demolitionist}>{XPLang("rocketspeed", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                        StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", rocketspeed)}>{ValueSymbol("perk", rocketspeed, "pos")}{(rocketspeed * xprecord.Demolitionist) * 100}%</color>", rowtwo, height, TextAnchor.MiddleLeft, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                        rowtwo++;
                                    }
                                    if (rocketdmg != 0)
                                    {
                                        StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.demolitionist}>{XPLang("rocketdmg", player.UserIDString)}</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                        StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", rocketdmg)}>{ValueSymbol("perk", rocketdmg, "pos")}{(rocketdmg * xprecord.Demolitionist) * 100}%</color>", rowtwo, height, TextAnchor.MiddleLeft, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                        rowtwo++;
                                    }
                                }
                            }
                            if (Backpacks != null && config.backpacksmod.enablebackpacks && config.backpacksmod.statorskill == data)
                            {
                                var sizes = config.backpacksmod.BackPackSlots;
                                int sizeearned = 0;
                                int maxsize = 0;
                                foreach (var size in sizes)
                                {
                                    if (size.Value.level == skill)
                                    {
                                        sizeearned = size.Value.slots;
                                    }
                                    if (size.Value.level == maxlevel)
                                    {
                                        maxsize = size.Value.slots;
                                    }
                                }
                                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.might}>Backpack Size</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", skill)}> {sizeearned} / {maxsize} </color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                                rowtwo++;
                            }
                        }
                        #endregion
                    }
                    // Enabled / No Permission
                    else
                    {
                        StatsAndSkills.Add(XPUILabel($"{XPLang("donothavepermission", player.UserIDString, data)}", row, height, TextAnchor.MiddleCenter, 10, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                    break;
                case "tamer":
                    // Disabled
                    if (config.tamer.maxlvl == 0)
                    {
                        StatsAndSkills.Add(XPUILabel($"{XPLang("disabledbyadmin", player.UserIDString, data)}", row, height, TextAnchor.LowerCenter, 12, ".01", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                    // Enabled / Permissions
                    else if ((config.defaultOptions.userpermissions && permission.UserHasPermission(player.UserIDString, PermTamer)) || !config.defaultOptions.userpermissions)
                    {
                        // Statistics
                        #region Statistics
                        skill = xprecord.Tamer;
                        int TamerCost = (xprecord.Tamer + 1) * config.tamer.costmultiplier;
                        if (xprecord.Tamer < 1)
                        {
                            TamerCost = config.tamer.pointcoststart;
                        }
                        if (xprecord.Tamer < config.tamer.maxlvl)
                        {
                            level = $"{xprecord.Tamer}";
                            cost = $"{TamerCost}";
                            levelcolor = xprecord.Tamer;
                        }
                        for (int i = 1; i <= config.tamer.maxlvl; i++)
                        {
                            int costmultiplier = config.tamer.costmultiplier * i;
                            totalpoints += costmultiplier;
                        }
                        totalpoints += config.tamer.pointcoststart - config.tamer.costmultiplier;
                        pointsleft = totalpoints - xprecord.TamerP;
                        pointsspent = xprecord.TamerP;
                        maxlevel = config.tamer.maxlvl;
                        showdata = true;
                        #endregion
                        // Options
                        #region Options
                        // Level Up
                        if (xprecord.Tamer < config.tamer.maxlvl && (TamerCost <= xprecord.skillpoint))
                        {
                            levelup = true;
                        }
                        // Reset
                        if (xprecord.Tamer > 0 && !config.defaultOptions.hardcorenoreset)
                        {
                            reset = true;
                        }
                        #endregion
                        // Abilities
                        #region Abilities
                        StatsAndSkills.Add(XPUILabel($"◂════ ⋆ Taming {XPLang("abilities", player.UserIDString)} ⋆ ════▸", rowtwo, height, TextAnchor.MiddleCenter, 10, "0.50", "0.99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                        rowtwo++;
                        if (xprecord.Tamer >= config.tamer.chickenlevel && config.tamer.tamechicken)
                        {
                            StatsAndSkills.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkills, XPeriencechicken, rowtwo, height, ".60", ".62"));
                            StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={TextColor(player, "pets", xprecord.Tamer)}>{XPLang("chicken", player.UserIDString)}</color>", rowtwo, height, TextAnchor.MiddleLeft, 10, ".63", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                            rowtwo++;
                        }
                        if (xprecord.Tamer >= config.tamer.boarlevel && config.tamer.tameboar)
                        {
                            StatsAndSkills.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkills, XPerienceboar, rowtwo, height, ".60", ".62"));
                            StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={TextColor(player, "pets", xprecord.Tamer)}>{XPLang("boar", player.UserIDString)}</color>", rowtwo, height, TextAnchor.MiddleLeft, 10, ".63", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                            rowtwo++;
                        }
                        if (xprecord.Tamer >= config.tamer.staglevel && config.tamer.tamestag)
                        {
                            StatsAndSkills.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkills, XPeriencestag, rowtwo, height, ".60", ".62"));
                            StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={TextColor(player, "pets", xprecord.Tamer)}>{XPLang("stag", player.UserIDString)}</color>", rowtwo, height, TextAnchor.MiddleLeft, 10, ".63", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                            rowtwo++;
                        }
                        if (xprecord.Tamer >= config.tamer.wolflevel && config.tamer.tamewolf)
                        {
                            StatsAndSkills.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkills, XPeriencewolf, rowtwo, height, ".60", ".62"));
                            StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={TextColor(player, "pets", xprecord.Tamer)}>{XPLang("wolf", player.UserIDString)}</color>", rowtwo, height, TextAnchor.MiddleLeft, 10, ".63", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                            rowtwo++;
                        }
                        if (xprecord.Tamer >= config.tamer.bearlevel && config.tamer.tamebear)
                        {
                            StatsAndSkills.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkills, XPeriencebear, rowtwo, height, ".60", ".62"));
                            StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={TextColor(player, "pets", xprecord.Tamer)}>{XPLang("bear", player.UserIDString)}</color>", rowtwo, height, TextAnchor.MiddleLeft, 10, ".63", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                            rowtwo++;
                        }
                        if (xprecord.Tamer >= config.tamer.polarbearlevel && config.tamer.tamepolarbear)
                        {
                            StatsAndSkills.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkills, XPeriencepolarbear, rowtwo, height, ".60", ".62"));
                            StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={TextColor(player, "pets", xprecord.Tamer)}>{XPLang("polarbear", player.UserIDString)}</color>", rowtwo, height, TextAnchor.MiddleLeft, 10, ".63", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                        }
                        if (Backpacks != null && config.backpacksmod.enablebackpacks && config.backpacksmod.statorskill == data)
                        {
                            var sizes = config.backpacksmod.BackPackSlots;
                            int sizeearned = 0;
                            int maxsize = 0;
                            foreach (var size in sizes)
                            {
                                if (size.Value.level == skill)
                                {
                                    sizeearned = size.Value.slots;
                                }
                                if (size.Value.level == maxlevel)
                                {
                                    maxsize = size.Value.slots;
                                }
                            }
                            StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> <color={config.uitextColor.might}>Backpack Size</color>:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".50", ".85", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                            StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "perk", skill)}> {sizeearned} / {maxsize} </color>", rowtwo, height, TextAnchor.MiddleCenter, 10, ".85", ".99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                            rowtwo++;
                        }
                        #endregion
                    }
                    // Enabled / No Permission
                    else
                    {
                        StatsAndSkills.Add(XPUILabel($"{XPLang("donothavepermission", player.UserIDString, data)}", row, height, TextAnchor.MiddleCenter, 10, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                    break;
            }
            #region Show Data/Options
            if (showdata)
            {
                // Statistics
                #region Statistics
                StatsAndSkills.Add(XPUILabel($"◂════ ⋆ {XPLang("level", player.UserIDString)} ⋆ ════▸", row, height, TextAnchor.MiddleCenter, 10, "0.01", "0.30", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                row++;
                // Current Level
                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> {XPLang("currentlevel", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 10, "0.01", "0.20", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "level", levelcolor)}>{level}</color>", row, height, TextAnchor.MiddleRight, 11, "0.20", "0.30", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                row++;
                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> {XPLang("maxlevel", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 10, "0.01", "0.20", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "level", levelcolor)}>{maxlevel}</color>", row, height, TextAnchor.MiddleRight, 11, "0.20", "0.30", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                row++;
                row++;
                // Points
                StatsAndSkills.Add(XPUILabel($"◂════ ⋆ {XPLang("points", player.UserIDString)} ⋆ ════▸", row, height, TextAnchor.MiddleCenter, 10, "0.01", "0.30", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                row++;
                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> {XPLang("nextlevel", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 10, "0.01", "0.20", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "nextlevel", levelcolor)}>{String.Format("{0:N0}", cost)}</color>", row, height, TextAnchor.MiddleRight, 10, "0.20", "0.30", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                row++;
                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> {XPLang("maxlevel", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 10, "0.01", "0.20", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "nextlevel", levelcolor)}>{String.Format("{0:N0}", pointsleft)}</color>", row, height, TextAnchor.MiddleRight, 10, "0.20", "0.30", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                row++;
                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> {XPLang("available", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 10, "0.01", "0.20", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "unspent", pointsavailable)}>{String.Format("{0:N0}", pointsavailable)}</color>", row, height, TextAnchor.MiddleRight, 11, "0.20", "0.30", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                row++;
                StatsAndSkills.Add(XPUILabel($"<color=red>▫ </color> {XPLang("used", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 10, "0.01", "0.20", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                StatsAndSkills.Add(XPUILabel($"<color={TextColor(player, "spent", pointsspent)}>{String.Format("{0:N0}", pointsspent)}</color>", row, height, TextAnchor.MiddleRight, 10, "0.20", "0.30", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                row++;
                row++;
                #endregion
                // Options
                #region Options
                StatsAndSkills.Add(XPUILabel($"◂════ ⋆ {XPLang("options", player.UserIDString)} ⋆ ════▸", row, height, TextAnchor.MiddleCenter, 10, "0.01", "0.30", "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                // Level Up
                if (levelup)
                {
                    if (config.defaultOptions.enableconfirmationprompt && xprecord.enableconfirmationprompt)
                    {
                        StatsAndSkills.Add(XPUIButton($"xp.playeredits getprompt {type} {data.ToLower()} {player.UserIDString}", buttonrow, buttonheight, 10, "0 0 0 1", $"<color=#94FF2B>⇧  {XPLang("levelupbutton", player.UserIDString)}  ⇧</color>", ".05", ".25", TextAnchor.MiddleCenter, "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                    else
                    {
                        switch (type)
                        {
                            case "stats":
                                type = "stat";
                                break;
                            case "skills":
                                type = "skill";
                                break;
                        }
                        StatsAndSkills.Add(XPUIButton($"xp.playeredits {type} {data.ToLower()} {player.UserIDString}", buttonrow, buttonheight, 10, "0 0 0 1", $"<color=#94FF2B>⇧  {XPLang("levelupbutton", player.UserIDString)}  ⇧</color>", ".05", ".25", TextAnchor.MiddleCenter, "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                }
                buttonrow++;
                buttonrow++;
                // Reset
                if (reset)
                {
                    if (timer > 0 && config.defaultOptions.restristresets)
                    {
                        StatsAndSkills.Add(XPUILabel($"Can Reset in {XPLang("canresetstats", player.UserIDString, timer)}", buttonrow, buttonheight, TextAnchor.MiddleCenter, 10, ".05", ".25", "1 0 0 1"), XPeriencePlayerProfileStatsAndSkills);
                    }
                    else
                    {
                        if (config.defaultOptions.enableconfirmationprompt && xprecord.enableconfirmationprompt)
                        {
                            StatsAndSkills.Add(XPUIButton($"xp.playercontrol getprompt {type} {data.ToLower()} {player.UserIDString}", buttonrow, buttonheight, 10, "0 0 0 1", $"<color=#ff0000>⇩  {XPLang("reset", player.UserIDString)}  ⇩</color>  {resetlabel}", ".05", ".25", TextAnchor.MiddleCenter, "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                        }
                        else
                        {
                            switch (type)
                            {
                                case "stats":
                                    type = "stat";
                                    break;
                                case "skills":
                                    type = "skill";
                                    break;
                            }
                            StatsAndSkills.Add(XPUIButton($"xp.playercontrol reset {type} {data.ToLower()} {player.UserIDString}", buttonrow, buttonheight, 10, "0 0 0 1", $"<color=#ff0000>⇩  {XPLang("reset", player.UserIDString)}  ⇩</color>  {resetlabel}", ".05", ".25", TextAnchor.MiddleCenter, "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                        }
                    }
                }
                buttonrow++;
                buttonrow++;
                // Help
                if (config.playerprofilesettings.skillshelp)
                {
                    StatsAndSkills.Add(XPUIButton($"xp.playercontrol help {data} {type}", buttonrow, buttonheight, 10, "0 0 0 1", $"<color=#ffff00>【?】  {XPLang("help", player.UserIDString)} 【?】</color>", ".05", ".25", TextAnchor.MiddleCenter, "1 1 1 1"), XPeriencePlayerProfileStatsAndSkills);
                }
                #endregion
            }
            #endregion
            CuiHelper.AddUi(player, StatsAndSkills);
        }
        private void PlayerProfileRecords(BasePlayer player, string data, BasePlayer otherplayer = null, int page = 0, string ordertype = "timestamp", string order = "desc")
        {
            if (player == null || data == null) return;
            XPRecord xprecord = GetXPRecord(player);
            if (otherplayer != null)
            {
                xprecord = GetXPRecord(otherplayer);
            }
            if (otherplayer == null) otherplayer = player;
            var getplayer = otherplayer.UserIDString;
            float height = 0.045f;
            int font = 13;
            int current = 0;
            int row = 3;
            int rowtwo = 3;
            var Kills = new CuiElementContainer();
            Kills.Add(XPUIPanel($"{config.playerprofilesettings.menuwidth + .005} .1", ".99 .99", "0 0 0 0"), XPeriencePlayerProfile, XPeriencePlayerProfileKills);
            switch (data)
            {
                // Main
                #region Main
                case "main":
                    Kills.Add(XPUIButton($"xp.playercontrol history main {otherplayer.userID}", 1, height, font, "0 0 0 1", "<color=#40ff00>〘</color> Main <color=#40ff00>〙</color>", ".01", ".20", TextAnchor.MiddleCenter, "1 1 1 1"), XPeriencePlayerProfileKills);
                    Kills.Add(XPUIButton($"xp.playercontrol history harvests {otherplayer.userID}", 1, height, font, "0 0 0 1", "Harvests", ".25", ".45", TextAnchor.MiddleCenter, "1 1 1 1"), XPeriencePlayerProfileKills);
                    if (KillRecords != null)
                    {
                        Kills.Add(XPUIButton($"xp.playercontrol history killrecords {otherplayer.userID}", 1, height, font, "0 0 0 1", "Kills / Deaths", ".50", ".75", TextAnchor.MiddleCenter, "1 1 1 1"), XPeriencePlayerProfileKills);
                    }
                    if (XPerienceAddon != null)
                    {
                        Kills.Add(XPUIButton($"xp.playercontrol history killlist {otherplayer.userID} 0 timestamp desc", 1, height, font, "0 0 0 1", "History", ".80", ".99", TextAnchor.MiddleCenter, "1 1 1 1"), XPeriencePlayerProfileKills);
                    }
                    Kills.Add(XPUILabel($"◂════ ⋆ Player Info ⋆ ════▸", row, height, TextAnchor.MiddleLeft, 10, ".01", ".75", "1 1 1 1"), XPeriencePlayerProfileKills);
                    row++;
                    if (config.playerprofilesettings.playtime)
                    {
                        Kills.Add(XPUILabel($"<color=red>▫ </color> Playtime: ", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                        Kills.Add(XPUILabel($"{PlayerTimeValues(player, "", otherplayer.secondsConnected)}", row, height, TextAnchor.MiddleLeft, 10, ".31", ".75", "1 1 1 1"), XPeriencePlayerProfileKills);
                        row++;
                    }
                    if (config.playerprofilesettings.alivetime)
                    {
                        Kills.Add(XPUILabel($"<color=red>▫ </color> {XPLang("timealive", player.UserIDString)}: ", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                        Kills.Add(XPUILabel($"{PlayerTimeValues(player, "", otherplayer.lifeStory.secondsAlive)}", row, height, TextAnchor.MiddleLeft, 10, ".31", ".75", "1 1 1 1"), XPeriencePlayerProfileKills);
                        row++;
                    }
                    if (config.playerprofilesettings.sleepingtime)
                    {
                        Kills.Add(XPUILabel($"<color=red>▫ </color> {XPLang("timesleeping", player.UserIDString)}: ", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                        Kills.Add(XPUILabel($"{PlayerTimeValues(player, "", otherplayer.lifeStory.secondsSleeping)}", row, height, TextAnchor.MiddleLeft, 10, ".31", ".75", "1 1 1 1"), XPeriencePlayerProfileKills);
                        row++;
                    }
                    if (config.playerprofilesettings.swimingtime)
                    {
                        Kills.Add(XPUILabel($"<color=red>▫ </color> {XPLang("timeswimming", player.UserIDString)}: ", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                        Kills.Add(XPUILabel($"{PlayerTimeValues(player, "", otherplayer.lifeStory.secondsSwimming)}", row, height, TextAnchor.MiddleLeft, 10, ".31", ".75", "1 1 1 1"), XPeriencePlayerProfileKills);
                        row++;
                    }
                    if (config.playerprofilesettings.drivingtime)
                    {
                        Kills.Add(XPUILabel($"<color=red>▫ </color> {XPLang("timedriving", player.UserIDString)}: ", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                        Kills.Add(XPUILabel($"{PlayerTimeValues(player, "", otherplayer.lifeStory.secondsDriving)}", row, height, TextAnchor.MiddleLeft, 10, ".31", ".75", "1 1 1 1"), XPeriencePlayerProfileKills);
                        row++;
                    }
                    if (config.playerprofilesettings.flyingtime)
                    {
                        Kills.Add(XPUILabel($"<color=red>▫ </color> {XPLang("timeflying", player.UserIDString)}: ", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                        Kills.Add(XPUILabel($"{PlayerTimeValues(player, "", otherplayer.lifeStory.secondsFlying)}", row, height, TextAnchor.MiddleLeft, 10, ".31", ".75", "1 1 1 1"), XPeriencePlayerProfileKills);
                        row++;
                    }
                    if (config.playerprofilesettings.boatingtime)
                    {
                        Kills.Add(XPUILabel($"<color=red>▫ </color> {XPLang("timeboating", player.UserIDString)}: ", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                        Kills.Add(XPUILabel($"{PlayerTimeValues(player, "", otherplayer.lifeStory.secondsBoating)}", row, height, TextAnchor.MiddleLeft, 10, ".31", ".75", "1 1 1 1"), XPeriencePlayerProfileKills);
                        row++;
                    }
                    if (config.playerprofilesettings.basetime)
                    {
                        Kills.Add(XPUILabel($"<color=red>▫ </color> {XPLang("timeinbase", player.UserIDString)}: ", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                        Kills.Add(XPUILabel($"{PlayerTimeValues(player, "", otherplayer.lifeStory.secondsInBase)}", row, height, TextAnchor.MiddleLeft, 10, ".31", ".75", "1 1 1 1"), XPeriencePlayerProfileKills);
                        row++;
                    }
                    if (config.playerprofilesettings.monumenttime)
                    {
                        Kills.Add(XPUILabel($"<color=red>▫ </color> {XPLang("timeinmonument", player.UserIDString)}: ", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                        Kills.Add(XPUILabel($"{PlayerTimeValues(player, "", otherplayer.lifeStory.secondsInMonument)}", row, height, TextAnchor.MiddleLeft, 10, ".31", ".75", "1 1 1 1"), XPeriencePlayerProfileKills);
                        row++;
                    }
                    if (config.playerprofilesettings.wildernesstime)
                    {
                        Kills.Add(XPUILabel($"<color=red>▫ </color> {XPLang("timeinwild", player.UserIDString)}: ", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                        Kills.Add(XPUILabel($"{PlayerTimeValues(player, "", otherplayer.lifeStory.secondsWilderness)}", row, height, TextAnchor.MiddleLeft, 10, ".31", ".75", "1 1 1 1"), XPeriencePlayerProfileKills);
                        row++;
                    }
                    if (config.playerprofilesettings.metersran)
                    {
                        Kills.Add(XPUILabel($"<color=red>▫ </color> {XPLang("metersran", player.UserIDString)}: ", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                        Kills.Add(XPUILabel($"{Math.Round(otherplayer.lifeStory.metersRun, 2)}", row, height, TextAnchor.MiddleLeft, 10, ".31", ".75", "1 1 1 1"), XPeriencePlayerProfileKills);
                        row++;
                    }
                    if (config.playerprofilesettings.meterswalked)
                    {
                        Kills.Add(XPUILabel($"<color=red>▫ </color> {XPLang("meterswalk", player.UserIDString)}: ", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                        Kills.Add(XPUILabel($"{Math.Round(otherplayer.lifeStory.metersWalked, 2)}", row, height, TextAnchor.MiddleLeft, 10, ".31", ".75", "1 1 1 1"), XPeriencePlayerProfileKills);
                        row++;
                    }
                    if (config.playerprofilesettings.lastdmgrec)
                    {
                        Kills.Add(XPUILabel($"<color=red>▫ </color> {XPLang("timedmgrec", player.UserIDString)}: ", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                        Kills.Add(XPUILabel($"{PlayerTimeValues(player, "dmgrecieved", otherplayer.SecondsSinceAttacked)}", row, height, TextAnchor.MiddleLeft, 10, ".31", ".75", "1 1 1 1"), XPeriencePlayerProfileKills);
                        row++;
                    }
                    if (config.playerprofilesettings.lastdmgrecby)
                    {
                        Kills.Add(XPUILabel($"<color=red>▫ </color> {XPLang("timedmgrecfrom", player.UserIDString)}: ", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                        Kills.Add(XPUILabel($"{PlayerInfoValues(player, otherplayer.lastAttacker, "dmgrecieved")}", row, height, TextAnchor.MiddleLeft, 10, ".31", ".75", "1 1 1 1"), XPeriencePlayerProfileKills);
                        row++;
                    }
                    if (config.playerprofilesettings.lastdmgdelt)
                    {
                        Kills.Add(XPUILabel($"<color=red>▫ </color> {XPLang("timedmgdelt", player.UserIDString)}: ", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                        Kills.Add(XPUILabel($"{PlayerTimeValues(player, "", otherplayer.SecondsSinceDealtDamage)}", row, height, TextAnchor.MiddleLeft, 10, ".31", ".75", "1 1 1 1"), XPeriencePlayerProfileKills);
                        row++;
                    }
                    if (config.playerprofilesettings.lastdmgdeltto)
                    {
                        Kills.Add(XPUILabel($"<color=red>▫ </color> {XPLang("timedeltto", player.UserIDString)}: ", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                        Kills.Add(XPUILabel($"{PlayerInfoValues(player, otherplayer.lastDealtDamageTo, "dmgdelt")}", row, height, TextAnchor.MiddleLeft, 10, ".31", ".75", "1 1 1 1"), XPeriencePlayerProfileKills);
                        row++;
                    }
                    break;
                #endregion
                // Harvests
                #region Harvests
                case "harvests":
                    Kills.Add(XPUIButton($"xp.playercontrol history main {otherplayer.userID}", 1, height, font, "0 0 0 1", "Main", ".01", ".20", TextAnchor.MiddleCenter, "1 1 1 1"), XPeriencePlayerProfileKills);
                    Kills.Add(XPUIButton($"xp.playercontrol history harvests {otherplayer.userID}", 1, height, font, "0 0 0 1", "<color=#40ff00>〘</color> Harvests <color=#40ff00>〙</color>", ".25", ".45", TextAnchor.MiddleCenter, "1 1 1 1"), XPeriencePlayerProfileKills);
                    if (KillRecords != null)
                    {
                        Kills.Add(XPUIButton($"xp.playercontrol history killrecords {otherplayer.userID}", 1, height, font, "0 0 0 1", "Kills / Deaths", ".50", ".75", TextAnchor.MiddleCenter, "1 1 1 1"), XPeriencePlayerProfileKills);
                    }
                    if (XPerienceAddon != null)
                    {
                        Kills.Add(XPUIButton($"xp.playercontrol history killlist {otherplayer.userID} 0 timestamp desc", 1, height, font, "0 0 0 1", "History", ".80", ".99", TextAnchor.MiddleCenter, "1 1 1 1"), XPeriencePlayerProfileKills);
                    }
                    Kills.Add(XPUILabel($"◂════ ⋆ Harvests Total ⋆ ════▸", row, height, TextAnchor.MiddleLeft, 12, ".01", ".50", "1 1 1 1"), XPeriencePlayerProfileKills);
                    row++;
                    Kills.Add(XPUILabel($"<color=red>▫ </color> Wood: ", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                    Kills.Add(XPUILabel($"<color={TextColor(player, "level", xprecord.Wood)}>{xprecord.Wood}</color>", row, height, TextAnchor.MiddleLeft, 10, ".31", ".50", "1 1 1 1"), XPeriencePlayerProfileKills);
                    row++;
                    Kills.Add(XPUILabel($"<color=red>▫ </color> Stone: ", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                    Kills.Add(XPUILabel($"<color={TextColor(player, "level", xprecord.Stone)}>{xprecord.Stone}</color>", row, height, TextAnchor.MiddleLeft, 10, ".31", ".50", "1 1 1 1"), XPeriencePlayerProfileKills);
                    row++;
                    Kills.Add(XPUILabel($"<color=red>▫ </color> Metal: ", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                    Kills.Add(XPUILabel($"<color={TextColor(player, "level", xprecord.Metal)}>{xprecord.Metal}</color>", row, height, TextAnchor.MiddleLeft, 10, ".31", ".50", "1 1 1 1"), XPeriencePlayerProfileKills);
                    row++;
                    Kills.Add(XPUILabel($"<color=red>▫ </color> Sulfur: ", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                    Kills.Add(XPUILabel($"<color={TextColor(player, "level", xprecord.Sulfur)}>{xprecord.Sulfur}</color>", row, height, TextAnchor.MiddleLeft, 10, ".31", ".50", "1 1 1 1"), XPeriencePlayerProfileKills);
                    row++;
                    Kills.Add(XPUILabel($"<color=red>▫ </color> Cactus: ", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                    Kills.Add(XPUILabel($"<color={TextColor(player, "level", xprecord.Cactus)}>{xprecord.Cactus}</color>", row, height, TextAnchor.MiddleLeft, 10, ".31", ".50", "1 1 1 1"), XPeriencePlayerProfileKills);
                    row++;
                    Kills.Add(XPUILabel($"<color=red>▫ </color> Berries: ", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                    Kills.Add(XPUILabel($"<color={TextColor(player, "level", xprecord.Berries)}>{xprecord.Berries}</color>", row, height, TextAnchor.MiddleLeft, 10, ".31", ".50", "1 1 1 1"), XPeriencePlayerProfileKills);
                    row++;
                    Kills.Add(XPUILabel($"<color=red>▫ </color> Pumpkins: ", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                    Kills.Add(XPUILabel($"<color={TextColor(player, "level", xprecord.Pumpkin)}>{xprecord.Pumpkin}</color>", row, height, TextAnchor.MiddleLeft, 10, ".31", ".50", "1 1 1 1"), XPeriencePlayerProfileKills);
                    row++;
                    Kills.Add(XPUILabel($"<color=red>▫ </color> Potatos: ", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                    Kills.Add(XPUILabel($"<color={TextColor(player, "level", xprecord.Potato)}>{xprecord.Potato}</color>", row, height, TextAnchor.MiddleLeft, 10, ".31", ".50", "1 1 1 1"), XPeriencePlayerProfileKills);
                    row++;
                    Kills.Add(XPUILabel($"<color=red>▫ </color> Corn: ", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                    Kills.Add(XPUILabel($"<color={TextColor(player, "level", xprecord.Corn)}>{xprecord.Corn}</color>", row, height, TextAnchor.MiddleLeft, 10, ".31", ".50", "1 1 1 1"), XPeriencePlayerProfileKills);
                    row++;
                    Kills.Add(XPUILabel($"<color=red>▫ </color> Mushrooms: ", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                    Kills.Add(XPUILabel($"<color={TextColor(player, "level", xprecord.Mushroom)}>{xprecord.Mushroom}</color>", row, height, TextAnchor.MiddleLeft, 10, ".31", ".50", "1 1 1 1"), XPeriencePlayerProfileKills);
                    row++;
                    Kills.Add(XPUILabel($"<color=red>▫ </color> Hemp: ", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                    Kills.Add(XPUILabel($"<color={TextColor(player, "level", xprecord.Hemp)}>{xprecord.Hemp}</color>", row, height, TextAnchor.MiddleLeft, 10, ".31", ".50", "1 1 1 1"), XPeriencePlayerProfileKills);
                    row++;
                    Kills.Add(XPUILabel($"<color=red>▫ </color> Seeds: ", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                    Kills.Add(XPUILabel($"<color={TextColor(player, "level", xprecord.Seed)}>{xprecord.Seed}</color>", row, height, TextAnchor.MiddleLeft, 10, ".31", ".50", "1 1 1 1"), XPeriencePlayerProfileKills);
                    // Column Two
                    if (KillRecords != null)
                    {
                        Kills.Add(XPUILabel($"◂════ ⋆ Harvests Count ⋆ ════▸", rowtwo, height, TextAnchor.MiddleLeft, 12, "0.51", "99", "1 1 1 1"), XPeriencePlayerProfileKills);
                        rowtwo++;
                        Kills.Add(XPUILabel($"<color=red>▫ </color> Trees:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".51", ".80", "1 1 1 1"), XPeriencePlayerProfileKills);
                        Kills.Add(XPUILabel($"|  <color={TextColor(player, "level", (int)GetKillRecords(getplayer, "trees"))}>{GetKillRecords(getplayer, "trees")}</color>", rowtwo, height, TextAnchor.MiddleLeft, 10, ".80", ".99", "1 1 1 1"), XPeriencePlayerProfileKills);
                        rowtwo++;
                        Kills.Add(XPUILabel($"<color=red>▫ </color> Wood Picked Up:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".51", ".80", "1 1 1 1"), XPeriencePlayerProfileKills);
                        Kills.Add(XPUILabel($"|  <color={TextColor(player, "level", (int)GetKillRecords(getplayer, "wood"))}>{GetKillRecords(getplayer, "wood")}</color>", rowtwo, height, TextAnchor.MiddleLeft, 10, ".80", ".99", "1 1 1 1"), XPeriencePlayerProfileKills);
                        rowtwo++;
                        Kills.Add(XPUILabel($"<color=red>▫ </color> Ore Mined:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".51", ".80", "1 1 1 1"), XPeriencePlayerProfileKills);
                        Kills.Add(XPUILabel($"|  <color={TextColor(player, "level", (int)GetKillRecords(getplayer, "oremined"))}>{GetKillRecords(getplayer, "oremined")}</color>", rowtwo, height, TextAnchor.MiddleLeft, 10, ".80", ".99", "1 1 1 1"), XPeriencePlayerProfileKills);
                        rowtwo++;
                        Kills.Add(XPUILabel($"<color=red>▫ </color> Ore Picked Up:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".51", ".80", "1 1 1 1"), XPeriencePlayerProfileKills);
                        Kills.Add(XPUILabel($"|  <color={TextColor(player, "level", (int)GetKillRecords(getplayer, "orepickup"))}>{GetKillRecords(getplayer, "orepickup")}</color>", rowtwo, height, TextAnchor.MiddleLeft, 10, ".80", ".99", "1 1 1 1"), XPeriencePlayerProfileKills);
                        rowtwo++;
                        Kills.Add(XPUILabel($"<color=red>▫ </color> Berries:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".51", ".80", "1 1 1 1"), XPeriencePlayerProfileKills);
                        Kills.Add(XPUILabel($"|  <color={TextColor(player, "level", (int)GetKillRecords(getplayer, "berries"))}>{GetKillRecords(getplayer, "berries")}</color>", rowtwo, height, TextAnchor.MiddleLeft, 10, ".80", ".99", "1 1 1 1"), XPeriencePlayerProfileKills);
                        rowtwo++;
                        Kills.Add(XPUILabel($"<color=red>▫ </color> Seeds:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".51", ".80", "1 1 1 1"), XPeriencePlayerProfileKills);
                        Kills.Add(XPUILabel($"|  <color={TextColor(player, "level", (int)GetKillRecords(getplayer, "seed"))}>{GetKillRecords(getplayer, "seed")}</color>", rowtwo, height, TextAnchor.MiddleLeft, 10, ".80", ".99", "1 1 1 1"), XPeriencePlayerProfileKills);
                        rowtwo++;
                        Kills.Add(XPUILabel($"<color=red>▫ </color> Hemp:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".51", ".80", "1 1 1 1"), XPeriencePlayerProfileKills);
                        Kills.Add(XPUILabel($"|  <color={TextColor(player, "level", (int)GetKillRecords(getplayer, "hemp"))}>{GetKillRecords(getplayer, "hemp")}</color>", rowtwo, height, TextAnchor.MiddleLeft, 10, ".80", ".99", "1 1 1 1"), XPeriencePlayerProfileKills);
                        rowtwo++;
                        Kills.Add(XPUILabel($"<color=red>▫ </color> Potatos:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".51", ".80", "1 1 1 1"), XPeriencePlayerProfileKills);
                        Kills.Add(XPUILabel($"|  <color={TextColor(player, "level", (int)GetKillRecords(getplayer, "potato"))}>{GetKillRecords(getplayer, "potato")}</color>", rowtwo, height, TextAnchor.MiddleLeft, 10, ".80", ".99", "1 1 1 1"), XPeriencePlayerProfileKills);
                        rowtwo++;
                        Kills.Add(XPUILabel($"<color=red>▫ </color> Pumpkin:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".51", ".80", "1 1 1 1"), XPeriencePlayerProfileKills);
                        Kills.Add(XPUILabel($"|  <color={TextColor(player, "level", (int)GetKillRecords(getplayer, "pumpkin"))}>{GetKillRecords(getplayer, "pumpkin")}</color>", rowtwo, height, TextAnchor.MiddleLeft, 10, ".80", ".99", "1 1 1 1"), XPeriencePlayerProfileKills);
                        rowtwo++;
                        Kills.Add(XPUILabel($"<color=red>▫ </color> Mushroom:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".51", ".80", "1 1 1 1"), XPeriencePlayerProfileKills);
                        Kills.Add(XPUILabel($"|  <color={TextColor(player, "level", (int)GetKillRecords(getplayer, "mushroom"))}>{GetKillRecords(getplayer, "mushroom")}</color>", rowtwo, height, TextAnchor.MiddleLeft, 10, ".80", ".99", "1 1 1 1"), XPeriencePlayerProfileKills);
                        rowtwo++;
                        Kills.Add(XPUILabel($"<color=red>▫ </color> Corn:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".51", ".80", "1 1 1 1"), XPeriencePlayerProfileKills);
                        Kills.Add(XPUILabel($"|  <color={TextColor(player, "level", (int)GetKillRecords(getplayer, "corn"))}>{GetKillRecords(getplayer, "corn")}</color>", rowtwo, height, TextAnchor.MiddleLeft, 10, ".80", ".99", "1 1 1 1"), XPeriencePlayerProfileKills);
                        rowtwo++;
                        Kills.Add(XPUILabel($"<color=red>▫ </color> Animal Harvested:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".51", ".80", "1 1 1 1"), XPeriencePlayerProfileKills);
                        Kills.Add(XPUILabel($"|  <color={TextColor(player, "level", (int)GetKillRecords(getplayer, "basecorpse"))}>{GetKillRecords(getplayer, "basecorpse")}</color>", rowtwo, height, TextAnchor.MiddleLeft, 10, ".80", ".99", "1 1 1 1"), XPeriencePlayerProfileKills);
                        rowtwo++;
                        Kills.Add(XPUILabel($"<color=red>▫ </color> Corpse Harvested:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".51", ".80", "1 1 1 1"), XPeriencePlayerProfileKills);
                        Kills.Add(XPUILabel($"|  <color={TextColor(player, "level", (int)GetKillRecords(getplayer, "npcplayercorpse"))}>{GetKillRecords(getplayer, "npcplayercorpse")}</color>", rowtwo, height, TextAnchor.MiddleLeft, 10, ".80", ".99", "1 1 1 1"), XPeriencePlayerProfileKills);
                        rowtwo++;
                        rowtwo++;
                        Kills.Add(XPUILabel($"◂════ ⋆ Loot ⋆ ════▸", rowtwo, height, TextAnchor.MiddleLeft, 12, "0.51", "99", "1 1 1 1"), XPeriencePlayerProfileKills);
                        rowtwo++;
                        Kills.Add(XPUILabel($"<color=red>▫ </color> Loot Containers:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".51", ".80", "1 1 1 1"), XPeriencePlayerProfileKills);
                        Kills.Add(XPUILabel($"|  <color={TextColor(player, "level", (int)GetKillRecords(getplayer, "lootcontainer"))}>{GetKillRecords(getplayer, "lootcontainer")}</color>", rowtwo, height, TextAnchor.MiddleLeft, 10, ".80", ".99", "1 1 1 1"), XPeriencePlayerProfileKills);
                        rowtwo++;
                        Kills.Add(XPUILabel($"<color=red>▫ </color> Underwater Containers:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".51", ".80", "1 1 1 1"), XPeriencePlayerProfileKills);
                        Kills.Add(XPUILabel($"|  <color={TextColor(player, "level", (int)GetKillRecords(getplayer, "underwaterlootcontainer"))}>{GetKillRecords(getplayer, "underwaterlootcontainer")}</color>", rowtwo, height, TextAnchor.MiddleLeft, 10, ".80", ".99", "1 1 1 1"), XPeriencePlayerProfileKills);
                        rowtwo++;
                        Kills.Add(XPUILabel($"<color=red>▫ </color> Brad/Heli Crates:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".51", ".80", "1 1 1 1"), XPeriencePlayerProfileKills);
                        Kills.Add(XPUILabel($"|  <color={TextColor(player, "level", (int)GetKillRecords(getplayer, "lockedbyentcrate"))}>{GetKillRecords(getplayer, "lockedbyentcrate")}</color>", rowtwo, height, TextAnchor.MiddleLeft, 10, ".80", ".99", "1 1 1 1"), XPeriencePlayerProfileKills);
                        rowtwo++;
                        Kills.Add(XPUILabel($"<color=red>▫ </color> Hackable Crates:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".51", ".80", "1 1 1 1"), XPeriencePlayerProfileKills);
                        Kills.Add(XPUILabel($"|  <color={TextColor(player, "level", (int)GetKillRecords(getplayer, "hackablelockedcrate"))}>{GetKillRecords(getplayer, "hackablelockedcrate")}</color>", rowtwo, height, TextAnchor.MiddleLeft, 10, ".80", ".99", "1 1 1 1"), XPeriencePlayerProfileKills);
                    }
                    break;
                #endregion
                // Kill Records
                #region KillRecords
                case "killrecords":
                    Kills.Add(XPUIButton($"xp.playercontrol history main {otherplayer.userID}", 1, height, font, "0 0 0 1", "Main", ".01", ".20", TextAnchor.MiddleCenter, "1 1 1 1"), XPeriencePlayerProfileKills);
                    Kills.Add(XPUIButton($"xp.playercontrol history harvests {otherplayer.userID}", 1, height, font, "0 0 0 1", "Harvests", ".25", ".45", TextAnchor.MiddleCenter, "1 1 1 1"), XPeriencePlayerProfileKills);
                    if (KillRecords != null)
                    {
                        Kills.Add(XPUIButton($"xp.playercontrol history killrecords {otherplayer.userID}", 1, height, font, "0 0 0 1", "<color=#40ff00>〘</color> Kills / Deaths <color=#40ff00>〙</color>", ".50", ".75", TextAnchor.MiddleCenter, "1 1 1 1"), XPeriencePlayerProfileKills);
                    }
                    if (XPerienceAddon != null)
                    {
                        Kills.Add(XPUIButton($"xp.playercontrol history killlist {otherplayer.userID} 0 timestamp desc", 1, height, font, "0 0 0 1", "History", ".80", ".99", TextAnchor.MiddleCenter, "1 1 1 1"), XPeriencePlayerProfileKills);
                    }
                    // Kills
                    Kills.Add(XPUILabel($"◂════ ⋆ Kills ⋆ ════▸", row, height, TextAnchor.MiddleLeft, 12, ".01", ".50", "1 1 1 1"), XPeriencePlayerProfileKills);
                    row++;
                    Kills.Add(XPUILabel($"<color=red>▫ </color> Chickens:", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                    Kills.Add(XPUILabel($"|  <color={TextColor(player, "level", (int)GetKillRecords(getplayer, "chicken"))}>{GetKillRecords(getplayer, "chicken")}</color>", row, height, TextAnchor.MiddleLeft, 10, ".31", ".50", "1 1 1 1"), XPeriencePlayerProfileKills);
                    row++;
                    Kills.Add(XPUILabel($"<color=red>▫ </color> Boars:", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                    Kills.Add(XPUILabel($"|  <color={TextColor(player, "level", (int)GetKillRecords(getplayer, "boar"))}>{GetKillRecords(getplayer, "boar")}</color>", row, height, TextAnchor.MiddleLeft, 10, ".31", ".50", "1 1 1 1"), XPeriencePlayerProfileKills);
                    row++;
                    Kills.Add(XPUILabel($"<color=red>▫ </color> Stags:", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                    Kills.Add(XPUILabel($"|  <color={TextColor(player, "level", (int)GetKillRecords(getplayer, "stag"))}>{GetKillRecords(getplayer, "stag")}</color>", row, height, TextAnchor.MiddleLeft, 10, ".31", ".50", "1 1 1 1"), XPeriencePlayerProfileKills);
                    row++;
                    Kills.Add(XPUILabel($"<color=red>▫ </color> Wolves:", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                    Kills.Add(XPUILabel($"|  <color={TextColor(player, "level", (int)GetKillRecords(getplayer, "wolf"))}>{GetKillRecords(getplayer, "wolf")}</color>", row, height, TextAnchor.MiddleLeft, 10, ".31", ".50", "1 1 1 1"), XPeriencePlayerProfileKills);
                    row++;
                    Kills.Add(XPUILabel($"<color=red>▫ </color> Bears:", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                    Kills.Add(XPUILabel($"|  <color={TextColor(player, "level", (int)GetKillRecords(getplayer, "bear"))}>{GetKillRecords(getplayer, "bear")}</color>", row, height, TextAnchor.MiddleLeft, 10, ".31", ".50", "1 1 1 1"), XPeriencePlayerProfileKills);
                    row++;
                    Kills.Add(XPUILabel($"<color=red>▫ </color> Polar Bears:", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                    Kills.Add(XPUILabel($"|  <color={TextColor(player, "level", (int)GetKillRecords(getplayer, "polarbear"))}>{GetKillRecords(getplayer, "polarbear")}</color>", row, height, TextAnchor.MiddleLeft, 10, ".31", ".50", "1 1 1 1"), XPeriencePlayerProfileKills);
                    row++;
                    Kills.Add(XPUILabel($"<color=red>▫ </color> Sharks:", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                    Kills.Add(XPUILabel($"|  <color={TextColor(player, "level", (int)GetKillRecords(getplayer, "shark"))}>{GetKillRecords(getplayer, "shark")}</color>", row, height, TextAnchor.MiddleLeft, 10, ".31", ".50", "1 1 1 1"), XPeriencePlayerProfileKills);
                    row++;
                    Kills.Add(XPUILabel($"<color=red>▫ </color> Horses:", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                    Kills.Add(XPUILabel($"|  <color={TextColor(player, "level", (int)GetKillRecords(getplayer, "horse"))}>{GetKillRecords(getplayer, "horse")}</color>", row, height, TextAnchor.MiddleLeft, 10, ".31", ".50", "1 1 1 1"), XPeriencePlayerProfileKills);
                    row++;
                    Kills.Add(XPUILabel($"<color=red>▫ </color> Fish:", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                    Kills.Add(XPUILabel($"|  <color={TextColor(player, "level", (int)GetKillRecords(getplayer, "fish"))}>{GetKillRecords(getplayer, "fish")}</color>", row, height, TextAnchor.MiddleLeft, 10, ".31", ".50", "1 1 1 1"), XPeriencePlayerProfileKills);
                    row++;
                    Kills.Add(XPUILabel($"<color=red>▫ </color> Scientist:", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                    Kills.Add(XPUILabel($"|  <color={TextColor(player, "level", (int)GetKillRecords(getplayer, "scientistnpcnew"))}>{GetKillRecords(getplayer, "scientistnpcnew")}</color>", row, height, TextAnchor.MiddleLeft, 10, ".31", ".50", "1 1 1 1"), XPeriencePlayerProfileKills);
                    row++;
                    Kills.Add(XPUILabel($"<color=red>▫ </color> Scare Crow:", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                    Kills.Add(XPUILabel($"|  <color={TextColor(player, "level", (int)GetKillRecords(getplayer, "scarecrow"))}>{GetKillRecords(getplayer, "scarecrow")}</color>", row, height, TextAnchor.MiddleLeft, 10, ".31", ".50", "1 1 1 1"), XPeriencePlayerProfileKills);
                    row++;
                    Kills.Add(XPUILabel($"<color=red>▫ </color> Zombie:", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                    Kills.Add(XPUILabel($"|  <color={TextColor(player, "level", (int)GetKillRecords(getplayer, "zombie"))}>{GetKillRecords(getplayer, "zombie")}</color>", row, height, TextAnchor.MiddleLeft, 10, ".31", ".50", "1 1 1 1"), XPeriencePlayerProfileKills);
                    row++;
                    Kills.Add(XPUILabel($"<color=red>▫ </color> Dwellers:", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                    Kills.Add(XPUILabel($"|  <color={TextColor(player, "level", (int)GetKillRecords(getplayer, "tunneldweller"))}>{GetKillRecords(getplayer, "tunneldweller")}</color>", row, height, TextAnchor.MiddleLeft, 10, ".31", ".50", "1 1 1 1"), XPeriencePlayerProfileKills);
                    row++;
                    Kills.Add(XPUILabel($"<color=red>▫ </color> Players:", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                    Kills.Add(XPUILabel($"|  <color={TextColor(player, "level", (int)GetKillRecords(getplayer, "baseplayer"))}>{GetKillRecords(getplayer, "baseplayer")}</color>", row, height, TextAnchor.MiddleLeft, 10, ".31", ".50", "1 1 1 1"), XPeriencePlayerProfileKills);
                    row++;
                    Kills.Add(XPUILabel($"<color=red>▫ </color> Bradley APCs:", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                    Kills.Add(XPUILabel($"|  <color={TextColor(player, "level", (int)GetKillRecords(getplayer, "bradleyapc"))}>{GetKillRecords(getplayer, "bradleyapc")}</color>", row, height, TextAnchor.MiddleLeft, 10, ".31", ".50", "1 1 1 1"), XPeriencePlayerProfileKills);
                    row++;
                    Kills.Add(XPUILabel($"<color=red>▫ </color> Patrol Helicopters:", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                    Kills.Add(XPUILabel($"|  <color={TextColor(player, "level", (int)GetKillRecords(getplayer, "patrolhelicopter"))}>{GetKillRecords(getplayer, "patrolhelicopter")}</color>", row, height, TextAnchor.MiddleLeft, 10, ".31", ".50", "1 1 1 1"), XPeriencePlayerProfileKills);
                    row++;
                    Kills.Add(XPUILabel($"<color=red>▫ </color> Turret:", row, height, TextAnchor.MiddleLeft, 10, ".01", ".30", "1 1 1 1"), XPeriencePlayerProfileKills);
                    Kills.Add(XPUILabel($"|  <color={TextColor(player, "level", (int)GetKillRecords(getplayer, "turret"))}>{GetKillRecords(getplayer, "turret")}</color>", row, height, TextAnchor.MiddleLeft, 10, ".31", ".50", "1 1 1 1"), XPeriencePlayerProfileKills);
                    // Deaths
                    Kills.Add(XPUILabel($"◂════ ⋆ Deaths ⋆ ════▸", rowtwo, height, TextAnchor.MiddleLeft, 13, "0.51", "99", "1 1 1 1"), XPeriencePlayerProfileKills);
                    rowtwo++;
                    Kills.Add(XPUILabel($"<color=red>▫ </color> Deaths:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".51", ".80", "1 1 1 1"), XPeriencePlayerProfileKills);
                    Kills.Add(XPUILabel($"|  <color={TextColor(player, "level", (int)GetKillRecords(getplayer, "death"))}>{GetKillRecords(getplayer, "death")}</color>", rowtwo, height, TextAnchor.MiddleLeft, 10, ".80", ".99", "1 1 1 1"), XPeriencePlayerProfileKills);
                    rowtwo++;
                    Kills.Add(XPUILabel($"<color=red>▫ </color> Suicides:", rowtwo, height, TextAnchor.MiddleLeft, 10, ".51", ".80", "1 1 1 1"), XPeriencePlayerProfileKills);
                    Kills.Add(XPUILabel($"|  <color={TextColor(player, "level", (int)GetKillRecords(getplayer, "suicide"))}>{GetKillRecords(getplayer, "suicide")}</color>", rowtwo, height, TextAnchor.MiddleLeft, 10, ".80", ".99", "1 1 1 1"), XPeriencePlayerProfileKills);
                    break;
                #endregion
                // XPerience Addon Death Records
                #region DeathRecords
                case "killlist":
                    if (XPerienceAddon != null)
                    {
                        var deathrecords = XPerienceAddon?.Call("GetDeathCache");
                        var deathlist = JsonConvert.DeserializeObject<Dictionary<int, Deaths>>((string)deathrecords).OrderByDescending(i => i.Value.timestamp);
                        int total = 0;
                        switch (ordertype)
                        {
                            case "victim":
                                switch (order)
                                {
                                    case "asc":
                                        deathlist = JsonConvert.DeserializeObject<Dictionary<int, Deaths>>((string)deathrecords).OrderBy(i => i.Value.victim);
                                        order = "desc";
                                        break;
                                    case "desc":
                                        deathlist = JsonConvert.DeserializeObject<Dictionary<int, Deaths>>((string)deathrecords).OrderByDescending(i => i.Value.victim);
                                        order = "asc";
                                        break;
                                }
                                break;
                            case "attacker":
                                switch (order)
                                {
                                    case "asc":
                                        deathlist = JsonConvert.DeserializeObject<Dictionary<int, Deaths>>((string)deathrecords).OrderBy(i => i.Value.attacker);
                                        order = "desc";
                                        break;
                                    case "desc":
                                        deathlist = JsonConvert.DeserializeObject<Dictionary<int, Deaths>>((string)deathrecords).OrderByDescending(i => i.Value.attacker);
                                        order = "asc";
                                        break;
                                }
                                break;
                            case "weapon":
                                switch (order)
                                {
                                    case "asc":
                                        deathlist = JsonConvert.DeserializeObject<Dictionary<int, Deaths>>((string)deathrecords).OrderBy(i => i.Value.weapon);
                                        order = "desc";
                                        break;
                                    case "desc":
                                        deathlist = JsonConvert.DeserializeObject<Dictionary<int, Deaths>>((string)deathrecords).OrderByDescending(i => i.Value.weapon);
                                        order = "asc";
                                        break;
                                }
                                break;
                            case "lastdamage":
                                switch (order)
                                {
                                    case "asc":
                                        deathlist = JsonConvert.DeserializeObject<Dictionary<int, Deaths>>((string)deathrecords).OrderBy(i => i.Value.lastdamage);
                                        order = "desc";
                                        break;
                                    case "desc":
                                        deathlist = JsonConvert.DeserializeObject<Dictionary<int, Deaths>>((string)deathrecords).OrderByDescending(i => i.Value.lastdamage);
                                        order = "asc";
                                        break;
                                }
                                break;
                            case "distance":
                                switch (order)
                                {
                                    case "asc":
                                        deathlist = JsonConvert.DeserializeObject<Dictionary<int, Deaths>>((string)deathrecords).OrderBy(i => i.Value.distance);
                                        order = "desc";
                                        break;
                                    case "desc":
                                        deathlist = JsonConvert.DeserializeObject<Dictionary<int, Deaths>>((string)deathrecords).OrderByDescending(i => i.Value.distance);
                                        order = "asc";
                                        break;
                                }
                                break;
                            case "timestamp":
                                switch (order)
                                {
                                    case "asc":
                                        deathlist = JsonConvert.DeserializeObject<Dictionary<int, Deaths>>((string)deathrecords).OrderBy(i => i.Value.timestamp);
                                        order = "desc";
                                        break;
                                    case "desc":
                                        deathlist = JsonConvert.DeserializeObject<Dictionary<int, Deaths>>((string)deathrecords).OrderByDescending(i => i.Value.timestamp);
                                        order = "asc";
                                        break;
                                }
                                break;
                        }
                        Kills.Add(XPUIButton($"xp.playercontrol history main {otherplayer.userID}", 1, height, font, "0 0 0 1", "Main", ".01", ".20", TextAnchor.MiddleCenter, "1 1 1 1"), XPeriencePlayerProfileKills);
                        Kills.Add(XPUIButton($"xp.playercontrol history harvests {otherplayer.userID}", 1, height, font, "0 0 0 1", "Harvests", ".25", ".45", TextAnchor.MiddleCenter, "1 1 1 1"), XPeriencePlayerProfileKills);
                        if (KillRecords != null)
                        {
                            Kills.Add(XPUIButton($"xp.playercontrol history killrecords {otherplayer.userID}", 1, height, font, "0 0 0 1", "Kills / Deaths", ".50", ".75", TextAnchor.MiddleCenter, "1 1 1 1"), XPeriencePlayerProfileKills);
                        }
                        if (XPerienceAddon != null)
                        {
                            Kills.Add(XPUIButton($"xp.playercontrol history killlist {otherplayer.userID} 0 timestamp desc", 1, height, font, "0 0 0 1", "<color=#40ff00>〘</color> History <color=#40ff00>〙</color>", ".80", ".99", TextAnchor.MiddleCenter, "1 1 1 1"), XPeriencePlayerProfileKills);
                        }
                        Kills.Add(XPUIButton($"xp.playercontrol history killlist {otherplayer.userID} {page} victim {order}", 3, height, 11, "0 0 0 0", "Victim", ".01", ".23", TextAnchor.MiddleLeft, "1 1 1 1"), XPeriencePlayerProfileKills);
                        Kills.Add(XPUIButton($"xp.playercontrol history killlist {otherplayer.userID} {page} attacker {order}", 3, height, 11, "0 0 0 0", "Attacker", ".24", ".47", TextAnchor.MiddleLeft, "1 1 1 1"), XPeriencePlayerProfileKills);
                        Kills.Add(XPUIButton($"xp.playercontrol history killlist {otherplayer.userID} {page} weapon {order}", 3, height, 11, "0 0 0 0", "Weapon", ".48", ".68", TextAnchor.MiddleLeft, "1 1 1 1"), XPeriencePlayerProfileKills);
                        Kills.Add(XPUIButton($"xp.playercontrol history killlist {otherplayer.userID} {page} lastdamage {order}", 3, height, 11, "0 0 0 0", "Damage", ".69", ".79", TextAnchor.MiddleLeft, "1 1 1 1"), XPeriencePlayerProfileKills);
                        Kills.Add(XPUIButton($"xp.playercontrol history killlist {otherplayer.userID} {page} distance {order}", 3, height, 11, "0 0 0 0", "Range", ".80", ".88", TextAnchor.MiddleLeft, "1 1 1 1"), XPeriencePlayerProfileKills);
                        Kills.Add(XPUIButton($"xp.playercontrol history killlist {otherplayer.userID} {page} timestamp {order}", 3, height, 11, "0 0 0 0", "Time", ".89", ".99", TextAnchor.MiddleLeft, "1 1 1 1"), XPeriencePlayerProfileKills);
                        foreach (var deaths in deathlist)
                        {
                            if (deaths.Value.victim.ToString() == otherplayer.UserIDString || deaths.Value.attacker.ToString() == otherplayer.UserIDString)
                            {
                                // Victim
                                var victimname = deaths.Value.victimname;
                                var victim = FindPlayer(deaths.Value.victim.ToString());
                                if (victimname == null)
                                {
                                    victimname = deaths.Value.victim;
                                    if (deaths.Value.victim.IsSteamId())
                                    {
                                        if (victim != null)
                                        {
                                            victimname = victim.displayName;
                                        }
                                    }
                                }
                                // Attacker
                                var attackername = deaths.Value.attackername;
                                var attacker = FindPlayer(deaths.Value.attacker.ToString());
                                if (attackername == null)
                                {
                                    attackername = deaths.Value.attacker;
                                    if (deaths.Value.attacker.IsSteamId())
                                    {
                                        if (attacker != null)
                                        {
                                            attackername = attacker.displayName;
                                        }
                                    }
                                }
                                // Show Player Death Records
                                if (current >= page && current < page + 20)
                                {
                                    int pos = ((current + 3) - page);
                                    string color = "1 1 1 1";
                                    if (current % 2 == 0)
                                    {
                                        color = ".5 .5 .5 1";
                                    }
                                    var timestamp = ConvertUnixTimeStampToDateTime((int)deaths.Value.timestamp);
                                    string distance = $"{Math.Round(deaths.Value.distance)}m";
                                    if (Math.Round(deaths.Value.distance) < 1)
                                    {
                                        distance = "<1m";
                                    }
                                    Kills.Add(XPUILabel($"{current + 1}. {victimname}", pos + 1, height, TextAnchor.MiddleLeft, 10, ".01", ".23", $"{color}"), XPeriencePlayerProfileKills);
                                    Kills.Add(XPUILabel($"{attackername}", pos + 1, height, TextAnchor.MiddleLeft, 10, ".24", ".47", $"{color}"), XPeriencePlayerProfileKills);
                                    Kills.Add(XPUILabel($"{deaths.Value.weapon}", pos + 1, height, TextAnchor.MiddleLeft, 10, ".48", ".68", $"{color}"), XPeriencePlayerProfileKills);
                                    Kills.Add(XPUILabel($"{deaths.Value.lastdamage}", pos + 1, height, TextAnchor.MiddleLeft, 10, ".69", ".79", $"{color}"), XPeriencePlayerProfileKills);
                                    Kills.Add(XPUILabel($"{distance}", pos + 1, height, TextAnchor.MiddleLeft, 10, ".80", ".88", $"{color}"), XPeriencePlayerProfileKills);
                                    Kills.Add(XPUILabel($"{timestamp}", pos + 1, height, TextAnchor.MiddleLeft, 8, ".89", ".99", $"{color}"), XPeriencePlayerProfileKills);
                                }
                                current++;
                            }
                        }
                        int back = page <= 20 ? 0 : page - 20;
                        int next = page + 20 >= current ? page : page + 20;
                        switch (ordertype)
                        {
                            case "victim":
                                switch (order)
                                {
                                    case "asc":
                                        deathlist = JsonConvert.DeserializeObject<Dictionary<int, Deaths>>((string)deathrecords).OrderBy(i => i.Value.victim);
                                        order = "desc";
                                        break;
                                    case "desc":
                                        deathlist = JsonConvert.DeserializeObject<Dictionary<int, Deaths>>((string)deathrecords).OrderByDescending(i => i.Value.victim);
                                        order = "asc";
                                        break;
                                }
                                break;
                            case "attacker":
                                switch (order)
                                {
                                    case "asc":
                                        deathlist = JsonConvert.DeserializeObject<Dictionary<int, Deaths>>((string)deathrecords).OrderBy(i => i.Value.attacker);
                                        order = "desc";
                                        break;
                                    case "desc":
                                        deathlist = JsonConvert.DeserializeObject<Dictionary<int, Deaths>>((string)deathrecords).OrderByDescending(i => i.Value.attacker);
                                        order = "asc";
                                        break;
                                }
                                break;
                            case "weapon":
                                switch (order)
                                {
                                    case "asc":
                                        deathlist = JsonConvert.DeserializeObject<Dictionary<int, Deaths>>((string)deathrecords).OrderBy(i => i.Value.weapon);
                                        order = "desc";
                                        break;
                                    case "desc":
                                        deathlist = JsonConvert.DeserializeObject<Dictionary<int, Deaths>>((string)deathrecords).OrderByDescending(i => i.Value.weapon);
                                        order = "asc";
                                        break;
                                }
                                break;
                            case "lastdamage":
                                switch (order)
                                {
                                    case "asc":
                                        deathlist = JsonConvert.DeserializeObject<Dictionary<int, Deaths>>((string)deathrecords).OrderBy(i => i.Value.lastdamage);
                                        order = "desc";
                                        break;
                                    case "desc":
                                        deathlist = JsonConvert.DeserializeObject<Dictionary<int, Deaths>>((string)deathrecords).OrderByDescending(i => i.Value.lastdamage);
                                        order = "asc";
                                        break;
                                }
                                break;
                            case "distance":
                                switch (order)
                                {
                                    case "asc":
                                        deathlist = JsonConvert.DeserializeObject<Dictionary<int, Deaths>>((string)deathrecords).OrderBy(i => i.Value.distance);
                                        order = "desc";
                                        break;
                                    case "desc":
                                        deathlist = JsonConvert.DeserializeObject<Dictionary<int, Deaths>>((string)deathrecords).OrderByDescending(i => i.Value.distance);
                                        order = "asc";
                                        break;
                                }
                                break;
                            case "timestamp":
                                switch (order)
                                {
                                    case "asc":
                                        deathlist = JsonConvert.DeserializeObject<Dictionary<int, Deaths>>((string)deathrecords).OrderBy(i => i.Value.timestamp);
                                        order = "desc";
                                        break;
                                    case "desc":
                                        deathlist = JsonConvert.DeserializeObject<Dictionary<int, Deaths>>((string)deathrecords).OrderByDescending(i => i.Value.timestamp);
                                        order = "asc";
                                        break;
                                }
                                break;
                        }
                        foreach (var d in deathlist)
                        {
                            if (d.Value.victim.ToString() == otherplayer.UserIDString || d.Value.attacker.ToString() == otherplayer.UserIDString)
                            {
                                total++;
                            }
                        }
                        Kills.Add(XPUIPanel($"{config.playerprofilesettings.menuwidth + .005} 0", "1 .1", "0 0 0 0"), XPeriencePlayerProfile, XPeriencePlayerProfileKillsPages);
                        // Prev Page
                        if (page >= 1)
                        {
                            Kills.Add(XPUIButton($"xp.playercontrol history killlist {otherplayer.UserIDString} {back} {ordertype} {order}", 1, 1f, 25, "0 0 0 0", "⇧", ".20", ".30", TextAnchor.MiddleCenter, "1 1 0 1"), XPeriencePlayerProfileKillsPages);
                        }
                        // Next Page
                        if (page + 20 < total)
                        {
                            Kills.Add(XPUIButton($"xp.playercontrol history killlist {otherplayer.UserIDString} {next} {ordertype} {order}", 1, 1f, 25, "0 0 0 0", "⇩", ".70", ".80", TextAnchor.MiddleCenter, "1 1 0 1"), XPeriencePlayerProfileKillsPages);
                        }
                    }
                    break;
                    #endregion
            }
            CuiHelper.AddUi(player, Kills);
        }
        private void PlayerProfileRaids(BasePlayer player, int page = 0, BasePlayer otherplayer = null)
        {
            if (player == null) return;
            if (otherplayer == null) otherplayer = player;
            int current = 0;
            float height = 0.05f;
            int total = 0;
            string mode = "<color=#00FF00>Easy</color>";
            string pvp = "<color=#FF0000>[PVP]</color>";
            var image = XPerienceraideasy;
            // Page Title
            var Kills = new CuiElementContainer();
            // Page Contents
            Kills.Add(XPUIPanel($"{config.playerprofilesettings.menuwidth + .005} .1", ".99 .99", "0 0 0 0"), XPeriencePlayerProfile, XPeriencePlayerProfileRaids);
            var raidrecords = XPerienceAddon.Call("GetRaidCache");
            var raidlist = JsonConvert.DeserializeObject<Dictionary<int, Raids>>((string)raidrecords);
            Kills.Add(XPUILabel("Completed Raids", 1, height, TextAnchor.MiddleLeft, 12, ".01", ".99", "1 1 1 1"), XPeriencePlayerProfileRaids);
            foreach (var raids in raidlist)
            {
                foreach (var playerraids in raids.Value.raiders)
                {
                    if (otherplayer.userID == playerraids)
                    {
                        switch (raids.Value.mode)
                        {
                            case 0:
                                mode = "<color=#00FF00>Easy</color>";
                                image = XPerienceraideasy;
                                break;
                            case 1:
                                mode = "<color=#FFFF00>Medium</color>";
                                image = XPerienceraidmedium;
                                break;
                            case 2:
                                mode = "<color=#E38421>Hard</color>";
                                image = XPerienceraidhard;
                                break;
                            case 3:
                                mode = "<color=#FF0000>Expert</color>";
                                image = XPerienceraidexpert;
                                break;
                            case 4:
                                mode = "<color=#FF0000>Nightmare</color>";
                                image = XPerienceraidnightmare;
                                break;
                        }
                        if (!raids.Value.allowPVP)
                        {
                            pvp = "<color=#00FF00>[PVE]</color>";
                        }
                        // Show Player Death Records
                        if (current >= page && current < page + 10)
                        {
                            int pos = ((current + 2) - page);
                            var starttime = DateTime.Now - raids.Value.spawnDateTime;
                            var endtime = DateTime.Now - raids.Value.despawnDateTime;
                            int enddays = int.Parse(endtime.Days.ToString());
                            int endhours = int.Parse(endtime.Hours.ToString());
                            int endminutes = int.Parse(endtime.Minutes.ToString());
                            Kills.Add(XPUILabel($"{current + 1}. ", pos + 1, height, TextAnchor.MiddleLeft, 10, "0.01", "0.03", "1 1 1 1"), XPeriencePlayerProfileRaids);
                            Kills.Add(XPUIImage(XPeriencePlayerProfileRaids, image, pos + 1, height, "0.03", "0.06"));
                            Kills.Add(XPUILabel($"{mode} | {pvp}", pos + 1, height, TextAnchor.MiddleLeft, 10, "0.07", "0.20", "1 1 1 1"), XPeriencePlayerProfileRaids);
                            Kills.Add(XPUILabel($"Location: <color=yellow>[{PositionToGrid(raids.Value.Location)}]</color>  {raids.Value.Location}", pos + 1, height, TextAnchor.MiddleLeft, 10, "0.21", "0.54", "1 1 1 1"), XPeriencePlayerProfileRaids);
                            Kills.Add(XPUILabel($"Despawned: {enddays} Days, {endhours} Hours, {endminutes} Mins", pos + 1, height, TextAnchor.MiddleLeft, 10, "0.55", "0.99", "1 1 1 1"), XPeriencePlayerProfileRaids);
                        }
                        current++;
                        total++;
                    }
                }
            }
            int back = page <= 10 ? 0 : page - 10;
            int next = page + 10 >= current ? page : page + 10;
            Kills.Add(XPUIPanel($"{config.playerprofilesettings.menuwidth + .005} 0", "1 .1", "0 0 0 0"), XPeriencePlayerProfile, XPeriencePlayerProfileRaidsPages);
            // Prev Page
            if (page >= 1)
            {
                Kills.Add(XPUIButton($"xp.playercontrol raids {back} {otherplayer.userID}", 1, 1f, 25, "0 0 0 0", "⇧", ".20", ".30", TextAnchor.MiddleCenter, "1 1 0 1"), XPeriencePlayerProfileRaidsPages);
            }
            // Next Page
            if (page + 10 < total)
            {
                Kills.Add(XPUIButton($"xp.playercontrol raids {next} {otherplayer.userID}", 1, 1f, 25, "0 0 0 0", "⇩", ".70", ".80", TextAnchor.MiddleCenter, "1 1 0 1"), XPeriencePlayerProfileRaidsPages);
            }
            // UI End
            CuiHelper.AddUi(player, Kills);
        }
        private void PlayerTopList(BasePlayer player, int page, string selection, int number)
        {
            if (player == null) return;
            if (selection == null) { selection = "mentality"; }
            var TopList = new CuiElementContainer();
            var height = 0.045f;
            int maxplayers = config.defaultOptions.topplayersperpage;
            var vals = GetTopXP(page, maxplayers, selection);
            if (vals == null) { return; }
            var index = 0;
            int row = 1;
            int start = number;
            TopList.Add(XPUIPanel($"{config.playerprofilesettings.menuwidth + .005} .1", ".99 .99", "0 0 0 0"), XPeriencePlayerProfile, XPerienceTopInner);
            TopList.Add(XPUIButton($"xp.topplayers 1 levels {SelectedData("prev", selection, "top")} 0", row, height, 10, "0 0 0 0", $"<color=#40ff00><size=15>⇦</size></color>  {XPLang(SelectedData("prev", selection, "top").ToString(), player.UserIDString)}", ".01", ".2", TextAnchor.MiddleLeft, "1 1 1 1"), XPerienceTopInner);
            TopList.Add(XPUILabel($"◂════ ⋆ {XPLang("topplayers", player.UserIDString)}: 〘{XPLang(selection, player.UserIDString)}〙⋆ ════▸", row, height, TextAnchor.MiddleCenter, 13, ".2", ".8", "1 1 1 1"), XPerienceTopInner);
            TopList.Add(XPUIButton($"xp.topplayers 1 levels {SelectedData("next", selection, "top")} 0", row, height, 10, "0 0 0 0", $"{XPLang(SelectedData("next", selection, "top").ToString(), player.UserIDString)}  <color=#40ff00><size=15>⇨</size></color>", ".8", ".99", TextAnchor.MiddleRight, "1 1 1 1"), XPerienceTopInner);
            row++;
            row++;
            TopList.Add(XPUILabel("Player:", row, height, TextAnchor.MiddleLeft, 12, ".03", ".5", "1 1 1 1"), XPerienceTopInner);
            if (config.xpLevelRanks.enableresetranks)
            {
                TopList.Add(XPUILabel("Rank (#):", row, height, TextAnchor.MiddleLeft, 12, ".5", ".75", "1 1 1 1"), XPerienceTopInner);
            }
            TopList.Add(XPUILabel($"{XPLang(selection, player.UserIDString)}:", row, height, TextAnchor.MiddleRight, 12, ".75", ".95", "1 1 1 1"), XPerienceTopInner);
            row++;
            int totalrows = row + maxplayers;
            for (row = 4; row < totalrows; row++)
            {
                if (vals.ElementAtOrDefault(index) == null)
                {
                    continue;
                }
                var playerdata = vals.ElementAtOrDefault(index);
                if (playerdata == null) continue;
                Ranks rank = GetXPRank(playerdata.rank);
                var playerdatatype = playerdata.Mentality;
                switch (selection)
                {
                    case "rank":
                        playerdatatype = playerdata.rank;
                        break;
                    case "basiclevel":
                        playerdatatype = (int)playerdata.level;
                        break;
                    case "basicexperience":
                        playerdatatype = (int)playerdata.experience;
                        break;
                    case "level":
                        playerdatatype = (int)playerdata.truelevel;
                        break;
                    case "experience":
                        playerdatatype = (int)playerdata.trueexperience;
                        break;
                    case "mentality":
                        playerdatatype = playerdata.Mentality;
                        break;
                    case "dexterity":
                        playerdatatype = playerdata.Dexterity;
                        break;
                    case "might":
                        playerdatatype = playerdata.Might;
                        break;
                    case "captaincy":
                        playerdatatype = playerdata.Captaincy;
                        break;
                    case "weaponry":
                        playerdatatype = playerdata.Weaponry;
                        break;
                    case "ninjary":
                        playerdatatype = playerdata.Ninjary;
                        break;
                    case "woodcutter":
                        playerdatatype = playerdata.WoodCutter;
                        break;
                    case "smithy":
                        playerdatatype = playerdata.Smithy;
                        break;
                    case "miner":
                        playerdatatype = playerdata.Miner;
                        break;
                    case "forager":
                        playerdatatype = playerdata.Forager;
                        break;
                    case "hunter":
                        playerdatatype = playerdata.Hunter;
                        break;
                    case "fisher":
                        playerdatatype = playerdata.Fisher;
                        break;
                    case "crafter":
                        playerdatatype = playerdata.Crafter;
                        break;
                    case "framer":
                        playerdatatype = playerdata.Framer;
                        break;
                    case "medic":
                        playerdatatype = playerdata.Medic;
                        break;
                    case "scavenger":
                        playerdatatype = playerdata.Scavenger;
                        break;
                    case "electrician":
                        playerdatatype = playerdata.Electrician;
                        break;
                    case "demolitionist":
                        playerdatatype = playerdata.Demolitionist;
                        break;
                    case "tamer":
                        playerdatatype = playerdata.Tamer;
                        break;
                }
                if (playerdatatype > 0)
                {
                    number++;
                    if (row < maxplayers + 4)
                    {
                        if (playerdata.displayname == player.displayName)
                        {
                            TopList.Add(XPUILabel(("➤"), row, height, TextAnchor.MiddleLeft, 11, ".01", ".03", "1 .92 .016 1"), XPerienceTopInner);
                        }
                        else
                        {
                            if (config.defaultOptions.showonlinestatus)
                            {
                                if (playerdata.Status)
                                {
                                    TopList.Add(XPUIImage(XPerienceTopInner, XPerienceonline, row, height, ".01", ".03"));
                                }
                                else
                                {
                                    TopList.Add(XPUIImage(XPerienceTopInner, XPerienceoffline, row, height, ".01", ".03"));
                                }
                            }
                        }
                        if (FindPlayer(playerdata.id) != null)
                        {
                            TopList.Add(XPUIButton($"xp.playercontrol main stats {playerdata.id}", row, height, 11, "0 0 0 0", $"{number}. <color={TextColor(player, "rankname", playerdata.rank)}>{rank.sig}</color>{playerdata.displayname}", ".04", ".5"), XPerienceTopInner);
                        }
                        else
                        {
                            TopList.Add(XPUILabel($"{number}. <color={TextColor(player, "rankname", playerdata.rank)}>{rank.sig}</color>{playerdata.displayname}", row, height, TextAnchor.MiddleLeft, 11, ".04", ".5", ".5 .5 .5 1"), XPerienceTopInner);
                        }
                        if (config.xpLevelRanks.enableresetranks)
                        {
                            TopList.Add(XPUILabel($"<color={TextColor(player, "rankname", playerdata.rank)}>{rank.name}</color>", row, height, TextAnchor.MiddleLeft, 11, ".5", ".75", "1 1 1 1"), XPerienceTopInner);
                        }
                        TopList.Add(XPUILabel($"{String.Format("{0:N0}", playerdatatype)}", row, height, TextAnchor.MiddleRight, 11, ".75", ".95", "1 1 1 1"), XPerienceTopInner);
                    }
                }
                index++;
            }
            // Page Selection
            TopList.Add(XPUIPanel(".16 0", "1 .1", "0 0 0 0"), XPeriencePlayerProfile, XPerienceTopPageSelection);
            if (page > 1)
            {
                TopList.Add(XPUIButton($"xp.topplayers {page - 1} stats {selection} {start - maxplayers}", 1, 1f, 25, "0 0 0 0", "⇧", ".20", ".30", TextAnchor.MiddleCenter, "1 1 0 1"), XPerienceTopPageSelection);
            }
            int totalplayers = start + maxplayers;
            if (number >= totalplayers)
            {
                TopList.Add(XPUIButton($"xp.topplayers {page + 1} stats {selection} {number}", 1, 1f, 25, "0 0 0 0", "⇩", ".70", ".80", TextAnchor.MiddleCenter, "1 1 0 1"), XPerienceTopPageSelection);
            }
            CuiHelper.AddUi(player, TopList);
        }
        private void PlayerSettings(BasePlayer player)
        {
            if (player == null) return;
            #region Layout
            float height = 0.05f;
            int row = 2;
            string lableL = ".01";
            string lableR = ".30";
            string value1L = ".30";
            string value1R = ".35";
            string value2L = ".36";
            string value2R = ".40";
            string value3R = ".60";
            #endregion
            XPRecord xprecord = GetXPRecord(player);
            var Settings = new CuiElementContainer();
            Settings.Add(XPUIPanel($"{config.playerprofilesettings.menuwidth + .005} .01", ".99 .99", "0 0 0 0.50"), XPeriencePlayerProfile, XPeriencePlayerProfileSettings);
            Settings.Add(XPUILabel($"◂════ ⋆ {XPLang("playersettings", player.UserIDString)} ⋆ ════▸", row, height, TextAnchor.MiddleCenter, 10, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerProfileSettings);
            row++;
            // Live UI Location Selection
            #region LiveUI
            if (config.defaultOptions.liveuistatslocationmoveable)
            {
                Settings.Add(XPUILabel($"{XPLang("liveuiselection", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 10, lableL, lableR, "1 1 1 1"), XPeriencePlayerProfileSettings);
                // UI Off
                Settings.Add(XPUIButton($"xp.playeredits settings liveui 0", row, height, 10, "0 0 0 0", "off", "0.26", "0.29", TextAnchor.MiddleCenter, $"{LiveUISelection("UI0", xprecord.UILocation)}"), XPeriencePlayerProfileSettings);
                // UI 1
                Settings.Add(XPUIButton($"xp.playeredits settings liveui 1", row, height, 10, "0 0 0 0", "1", "0.30", "0.31", TextAnchor.MiddleCenter, $"{LiveUISelection("UI1", xprecord.UILocation)}"), XPeriencePlayerProfileSettings);
                // UI 2
                Settings.Add(XPUIButton($"xp.playeredits settings liveui 2", row, height, 10, "0 0 0 0", "2", "0.32", "0.33", TextAnchor.MiddleCenter, $"{LiveUISelection("UI2", xprecord.UILocation)}"), XPeriencePlayerProfileSettings);
                // UI 3
                Settings.Add(XPUIButton($"xp.playeredits settings liveui 3", row, height, 10, "0 0 0 0", "3", "0.34", "0.35", TextAnchor.MiddleCenter, $"{LiveUISelection("UI3", xprecord.UILocation)}"), XPeriencePlayerProfileSettings);
                // UI 4
                Settings.Add(XPUIButton($"xp.playeredits settings liveui 4", row, height, 10, "0 0 0 0", "4", "0.36", "0.37", TextAnchor.MiddleCenter, $"{LiveUISelection("UI4", xprecord.UILocation)}"), XPeriencePlayerProfileSettings);
                // UI 5
                Settings.Add(XPUIButton($"xp.playeredits settings liveui 5", row, height, 10, "0 0 0 0", "5", "0.38", "0.39", TextAnchor.MiddleCenter, $"{LiveUISelection("UI5", xprecord.UILocation)}"), XPeriencePlayerProfileSettings);
                row++;
            }
            #endregion
            // Dash Panel
            #region DashPanel
            if (config.defaultOptions.enabledashpanel)
            {
                // Enable DashPanel
                Settings.Add(XPUILabel($"Enable Dash Panel:", row, height, TextAnchor.MiddleLeft, 10, lableL, lableR, "1 1 1 1"), XPeriencePlayerProfileSettings);
                // Yes
                Settings.Add(XPUIButton($"xp.playeredits settings enabledash 1", row, height, 10, "0 0 0 0", "Yes", value1L, value1R, TextAnchor.MiddleCenter, $"{DashSelection(1, xprecord.dash)}"), XPeriencePlayerProfileSettings);
                // No
                Settings.Add(XPUIButton($"xp.playeredits settings enabledash 0", row, height, 10, "0 0 0 0", "No", value2L, value2R, TextAnchor.MiddleCenter, $"{DashSelection(0, xprecord.dash)}"), XPeriencePlayerProfileSettings);
                row++;
                if (xprecord.dash == 1)
                {
                    // Speedometer Type
                    Settings.Add(XPUILabel($"{XPLang("playerspeedometertype", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 10, lableL, lableR, "1 1 1 1"), XPeriencePlayerProfileSettings);
                    // MPH
                    Settings.Add(XPUIButton($"xp.playeredits settings speedometertype 1", row, height, 10, "0 0 0 0", "MPH", value1L, value1R, TextAnchor.MiddleCenter, $"{DashSelection(1, xprecord.speedometertype)}"), XPeriencePlayerProfileSettings);
                    // KMH
                    Settings.Add(XPUIButton($"xp.playeredits settings speedometertype 2", row, height, 10, "0 0 0 0", "KMH", value2L, value2R, TextAnchor.MiddleCenter, $"{DashSelection(2, xprecord.speedometertype)}"), XPeriencePlayerProfileSettings);
                    row++;
                }
            }
            #endregion
            // Ranks
            if (config.xpLevelRanks.enableresetranks && config.xpLevelRanks.allowplayerdisable)
            {
                // Auto Ranks
                Settings.Add(XPUILabel($"{XPLang("playerautoranks", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 10, lableL, lableR, "1 1 1 1"), XPeriencePlayerProfileSettings);
                // Yes
                Settings.Add(XPUIButton($"xp.playeredits settings disableranks false", row, height, 10, "0 0 0 0", "Yes", value1L, value1R, TextAnchor.MiddleCenter, $"{DisableRankSelection("No", xprecord.DisableRank)}"), XPeriencePlayerProfileSettings);
                // No
                Settings.Add(XPUIButton($"xp.playeredits settings disableranks true", row, height, 10, "0 0 0 0", "No", value2L, value2R, TextAnchor.MiddleCenter, $"{DisableRankSelection("Yes", xprecord.DisableRank)}"), XPeriencePlayerProfileSettings);
                row++;
            }
            // Prompt Box
            if (config.defaultOptions.enableconfirmationprompt)
            {
                // Disable Prompt
                Settings.Add(XPUILabel($"{XPLang("playerconfirmationprompt", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 10, lableL, lableR, "1 1 1 1"), XPeriencePlayerProfileSettings);
                // Yes
                Settings.Add(XPUIButton($"xp.playeredits settings prompt true", row, height, 10, "0 0 0 0", "Yes", value1L, value1R, TextAnchor.MiddleCenter, $"{DisableSelection("Yes", xprecord.enableconfirmationprompt)}"), XPeriencePlayerProfileSettings);
                // No
                Settings.Add(XPUIButton($"xp.playeredits settings prompt false", row, height, 10, "0 0 0 0", "No", value2L, value2R, TextAnchor.MiddleCenter, $"{DisableSelection("No", xprecord.enableconfirmationprompt)}"), XPeriencePlayerProfileSettings);
                row++;
            }
            // Chat Notify
            if (config.defaultOptions.showchatnotifications)
            {
                // Disable Chat Notify
                Settings.Add(XPUILabel($"Show Chat Notifications:", row, height, TextAnchor.MiddleLeft, 10, lableL, lableR, "1 1 1 1"), XPeriencePlayerProfileSettings);
                // Yes
                Settings.Add(XPUIButton($"xp.playeredits settings chatnotify true", row, height, 10, "0 0 0 0", "Yes", value1L, value1R, TextAnchor.MiddleCenter, $"{DisableSelection("Yes", xprecord.showchatnotifications)}"), XPeriencePlayerProfileSettings);
                // No
                Settings.Add(XPUIButton($"xp.playeredits settings chatnotify false", row, height, 10, "0 0 0 0", "No", value2L, value2R, TextAnchor.MiddleCenter, $"{DisableSelection("No", xprecord.showchatnotifications)}"), XPeriencePlayerProfileSettings);
                row++;
            }
            // Chat profile
            if (config.defaultOptions.showchatprofileonconnect)
            {
                // Disable Chat Profile
                Settings.Add(XPUILabel($"Show Stats In Chat:", row, height, TextAnchor.MiddleLeft, 10, lableL, lableR, "1 1 1 1"), XPeriencePlayerProfileSettings);
                // Yes
                Settings.Add(XPUIButton($"xp.playeredits settings chatprofile true", row, height, 10, "0 0 0 0", "Yes", value1L, value1R, TextAnchor.MiddleCenter, $"{DisableSelection("Yes", xprecord.showchatprofileonconnect)}"), XPeriencePlayerProfileSettings);
                // No
                Settings.Add(XPUIButton($"xp.playeredits settings chatprofile false", row, height, 10, "0 0 0 0", "No", value2L, value2R, TextAnchor.MiddleCenter, $"{DisableSelection("No", xprecord.showchatprofileonconnect)}"), XPeriencePlayerProfileSettings);
                row++;
            }
            // Chat XP
            Settings.Add(XPUILabel($"Show XP Gain in Chat:", row, height, TextAnchor.MiddleLeft, 10, lableL, lableR, "1 1 1 1"), XPeriencePlayerProfileSettings);
            // Yes
            Settings.Add(XPUIButton($"xp.playeredits settings xpchat true", row, height, 10, "0 0 0 0", "Yes", value1L, value1R, TextAnchor.MiddleCenter, $"{DisableSelection("Yes", xprecord.showchatxp)}"), XPeriencePlayerProfileSettings);
            // No
            Settings.Add(XPUIButton($"xp.playeredits settings xpchat false", row, height, 10, "0 0 0 0", "No", value2L, value2R, TextAnchor.MiddleCenter, $"{DisableSelection("No", xprecord.showchatxp)}"), XPeriencePlayerProfileSettings);
            row++;
            // Addon Features
            if (XPerienceAddon != null)
            {
                // Welcome Panel
                if (config.playerprofilesettings.profilemenuwelcome)
                {
                    Settings.Add(XPUILabel($"{XPLang("showaddonwelcome", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 11, lableL, lableR, "1 1 1 1"), XPeriencePlayerProfileSettings);
                    // Yes
                    Settings.Add(XPUIButton($"xp.playeredits settings welcomepanel true", row, height, 10, "0 0 0 0", "Yes", value1L, value1R, TextAnchor.MiddleCenter, $"{DisableSelection("Yes", xprecord.showwelcomepanel)}"), XPeriencePlayerProfileSettings);
                    // No
                    Settings.Add(XPUIButton($"xp.playeredits settings welcomepanel false", row, height, 10, "0 0 0 0", "No", value2L, value2R, TextAnchor.MiddleCenter, $"{DisableSelection("No", xprecord.showwelcomepanel)}"), XPeriencePlayerProfileSettings);
                    row++;
                }
                // Damager Bar Selection
                Settings.Add(XPUILabel($"{XPLang("dmgbarskin", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 10, lableL, lableR, "1 1 1 1"), XPeriencePlayerProfileSettings);
                Settings.Add(XPUIButton($"xp.playercontrol opendmgskins", row, height, 10, "0 0 0 0", "〘 Open Skin Selection 〙", value1L, value3R, TextAnchor.MiddleLeft, "0 1 0 1"), XPeriencePlayerProfileSettings);
                row++;
            }
            // Profile Background
            if (config.playerprofilesettings.allowprofilebgchange)
            {
                Settings.Add(XPUILabel($"{XPLang("profilebg", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 10, lableL, lableR, "1 1 1 1"), XPeriencePlayerProfileSettings);
                Settings.Add(XPUIButton($"xp.playercontrol openbgoptions", row, height, 10, "0 0 0 0", "〘 Open BG Selection 〙", value1L, value3R, TextAnchor.MiddleLeft, "0 1 0 1"), XPeriencePlayerProfileSettings);
                row++;
            }
            // Fix Data Button
            #region FixData
            DateTime resettimedata = xprecord.playerfixdata.AddMinutes(config.defaultOptions.playerfixdatatimer);
            TimeSpan datainterval = resettimedata - DateTime.Now;
            int datatimer = (int)datainterval.TotalMinutes;
            var button = $"{XPLang("playerfixdatabutton", player.UserIDString)}";
            if (!config.defaultOptions.restristresets || config.defaultOptions.bypassadminreset && player.IsAdmin && permission.UserHasPermission(player.UserIDString, XPerience.Admin))
            {
                datatimer = 0;
            }
            if (datatimer > 0)
            {
                button = $"{XPLang("resettimerdata", player.UserIDString, datatimer)}";
            }
            if (!config.defaultOptions.disableplayerfixdata || (config.defaultOptions.disableplayerfixdata && config.defaultOptions.bypassadminreset && player.IsAdmin && permission.UserHasPermission(player.UserIDString, XPerience.Admin)))
            {
                row++;
                row++;
                Settings.Add(XPUIButton("xp.playercontrol fix", row, height, 10, "0.5 0.0 0.0 0.7", $"〖 {button} 〗", ".01", ".21", TextAnchor.MiddleCenter), XPeriencePlayerProfileSettings);
            }
            #endregion
            CuiHelper.AddUi(player, Settings);
        }
        private void PlayerHelp(BasePlayer player, string data = "main", string type = "stats")
        {
            if (player == null) return;
            float iconheight = 0.20f;
            float iconimgheight = 0.10f;
            double iconstats = IconAdjustment(.30, "stats");
            double iconskills = IconAdjustment(.05, "skills");
            float labelheight = 0.11f;
            float height = 0.05f;
            var PlayerProfile = new CuiElementContainer();
            if (data == "main")
            {
                PlayerProfile.Add(XPUIPanel($"{config.playerprofilesettings.menuwidth + .005} .05", ".99 1", "0 0 0 .25"), XPeriencePlayerProfile, XPeriencePlayerProfileHelp);
                PlayerProfile.Add(XPUILabel($"{XPLang("xphelpnew", player.UserIDString, config.playerchatCommands.openplayerstats, config.playerchatCommands.showplayerstatschat, config.playerchatCommands.opentopplayers, config.playerchatCommands.playeraddstat, config.playerchatCommands.playeraddskill, config.playerchatCommands.playerresetstats, config.playerchatCommands.playerresetskills, config.playerchatCommands.playerliveuichange)}", 1, .5f, TextAnchor.MiddleLeft, 12, ".01", ".99", "1 1 1 1"), XPeriencePlayerProfileHelp);
                PlayerProfile.Add(XPUILabel($"{XPLang("bindkey", player.UserIDString, config.playerchatCommands.openplayerstats)}", 2, .5f, TextAnchor.MiddleLeft, 12, ".01", ".99", "1 1 1 1"), XPeriencePlayerProfileHelp);
                PlayerProfile.Add(XPUIPanel($"{config.playerprofilesettings.menuwidth + .005} 0", ".99 .05", "0 0 0 .25"), XPeriencePlayerProfile, XPeriencePlayerProfileHelpPages);
                PlayerProfile.Add(XPUIButton($"xp.playercontrol help ui", 1, 1f, 13, "0 0 0 0", "Next Page  ⇨", ".75", ".99", TextAnchor.MiddleRight, "1 1 0 1"), XPeriencePlayerProfileHelpPages);
            }
            else if (data == "ui")
            {
                PlayerProfile.Add(XPUIPanel($"{config.playerprofilesettings.menuwidth + .005} .05", ".99 1", "0 0 0 .25"), XPeriencePlayerProfile, XPeriencePlayerProfileHelp);
                PlayerProfile.Add(XPUILabel($"{XPLang("uihelp", player.UserIDString, config.playerchatCommands.openplayerstats)}", 1, 1f, TextAnchor.MiddleLeft, 10, ".01", ".99", "1 1 1 1"), XPeriencePlayerProfileHelp);
                PlayerProfile.Add(XPUIPanel($"{config.playerprofilesettings.menuwidth + .005} 0", ".99 .05", "0 0 0 .25"), XPeriencePlayerProfile, XPeriencePlayerProfileHelpPages);
                PlayerProfile.Add(XPUIButton($"xp.playercontrol help main", 1, 1f, 13, "0 0 0 0", "⇦  Prev Page", ".01", ".25", TextAnchor.MiddleLeft, "1 1 0 1"), XPeriencePlayerProfileHelpPages);
            }
            else
            {
                if (config.playerprofilesettings.menutype == 1)
                {
                    PlayerProfile.Add(XPUIPanel($"{config.playerprofilesettings.menuwidth + .005} .904", ".99 1", "0 0 0 0"), XPeriencePlayerProfile, XPeriencePlayerProfileStatsAndSkillsMenu);
                    switch (type)
                    {
                        case "stats":
                            if (config.mentality.maxlvl > 0)
                            {
                                PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkillsMenu, XPeriencementality, 1, 1f, $"{iconstats}", $"{iconstats + .05}"));
                                PlayerProfile.Add(XPUIButton($"xp.playercontrol help mentality stats", 1, 1f, 22, "0 0 0 0", "", $"{iconstats}", $"{iconstats + .05}", TextAnchor.MiddleLeft, "0 0 0 0"), XPeriencePlayerProfileStatsAndSkillsMenu);
                                iconstats += .07;
                            }
                            if (config.dexterity.maxlvl > 0)
                            {
                                PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkillsMenu, XPeriencedexterity, 1, 1f, $"{iconstats}", $"{iconstats + .05}"));
                                PlayerProfile.Add(XPUIButton($"xp.playercontrol help dexterity stats", 1, 1f, 22, "0 0 0 0", "", $"{iconstats}", $"{iconstats + .05}", TextAnchor.MiddleLeft, "0 0 0 0"), XPeriencePlayerProfileStatsAndSkillsMenu);
                                iconstats += .07;
                            }
                            if (config.might.maxlvl > 0)
                            {
                                PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkillsMenu, XPeriencemight, 1, 1f, $"{iconstats}", $"{iconstats + .05}"));
                                PlayerProfile.Add(XPUIButton($"xp.playercontrol help might stats", 1, 1f, 22, "0 0 0 0", "", $"{iconstats}", $"{iconstats + .05}", TextAnchor.MiddleLeft, "0 0 0 0"), XPeriencePlayerProfileStatsAndSkillsMenu);
                                iconstats += .07;
                            }
                            if (config.weaponry.maxlvl > 0)
                            {
                                PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkillsMenu, XPerienceweaponry, 1, 1f, $"{iconstats}", $"{iconstats + .05}"));
                                PlayerProfile.Add(XPUIButton($"xp.playercontrol help weaponry stats", 1, 1f, 22, "0 0 0 0", "", $"{iconstats}", $"{iconstats + .05}", TextAnchor.MiddleLeft, "0 0 0 0"), XPeriencePlayerProfileStatsAndSkillsMenu);
                                iconstats += .07;
                            }
                            if (config.ninjary.maxlvl > 0)
                            {
                                PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkillsMenu, XPerienceninjary, 1, 1f, $"{iconstats}", $"{iconstats + .05}"));
                                PlayerProfile.Add(XPUIButton($"xp.playercontrol help ninjary stats", 1, 1f, 22, "0 0 0 0", "", $"{iconstats}", $"{iconstats + .05}", TextAnchor.MiddleLeft, "0 0 0 0"), XPeriencePlayerProfileStatsAndSkillsMenu);
                                iconstats += .07;
                            }
                            if (config.captaincy.maxlvl > 0)
                            {
                                PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkillsMenu, XPeriencecaptaincy, 1, 1f, $"{iconstats}", $"{iconstats + .05}"));
                                PlayerProfile.Add(XPUIButton($"xp.playercontrol help captaincy stats", 1, 1f, 22, "0 0 0 0", "", $"{iconstats}", $"{iconstats + .05}", TextAnchor.MiddleLeft, "0 0 0 0"), XPeriencePlayerProfileStatsAndSkillsMenu);
                            }
                            break;
                        case "skills":
                            if (config.woodcutter.maxlvl > 0)
                            {
                                PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkillsMenu, XPeriencewoodcutter, 1, 1f, $"{iconskills}", $"{iconskills + .05}"));
                                PlayerProfile.Add(XPUIButton($"xp.playercontrol help woodcutter skills", 1, 1f, 22, "0 0 0 0", "", $"{iconskills}", $"{iconskills + .05}", TextAnchor.MiddleLeft, "0 0 0 0"), XPeriencePlayerProfileStatsAndSkillsMenu);
                                iconskills += .07;
                            }
                            if (config.smithy.maxlvl > 0)
                            {
                                PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkillsMenu, XPeriencesmithy, 1, 1f, $"{iconskills}", $"{iconskills + .05}"));
                                PlayerProfile.Add(XPUIButton($"xp.playercontrol help smithy skills", 1, 1f, 22, "0 0 0 0", "", $"{iconskills}", $"{iconskills + .05}", TextAnchor.MiddleLeft, "0 0 0 0"), XPeriencePlayerProfileStatsAndSkillsMenu);
                                iconskills += .07;
                            }
                            if (config.miner.maxlvl > 0)
                            {
                                PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkillsMenu, XPerienceminer, 1, 1f, $"{iconskills}", $"{iconskills + .05}"));
                                PlayerProfile.Add(XPUIButton($"xp.playercontrol help miner skills", 1, 1f, 22, "0 0 0 0", "", $"{iconskills}", $"{iconskills + .05}", TextAnchor.MiddleLeft, "0 0 0 0"), XPeriencePlayerProfileStatsAndSkillsMenu);
                                iconskills += .07;
                            }
                            if (config.forager.maxlvl > 0)
                            {
                                PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkillsMenu, XPerienceforager, 1, 1f, $"{iconskills}", $"{iconskills + .05}"));
                                PlayerProfile.Add(XPUIButton($"xp.playercontrol help forager skills", 1, 1f, 22, "0 0 0 0", "", $"{iconskills}", $"{iconskills + .05}", TextAnchor.MiddleLeft, "0 0 0 0"), XPeriencePlayerProfileStatsAndSkillsMenu);
                                iconskills += .07;
                            }
                            if (config.hunter.maxlvl > 0)
                            {
                                PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkillsMenu, XPeriencehunter, 1, 1f, $"{iconskills}", $"{iconskills + .05}"));
                                PlayerProfile.Add(XPUIButton($"xp.playercontrol help hunter skills", 1, 1f, 22, "0 0 0 0", "", $"{iconskills}", $"{iconskills + .05}", TextAnchor.MiddleLeft, "0 0 0 0"), XPeriencePlayerProfileStatsAndSkillsMenu);
                                iconskills += .07;
                            }
                            if (config.crafter.maxlvl > 0)
                            {
                                PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkillsMenu, XPeriencecrafter, 1, 1f, $"{iconskills}", $"{iconskills + .05}"));
                                PlayerProfile.Add(XPUIButton($"xp.playercontrol help crafter skills", 1, 1f, 22, "0 0 0 0", "", $"{iconskills}", $"{iconskills + .05}", TextAnchor.MiddleLeft, "0 0 0 0"), XPeriencePlayerProfileStatsAndSkillsMenu);
                                iconskills += .07;
                            }
                            if (config.framer.maxlvl > 0)
                            {
                                PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkillsMenu, XPerienceframer, 1, 1f, $"{iconskills}", $"{iconskills + .05}"));
                                PlayerProfile.Add(XPUIButton($"xp.playercontrol help framer skills", 1, 1f, 22, "0 0 0 0", "", $"{iconskills}", $"{iconskills + .05}", TextAnchor.MiddleLeft, "0 0 0 0"), XPeriencePlayerProfileStatsAndSkillsMenu);
                                iconskills += .07;
                            }
                            if (config.fisher.maxlvl > 0)
                            {
                                PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkillsMenu, XPeriencefisher, 1, 1f, $"{iconskills}", $"{iconskills + .05}"));
                                PlayerProfile.Add(XPUIButton($"xp.playercontrol help fisher skills", 1, 1f, 22, "0 0 0 0", "", $"{iconskills}", $"{iconskills + .05}", TextAnchor.MiddleLeft, "0 0 0 0"), XPeriencePlayerProfileStatsAndSkillsMenu);
                                iconskills += .07;
                            }
                            if (config.medic.maxlvl > 0)
                            {
                                PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkillsMenu, XPeriencemedic, 1, 1f, $"{iconskills}", $"{iconskills + .05}"));
                                PlayerProfile.Add(XPUIButton($"xp.playercontrol help medic skills", 1, 1f, 22, "0 0 0 0", "", $"{iconskills}", $"{iconskills + .05}", TextAnchor.MiddleLeft, "0 0 0 0"), XPeriencePlayerProfileStatsAndSkillsMenu);
                                iconskills += .07;
                            }
                            if (config.scavenger.maxlvl > 0)
                            {
                                PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkillsMenu, XPeriencescavenger, 1, 1f, $"{iconskills}", $"{iconskills + .05}"));
                                PlayerProfile.Add(XPUIButton($"xp.playercontrol help scavenger skills", 1, 1f, 22, "0 0 0 0", "", $"{iconskills}", $"{iconskills + .05}", TextAnchor.MiddleLeft, "0 0 0 0"), XPeriencePlayerProfileStatsAndSkillsMenu);
                                iconskills += .07;
                            }
                            if (config.electrician.maxlvl > 0)
                            {
                                PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkillsMenu, XPerienceelectrician, 1, 1f, $"{iconskills}", $"{iconskills + .05}"));
                                PlayerProfile.Add(XPUIButton($"xp.playercontrol help electrician skills", 1, 1f, 22, "0 0 0 0", "", $"{iconskills}", $"{iconskills + .05}", TextAnchor.MiddleLeft, "0 0 0 0"), XPeriencePlayerProfileStatsAndSkillsMenu);
                                iconskills += .07;
                            }
                            if (config.demolitionist.maxlvl > 0)
                            {
                                PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkillsMenu, XPeriencedemolitionist, 1, 1f, $"{iconskills}", $"{iconskills + .05}"));
                                PlayerProfile.Add(XPUIButton($"xp.playercontrol help demolitionist skills", 1, 1f, 22, "0 0 0 0", "", $"{iconskills}", $"{iconskills + .05}", TextAnchor.MiddleLeft, "0 0 0 0"), XPeriencePlayerProfileStatsAndSkillsMenu);
                                iconskills += .07;
                            }
                            if (config.tamer.enabletame && (PersonalAnimal != null))
                            {
                                PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileStatsAndSkillsMenu, XPeriencetamer, 1, 1f, $"{iconskills}", $"{iconskills + .05}"));
                                PlayerProfile.Add(XPUIButton($"xp.playercontrol help tamer skills", 1, 1f, 22, "0 0 0 0", "", $"{iconskills}", $"{iconskills + .05}", TextAnchor.MiddleLeft, "0 0 0 0"), XPeriencePlayerProfileStatsAndSkillsMenu);
                            }
                            break;
                    }
                    PlayerProfile.Add(XPUIPanel($"{config.playerprofilesettings.menuwidth + .005} .01", ".99 .92", "0 0 0 .5"), XPeriencePlayerProfile, XPeriencePlayerProfileHelp);
                }
                if (config.playerprofilesettings.menutype == 2)
                {
                    PlayerProfile.Add(XPUIPanel($"{config.playerprofilesettings.menuwidth + .005} .01", ".99 .99", "0 0 0 .5"), XPeriencePlayerProfile, XPeriencePlayerProfileHelp);
                    PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileHelp, SelectedIcon("prev", data), 1, iconimgheight, "0.05", "0.1"));
                    PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileHelp, SelectedIcon("next", data), 1, iconimgheight, "0.9", "0.95"));
                    PlayerProfile.Add(XPUIButton($"xp.playercontrol help {SelectedData("prev", data)} {type}", 1, iconimgheight, 22, "0 0 0 0", "⇦", ".01", ".1", TextAnchor.MiddleLeft, "0 1 0 1"), XPeriencePlayerProfileHelp);
                    PlayerProfile.Add(XPUIButton($"xp.playercontrol help {SelectedData("next", data)} {type}", 1, iconimgheight, 22, "0 0 0 0", "⇨", ".9", ".99", TextAnchor.MiddleRight, "0 1 0 1"), XPeriencePlayerProfileHelp);
                    PlayerProfile.Add(XPUIButton($"xp.playercontrol help {SelectedData("prev", data)} {type}", 3, height, 8, "0 0 0 0", $"({XPLang($"{SelectedData("prev", data.ToLower())}", player.UserIDString)})", ".01", ".12", TextAnchor.UpperCenter, "1 1 1 .25"), XPeriencePlayerProfileHelp); ;
                    PlayerProfile.Add(XPUIButton($"xp.playercontrol help {SelectedData("next", data)} {type}", 3, height, 8, "0 0 0 0", $"({XPLang($"{SelectedData("next", data.ToLower())}", player.UserIDString)})", ".88", ".99", TextAnchor.UpperCenter, "1 1 1 .25"), XPeriencePlayerProfileHelp);
                }
                // Page Info
                PlayerProfile.Add(XPUIImage(XPeriencePlayerProfileHelp, $"XPerience{data.ToLower()}", 1, iconheight, "0.45", "0.55"));
                PlayerProfile.Add(XPUIButton($"xp.playercontrol data {data} {type}", 2, labelheight, 18, "0 0 0 0", $"{XPLang($"{data.ToLower()}", player.UserIDString)}", ".01", ".99", TextAnchor.LowerCenter, "1 1 1 1"), XPeriencePlayerProfileHelp);
                PlayerProfile.Add(XPUIPanel(".01 .01", ".99 .75", "0 0 0 .25"), XPeriencePlayerProfileHelp, "about");
                PlayerProfile.Add(XPUILabel($"{XPLang($"about{data.ToLower()}", player.UserIDString)}", 1, 1f, TextAnchor.UpperLeft, 12, "0", "1", "1 1 1 1"), "about");
            }
            CuiHelper.AddUi(player, PlayerProfile);
        }
        private void PlayerCalculationPageLevels(BasePlayer player, int page = 0, int rank = 0)
        {
            var PlayerProfile = new CuiElementContainer();
            #region Layout
            var height = 0.045f;
            int row = 1;
            int current = 0;
            var ranklable = "";
            int count = 20;
            if (config.xpLevelRanks.enableresetranks && config.xpLevelRanks.increaselevelmultiplier)
            {
                ranklable = $"Rank = {rank}";
            }
            #endregion
            PlayerProfile.Add(XPUIPanel($"{config.playerprofilesettings.menuwidth + .005} .09", ".99 1", "0 0 0 .25"), XPeriencePlayerProfile, XPeriencePlayerCalculations);
            PlayerProfile.Add(XPUILabel($"{XPLang("calculationstitle", player.UserIDString)}", row, height, TextAnchor.MiddleLeft, 15, "0.01", "1", "1 1 1 1"), XPeriencePlayerCalculations);
            row++;
            row++;
            PlayerProfile.Add(XPUIButton($"xp.playercontrol calculationslevels 0 0", row, height, 12, "0 0 0 1", "Levels", "0.02", "0.22", TextAnchor.MiddleCenter, "0 1 0 1"), XPeriencePlayerCalculations);
            if (config.xpLevelRanks.enableresetranks)
            {
                PlayerProfile.Add(XPUIButton($"xp.playercontrol calculationsranks 0", row, height, 12, "0 0 0 1", "Ranks", "0.23", "0.43", TextAnchor.MiddleCenter, "1 1 1 1"), XPeriencePlayerCalculations);
            }
            PlayerProfile.Add(XPUIButton($"xp.playercontrol calculationsstats", row, height, 12, "0 0 0 1", "Stats", "0.44", "0.64", TextAnchor.MiddleCenter, "1 1 1 1"), XPeriencePlayerCalculations);
            PlayerProfile.Add(XPUIButton($"xp.playercontrol calculationsskills", row, height, 12, "0 0 0 1", "Skills", "0.65", "0.85", TextAnchor.MiddleCenter, "1 1 1 1"), XPeriencePlayerCalculations);
            row++;
            // Max Level
            int
                startxp = (int)config.xpLevel.levelstart,
                reqxp = (int)config.xpLevel.levelmultiplier,
                reqxp2 = (int)config.xpLevelRanks.levelmultiplierincrease,
                maxlev = config.xpLevel.maxlevel - 1,
                totalreqxpmax = 0,
                totalreqxp = 0,
                b = 0,
                c = 0;

            for (int l = 0; l <= maxlev; l++)
            {
                if (config.xpLevelRanks.increaselevelmultiplier)
                {
                    b = (reqxp + (reqxp2 * rank)) * l;
                    totalreqxpmax += b;
                }
                else
                {
                    b = reqxp * l;
                    totalreqxpmax += b;
                }
            }
            PlayerProfile.Add(XPUILabel($"[Max Level XP Calculations] {ranklable}", row, height, TextAnchor.MiddleLeft, 10, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerCalculations);
            row++;
            PlayerProfile.Add(XPUILabel($"Max Level:", row, height, TextAnchor.MiddleLeft, 10, "0.01", "0.25", "1 1 1 1"), XPeriencePlayerCalculations);
            PlayerProfile.Add(XPUILabel($"{config.xpLevel.maxlevel}", row, height, TextAnchor.MiddleLeft, 10, "0.25", "0.50", "1 1 1 1"), XPeriencePlayerCalculations);
            PlayerProfile.Add(XPUILabel($"Total Required XP:", row, height, TextAnchor.MiddleLeft, 10, "0.51", "0.75", "1 1 1 1"), XPeriencePlayerCalculations);
            PlayerProfile.Add(XPUILabel($"{String.Format("{0:N0}", totalreqxpmax + startxp)}", row, height, TextAnchor.MiddleLeft, 10, "0.75", "0.99", "1 1 1 1"), XPeriencePlayerCalculations);
            // Level List
            row++;
            PlayerProfile.Add(XPUILabel($"[Per Level XP Calculations] {ranklable}", row, height, TextAnchor.MiddleLeft, 10, "0.01", "0.49", "1 1 1 1"), XPeriencePlayerCalculations);
            row++;
            PlayerProfile.Add(XPUILabel($"{XPLang("level", player.UserIDString)}", row, height, TextAnchor.MiddleLeft, 10, "0.01", "0.25", "1 1 1 1"), XPeriencePlayerCalculations);
            PlayerProfile.Add(XPUILabel($"Requirement Increase", row, height, TextAnchor.MiddleLeft, 10, "0.26", "0.50", "1 1 1 1"), XPeriencePlayerCalculations);
            PlayerProfile.Add(XPUILabel($"Level Required XP", row, height, TextAnchor.MiddleLeft, 10, "0.51", "0.99", "1 1 1 1"), XPeriencePlayerCalculations);
            PlayerProfile.Add(XPUIPanel("0 0", "1 0.7", "0 0 0 0"), XPeriencePlayerCalculations, "LevelList");
            var height2 = 0.052f;
            for (int i = 0; i <= maxlev; i++)
            {
                if (config.xpLevelRanks.increaselevelmultiplier)
                {
                    c = (reqxp + (reqxp2 * rank)) * i;
                }
                else
                {
                    c = reqxp * i;
                }
                totalreqxp += c;
                if (current >= page && current < page + count)
                {
                    int pos = (current - page);
                    string color = "1 1 1 1";
                    if (current % 2 == 0)
                    {
                        color = ".5 .5 .5 1";
                    }
                    PlayerProfile.Add(XPUILabel($"{String.Format("{0:N0}", current + 1)}", pos + 1, height2, TextAnchor.MiddleLeft, 10, "0.01", "0.25", color), "LevelList");
                    PlayerProfile.Add(XPUILabel($"{String.Format("{0:N0}", c)}", pos + 1, height2, TextAnchor.MiddleLeft, 10, "0.26", "0.50", color), "LevelList");
                    PlayerProfile.Add(XPUILabel($"{String.Format("{0:N0}", totalreqxp + startxp)}", pos + 1, height2, TextAnchor.MiddleLeft, 10, "0.51", "0.99", color), "LevelList");
                }
                current++;
            }

            // Page Selection
            float height3 = 1f;
            int back = page <= count ? 0 : page - count;
            int next = page + count >= current ? page : page + count;
            PlayerProfile.Add(XPUIPanel($"{config.playerprofilesettings.menuwidth + .005} 0", "1 .08", "0 0 0 0"), XPeriencePlayerProfile, XPeriencePlayerCalculationsLevelSelection);
            // Prev Page
            if (page >= 1)
            {
                PlayerProfile.Add(XPUIButton($"xp.playercontrol calculationslevelpage {back} {rank}", 1, height3, 20, "0 0 0 0", "⇧", ".1", ".2", TextAnchor.MiddleCenter, "1 1 0 1"), XPeriencePlayerCalculationsLevelSelection);
            }
            // Next Page
            if (page + count < config.xpLevel.maxlevel)
            {
                PlayerProfile.Add(XPUIButton($"xp.playercontrol calculationslevelpage {next} {rank}", 1, height3, 20, "0 0 0 0", "⇩", ".21", ".3", TextAnchor.MiddleCenter, "1 1 0 1"), XPeriencePlayerCalculationsLevelSelection);
            }
            if (config.xpLevelRanks.enableresetranks && config.xpLevelRanks.increaselevelmultiplier)
            {
                // Prev Rank
                if (rank >= 1)
                {
                    PlayerProfile.Add(XPUIButton($"xp.playercontrol calculationslevelpage {page} {rank - 1}", 1, height3, 15, "0 0 0 0", $"{XPLang("rank", player.UserIDString)} ⇩", ".5", ".75", TextAnchor.MiddleCenter, "0 1 0 1"), XPeriencePlayerCalculationsLevelSelection);
                }
                // Next Rank
                if (rank < config.xpLevelRanks.maxresetrank)
                {
                    PlayerProfile.Add(XPUIButton($"xp.playercontrol calculationslevelpage {page} {rank + 1}", 1, height3, 15, "0 0 0 0", $"{XPLang("rank", player.UserIDString)} ⇧", ".76", ".99", TextAnchor.MiddleCenter, "0 1 0 1"), XPeriencePlayerCalculationsLevelSelection);
                }
            }
            // End
            CuiHelper.AddUi(player, PlayerProfile);
        }
        private void PlayerCalculationPageRanks(BasePlayer player, int page = 0)
        {
            var PlayerProfile = new CuiElementContainer();
            #region Layout
            var height = 0.045f;
            var height2 = 0.055f;
            float height3 = 1f;
            int row = 1;
            int current = 0;
            int perpage = 20;
            #endregion
            PlayerProfile.Add(XPUIPanel($"{config.playerprofilesettings.menuwidth + .005} .09", ".99 1", "0 0 0 .25"), XPeriencePlayerProfile, XPeriencePlayerCalculations);
            PlayerProfile.Add(XPUILabel($"{XPLang("calculationstitle", player.UserIDString)}", row, height, TextAnchor.MiddleLeft, 15, "0.01", "1", "1 1 1 1"), XPeriencePlayerCalculations);
            row++;
            row++;
            PlayerProfile.Add(XPUIButton($"xp.playercontrol calculationslevels 0 0", row, height, 12, "0 0 0 1", "Levels", "0.02", "0.22", TextAnchor.MiddleCenter, "1 1 1 1"), XPeriencePlayerCalculations);
            if (config.xpLevelRanks.enableresetranks)
            {
                PlayerProfile.Add(XPUIButton($"xp.playercontrol calculationsranks 0", row, height, 12, "0 0 0 1", "Ranks", "0.23", "0.43", TextAnchor.MiddleCenter, "0 1 0 1"), XPeriencePlayerCalculations);
            }
            PlayerProfile.Add(XPUIButton($"xp.playercontrol calculationsstats", row, height, 12, "0 0 0 1", "Stats", "0.44", "0.64", TextAnchor.MiddleCenter, "1 1 1 1"), XPeriencePlayerCalculations);
            PlayerProfile.Add(XPUIButton($"xp.playercontrol calculationsskills", row, height, 12, "0 0 0 1", "Skills", "0.65", "0.85", TextAnchor.MiddleCenter, "1 1 1 1"), XPeriencePlayerCalculations);
            row++;
            row++;
            PlayerProfile.Add(XPUILabel($"[XP Calculations Per Rank]", row, height, TextAnchor.MiddleLeft, 10, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerCalculations);
            PlayerProfile.Add(XPUIPanel("0 0", "1 0.78", "0 0 0 0"), XPeriencePlayerCalculations, "RankList");
            // Ranks Without Increase
            #region Rank XP W/O Increase
            if (!config.xpLevelRanks.increaselevelmultiplier)
            {
                int startxp = (int)config.xpLevel.levelstart, reqxp = (int)config.xpLevel.levelmultiplier, maxlev = config.xpLevel.maxlevel - 1, totalreqxp = 0;
                for (int r = 1; r <= config.xpLevelRanks.maxresetrank; r++)
                {
                    for (int l = 1; l <= maxlev; l++)
                    {
                        int c = reqxp * l;
                        totalreqxp += c;
                    }
                    totalreqxp += startxp;
                    if (current >= page && current < page + perpage)
                    {
                        int pos = (current - page);
                        string color = "1 1 1 1";
                        if (current % 2 == 0)
                        {
                            color = ".5 .5 .5 1";
                        }
                        PlayerProfile.Add(XPUILabel($"[Rank {r}]", pos + 1, height2, TextAnchor.MiddleLeft, 10, "0.01", "0.25", color), "RankList");
                        PlayerProfile.Add(XPUILabel($"Required XP:", pos + 1, height2, TextAnchor.MiddleLeft, 10, "0.25", "0.50", color), "RankList");
                        PlayerProfile.Add(XPUILabel($"{String.Format("{0:N0}", totalreqxp)}", pos + 1, height2, TextAnchor.MiddleLeft, 10, "0.51", "0.99", color), "RankList");
                    }
                    current++;
                }
            }
            #endregion
            // Ranks With Increase
            #region Rank XP W Increase
            if (config.xpLevelRanks.increaselevelmultiplier)
            {
                int startxp2 = (int)config.xpLevel.levelstart, reqxp2 = (int)config.xpLevel.levelmultiplier, maxlev2 = config.xpLevel.maxlevel - 1, reqxp3 = (int)config.xpLevelRanks.levelmultiplierincrease, totalreqxp2 = 0, c2 = 0;
                for (int r2 = 1; r2 <= config.xpLevelRanks.maxresetrank; r2++)
                {
                    if (r2 == 1)
                    {
                        for (int l2 = 1; l2 <= maxlev2; l2++)
                        {
                            c2 = reqxp2 * l2;
                            totalreqxp2 += c2;
                        }
                    }
                    else
                    {
                        for (int l2 = 1; l2 <= maxlev2; l2++)
                        {
                            c2 = (reqxp2 + (reqxp3 * (r2 - 1))) * l2;
                            totalreqxp2 += c2;
                        }
                    }
                    totalreqxp2 += startxp2;
                    if (current >= page && current < page + perpage)
                    {
                        int pos = (current - page);
                        string color = "1 1 1 1";
                        if (current % 2 == 0)
                        {
                            color = ".5 .5 .5 1";
                        }
                        PlayerProfile.Add(XPUILabel($"[Rank {r2}]", pos + 1, height2, TextAnchor.MiddleLeft, 10, "0.01", "0.25", color), "RankList");
                        PlayerProfile.Add(XPUILabel($"Required XP:", pos + 1, height2, TextAnchor.MiddleLeft, 10, "0.26", "0.50", color), "RankList");
                        PlayerProfile.Add(XPUILabel($"{String.Format("{0:N0}", totalreqxp2)}", pos + 1, height2, TextAnchor.MiddleLeft, 10, "0.51", "0.99", color), "RankList");
                    }
                    current++;
                }
            }
            #endregion
            // Page Selection
            int back = page <= perpage ? 0 : page - perpage;
            int next = page + perpage >= current ? page : page + perpage;
            PlayerProfile.Add(XPUIPanel($"{config.playerprofilesettings.menuwidth + .005} 0", "1 .08", "0 0 0 0"), XPeriencePlayerProfile, XPeriencePlayerCalculationsRanksSelection);
            // Prev Page
            if (page >= 1)
            {
                PlayerProfile.Add(XPUIButton($"xp.playercontrol calculationsranks {back}", 1, height3, 20, "0 0 0 0", "⇧", ".01", ".25", TextAnchor.MiddleCenter, "1 1 0 1"), XPeriencePlayerCalculationsRanksSelection);
            }
            // Next Page
            if (page + perpage < config.xpLevelRanks.maxresetrank)
            {
                PlayerProfile.Add(XPUIButton($"xp.playercontrol calculationsranks {next}", 1, height3, 20, "0 0 0 0", "⇩", ".50", ".99", TextAnchor.MiddleCenter, "1 1 0 1"), XPeriencePlayerCalculationsRanksSelection);
            }
            //AdminCalculationPageRanksPageSelection(player, back, next, page);

            // End
            CuiHelper.AddUi(player, PlayerProfile);
        }
        private void PlayerCalculationPageStats(BasePlayer player)
        {
            var PlayerProfile = new CuiElementContainer();
            var height = 0.045f;
            int row = 1;
            PlayerProfile.Add(XPUIPanel($"{config.playerprofilesettings.menuwidth + .005} .09", ".99 1", "0 0 0 .25"), XPeriencePlayerProfile, XPeriencePlayerCalculations);
            PlayerProfile.Add(XPUILabel($"{XPLang("calculationstitle", player.UserIDString)}", row, height, TextAnchor.MiddleLeft, 15, "0.01", "1", "1 1 1 1"), XPeriencePlayerCalculations);
            row++;
            row++;
            PlayerProfile.Add(XPUIButton($"xp.playercontrol calculationslevels 0 0", row, height, 12, "0 0 0 1", "Levels", "0.02", "0.22", TextAnchor.MiddleCenter, "1 1 1 1"), XPeriencePlayerCalculations);
            if (config.xpLevelRanks.enableresetranks)
            {
                PlayerProfile.Add(XPUIButton($"xp.playercontrol calculationsranks 0", row, height, 12, "0 0 0 1", "Ranks", "0.23", "0.43", TextAnchor.MiddleCenter, "1 1 1 1"), XPeriencePlayerCalculations);
            }
            PlayerProfile.Add(XPUIButton($"xp.playercontrol calculationsstats", row, height, 12, "0 0 0 1", "Stats", "0.44", "0.64", TextAnchor.MiddleCenter, "0 1 0 1"), XPeriencePlayerCalculations);
            PlayerProfile.Add(XPUIButton($"xp.playercontrol calculationsskills", row, height, 12, "0 0 0 1", "Skills", "0.65", "0.85", TextAnchor.MiddleCenter, "1 1 1 1"), XPeriencePlayerCalculations);
            row++;
            row++;
            // Level
            #region Level / Ranks
            int levelstatpoints = config.xpLevel.statpointsperlvl * config.xpLevel.maxlevel;
            int rankstatpoints = ((config.xpLevel.statpointsperlvl + (config.xpLevelRanks.rankstatpointincrease * config.xpLevelRanks.maxresetrank)) * config.xpLevel.maxlevel) + (config.xpLevelRanks.rankstatpointstart * config.xpLevelRanks.maxresetrank);
            int totalrankstatpoints = 0;
            int perrankstatpoints = 0;
            if (!config.xpLevelRanks.resetallstatsskills)
            {
                for (int x = 0; x <= config.xpLevelRanks.maxresetrank; x++)
                {
                    for (int i = 0; i <= config.xpLevel.maxlevel + 1; i++)
                    {
                        int c = (config.xpLevel.statpointsperlvl + config.xpLevelRanks.rankstatpointincrease * x) * i;
                        totalrankstatpoints = c + (config.xpLevelRanks.rankstatpointstart * x);
                    }
                    perrankstatpoints += totalrankstatpoints;
                }
                rankstatpoints = perrankstatpoints;
            }
            PlayerProfile.Add(XPUILabel($"[Level / Rank Calculations]", row, height, TextAnchor.MiddleLeft, 10, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerCalculations);
            row++;
            PlayerProfile.Add(XPUILabel($"Max Level:", row, height, TextAnchor.MiddleLeft, 10, "0.01", "0.25", "1 1 1 1"), XPeriencePlayerCalculations);
            PlayerProfile.Add(XPUILabel($"{config.xpLevel.maxlevel}", row, height, TextAnchor.MiddleLeft, 10, "0.26", "0.50", "1 1 1 1"), XPeriencePlayerCalculations);
            PlayerProfile.Add(XPUILabel($"Total Stat Points:", row, height, TextAnchor.MiddleLeft, 10, "0.51", "0.75", "1 1 1 1"), XPeriencePlayerCalculations);
            PlayerProfile.Add(XPUILabel($"{levelstatpoints}", row, height, TextAnchor.MiddleLeft, 10, "0.76", "0.99", "1 1 1 1"), XPeriencePlayerCalculations);
            row++;
            PlayerProfile.Add(XPUILabel($"Max Rank:", row, height, TextAnchor.MiddleLeft, 10, "0.01", "0.25", "1 1 1 1"), XPeriencePlayerCalculations);
            PlayerProfile.Add(XPUILabel($"{config.xpLevelRanks.maxresetrank}", row, height, TextAnchor.MiddleLeft, 10, "0.26", "0.50", "1 1 1 1"), XPeriencePlayerCalculations);
            PlayerProfile.Add(XPUILabel($"Total Stat Points:", row, height, TextAnchor.MiddleLeft, 10, "0.51", "0.75", "1 1 1 1"), XPeriencePlayerCalculations);
            PlayerProfile.Add(XPUILabel($"{rankstatpoints}", row, height, TextAnchor.MiddleLeft, 10, "0.76", "0.99", "1 1 1 1"), XPeriencePlayerCalculations);
            #endregion
            // Stats
            #region Stats
            row++;
            row++;
            PlayerProfile.Add(XPUILabel($"[Stat Calculations]", row, height, TextAnchor.MiddleLeft, 10, "0.01", "0.30", "1 1 1 1"), XPeriencePlayerCalculations);
            row++;
            // Mentality
            int totalmentality = 0;
            if (config.mentality.maxlvl > 0)
            {
                for (int i = 1; i <= config.mentality.maxlvl; i++)
                {
                    int ment = config.mentality.costmultiplier * i;
                    totalmentality += ment;
                }
                totalmentality += config.mentality.pointcoststart - config.mentality.costmultiplier;
                PlayerProfile.Add(XPUILabel($"Max Mentality:", row, height, TextAnchor.MiddleLeft, 10, "0.01", "0.25", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"{config.mentality.maxlvl}", row, height, TextAnchor.MiddleLeft, 10, "0.26", "0.50", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"Stat Points:", row, height, TextAnchor.MiddleLeft, 10, "0.51", "0.75", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"{totalmentality}", row, height, TextAnchor.MiddleLeft, 10, "0.76", "0.99", "1 1 1 1"), XPeriencePlayerCalculations);
                row++;
            }
            // Dexterity
            int totaldexterity = 0;
            if (config.dexterity.maxlvl > 0)
            {
                for (int i = 1; i <= config.dexterity.maxlvl; i++)
                {
                    int dex = config.dexterity.costmultiplier * i;
                    totaldexterity += dex;
                }
                totaldexterity += config.dexterity.pointcoststart - config.dexterity.costmultiplier;
                PlayerProfile.Add(XPUILabel($"Max Dextertiy:", row, height, TextAnchor.MiddleLeft, 10, "0.01", "0.25", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"{config.dexterity.maxlvl}", row, height, TextAnchor.MiddleLeft, 10, "0.26", "0.50", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"Stat Points:", row, height, TextAnchor.MiddleLeft, 10, "0.51", "0.75", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"{totaldexterity}", row, height, TextAnchor.MiddleLeft, 10, "0.76", "0.99", "1 1 1 1"), XPeriencePlayerCalculations);
                row++;
            }
            // Might
            int totalmight = 0;
            if (config.might.maxlvl > 0)
            {
                for (int i = 1; i <= config.might.maxlvl; i++)
                {
                    int might = config.might.costmultiplier * i;
                    totalmight += might;
                }
                totalmight += config.might.pointcoststart - config.might.costmultiplier;
                PlayerProfile.Add(XPUILabel($"Max Might:", row, height, TextAnchor.MiddleLeft, 10, "0.01", "0.25", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"{config.might.maxlvl}", row, height, TextAnchor.MiddleLeft, 10, "0.26", "0.50", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"Stat Points:", row, height, TextAnchor.MiddleLeft, 10, "0.51", "0.75", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"{totalmight}", row, height, TextAnchor.MiddleLeft, 10, "0.76", "0.99", "1 1 1 1"), XPeriencePlayerCalculations);
                row++;
            }
            // Captaincy
            int totalcaptaincy = 0;
            if (config.captaincy.maxlvl > 0)
            {
                for (int i = 1; i <= config.captaincy.maxlvl; i++)
                {
                    int capt = config.captaincy.costmultiplier * i;
                    totalcaptaincy += capt;
                }
                totalcaptaincy += config.captaincy.pointcoststart - config.captaincy.costmultiplier;
                PlayerProfile.Add(XPUILabel($"Max Captaincy:", row, height, TextAnchor.MiddleLeft, 10, "0.01", "0.25", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"{config.captaincy.maxlvl}", row, height, TextAnchor.MiddleLeft, 10, "0.26", "0.50", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"Stat Points:", row, height, TextAnchor.MiddleLeft, 10, "0.51", "0.75", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"{totalcaptaincy}", row, height, TextAnchor.MiddleLeft, 10, "0.76", "0.99", "1 1 1 1"), XPeriencePlayerCalculations);
                row++;
            }
            // Weaponry
            int totalweaponry = 0;
            if (config.weaponry.maxlvl > 0)
            {
                for (int i = 1; i <= config.weaponry.maxlvl; i++)
                {
                    int weap = config.weaponry.costmultiplier * i;
                    totalweaponry += weap;
                }
                totalweaponry += config.weaponry.pointcoststart - config.weaponry.costmultiplier;
                PlayerProfile.Add(XPUILabel($"Max Weapnry:", row, height, TextAnchor.MiddleLeft, 10, "0.01", "0.25", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"{config.weaponry.maxlvl}", row, height, TextAnchor.MiddleLeft, 10, "0.26", "0.50", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"Stat Points:", row, height, TextAnchor.MiddleLeft, 10, "0.51", "0.75", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"{totalweaponry}", row, height, TextAnchor.MiddleLeft, 10, "0.76", "0.99", "1 1 1 1"), XPeriencePlayerCalculations);
                row++;
            }
            // Ninjary
            int totalNinjary = 0;
            if (config.ninjary.maxlvl > 0)
            {
                for (int i = 1; i <= config.ninjary.maxlvl; i++)
                {
                    int cland = config.ninjary.costmultiplier * i;
                    totalNinjary += cland;
                }
                totalNinjary += config.ninjary.pointcoststart - config.ninjary.costmultiplier;
                PlayerProfile.Add(XPUILabel($"Max Ninjary:", row, height, TextAnchor.MiddleLeft, 10, "0.01", "0.25", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"{config.ninjary.maxlvl}", row, height, TextAnchor.MiddleLeft, 10, "0.26", "0.50", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"Stat Points:", row, height, TextAnchor.MiddleLeft, 10, "0.51", "0.75", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"{totalNinjary}", row, height, TextAnchor.MiddleLeft, 10, "0.76", "0.99", "1 1 1 1"), XPeriencePlayerCalculations);
                row++;
            }
            // Total Stat Points Required
            row++;
            int totalallstats = totalmentality + totaldexterity + totalmight + totalcaptaincy + totalweaponry + totalNinjary;
            PlayerProfile.Add(XPUILabel($"Total Stat Points Required:", row, height, TextAnchor.MiddleLeft, 10, "0.01", "0.50", "1 1 1 1"), XPeriencePlayerCalculations);
            PlayerProfile.Add(XPUILabel($"{totalallstats}", row, height, TextAnchor.MiddleLeft, 10, "0.51", "0.99", "1 1 1 1"), XPeriencePlayerCalculations);
            #endregion
            // End
            CuiHelper.AddUi(player, PlayerProfile);
        }
        private void PlayerCalculationPageSkills(BasePlayer player)
        {
            var PlayerProfile = new CuiElementContainer();
            var height = 0.045f;
            int row = 1;
            PlayerProfile.Add(XPUIPanel($"{config.playerprofilesettings.menuwidth + .005} .09", ".99 1", "0 0 0 .25"), XPeriencePlayerProfile, XPeriencePlayerCalculations);
            PlayerProfile.Add(XPUILabel($"{XPLang("calculationstitle", player.UserIDString)}", row, height, TextAnchor.MiddleLeft, 15, "0.01", "1", "1 1 1 1"), XPeriencePlayerCalculations);
            row++;
            row++;
            PlayerProfile.Add(XPUIButton($"xp.playercontrol calculationslevels 0 0", row, height, 12, "0 0 0 1", "Levels", "0.02", "0.22", TextAnchor.MiddleCenter, "1 1 1 1"), XPeriencePlayerCalculations);
            if (config.xpLevelRanks.enableresetranks)
            {
                PlayerProfile.Add(XPUIButton($"xp.playercontrol calculationsranks 0", row, height, 12, "0 0 0 1", "Ranks", "0.23", "0.43", TextAnchor.MiddleCenter, "1 1 1 1"), XPeriencePlayerCalculations);
            }
            PlayerProfile.Add(XPUIButton($"xp.playercontrol calculationsstats", row, height, 12, "0 0 0 1", "Stats", "0.44", "0.64", TextAnchor.MiddleCenter, "1 1 1 1"), XPeriencePlayerCalculations);
            PlayerProfile.Add(XPUIButton($"xp.playercontrol calculationsskills", row, height, 12, "0 0 0 1", "Skills", "0.65", "0.85", TextAnchor.MiddleCenter, "0 1 0 1"), XPeriencePlayerCalculations);
            row++;
            row++;
            // Level
            #region Level / Ranks
            int levelskillpoints = config.xpLevel.skillpointsperlvl * config.xpLevel.maxlevel;
            int rankskillpoints = ((config.xpLevel.skillpointsperlvl + (config.xpLevelRanks.rankskillpointincrease * config.xpLevelRanks.maxresetrank)) * config.xpLevel.maxlevel) + (config.xpLevelRanks.rankskillpointstart * config.xpLevelRanks.maxresetrank);
            int totalrankskillpoints = 0;
            int perrankskillpoints = 0;
            if (!config.xpLevelRanks.resetallstatsskills)
            {
                for (int x = 0; x <= config.xpLevelRanks.maxresetrank; x++)
                {
                    for (int i = 0; i <= config.xpLevel.maxlevel + 1; i++)
                    {
                        int c = (config.xpLevel.statpointsperlvl + config.xpLevelRanks.rankstatpointincrease * x) * i;
                        totalrankskillpoints = c + (config.xpLevelRanks.rankstatpointstart * x);
                    }
                    perrankskillpoints += totalrankskillpoints;
                }
                rankskillpoints = perrankskillpoints;
            }
            PlayerProfile.Add(XPUILabel($"[Level / Rank Calculations]", row, height, TextAnchor.MiddleLeft, 10, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerCalculations);
            row++;
            PlayerProfile.Add(XPUILabel($"Max Level:", row, height, TextAnchor.MiddleLeft, 10, "0.01", "0.25", "1 1 1 1"), XPeriencePlayerCalculations);
            PlayerProfile.Add(XPUILabel($"{config.xpLevel.maxlevel}", row, height, TextAnchor.MiddleLeft, 10, "0.26", "0.50", "1 1 1 1"), XPeriencePlayerCalculations);
            PlayerProfile.Add(XPUILabel($"Total Skill Points:", row, height, TextAnchor.MiddleLeft, 10, "0.51", "0.75", "1 1 1 1"), XPeriencePlayerCalculations);
            PlayerProfile.Add(XPUILabel($"{levelskillpoints}", row, height, TextAnchor.MiddleLeft, 10, "0.76", "0.99", "1 1 1 1"), XPeriencePlayerCalculations);
            row++;
            PlayerProfile.Add(XPUILabel($"Max Rank:", row, height, TextAnchor.MiddleLeft, 10, "0.01", "0.25", "1 1 1 1"), XPeriencePlayerCalculations);
            PlayerProfile.Add(XPUILabel($"{config.xpLevelRanks.maxresetrank}", row, height, TextAnchor.MiddleLeft, 10, "0.26", "0.50", "1 1 1 1"), XPeriencePlayerCalculations);
            PlayerProfile.Add(XPUILabel($"Total Skill Points:", row, height, TextAnchor.MiddleLeft, 10, "0.51", "0.75", "1 1 1 1"), XPeriencePlayerCalculations);
            PlayerProfile.Add(XPUILabel($"{rankskillpoints}", row, height, TextAnchor.MiddleLeft, 10, "0.76", "0.99", "1 1 1 1"), XPeriencePlayerCalculations);
            #endregion
            // Skills
            #region Skills
            row++;
            row++;
            PlayerProfile.Add(XPUILabel($"[Skill Calculations]", row, height, TextAnchor.MiddleLeft, 15, "0.01", "0.30", "1 1 1 1"), XPeriencePlayerCalculations);
            row++;
            // Woodcutter
            int totalwoodcutter = 0;
            if (config.woodcutter.maxlvl > 0)
            {
                for (int i = 1; i <= config.woodcutter.maxlvl; i++)
                {
                    int woodcutter = config.woodcutter.costmultiplier * i;
                    totalwoodcutter += woodcutter;
                }
                totalwoodcutter += config.woodcutter.pointcoststart - config.woodcutter.costmultiplier;
                PlayerProfile.Add(XPUILabel($"Max WoodCutter:", row, height, TextAnchor.MiddleLeft, 10, "0.01", "0.25", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"{config.woodcutter.maxlvl}", row, height, TextAnchor.MiddleLeft, 10, "0.26", "0.50", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"Skill Points:", row, height, TextAnchor.MiddleLeft, 10, "0.51", "0.75", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"{totalwoodcutter}", row, height, TextAnchor.MiddleLeft, 10, "0.76", "0.99", "1 1 1 1"), XPeriencePlayerCalculations);
                row++;
            }
            // Smithy
            int totalsmithy = 0;
            if (config.smithy.maxlvl > 0)
            {
                for (int i = 1; i <= config.smithy.maxlvl; i++)
                {
                    int smithy = config.smithy.costmultiplier * i;
                    totalsmithy += smithy;
                }
                totalsmithy += config.smithy.pointcoststart - config.smithy.costmultiplier;
                PlayerProfile.Add(XPUILabel($"Max Smithy:", row, height, TextAnchor.MiddleLeft, 10, "0.01", "0.25", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"{config.smithy.maxlvl}", row, height, TextAnchor.MiddleLeft, 10, "0.26", "0.50", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"Skill Points:", row, height, TextAnchor.MiddleLeft, 10, "0.51", "0.75", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"{totalsmithy}", row, height, TextAnchor.MiddleLeft, 10, "0.76", "0.99", "1 1 1 1"), XPeriencePlayerCalculations);
                row++;
            }
            // Miner
            int totalminer = 0;
            if (config.miner.maxlvl > 0)
            {
                for (int i = 1; i <= config.miner.maxlvl; i++)
                {
                    int miner = config.miner.costmultiplier * i;
                    totalminer += miner;
                }
                totalminer += config.miner.pointcoststart - config.miner.costmultiplier;
                PlayerProfile.Add(XPUILabel($"Max Miner:", row, height, TextAnchor.MiddleLeft, 10, "0.01", "0.25", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"{config.miner.maxlvl}", row, height, TextAnchor.MiddleLeft, 10, "0.26", "0.50", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"Skill Points:", row, height, TextAnchor.MiddleLeft, 10, "0.51", "0.75", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"{totalminer}", row, height, TextAnchor.MiddleLeft, 10, "0.76", "0.99", "1 1 1 1"), XPeriencePlayerCalculations);
                row++;
            }
            // Forager
            int totalforager = 0;
            if (config.forager.maxlvl > 0)
            {
                for (int i = 1; i <= config.forager.maxlvl; i++)
                {
                    int forager = config.forager.costmultiplier * i;
                    totalforager += forager;
                }
                totalforager += config.forager.pointcoststart - config.forager.costmultiplier;
                PlayerProfile.Add(XPUILabel($"Max Forager:", row, height, TextAnchor.MiddleLeft, 10, "0.01", "0.25", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"{config.forager.maxlvl}", row, height, TextAnchor.MiddleLeft, 10, "0.26", "0.50", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"Skill Points:", row, height, TextAnchor.MiddleLeft, 10, "0.51", "0.75", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"{totalforager}", row, height, TextAnchor.MiddleLeft, 10, "0.76", "0.99", "1 1 1 1"), XPeriencePlayerCalculations);
                row++;
            }
            // Hunter
            int totalhunter = 0;
            if (config.hunter.maxlvl > 0)
            {
                for (int i = 1; i <= config.hunter.maxlvl; i++)
                {
                    int hunter = config.hunter.costmultiplier * i;
                    totalhunter += hunter;
                }
                totalhunter += config.hunter.pointcoststart - config.hunter.costmultiplier;
                PlayerProfile.Add(XPUILabel($"Max Hunter:", row, height, TextAnchor.MiddleLeft, 10, "0.01", "0.25", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"{config.hunter.maxlvl}", row, height, TextAnchor.MiddleLeft, 10, "0.26", "0.50", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"Skill Points:", row, height, TextAnchor.MiddleLeft, 10, "0.51", "0.75", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"{totalhunter}", row, height, TextAnchor.MiddleLeft, 10, "0.76", "0.99", "1 1 1 1"), XPeriencePlayerCalculations);
                row++;
            }
            // Crafter
            int totalcrafter = 0;
            if (config.crafter.maxlvl > 0)
            {
                for (int i = 1; i <= config.crafter.maxlvl; i++)
                {
                    int crafter = config.crafter.costmultiplier * i;
                    totalcrafter += crafter;
                }
                totalcrafter += config.crafter.pointcoststart - config.crafter.costmultiplier;
                PlayerProfile.Add(XPUILabel($"Max Crafter:", row, height, TextAnchor.MiddleLeft, 10, "0.01", "0.25", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"{config.crafter.maxlvl}", row, height, TextAnchor.MiddleLeft, 10, "0.26", "0.50", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"Skill Points:", row, height, TextAnchor.MiddleLeft, 10, "0.51", "0.75", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"{totalcrafter}", row, height, TextAnchor.MiddleLeft, 10, "0.76", "0.99", "1 1 1 1"), XPeriencePlayerCalculations);
                row++;
            }
            // Framer
            int totalframer = 0;
            if (config.framer.maxlvl > 0)
            {
                for (int i = 1; i <= config.framer.maxlvl; i++)
                {
                    int framer = config.framer.costmultiplier * i;
                    totalframer += framer;
                }
                totalframer += config.framer.pointcoststart - config.framer.costmultiplier;
                PlayerProfile.Add(XPUILabel($"Max Framer:", row, height, TextAnchor.MiddleLeft, 10, "0.01", "0.25", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"{config.framer.maxlvl}", row, height, TextAnchor.MiddleLeft, 10, "0.26", "0.50", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"Skill Points:", row, height, TextAnchor.MiddleLeft, 10, "0.51", "0.75", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"{totalframer}", row, height, TextAnchor.MiddleLeft, 10, "0.76", "0.99", "1 1 1 1"), XPeriencePlayerCalculations);
                row++;
            }
            // Fisher
            int totalfisher = 0;
            if (config.fisher.maxlvl > 0)
            {
                for (int i = 1; i <= config.fisher.maxlvl; i++)
                {
                    int fisher = config.fisher.costmultiplier * i;
                    totalfisher += fisher;
                }
                totalfisher += config.fisher.pointcoststart - config.fisher.costmultiplier;
                PlayerProfile.Add(XPUILabel($"Max Fisher:", row, height, TextAnchor.MiddleLeft, 10, "0.01", "0.25", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"{config.fisher.maxlvl}", row, height, TextAnchor.MiddleLeft, 10, "0.26", "0.50", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"Skill Points:", row, height, TextAnchor.MiddleLeft, 10, "0.51", "0.75", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"{totalfisher}", row, height, TextAnchor.MiddleLeft, 10, "0.76", "0.99", "1 1 1 1"), XPeriencePlayerCalculations);
                row++;
            }
            // Medic
            int totalmedic = 0;
            if (config.medic.maxlvl > 0)
            {
                for (int i = 1; i <= config.medic.maxlvl; i++)
                {
                    int medic = config.medic.costmultiplier * i;
                    totalmedic += medic;
                }
                totalmedic += config.medic.pointcoststart - config.medic.costmultiplier;
                PlayerProfile.Add(XPUILabel($"Max Medic:", row, height, TextAnchor.MiddleLeft, 10, "0.01", "0.25", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"{config.medic.maxlvl}", row, height, TextAnchor.MiddleLeft, 10, "0.26", "0.50", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"Skill Points:", row, height, TextAnchor.MiddleLeft, 10, "0.51", "0.75", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"{totalmedic}", row, height, TextAnchor.MiddleLeft, 10, "0.76", "0.99", "1 1 1 1"), XPeriencePlayerCalculations);
                row++;
            }
            // Scavenger
            int totalscavenger = 0;
            if (config.scavenger.maxlvl > 0)
            {
                for (int i = 1; i <= config.scavenger.maxlvl; i++)
                {
                    int scavenger = config.scavenger.costmultiplier * i;
                    totalscavenger += scavenger;
                }
                totalscavenger += config.scavenger.pointcoststart - config.scavenger.costmultiplier;
                PlayerProfile.Add(XPUILabel($"Max Scavenger:", row, height, TextAnchor.MiddleLeft, 10, "0.01", "0.25", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"{config.scavenger.maxlvl}", row, height, TextAnchor.MiddleLeft, 10, "0.26", "0.50", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"Skill Points:", row, height, TextAnchor.MiddleLeft, 10, "0.51", "0.75", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"{totalscavenger}", row, height, TextAnchor.MiddleLeft, 10, "0.76", "0.99", "1 1 1 1"), XPeriencePlayerCalculations);
                row++;
            }
            // Electrician
            int totalelectrician = 0;
            if (config.electrician.maxlvl > 0)
            {
                for (int i = 1; i <= config.electrician.maxlvl; i++)
                {
                    int electrician = config.electrician.costmultiplier * i;
                    totalelectrician += electrician;
                }
                totalelectrician += config.electrician.pointcoststart - config.electrician.costmultiplier;
                PlayerProfile.Add(XPUILabel($"Max Electrician:", row, height, TextAnchor.MiddleLeft, 10, "0.01", "0.25", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"{config.electrician.maxlvl}", row, height, TextAnchor.MiddleLeft, 10, "0.26", "0.50", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"Skill Points:", row, height, TextAnchor.MiddleLeft, 10, "0.51", "0.75", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"{totalelectrician}", row, height, TextAnchor.MiddleLeft, 10, "0.76", "0.99", "1 1 1 1"), XPeriencePlayerCalculations);
                row++;
            }
            // Demolitionist
            int totaldemolitionist = 0;
            if (config.demolitionist.maxlvl > 0)
            {
                for (int i = 1; i <= config.demolitionist.maxlvl; i++)
                {
                    int demolitionist = config.demolitionist.costmultiplier * i;
                    totaldemolitionist += demolitionist;
                }
                totaldemolitionist += config.demolitionist.pointcoststart - config.demolitionist.costmultiplier;
                PlayerProfile.Add(XPUILabel($"Max Demolitionist:", row, height, TextAnchor.MiddleLeft, 10, "0.01", "0.25", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"{config.demolitionist.maxlvl}", row, height, TextAnchor.MiddleLeft, 10, "0.26", "0.50", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"Skill Points:", row, height, TextAnchor.MiddleLeft, 10, "0.51", "0.75", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"{totaldemolitionist}", row, height, TextAnchor.MiddleLeft, 10, "0.76", "0.99", "1 1 1 1"), XPeriencePlayerCalculations);
                row++;
            }
            // Tamer
            int totaltamer = 0;
            if (PersonalAnimal != null && config.tamer.maxlvl > 0)
            {
                for (int i = 1; i <= config.tamer.maxlvl; i++)
                {
                    int tamer = config.tamer.costmultiplier * i;
                    totaltamer += tamer;
                }
                totaltamer += config.tamer.pointcoststart - config.tamer.costmultiplier;
                PlayerProfile.Add(XPUILabel($"Max Tamer:", row, height, TextAnchor.MiddleLeft, 10, "0.01", "0.25", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"{config.tamer.maxlvl}", row, height, TextAnchor.MiddleLeft, 10, "0.26", "0.50", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"Skill Points:", row, height, TextAnchor.MiddleLeft, 10, "0.51", "0.75", "1 1 1 1"), XPeriencePlayerCalculations);
                PlayerProfile.Add(XPUILabel($"{totaltamer}", row, height, TextAnchor.MiddleLeft, 10, "0.76", "0.99", "1 1 1 1"), XPeriencePlayerCalculations);
                row++;
            }
            // Total Skill Points Required
            row++;
            int totalallskills = totalwoodcutter + totalsmithy + totalminer + totalforager + totalhunter + totalcrafter + totalframer + totalfisher + totalmedic + totalscavenger + totalelectrician + totaldemolitionist + totaltamer;
            PlayerProfile.Add(XPUILabel($"Total Skill Points Required:", row, height, TextAnchor.MiddleLeft, 10, "0.01", "0.50", "1 1 1 1"), XPeriencePlayerCalculations);
            PlayerProfile.Add(XPUILabel($"{totalallskills}", row, height, TextAnchor.MiddleLeft, 10, "0.51", "0.99", "1 1 1 1"), XPeriencePlayerCalculations);
            #endregion             
            // End
            CuiHelper.AddUi(player, PlayerProfile);
        }
        // Pop-ups & Chat
        private void PlayerProfileBGImgs(BasePlayer player, int page = 0)
        {
            if (player == null) return;
            XPRecord xprecord = GetXPRecord(player);
            var BGImgs = new CuiElementContainer();
            BGImgs.Add(new CuiPanel
            {
                Image =
                {
                    Color = "0 0 0 0"
                },
                RectTransform =
                {
                    AnchorMin = $".5 .5",
                    AnchorMax = $".5 .5",
                    OffsetMin = $"-300 -200",
                    OffsetMax = $"300 200"
                },
                CursorEnabled = true
            }, "Overlay", XPeriencePlayerBGImgs);
            int current = 0;
            int bgid = 0;
            var bglist = config.imageicons.bgimages;
            int total = config.imageicons.bgimages.Count;
            foreach (var bgimg in bglist)
            {
                if (current >= page && current < page + 1)
                {
                    int pos = (current - page);
                    // Image
                    BGImgs.Add(new CuiElement
                    {
                        Parent = XPeriencePlayerBGImgs,
                        Components =
                                {
                                    new CuiRawImageComponent
                                    {
                                        Png = ImageLibrary?.Call<string>("GetImage", bgimg.Value.name)
                                    },
                                    new CuiRectTransformComponent
                                    {
                                        AnchorMin = ".01 .1",
                                        AnchorMax = ".99 .99"
                                    }
                                }
                    });
                    // ID
                    BGImgs.Add(XPUILabel($"{bgimg.Value.name}", 1, 0.07f, TextAnchor.MiddleCenter, 15, ".01", ".99", "1 1 1 1"), XPeriencePlayerBGImgs);
                    bgid = bgimg.Key;
                }
                current++;
            }
            // Buttons
            BGImgs.Add(XPUIPanel(".1 0", ".9 .08", "0 0 0 1"), XPeriencePlayerBGImgs, "PBGButtons");
            int back = page <= 1 ? 0 : page - 1;
            int next = page + 1 >= current ? page : page + 1;
            // Prev Page
            if (page >= 1)
            {
                BGImgs.Add(XPUIButton($"xp.playercontrol openbgoptions {back}", 1, 1f, 20, "0 0 0 0", "⇦", ".1", ".2", TextAnchor.MiddleCenter, "1 1 0 1"), "PBGButtons");
            }
            // Next Page
            if (page + 1 < total)
            {
                BGImgs.Add(XPUIButton($"xp.playercontrol openbgoptions {next}", 1, 1f, 20, "0 0 0 0", "⇨", ".8", ".9", TextAnchor.MiddleCenter, "1 1 0 1"), "PBGButtons");
            }
            if (bgid == xprecord.profilebg)
            {
                BGImgs.Add(XPUIButton($"", 1, 1f, 13, "0 0 0 0", "〘Selected〙", ".3", ".45", TextAnchor.MiddleCenter, "0 1 0 1"), "PBGButtons");
            }
            else
            {
                BGImgs.Add(XPUIButton($"xp.playeredits profilebg {bgid} {page}", 1, 1f, 13, "0 0 0 0", "〘Select〙", ".3", ".45", TextAnchor.MiddleCenter, "1 0 0 1"), "PBGButtons");
            }
            BGImgs.Add(XPUIButton("xp.playercontrol closebgoptions", 1, 1f, 13, "0 0 0 0", "〘Close〙", ".55", ".7", TextAnchor.MiddleCenter, "1 0 0 1"), "PBGButtons");
            CuiHelper.AddUi(player, BGImgs);
            return;
        }
        private void PlayerDamageBarSkins(BasePlayer player, int page = 0)
        {
            if (player == null) return;
            XPRecord xprecord = GetXPRecord(player);
            var height = 0.030f;
            int row = 4;
            int current = 0;
            var dmgbarskins = XPerienceAddon?.Call("GetDmgBarList");
            var dmgbarlist = JsonConvert.DeserializeObject<Dictionary<int, DmgBarImgs>>((string)dmgbarskins);
            int total = dmgbarlist.Count;
            var DMGSkins = new CuiElementContainer();
            DMGSkins.Add(new CuiPanel
            {
                Image =
                {
                    Color = "0 0 0 1"
                },
                RectTransform =
                {
                    AnchorMin = ".4 .2",
                    AnchorMax = ".8 .8"
                },
                CursorEnabled = true
            }, "Overlay", XPeriencePlayerDMGSkins);
            DMGSkins.Add(XPUILabel($"Damage Bar Skin Selection:", 1, 0.090f, TextAnchor.MiddleLeft, 15, ".01", ".99", "1 1 1 1"), XPeriencePlayerDMGSkins);
            row++;
            foreach (var dmgbarimg in dmgbarlist)
            {
                if (current >= page && current < page + 10)
                {
                    int pos = (current - page);
                    // Image
                    DMGSkins.Add(XPUIImage(XPeriencePlayerDMGSkins, dmgbarimg.Value.name, row, height, ".02", ".70"));
                    if (dmgbarimg.Key == xprecord.dmgbar)
                    {
                        DMGSkins.Add(XPUIButton($"", row, height, 12, "0 0 0 0", "〘Selected〙", "0.75", "0.99", TextAnchor.MiddleCenter, "0 1 0 1"), XPeriencePlayerDMGSkins);
                    }
                    else
                    {
                        DMGSkins.Add(XPUIButton($"xp.playeredits dmgskins {dmgbarimg.Key} {page}", row, height, 12, "0 0 0 0", "〘Select〙", "0.75", "0.99", TextAnchor.MiddleCenter, "1 0 0 1"), XPeriencePlayerDMGSkins);
                    }
                    row++;
                    row++;
                    row++;
                }
                current++;
            }
            // Buttons
            DMGSkins.Add(XPUIPanel("0 0", "1 .1", "0 0 0 0.7"), XPeriencePlayerDMGSkins, "BGButtons");
            int back = page <= 10 ? 0 : page - 10;
            int next = page + 10 >= current ? page : page + 10;
            // Prev Page
            if (page >= 1)
            {
                DMGSkins.Add(XPUIButton($"xp.playercontrol opendmgskins {back}", 1, 1f, 20, "0 0 0 0", "⇧", ".1", ".2", TextAnchor.MiddleCenter, "1 1 0 1"), "BGButtons");
            }
            // Next Page
            if (page + 10 < total)
            {
                DMGSkins.Add(XPUIButton($"xp.playercontrol opendmgskins {next}", 1, 1f, 20, "0 0 0 0", "⇩", ".8", ".9", TextAnchor.MiddleCenter, "1 1 0 1"), "BGButtons");
            }
            DMGSkins.Add(XPUIButton($"xp.playercontrol closedmgskins", 1, 1f, 12, "0 0 0 0", "〘Close〙", ".4", ".6", TextAnchor.MiddleCenter, "1 0 0 1"), "BGButtons");
            // End
            CuiHelper.AddUi(player, DMGSkins);
        }
        private void PlayerPromptBox(BasePlayer player, string function, string types, string name)
        {
            if (player == null || function == null || types == null || name == null) return;
            DestroyUi(player, XPeriencePlayerControlPrompt);
            XPRecord xprecord = GetXPRecord(player);
            float height = 0.1f;
            int row = 2;
            bool econcanafford = true;
            bool srewardcanafford = true;
            string type = "";
            switch (types)
            {
                case "stats":
                    type = "stat";
                    break;
                case "skills":
                    type = "skill";
                    break;
            }
            // Create Box
            var PromptElements = new CuiElementContainer();
            // Box
            PromptElements.Add(new CuiPanel
            {
                Image =
                {
                    Color = "0 0 0 1"
                },
                RectTransform =
                {
                    AnchorMin = ".5 .5",
                    AnchorMax = ".5 .5",
                    OffsetMin = "-200 -100",
                    OffsetMax = "200 100"
                },
                CursorEnabled = true
            }, "Overlay", XPeriencePlayerControlPrompt);
            // Confirm Reset
            #region reset
            if (function == "reset")
            {
                if (name == "all")
                {
                    PromptElements.Add(XPUILabel($"Do you want to reset all {types}?", row, height, TextAnchor.MiddleCenter, 15, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerControlPrompt);
                    row++;
                    if (XPerienceAddon != null)
                    {
                        PromptElements.Add(XPUILabel($"(NOTE: You will lose any extra points gained from Books or Scrolls!)", row, height, TextAnchor.MiddleCenter, 12, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerControlPrompt);
                        row++;
                    }
                    row++;
                    // Economics
                    #region Economics Stats
                    if (Economics != null)
                    {
                        double balance = Economics.Call<double>("Balance", player.UserIDString);
                        double statscost = config.xpEcon.econresetstatscost;
                        double skillscost = config.xpEcon.econresetskillscost;
                        if ((balance < statscost || balance < skillscost))
                        {
                            econcanafford = false;
                        }
                        if (types == "stats" && config.xpEcon.econresetstats)
                        {
                            PromptElements.Add(XPUILabel($"Economics:", row, height, TextAnchor.MiddleCenter, 11, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerControlPrompt);
                            row++;
                            PromptElements.Add(XPUILabel($"Cost: {statscost}", row, height, TextAnchor.MiddleCenter, 11, "0.01", "0.49", "1 1 1 1"), XPeriencePlayerControlPrompt);
                            PromptElements.Add(XPUILabel($"Balance: {balance}", row, height, TextAnchor.MiddleCenter, 11, "0.51", "0.99", "1 1 1 1"), XPeriencePlayerControlPrompt);
                            row++;
                            row++;
                        }
                        if (types == "skills" && config.xpEcon.econresetskills)
                        {
                            PromptElements.Add(XPUILabel($"Economics:", row, height, TextAnchor.MiddleCenter, 11, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerControlPrompt);
                            row++;
                            PromptElements.Add(XPUILabel($"Cost: {skillscost}", row, height, TextAnchor.MiddleCenter, 11, "0.01", "0.49", "1 1 1 1"), XPeriencePlayerControlPrompt);
                            PromptElements.Add(XPUILabel($"Balance: {balance}", row, height, TextAnchor.MiddleCenter, 11, "0.51", "0.99", "1 1 1 1"), XPeriencePlayerControlPrompt);
                            row++;
                            row++;
                        }
                    }
                    #endregion
                    // Server Rewards
                    #region ServerRewards Stats
                    if (ServerRewards != null)
                    {
                        int points = ServerRewards.Call<int>("CheckPoints", player.userID);
                        int statspoints = config.sRewards.srewardresetstatscost;
                        int skillspoints = config.sRewards.srewardresetskillscost;
                        if (points < statspoints || points < skillspoints)
                        {
                            srewardcanafford = false;
                        }
                        if (types == "stats" && config.sRewards.srewardresetstats)
                        {
                            PromptElements.Add(XPUILabel($"Server Rewards:", row, height, TextAnchor.MiddleCenter, 11, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerControlPrompt);
                            row++;
                            PromptElements.Add(XPUILabel($"Cost: {statspoints}", row, height, TextAnchor.MiddleCenter, 11, "0.01", "0.49", "1 1 1 1"), XPeriencePlayerControlPrompt);
                            PromptElements.Add(XPUILabel($"Balance: {points}", row, height, TextAnchor.MiddleCenter, 11, "0.51", "0.99", "1 1 1 1"), XPeriencePlayerControlPrompt);
                            row++;
                            row++;
                        }
                        if (types == "skills" && config.sRewards.srewardresetskills)
                        {
                            PromptElements.Add(XPUILabel($"Server Rewards:", row, height, TextAnchor.MiddleCenter, 11, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerControlPrompt);
                            row++;
                            PromptElements.Add(XPUILabel($"Cost: {skillspoints}", row, height, TextAnchor.MiddleCenter, 11, "0.01", "0.49", "1 1 1 1"), XPeriencePlayerControlPrompt);
                            PromptElements.Add(XPUILabel($"Balance: {points}", row, height, TextAnchor.MiddleCenter, 11, "0.51", "0.99", "1 1 1 1"), XPeriencePlayerControlPrompt);
                            row++;
                            row++;
                        }
                    }
                    #endregion
                }
                else
                {
                    PromptElements.Add(XPUILabel($"Do you want to reset {XPLang($"{name}", player.UserIDString)} {type}?", row, height, TextAnchor.MiddleCenter, 15, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerControlPrompt);
                    row++;
                    if (XPerienceAddon != null)
                    {
                        PromptElements.Add(XPUILabel($"(NOTE: You will lose any extra points gained from Books or Scrolls!)", row, height, TextAnchor.MiddleCenter, 12, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerControlPrompt);
                        row++;
                    }
                    row++;
                    // Economics
                    #region Economics Reset
                    if (Economics != null)
                    {
                        double balance = Economics.Call<double>("Balance", player.UserIDString);
                        double statcost = config.xpEcon.econresetstatcost;
                        double skillcost = config.xpEcon.econresetskillcost;
                        if (balance < statcost || balance < skillcost)
                        {
                            econcanafford = false;
                        }
                        if (type == "stat" && config.xpEcon.econresetstat)
                        {
                            PromptElements.Add(XPUILabel($"Economics:", row, height, TextAnchor.MiddleCenter, 11, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerControlPrompt);
                            row++;
                            PromptElements.Add(XPUILabel($"Cost: {statcost}", row, height, TextAnchor.MiddleCenter, 11, "0.01", "0.49", "1 1 1 1"), XPeriencePlayerControlPrompt);
                            PromptElements.Add(XPUILabel($"Balance: {balance}", row, height, TextAnchor.MiddleCenter, 11, "0.51", "0.99", "1 1 1 1"), XPeriencePlayerControlPrompt);
                            row++;
                            row++;
                        }
                        if (type == "skill" && config.xpEcon.econresetskill)
                        {
                            PromptElements.Add(XPUILabel($"Economics:", row, height, TextAnchor.MiddleCenter, 11, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerControlPrompt);
                            row++;
                            PromptElements.Add(XPUILabel($"Cost: {skillcost}", row, height, TextAnchor.MiddleCenter, 11, "0.01", "0.49", "1 1 1 1"), XPeriencePlayerControlPrompt);
                            PromptElements.Add(XPUILabel($"Balance: {balance}", row, height, TextAnchor.MiddleCenter, 11, "0.51", "0.99", "1 1 1 1"), XPeriencePlayerControlPrompt);
                            row++;
                            row++;
                        }
                    }
                    #endregion
                    // Server Rewards
                    #region ServerRewards Reset
                    if (ServerRewards != null)
                    {
                        int points = ServerRewards.Call<int>("CheckPoints", player.userID);
                        int statpoints = config.sRewards.srewardresetstatcost;
                        int skillpoints = config.sRewards.srewardresetskillcost;
                        if (points < statpoints || points < skillpoints)
                        {
                            srewardcanafford = false;
                        }
                        if (type == "stat" && config.sRewards.srewardresetstat)
                        {
                            PromptElements.Add(XPUILabel($"Server Rewards:", row, height, TextAnchor.MiddleCenter, 11, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerControlPrompt);
                            row++;
                            PromptElements.Add(XPUILabel($"Cost: {statpoints}", row, height, TextAnchor.MiddleCenter, 11, "0.01", "0.49", "1 1 1 1"), XPeriencePlayerControlPrompt);
                            PromptElements.Add(XPUILabel($"Balance: {points}", row, height, TextAnchor.MiddleCenter, 11, "0.51", "0.99", "1 1 1 1"), XPeriencePlayerControlPrompt);
                            row++;
                            row++;
                        }
                        if (type == "skill" && config.sRewards.srewardresetskill)
                        {
                            PromptElements.Add(XPUILabel($"Server Rewards:", row, height, TextAnchor.MiddleCenter, 11, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerControlPrompt);
                            row++;
                            PromptElements.Add(XPUILabel($"Cost: {skillpoints}", row, height, TextAnchor.MiddleCenter, 11, "0.01", "0.49", "1 1 1 1"), XPeriencePlayerControlPrompt);
                            PromptElements.Add(XPUILabel($"Balance: {points}", row, height, TextAnchor.MiddleCenter, 11, "0.51", "0.99", "1 1 1 1"), XPeriencePlayerControlPrompt);
                            row++;
                            row++;
                        }
                    }
                    #endregion
                }
            }
            #endregion
            // Confirm Level Up
            #region levelup
            if (function == "levelup")
            {
                PromptElements.Add(XPUILabel($"Do you want to level up {XPLang($"{name}", player.UserIDString)} {type}?", row, height, TextAnchor.MiddleCenter, 15, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerControlPrompt);
                row++;
                row++;
                // Economics
                #region Economics Levelup
                if (Economics != null)
                {
                    double balance = Economics.Call<double>("Balance", player.UserIDString);
                    double statcost = 0;
                    double skillcost = 0;
                    if (type == "stat" && config.xpEcon.econstatlevelcost)
                    {
                        switch (name)
                        {
                            case "mentality":
                                statcost = config.xpEcon.econmentality;
                                if (config.xpEcon.econstatlevelcost)
                                {
                                    if (config.xpEcon.econstatlevelcostmultiplier > 0)
                                    {
                                        statcost = config.xpEcon.econmentality * (config.xpEcon.econstatlevelcostmultiplier * (xprecord.Mentality + 1));
                                    }
                                }
                                break;
                            case "dexterity":
                                statcost = config.xpEcon.econdexterity;
                                if (config.xpEcon.econstatlevelcost)
                                {
                                    if (config.xpEcon.econstatlevelcostmultiplier > 0)
                                    {
                                        statcost = config.xpEcon.econdexterity * (config.xpEcon.econstatlevelcostmultiplier * (xprecord.Dexterity + 1));
                                    }
                                }
                                break;
                            case "might":
                                statcost = config.xpEcon.econmight;
                                if (config.xpEcon.econstatlevelcost)
                                {
                                    if (config.xpEcon.econstatlevelcostmultiplier > 0)
                                    {
                                        statcost = config.xpEcon.econmight * (config.xpEcon.econstatlevelcostmultiplier * (xprecord.Might + 1));
                                    }
                                }
                                break;
                            case "captaincy":
                                statcost = config.xpEcon.econcaptaincy;
                                if (config.xpEcon.econstatlevelcost)
                                {
                                    if (config.xpEcon.econstatlevelcostmultiplier > 0)
                                    {
                                        statcost = config.xpEcon.econcaptaincy * (config.xpEcon.econstatlevelcostmultiplier * (xprecord.Captaincy + 1));
                                    }
                                }
                                break;
                            case "weaponry":
                                statcost = config.xpEcon.econweaponry;
                                if (config.xpEcon.econstatlevelcost)
                                {
                                    if (config.xpEcon.econstatlevelcostmultiplier > 0)
                                    {
                                        statcost = config.xpEcon.econweaponry * (config.xpEcon.econstatlevelcostmultiplier * (xprecord.Weaponry + 1));
                                    }
                                }
                                break;
                            case "ninjary":
                                statcost = config.xpEcon.econninjary;
                                if (config.xpEcon.econstatlevelcost)
                                {
                                    if (config.xpEcon.econstatlevelcostmultiplier > 0)
                                    {
                                        statcost = config.xpEcon.econninjary * (config.xpEcon.econstatlevelcostmultiplier * (xprecord.Ninjary + 1));
                                    }
                                }
                                break;
                        }
                        if (balance < statcost)
                        {
                            econcanafford = false;
                        }
                        PromptElements.Add(XPUILabel($"Economics:", row, height, TextAnchor.MiddleCenter, 11, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerControlPrompt);
                        row++;
                        PromptElements.Add(XPUILabel($"Cost: {statcost}", row, height, TextAnchor.MiddleCenter, 11, "0.01", "0.49", "1 1 1 1"), XPeriencePlayerControlPrompt);
                        PromptElements.Add(XPUILabel($"Balance: {balance}", row, height, TextAnchor.MiddleCenter, 11, "0.51", "0.99", "1 1 1 1"), XPeriencePlayerControlPrompt);
                        row++;
                        row++;
                    }
                    if (type == "skill" && config.xpEcon.econskilllevelcost)
                    {
                        switch (name)
                        {
                            case "woodcutter":
                                skillcost = config.xpEcon.econwoodcutter;
                                if (config.xpEcon.econskilllevelcost)
                                {
                                    if (config.xpEcon.econskilllevelcostmultiplier > 0)
                                    {
                                        skillcost = config.xpEcon.econwoodcutter * (config.xpEcon.econskilllevelcostmultiplier * (xprecord.WoodCutter + 1));
                                    }
                                }
                                break;
                            case "smithy":
                                skillcost = config.xpEcon.econsmithy;
                                if (config.xpEcon.econskilllevelcost)
                                {
                                    if (config.xpEcon.econskilllevelcostmultiplier > 0)
                                    {
                                        skillcost = config.xpEcon.econsmithy * (config.xpEcon.econskilllevelcostmultiplier * (xprecord.Smithy + 1));
                                    }
                                }
                                break;
                            case "miner":
                                skillcost = config.xpEcon.econminer;
                                if (config.xpEcon.econskilllevelcost)
                                {
                                    if (config.xpEcon.econskilllevelcostmultiplier > 0)
                                    {
                                        skillcost = config.xpEcon.econminer * (config.xpEcon.econskilllevelcostmultiplier * (xprecord.Miner + 1));
                                    }
                                }
                                break;
                            case "forager":
                                skillcost = config.xpEcon.econforager;
                                if (config.xpEcon.econskilllevelcost)
                                {
                                    if (config.xpEcon.econskilllevelcostmultiplier > 0)
                                    {
                                        skillcost = config.xpEcon.econforager * (config.xpEcon.econskilllevelcostmultiplier * (xprecord.Forager + 1));
                                    }
                                }
                                break;
                            case "hunter":
                                skillcost = config.xpEcon.econhunter;
                                if (config.xpEcon.econskilllevelcost)
                                {
                                    if (config.xpEcon.econskilllevelcostmultiplier > 0)
                                    {
                                        skillcost = config.xpEcon.econhunter * (config.xpEcon.econskilllevelcostmultiplier * (xprecord.Hunter + 1));
                                    }
                                }
                                break;
                            case "crafter":
                                skillcost = config.xpEcon.econcrafter;
                                if (config.xpEcon.econskilllevelcost)
                                {
                                    if (config.xpEcon.econskilllevelcostmultiplier > 0)
                                    {
                                        skillcost = config.xpEcon.econcrafter * (config.xpEcon.econskilllevelcostmultiplier * (xprecord.Crafter + 1));
                                    }
                                }
                                break;
                            case "framer":
                                skillcost = config.xpEcon.econframer;
                                if (config.xpEcon.econskilllevelcost)
                                {
                                    if (config.xpEcon.econskilllevelcostmultiplier > 0)
                                    {
                                        skillcost = config.xpEcon.econframer * (config.xpEcon.econskilllevelcostmultiplier * (xprecord.Framer + 1));
                                    }
                                }
                                break;
                            case "fisher":
                                skillcost = config.xpEcon.econfisher;
                                if (config.xpEcon.econskilllevelcost)
                                {
                                    if (config.xpEcon.econskilllevelcostmultiplier > 0)
                                    {
                                        skillcost = config.xpEcon.econfisher * (config.xpEcon.econskilllevelcostmultiplier * (xprecord.Fisher + 1));
                                    }
                                }
                                break;
                            case "medic":
                                skillcost = config.xpEcon.econmedic;
                                if (config.xpEcon.econskilllevelcost)
                                {
                                    if (config.xpEcon.econskilllevelcostmultiplier > 0)
                                    {
                                        skillcost = config.xpEcon.econmedic * (config.xpEcon.econskilllevelcostmultiplier * (xprecord.Medic + 1));
                                    }
                                }
                                break;
                            case "scavenger":
                                skillcost = config.xpEcon.econscavenger;
                                if (config.xpEcon.econskilllevelcost)
                                {
                                    if (config.xpEcon.econskilllevelcostmultiplier > 0)
                                    {
                                        skillcost = config.xpEcon.econscavenger * (config.xpEcon.econskilllevelcostmultiplier * (xprecord.Scavenger + 1));
                                    }
                                }
                                break;
                            case "electrician":
                                skillcost = config.xpEcon.econelectrician;
                                if (config.xpEcon.econskilllevelcost)
                                {
                                    if (config.xpEcon.econskilllevelcostmultiplier > 0)
                                    {
                                        skillcost = config.xpEcon.econelectrician * (config.xpEcon.econskilllevelcostmultiplier * (xprecord.Electrician + 1));
                                    }
                                }
                                break;
                            case "demolitionist":
                                skillcost = config.xpEcon.econdemolitionist;
                                if (config.xpEcon.econskilllevelcost)
                                {
                                    if (config.xpEcon.econskilllevelcostmultiplier > 0)
                                    {
                                        skillcost = config.xpEcon.econdemolitionist * (config.xpEcon.econskilllevelcostmultiplier * (xprecord.Demolitionist + 1));
                                    }
                                }
                                break;
                            case "tamer":
                                skillcost = config.xpEcon.econtamer;
                                if (Economics != null && config.xpEcon.econskilllevelcost)
                                {
                                    if (config.xpEcon.econskilllevelcostmultiplier > 0)
                                    {
                                        skillcost = config.xpEcon.econtamer * (config.xpEcon.econskilllevelcostmultiplier * (xprecord.Tamer + 1));
                                    }
                                }
                                break;
                        }
                        if (balance < skillcost)
                        {
                            econcanafford = false;
                        }
                        PromptElements.Add(XPUILabel($"Economics:", row, height, TextAnchor.MiddleCenter, 11, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerControlPrompt);
                        row++;
                        PromptElements.Add(XPUILabel($"Cost: {skillcost}", row, height, TextAnchor.MiddleCenter, 11, "0.01", "0.49", "1 1 1 1"), XPeriencePlayerControlPrompt);
                        PromptElements.Add(XPUILabel($"Balance: {balance}", row, height, TextAnchor.MiddleCenter, 11, "0.51", "0.99", "1 1 1 1"), XPeriencePlayerControlPrompt);
                        row++;
                        row++;
                    }
                }
                #endregion
                // Server Rewards
                #region ServerRewards Levelup
                if (ServerRewards != null)
                {
                    int points = ServerRewards.Call<int>("CheckPoints", player.userID);
                    int statpoints = 0;
                    int skillpoints = 0;
                    if (type == "stat" && config.sRewards.srewardstatlevelcost)
                    {
                        switch (name)
                        {
                            case "mentality":
                                statpoints = config.sRewards.srewardmentality;
                                if (config.sRewards.srewardstatlevelcost)
                                {
                                    if (config.sRewards.srewardstatlevelcostmultiplier > 0)
                                    {
                                        statpoints = config.sRewards.srewardmentality * (config.sRewards.srewardstatlevelcostmultiplier * (xprecord.Mentality + 1));
                                    }
                                }
                                break;
                            case "dexterity":
                                statpoints = config.sRewards.srewarddexterity;
                                if (config.sRewards.srewardstatlevelcost)
                                {
                                    if (config.sRewards.srewardstatlevelcostmultiplier > 0)
                                    {
                                        statpoints = config.sRewards.srewarddexterity * (config.sRewards.srewardstatlevelcostmultiplier * (xprecord.Dexterity + 1));
                                    }
                                }
                                break;
                            case "might":
                                statpoints = config.sRewards.srewardmight;
                                if (config.sRewards.srewardstatlevelcost)
                                {
                                    if (config.sRewards.srewardstatlevelcostmultiplier > 0)
                                    {
                                        statpoints = config.sRewards.srewardmight * (config.sRewards.srewardstatlevelcostmultiplier * (xprecord.Might + 1));
                                    }
                                }
                                break;
                            case "captaincy":
                                statpoints = config.sRewards.srewardcaptaincy;
                                if (config.sRewards.srewardstatlevelcost)
                                {
                                    if (config.sRewards.srewardstatlevelcostmultiplier > 0)
                                    {
                                        statpoints = config.sRewards.srewardcaptaincy * (config.sRewards.srewardstatlevelcostmultiplier * (xprecord.Captaincy + 1));
                                    }
                                }
                                break;
                            case "weaponry":
                                statpoints = config.sRewards.srewardweaponry;
                                if (config.sRewards.srewardstatlevelcost)
                                {
                                    if (config.sRewards.srewardstatlevelcostmultiplier > 0)
                                    {
                                        statpoints = config.sRewards.srewardweaponry * (config.sRewards.srewardstatlevelcostmultiplier * (xprecord.Weaponry + 1));
                                    }
                                }
                                break;
                            case "ninjary":
                                statpoints = config.sRewards.srewardninjary;
                                if (config.sRewards.srewardstatlevelcost)
                                {
                                    if (config.sRewards.srewardstatlevelcostmultiplier > 0)
                                    {
                                        statpoints = config.sRewards.srewardninjary * (config.sRewards.srewardstatlevelcostmultiplier * (xprecord.Ninjary + 1));
                                    }
                                }
                                break;
                        }
                        if (points < statpoints)
                        {
                            srewardcanafford = false;
                        }
                        PromptElements.Add(XPUILabel($"Server Rewards:", row, height, TextAnchor.MiddleCenter, 11, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerControlPrompt);
                        row++;
                        PromptElements.Add(XPUILabel($"Cost: {statpoints}", row, height, TextAnchor.MiddleCenter, 11, "0.01", "0.49", "1 1 1 1"), XPeriencePlayerControlPrompt);
                        PromptElements.Add(XPUILabel($"Balance: {points}", row, height, TextAnchor.MiddleCenter, 11, "0.51", "0.99", "1 1 1 1"), XPeriencePlayerControlPrompt);
                        row++;
                        row++;
                    }
                    if (type == "skill" && config.sRewards.srewardskilllevelcost)
                    {
                        switch (name)
                        {
                            case "woodcutter":
                                skillpoints = config.sRewards.srewardwoodcutter;
                                if (config.sRewards.srewardskilllevelcost)
                                {
                                    if (config.sRewards.srewardskilllevelcostmultiplier > 0)
                                    {
                                        statpoints = config.sRewards.srewardwoodcutter * (config.sRewards.srewardskilllevelcostmultiplier * (xprecord.WoodCutter + 1));
                                    }
                                }
                                break;
                            case "smithy":
                                skillpoints = config.sRewards.srewardsmithy;
                                if (config.sRewards.srewardskilllevelcost)
                                {
                                    if (config.sRewards.srewardskilllevelcostmultiplier > 0)
                                    {
                                        statpoints = config.sRewards.srewardsmithy * (config.sRewards.srewardskilllevelcostmultiplier * (xprecord.Smithy + 1));
                                    }
                                }
                                break;
                            case "miner":
                                skillpoints = config.sRewards.srewardminer;
                                if (config.sRewards.srewardskilllevelcost)
                                {
                                    if (config.sRewards.srewardskilllevelcostmultiplier > 0)
                                    {
                                        statpoints = config.sRewards.srewardminer * (config.sRewards.srewardskilllevelcostmultiplier * (xprecord.Miner + 1));
                                    }
                                }
                                break;
                            case "forager":
                                skillpoints = config.sRewards.srewardforager;
                                if (config.sRewards.srewardskilllevelcost)
                                {
                                    if (config.sRewards.srewardskilllevelcostmultiplier > 0)
                                    {
                                        statpoints = config.sRewards.srewardforager * (config.sRewards.srewardskilllevelcostmultiplier * (xprecord.Forager + 1));
                                    }
                                }
                                break;
                            case "hunter":
                                skillpoints = config.sRewards.srewardhunter;
                                if (config.sRewards.srewardskilllevelcost)
                                {
                                    if (config.sRewards.srewardskilllevelcostmultiplier > 0)
                                    {
                                        statpoints = config.sRewards.srewardhunter * (config.sRewards.srewardskilllevelcostmultiplier * (xprecord.Hunter + 1));
                                    }
                                }
                                break;
                            case "crafter":
                                skillpoints = config.sRewards.srewardcrafter;
                                if (config.sRewards.srewardskilllevelcost)
                                {
                                    if (config.sRewards.srewardskilllevelcostmultiplier > 0)
                                    {
                                        statpoints = config.sRewards.srewardcrafter * (config.sRewards.srewardskilllevelcostmultiplier * (xprecord.Crafter + 1));
                                    }
                                }
                                break;
                            case "framer":
                                skillpoints = config.sRewards.srewardframer;
                                if (config.sRewards.srewardskilllevelcost)
                                {
                                    if (config.sRewards.srewardskilllevelcostmultiplier > 0)
                                    {
                                        statpoints = config.sRewards.srewardframer * (config.sRewards.srewardskilllevelcostmultiplier * (xprecord.Framer + 1));
                                    }
                                }
                                break;
                            case "fisher":
                                skillpoints = config.sRewards.srewardfisher;
                                if (config.sRewards.srewardskilllevelcost)
                                {
                                    if (config.sRewards.srewardskilllevelcostmultiplier > 0)
                                    {
                                        statpoints = config.sRewards.srewardfisher * (config.sRewards.srewardskilllevelcostmultiplier * (xprecord.Fisher + 1));
                                    }
                                }
                                break;
                            case "medic":
                                skillpoints = config.sRewards.srewardmedic;
                                if (config.sRewards.srewardskilllevelcost)
                                {
                                    if (config.sRewards.srewardskilllevelcostmultiplier > 0)
                                    {
                                        statpoints = config.sRewards.srewardmedic * (config.sRewards.srewardskilllevelcostmultiplier * (xprecord.Medic + 1));
                                    }
                                }
                                break;
                            case "scavenger":
                                skillpoints = config.sRewards.srewardscavenger;
                                if (config.sRewards.srewardskilllevelcost)
                                {
                                    if (config.sRewards.srewardskilllevelcostmultiplier > 0)
                                    {
                                        statpoints = config.sRewards.srewardscavenger * (config.sRewards.srewardskilllevelcostmultiplier * (xprecord.Scavenger + 1));
                                    }
                                }
                                break;
                            case "electrician":
                                skillpoints = config.sRewards.srewardelectrician;
                                if (config.sRewards.srewardskilllevelcost)
                                {
                                    if (config.sRewards.srewardskilllevelcostmultiplier > 0)
                                    {
                                        statpoints = config.sRewards.srewardelectrician * (config.sRewards.srewardskilllevelcostmultiplier * (xprecord.Electrician + 1));
                                    }
                                }
                                break;
                            case "demolitionist":
                                skillpoints = config.sRewards.srewardemolitionist;
                                if (config.sRewards.srewardskilllevelcost)
                                {
                                    if (config.sRewards.srewardskilllevelcostmultiplier > 0)
                                    {
                                        statpoints = config.sRewards.srewardemolitionist * (config.sRewards.srewardskilllevelcostmultiplier * (xprecord.Demolitionist + 1));
                                    }
                                }
                                break;
                            case "tamer":
                                skillpoints = config.sRewards.srewardtamer;
                                if (config.sRewards.srewardskilllevelcost)
                                {
                                    if (config.sRewards.srewardskilllevelcostmultiplier > 0)
                                    {
                                        statpoints = config.sRewards.srewardtamer * (config.sRewards.srewardskilllevelcostmultiplier * (xprecord.Tamer + 1));
                                    }
                                }
                                break;
                        }
                        if (points < skillpoints)
                        {
                            srewardcanafford = false;
                        }
                        PromptElements.Add(XPUILabel($"Server Rewards:", row, height, TextAnchor.MiddleCenter, 11, "0.01", "0.99", "1 1 1 1"), XPeriencePlayerControlPrompt);
                        row++;
                        PromptElements.Add(XPUILabel($"Cost: {skillpoints}", row, height, TextAnchor.MiddleCenter, 11, "0.01", "0.49", "1 1 1 1"), XPeriencePlayerControlPrompt);
                        PromptElements.Add(XPUILabel($"Balance: {points}", row, height, TextAnchor.MiddleCenter, 11, "0.51", "0.99", "1 1 1 1"), XPeriencePlayerControlPrompt);
                        row++;
                        row++;
                    }
                }
                #endregion
            }
            #endregion
            // Yes or No
            if (function == "reset")
            {
                if (Economics == null || (!config.xpEcon.econresetstats && types == "stats") || (!config.xpEcon.econresetskills && types == "skills"))
                {
                    econcanafford = true;
                }
                if (ServerRewards == null || (!config.sRewards.srewardresetstats && types == "stats") || (!config.sRewards.srewardresetskills && types == "skills"))
                {
                    srewardcanafford = true;
                }
                if (econcanafford && srewardcanafford)
                {

                    if (name == "all")
                    {
                        PromptElements.Add(XPUIButton($"xp.playercontrol reset {types}", row, height, 12, "0 1 0 1", "〘YES〙", "0.15", "0.35", TextAnchor.MiddleCenter, "1 1 1 1"), XPeriencePlayerControlPrompt);
                    }
                    else
                    {
                        PromptElements.Add(XPUIButton($"xp.playercontrol reset {type} {name}", row, height, 12, "0 1 0 1", "〘YES〙", "0.15", "0.35", TextAnchor.MiddleCenter, "1 1 1 1"), XPeriencePlayerControlPrompt);
                    }
                }
                else
                {
                    PromptElements.Add(XPUIButton("", row, height, 12, ".25 .25 .25 1", "〘Cannot Afford〙", "0.10", "0.35", TextAnchor.MiddleCenter, "1 1 1 1"), XPeriencePlayerControlPrompt);
                }
            }
            if (function == "levelup")
            {
                if (econcanafford && srewardcanafford)
                {
                    PromptElements.Add(XPUIButton($"xp.playeredits {type} {name}", row, height, 12, "0 1 0 1", $"〘{XPLang("yes", player.UserIDString)}〙", "0.15", "0.35", TextAnchor.MiddleCenter, "1 1 1 1"), XPeriencePlayerControlPrompt);
                }
                else
                {
                    PromptElements.Add(XPUIButton("", row, height, 12, ".25 .25 .25 1", "〘Cannot Afford〙", "0.10", "0.35", TextAnchor.MiddleCenter, "1 1 1 1"), XPeriencePlayerControlPrompt);
                }
            }
            PromptElements.Add(XPUIButton("xp.playercontrol closeprompt", row, height, 12, "1 0 0 1", $"〘{XPLang($"no", player.UserIDString)}〙", "0.65", "0.85", TextAnchor.MiddleCenter, "1 1 1 1"), XPeriencePlayerControlPrompt);
            CuiHelper.AddUi(player, PromptElements);
        }
        private void PlayerStatsChat(BasePlayer player)
        {
            XPRecord xprecord = GetXPRecord(player);
            player.ChatMessage(XPLang("playerprofilechatnew", player.UserIDString, xprecord.level, (int)xprecord.experience, (int)xprecord.requiredxp, xprecord.statpoint, xprecord.skillpoint, xprecord.Mentality, xprecord.Dexterity, xprecord.Might, xprecord.Captaincy, xprecord.Weaponry, xprecord.Ninjary, xprecord.WoodCutter, xprecord.Smithy, xprecord.Miner, xprecord.Forager, xprecord.Hunter, xprecord.Fisher, xprecord.Crafter, xprecord.Framer, xprecord.Medic, xprecord.Scavenger, xprecord.Electrician, xprecord.Demolitionist, xprecord.Tamer));
        } 
   
        #endregion

        #region Admin Panel
        // Setting Handlers
        #region Setting Handlers
        [TextArea]
        private string UserInputText = string.Empty;
        [ConsoleCommand("xp.admin")]
        private void Cmdadminxp(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();
            if (player == null) return;
            if (!player.IsAdmin && !permission.UserHasPermission(player.UserIDString, Admin)) return;
            switch (arg.GetString(0))
            {
                case "main":
                    ClearUIs(player);
                    AdminInfoPage(player);
                    break;
                case "levelxp":
                    ClearUIs(player);
                    AdminLevelPage(player);
                    break;
                case "ranks":
                    ClearUIs(player);
                    AdminRanksPage(player, arg.GetString(1), arg.GetInt(2));
                    break;
                case "deleterank":
                    config.xpLevelRanks.ranks.Remove(Convert.ToInt32(arg.Args[1]));
                    DestroyUi(player, XPerienceAdminPanelRanks);
                    AdminRanksPage(player, "ranklist");
                    break;
                case "editrank":
                    DestroyUi(player, XPerienceAdminPanelRanks);
                    AdminRanksPage(player, "editrank", Convert.ToInt32(arg.Args[1]));
                    break;
                case "dailylimits":
                    ClearUIs(player);
                    AdminDailyLimitsPage(player);
                    break;
                case "stats":
                    ClearUIs(player);
                    AdminStatsPage(player, arg.GetString(1));
                    break;
                case "skills":
                    ClearUIs(player);
                    AdminSkillsPage(player, arg.GetString(1));
                    break;
                case "playerdata":
                    ClearUIs(player);
                    AdminPlayerInfoPage(player);
                    break;
                case "openprofilebg":
                    DestroyUi(player, XPerienceAdminPanelProfileBackgrounds);
                    int bgnumber = arg.GetInt(1);
                    int bgpagenumber = arg.GetInt(2);
                    AdminProfileBackgrounds(player, bgnumber, bgpagenumber);
                    break;
                case "closeprofilebg":
                    DestroyUi(player, XPerienceAdminPanelProfileBackgrounds);
                    break;
                case "updatebg":
                    foreach(var bgplayer in _xperienceCache)
                    {
                        bgplayer.Value.profilebg = config.playerprofilesettings.profilebg;
                    }
                    SaveData();
                    ClearUIs(player);
                    AdminPlayerInfoPage(player);
                    break;
                case "timercolor":
                    ClearUIs(player);
                    AdminTimerColorPage(player);
                    break;
                case "soundeffects":
                    ClearUIs(player);
                    AdminSoundEffectsPage(player);
                    break;
                case "othermods":
                    ClearUIs(player);
                    AdminOtherModsPage(player, arg.GetString(1));
                    break;
                case "deletebackpack":
                    config.backpacksmod.BackPackSlots.Remove(Convert.ToInt32(arg.Args[1]));
                    DestroyUi(player, XPerienceAdminPanelOtherMods);
                    AdminOtherModsPage(player, "backpacks");
                    break;
                case "editbackpack":
                    DestroyUi(player, XPerienceAdminPanelOtherMods);
                    AdminOtherModsPage(player, "backpacks", "edit", Convert.ToInt32(arg.Args[1]));
                    break;
                case "newbackpack":
                    var backpacklist = config.backpacksmod.BackPackSlots;
                    int newkey = 0;
                    if (backpacklist != null)
                    {
                        newkey = config.backpacksmod.BackPackSlots.Keys.Last() + 1;
                    }
                    config.backpacksmod.BackPackSlots.Add(newkey, new BackPackSlots
                    {
                        level = 1,
                        slots = 6
                    });
                    DestroyUi(player, XPerienceAdminPanelOtherMods);
                    AdminOtherModsPage(player, "backpacks", "edit", config.backpacksmod.BackPackSlots.Keys.Last());
                    break;
                case "backpackselection":
                    if(arg.GetString(2).ToLower() == "open")
                    {
                        DestroyUi(player, XPerienceAdminPanelBackpackSelection);
                        OtherMods_BackpacksSelection(player, config.backpacksmod.statorskill);
                        return;
                    }
                    if(arg.GetString(1).ToLower() == "close")
                    {
                        DestroyUi(player, XPerienceAdminPanelBackpackSelection);
                        return;
                    }
                    config.backpacksmod.statorskill = arg.GetString(1).ToLower();
                    ClearUIs(player);
                    AdminOtherModsPage(player, "backpacks");
                    break;
                case "sql":
                    ClearUIs(player);
                    AdminSQLPage(player);
                    break;
                case "save":
                    player.ChatMessage(XPLang("saveconfig", player.UserIDString));
                    SaveData();
                    SaveConfig();
                    break;
                case "reload":
                    SaveData();
                    SaveConfig();
                    Interface.Oxide.ReloadPlugin("XPerience");
                    //if(XPerienceAddon != null)
                    //{
                    //    Interface.Oxide.ReloadPlugin("XPerienceAddon");
                    //}
                    break;
                case "close":
                    DestroyUi(player, XPerienceAdminPanelMain);
                    break;
                case "reset":
                    ClearUIs(player);
                    AdminResetPage(player);
                    break;              
                case "addon":
                    if (XPerienceAddon != null)
                    {
                        DestroyUi(player, XPerienceAdminPanelMain);
                        XPerienceAddon.Call<string>("AddonAdminControlPanel", player);
                        XPerienceAddon.Call<string>("AddonAdminInfoPage", player);
                    }
                    else
                    {
                        DestroyUi(player, XPerienceAdminPanelInfo);
                        DestroyUi(player, XPerienceAdminPanelLevelXP);
                        DestroyUi(player, XPerienceAdminPanelStats);
                        DestroyUi(player, XPerienceAdminPanelSkills);
                        DestroyUi(player, XPerienceAdminPanelTimerColor);
                        DestroyUi(player, XPerienceAdminPanelOtherMods);
                        DestroyUi(player, XPerienceAdminPanelSQL);
                        DestroyUi(player, XPerienceAdminPanelReset);
                        DestroyUi(player, XPerienceAdminPanelInfoBox);
                        DestroyUi(player, XPerienceAdminPanelAddon);
                        AdminAddonPage(player);
                    }
                    break;              
                case "fix":
                    PlayerFixDataAll(player);
                    break;              
                case "mystats":
                    DestroyUi(player, XPerienceAdminPanelMain);
                    PlayerProfile(player);
                    PlayerProfileMain(player);
                    break;              
                case "openelectriciansettings":
                    DestroyUi(player, XPerienceAdminPanelElectricianSettings);
                    AdminElectricianSettings(player);
                    break;              
                case "closeelectricianbox":
                    DestroyUi(player, XPerienceAdminPanelElectricianSettings);
                    break;
                case "images":
                    ClearUIs(player);
                    AdminImagePaths(player, arg.GetString(1), arg.GetInt(2));
                    break;
                case "specialgroups":
                    ClearUIs(player);
                    AdminSpecialGroups(player);
                    break;
            }
        }
        [ConsoleCommand("xp.config")]
        private void Cmdadminxpconfig(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();
            if (player == null) return;
            if (!player.IsAdmin && !permission.UserHasPermission(player.UserIDString, Admin)) return;
            switch (arg.GetString(0))
            {
                case "main":
                    DestroyUi(player, XPerienceAdminPanelInfo);
                    AdminInfoPage(player);
                    break;
                case "levelxp":
                    switch (arg.GetString(1))
                    {
                        // Main
                        #region main
                        case "levelstart":
                            config.xpLevel.levelstart = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "levelmultiplier":
                            config.xpLevel.levelmultiplier = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "levelmax":
                            config.xpLevel.maxlevel = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "levelxpboost":
                            config.xpLevel.levelxpboost = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "statpointsperlvl":
                            config.xpLevel.statpointsperlvl = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "skillpointsperlvl":
                            config.xpLevel.skillpointsperlvl = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "alwaysearnxp":
                            config.xpLevel.alwaysearnxp = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "fullhealth":
                            config.xpLevel.fullhealth = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "fullmetabolism":
                            config.xpLevel.fullmetabolism = Convert.ToBoolean(arg.GetString(2));
                            break;
                        #endregion
                        // Night
                        #region night
                        case "nightenable":
                            config.nightBonus.Enable = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "nightstart":
                            config.nightBonus.StartTime = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "nightend":
                            config.nightBonus.EndTime = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "nightbonus":
                            config.nightBonus.Bonus = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "nightskill":
                            config.nightBonus.enableskillboosts = Convert.ToBoolean(arg.GetString(2));
                            break;
                        #endregion
                        // XP Kills
                        #region kills
                        case "chicken":
                            config.xpGain.chickenxp = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "fish":
                            config.xpGain.fishxp = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "boar":
                            config.xpGain.boarxp = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "stag":
                            config.xpGain.stagxp = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "wolf":
                            config.xpGain.wolfxp = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "bear":
                            config.xpGain.bearxp = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "polarbear":
                            config.xpGain.polarbearxp = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "shark":
                            config.xpGain.sharkxp = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "horse":
                            config.xpGain.horsexp = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "scientist":
                            config.xpGain.scientistxp = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "sc_cargo":
                            config.xpGain.sc_cargo = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "sc_full":
                            config.xpGain.sc_full = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "sc_heavy":
                            config.xpGain.sc_heavy = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "sc_junkpile":
                            config.xpGain.sc_junkpile = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "sc_oilrig":
                            config.xpGain.sc_oilrig = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "sc_patrol":
                            config.xpGain.sc_patrol = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "sc_peacekeeper":
                            config.xpGain.sc_peacekeeper = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "sc_roam":
                            config.xpGain.sc_roam = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "customnpc":
                            config.xpGain.customnpc = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "dweller":
                            config.xpGain.dwellerxp = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "tunneldwellerxp":
                            config.xpGain.tunneldwellerxp = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "underwaterdwellerxp":
                            config.xpGain.underwaterdwellerxp = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "scarecrownpc":
                            config.xpGain.scarecrownpc = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "player":
                            config.xpGain.playerxp = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "bradley":
                            config.xpGain.bradley = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "heli":
                            config.xpGain.patrolhelicopter = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "turretallow":
                            config.xpGain.allowturretxp = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "turret":
                            config.xpGain.turretxp = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "zombienpc":
                            config.xpGain.zombienpc = Convert.ToDouble(arg.GetString(2));
                            break;
                        #endregion
                        // XP Gathering/Looting
                        #region gathering
                        case "loot":
                            config.xpGain.lootcontainerxp = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "lootbarrel":
                            config.xpGain.lootbarrel = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "oilbarrel":
                            config.xpGain.oilbarrel = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "vehicleparts":
                            config.xpGain.vehicleparts = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "toolcrate":
                            config.xpGain.toolcrate = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "foodcrate":
                            config.xpGain.foodcrate = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "normalcrate":
                            config.xpGain.normalcrate = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "elitecrate":
                            config.xpGain.elitecrate = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "lootu":
                            config.xpGain.underwaterlootcontainerxp = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "lootlocked":
                            config.xpGain.lockedcratexp = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "loothacked":
                            config.xpGain.hackablecratexp = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "aharvest":
                            config.xpGain.animalharvestxp = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "charvest":
                            config.xpGain.corpseharvestxp = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "tree":
                            config.xpGather.treexp = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "ore":
                            config.xpGather.orexp = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "metalorexp":
                            config.xpGather.metalorexp = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "sulfurorexp":
                            config.xpGather.sulfurorexp = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "stoneorexp":
                            config.xpGather.stoneorexp = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "harvest":
                            config.xpGather.harvestxp = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "plant":
                            config.xpGather.plantxp = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "noxptools":
                            config.xpGather.noxptools = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "onetimexp":
                            config.xpGather.onetimexp = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "toolxpchance":
                            config.xpGather.toolxpchance = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "toolxppercent":
                            config.xpGather.toolxppercent = Convert.ToDouble(arg.GetString(2));
                            break;
                        #endregion
                        // Crafting/Building
                        #region craft/build
                        case "crafting":
                            config.xpGain.craftingxp = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "craftxpdelay":
                            config.xpGain.craftingxpdelay = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "craftxpdelayseconds":
                            config.xpGain.craftingxpdelayseconds = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "twigbuild":
                            config.xpBuilding.twigstructure = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "woodbuild":
                            config.xpBuilding.woodstructure = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "stonebuild":
                            config.xpBuilding.stonestructure = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "metalbuild":
                            config.xpBuilding.metalstructure = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "armorbuild":
                            config.xpBuilding.armoredstructure = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "buildxpdelay":
                            config.xpBuilding.buildxpdelay = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "preventBGxp":
                            config.xpBuilding.preventBGxp = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "requirebuildingprivlidge":
                            config.xpBuilding.requirebuildingprivlidge = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "reducexp":
                            config.xpBuilding.reducexp = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "buildxpdelayseconds":
                            config.xpBuilding.buildxpdelayseconds = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "buildxpreduction":
                            config.xpBuilding.buildxpreduction = Convert.ToDouble(arg.GetString(2));
                            break;
                        #endregion
                        // XP Reduce
                        #region xp reduce
                        case "suicide":
                            config.xpReducer.suicidereduce = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "suicideamt":
                            config.xpReducer.suicidereduceamount = Math.Round(Convert.ToDouble(arg.GetString(2)), 0);
                            break;
                        case "death":
                            config.xpReducer.deathreduce = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "deathamt":
                            config.xpReducer.deathreduceamount = Math.Round(Convert.ToDouble(arg.GetString(2)), 0);
                            break;
                        case "rankdeath":
                            config.xpReducer.rankdeathreduce = Convert.ToBoolean(arg.GetString(2));
                            break;
                        #endregion
                        // Teams
                        #region teams
                        case "enableteamxpgain":
                            config.xpTeams.enableteamxpgain = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "enableteamxploss":
                            config.xpTeams.enableteamxploss = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "teamdistance":
                            config.xpTeams.teamdistance = (float)Convert.ToDouble(arg.GetString(2));
                            break;
                        case "teamxpgainamt":
                            config.xpTeams.teamxpgainamount = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "teamxplossamt":
                            config.xpTeams.teamxplossamount = Convert.ToDouble(arg.GetString(2));
                            break;
                        #endregion
                        // Missions
                        #region missions
                        case "missionsucceeded":
                            config.xpMissions.missionsucceededxp = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "missionfailed":
                            config.xpMissions.missionfailed = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "missionfailedxp":
                            config.xpMissions.missionfailedxp = Convert.ToInt32(arg.GetString(2));
                            break;
                        #endregion
                        // XP Boost
                        #region xp boost
                        case "enablexpboost":
                            config.xpGain.enablexpboost = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "xpboostamount":
                            config.xpGain.xpboostamount = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "xpboostorder":
                            config.xpGain.xpboostorder = Convert.ToInt32(arg.GetString(2));
                            break;
                        #endregion
                        // Seasonal
                        #region Seasonal
                        case "gifts":
                            config.xpGain.gifts = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "opengifts":
                            config.xpGain.opengifts = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "opengiftsmed":
                            config.xpGain.opengiftsmed = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "opengiftslarge":
                            config.xpGain.opengiftslarge = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "upgradegiftsmed":
                            config.xpGain.upgradegiftsmed = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "upgradegiftslarge":
                            config.xpGain.upgradegiftslarge = Convert.ToDouble(arg.GetString(2));
                            break;
                        #endregion
                        // Cooking Plugin
                        #region Cooking
                        case "craftmeal":
                            config.xpGain.craftmeal = Convert.ToDouble(arg.GetString(2));
                            break;
                        #endregion
                    }
                    DestroyUi(player, XPerienceAdminPanelLevelXP);
                    AdminLevelPage(player);
                    break;
                case "ranks":
                    switch (arg.GetString(1))
                    {
                        // Ranks Settings
                        #region Rank Settings
                        case "enableranks":
                            config.xpLevelRanks.enableresetranks = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "resetallstatsskills":
                            config.xpLevelRanks.resetallstatsskills = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "playerdisable":
                            config.xpLevelRanks.allowplayerdisable = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "showrankinchat":
                            config.xpLevelRanks.showrankinchat = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "showrankinliveui":
                            config.xpLevelRanks.showrankinliveui = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "maxrank":
                            config.xpLevelRanks.maxresetrank = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "enablerankxpboost":
                            config.xpLevelRanks.enablerankxpboost = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "rankxpboost":
                            config.xpLevelRanks.rankxpboost = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "rankstatboost":
                            config.xpLevelRanks.rankstatboost = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.researchcost = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.researchspeed = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.block = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.armor = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.distance = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.meleedmg = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.metabolism = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "rankstatboostamt":
                            config.xpLevelRanks.rankstatboostamount = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "rankstatpoints":
                            config.xpLevelRanks.rankstatpointincrease = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "rankstatpointstart":
                            config.xpLevelRanks.rankstatpointstart = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "rankskillboost":
                            config.xpLevelRanks.rankskillboost = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.woodcuttergr = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.woodcutterbonus = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.smithypr = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.smithyps = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.smithyfc = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.smithyhqmc = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.smithyhqma = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.minergr = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.minerbonus = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.minerfuel = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.minermfc = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.minermfa = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.fisherfa = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.fisheria = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.fisherotr = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.foragergr = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.foragergwa = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.foragerric = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.huntergr = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.hunterbonus = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.hunterdmg = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.hunterndmg = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.crafterspeed = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.craftercost = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.crafterri = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.crafterrc = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.craftercc = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.crafterca = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.framerucost = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.framerrcost = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.medicrevivala = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.medicrecovera = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.medictools = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.scavelc = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.scavelm = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.scavcic = Convert.ToBoolean(arg.GetString(2));
                            config.Rankboostssettings.scavcim = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "rankskillboostamt":
                            config.xpLevelRanks.rankskillboostamount = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "rankskillpoints":
                            config.xpLevelRanks.rankskillpointincrease = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "rankskillpointstart":
                            config.xpLevelRanks.rankskillpointstart = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "truelevels":
                            config.xpLevelRanks.showtruelevelprofile = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "truexp":
                            config.xpLevelRanks.showtruexpprofile = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "keepremainingxp":
                            config.xpLevelRanks.keepremainingxp = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "keepgrouponrank":
                            config.xpLevelRanks.keepgrouponrank = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "increaselevelmultiplier":
                            config.xpLevelRanks.increaselevelmultiplier = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "levelmultiplierincrease":
                            config.xpLevelRanks.levelmultiplierincrease = Convert.ToDouble(arg.GetString(2));
                            break;
                        #endregion
                        // Stat & Skill Settings
                        #region stat/skill options
                        case "researchcost":
                            config.Rankboostssettings.researchcost = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "researchspeed":
                            config.Rankboostssettings.researchspeed = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "block":
                            config.Rankboostssettings.block = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "armor":
                            config.Rankboostssettings.armor = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "distance":
                            config.Rankboostssettings.distance = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "meleedmg":
                            config.Rankboostssettings.meleedmg = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "metabolism":
                            config.Rankboostssettings.metabolism = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "woodcuttergr":
                            config.Rankboostssettings.woodcuttergr = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "woodcutterbonus":
                            config.Rankboostssettings.woodcutterbonus = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "smithypr":
                            config.Rankboostssettings.smithypr = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "smithyps":
                            config.Rankboostssettings.smithyps = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "smithyfc":
                            config.Rankboostssettings.smithyfc = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "smithyhqmc":
                            config.Rankboostssettings.smithyhqmc = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "smithyhqma":
                            config.Rankboostssettings.smithyhqma = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "minergr":
                            config.Rankboostssettings.minergr = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "minerbonus":
                            config.Rankboostssettings.minerbonus = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "minerfuel":
                            config.Rankboostssettings.minerfuel = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "minermfc":
                            config.Rankboostssettings.minermfc = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "minermfa":
                            config.Rankboostssettings.minermfa = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "fisherfa":
                            config.Rankboostssettings.fisherfa = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "fisheria":
                            config.Rankboostssettings.fisheria = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "fisherotr":
                            config.Rankboostssettings.fisherotr = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "foragergr":
                            config.Rankboostssettings.foragergr = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "foragergwa":
                            config.Rankboostssettings.foragergwa = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "foragerric":
                            config.Rankboostssettings.foragerric = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "huntergr":
                            config.Rankboostssettings.huntergr = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "hunterbonus":
                            config.Rankboostssettings.hunterbonus = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "hunterdmg":
                            config.Rankboostssettings.hunterdmg = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "hunterndmg":
                            config.Rankboostssettings.hunterndmg = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "crafterspeed":
                            config.Rankboostssettings.crafterspeed = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "craftercost":
                            config.Rankboostssettings.craftercost = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "crafterri":
                            config.Rankboostssettings.crafterri = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "crafterrc":
                            config.Rankboostssettings.crafterrc = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "craftercc":
                            config.Rankboostssettings.craftercc = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "crafterca":
                            config.Rankboostssettings.crafterca = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "framerucost":
                            config.Rankboostssettings.framerucost = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "framerrcost":
                            config.Rankboostssettings.framerrcost = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "medicrevivala":
                            config.Rankboostssettings.medicrevivala = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "medicrecovera":
                            config.Rankboostssettings.medicrecovera = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "medictools":
                            config.Rankboostssettings.medictools = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "scavelc":
                            config.Rankboostssettings.scavelc = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "scavelm":
                            config.Rankboostssettings.scavelm = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "scavcic":
                            config.Rankboostssettings.scavcic = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "scavcim":
                            config.Rankboostssettings.scavcim = Convert.ToBoolean(arg.GetString(2));
                            break;
                        #endregion
                    }
                    DestroyUi(player, XPerienceAdminPanelRanks);
                    AdminRanksPage(player);
                    break;
                case "stats":
                    switch (arg.GetString(1))
                    {
                        #region Mentality
                        case "mentality":
                            switch (arg.GetString(2))
                            {
                                case "mentalitymaxlevel":
                                    config.mentality.maxlvl = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "mentalitycost":
                                    config.mentality.pointcoststart = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "mentalitycostmultiplier":
                                    config.mentality.costmultiplier = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "mentalityresearchcost":
                                    config.mentality.researchcost = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "mentalityresearchcosttechtree":
                                    config.mentality.researchcosttechtree = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "mentalityresearchspeed":
                                    config.mentality.researchspeed = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "mentalitycriticalchance":
                                    config.mentality.criticalchance = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "mentalitycriticaldmg":
                                    config.mentality.criticaldgm = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "mentalitydamagepvpnpc":
                                    config.mentality.damageincrease = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "mentalityothermod":
                                    config.mentality.useotherresearchmod = Convert.ToBoolean(arg.GetString(3));
                                    break;
                                case "mentalitylocktechtree":
                                    config.mentality.locktechtree = Convert.ToBoolean(arg.GetString(3));
                                    break;
                                case "mentalityunlocktechtreelevel":
                                    config.mentality.unlocktechtreelevel = Convert.ToInt32(arg.GetString(3));
                                    break;
                            }
                            break;
                        #endregion
                        #region Dexterity
                        case "dexterity":
                            switch (arg.GetString(2))
                            {
                                case "dexteritymaxlevel":
                                    config.dexterity.maxlvl = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "dexteritycost":
                                    config.dexterity.pointcoststart = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "dexteritycostmultiplier":
                                    config.dexterity.costmultiplier = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "dexterityblock":
                                    config.dexterity.blockchance = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "dexterityblockamt":
                                    config.dexterity.blockamount = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "dexteritydodge":
                                    config.dexterity.dodgechance = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "dexterityarmor":
                                    config.dexterity.reducearmordmg = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "horsespeed":
                                    config.dexterity.horsespeed = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "boatspeed":
                                    config.dexterity.boatspeed = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "vehiclespeed":
                                    config.dexterity.vehiclespeed = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "fuelreduce":
                                    config.dexterity.fuelreduce = Convert.ToDouble(arg.GetString(3));
                                    break;
                            }
                            break;
                        #endregion
                        #region Captaincy
                        case "captaincy":
                            switch (arg.GetString(2))
                            {
                                case "captaincymaxlevel":
                                    config.captaincy.maxlvl = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "captaincycost":
                                    config.captaincy.pointcoststart = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "captaincycostmultiplier":
                                    config.captaincy.costmultiplier = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "captaincyskillboost":
                                    config.captaincy.skillboost = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "captaincyenablexpboost":
                                    config.captaincy.enablexpboost = Convert.ToBoolean(arg.GetString(3));
                                    break;
                                case "allownoteam":
                                    config.captaincy.allownoteam = Convert.ToBoolean(arg.GetString(3));
                                    break;
                                case "captaincyxpboost":
                                    config.captaincy.xpboost = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "captaincydistance":
                                    config.captaincy.captaincydistance = (float)Convert.ToDouble(arg.GetString(3));
                                    break;
                            }
                            break;
                        #endregion
                        #region Weaponry
                        case "weaponry":
                            switch (arg.GetString(2))
                            {
                                case "weaponrymaxlevel":
                                    config.weaponry.maxlvl = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "weaponrycost":
                                    config.weaponry.pointcoststart = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "weaponrycostmultiplier":
                                    config.weaponry.costmultiplier = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "weaponrychance":
                                    config.weaponry.reductionchance = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "weaponrytools":
                                    config.weaponry.tool = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "weaponrypowertools":
                                    config.weaponry.powertools = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "weaponrymeleeweapons":
                                    config.weaponry.meleeweapons = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "weaponryprojectileweapons":
                                    config.weaponry.projectileweapons = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "weaponrymindamage":
                                    config.weaponry.mindamage = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "weaponrymaxammo":
                                    config.weaponry.maxammo = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "weaponrymaxammolimit":
                                    config.weaponry.maxammolimit = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "skinboxdisable":
                                    config.weaponry.skinboxdisable = Convert.ToBoolean(arg.GetString(3));
                                    break;
                                case "neverweartools":
                                    config.weaponry.neverweartools = Convert.ToBoolean(arg.GetString(3));
                                    break;
                                case "neverwearweapons":
                                    config.weaponry.neverwearweapons = Convert.ToBoolean(arg.GetString(3));
                                    break;
                                case "useweaponmechanics":
                                    config.weaponry.useweaponmechanics = Convert.ToBoolean(arg.GetString(3));
                                    break;
                                case "weaponryreloadhook":
                                    config.weaponry.reloadhook = arg.GetString(3);
                                    break;
                                case "excludeweapons":
                                    config.weaponry.excludedweapons = arg.GetString(3);
                                    break;
                            }
                            break;
                        #endregion
                        #region Ninjary
                        case "ninjary":
                            switch (arg.GetString(2))
                            {
                                case "ninjarymaxlevel":
                                    config.ninjary.maxlvl = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "ninjarycost":
                                    config.ninjary.pointcoststart = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "ninjarycostmultiplier":
                                    config.ninjary.costmultiplier = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "patrolstealth":
                                    config.ninjary.patrolstealth = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "ch47stealth":
                                    config.ninjary.ch47stealth = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "bradleystealth":
                                    config.ninjary.bradleystealth = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "npcstealth":
                                    config.ninjary.npcstealth = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "turretstealth":
                                    config.ninjary.turretstealth = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "knifeincrease":
                                    config.ninjary.knifeincrease = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "swordincrease":
                                    config.ninjary.swordincrease = Convert.ToDouble(arg.GetString(3));
                                    break;
                            }
                            break;
                        #endregion
                        #region Might
                        case "might":
                            switch (arg.GetString(2))
                            {
                                case "mightmaxlevel":
                                    config.might.maxlvl = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "mightcost":
                                    config.might.pointcoststart = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "mightcostmultiplier":
                                    config.might.costmultiplier = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "mightarmor":
                                    config.might.armor = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "mightmelee":
                                    config.might.meleedmg = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "mightmeta":
                                    config.might.metabolism = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "mightbleed":
                                    config.might.bleedreduction = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "mightrad":
                                    config.might.radreduction = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "mightheat":
                                    config.might.heattolerance = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "mightcold":
                                    config.might.coldtolerance = Convert.ToDouble(arg.GetString(3));
                                    break;
                            }
                            break;
                        #endregion
                    }
                    DestroyUi(player, XPerienceAdminPanelStats);
                    AdminStatsPage(player, arg.GetString(1));
                    break;
                case "skills":
                    switch (arg.GetString(1))
                    {
                        #region Woodcutter
                        case "woodcutter":
                            switch (arg.GetString(2))
                            {
                                case "woodcuttermaxlevel":
                                    config.woodcutter.maxlvl = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "woodcuttercost":
                                    config.woodcutter.pointcoststart = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "woodcuttercostmultiplier":
                                    config.woodcutter.costmultiplier = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "woodcuttergatherrate":
                                    config.woodcutter.gatherrate = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "woodcutterbonus":
                                    config.woodcutter.bonusincrease = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "woodcutterapple":
                                    config.woodcutter.applechance = Convert.ToDouble(arg.GetString(3));
                                    break; 
                            }
                            break;
                        #endregion
                        #region Smithy
                        case "smithy":
                            switch (arg.GetString(2))
                            {
                                case "smithymaxlevel":
                                    config.smithy.maxlvl = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "smithycost":
                                    config.smithy.pointcoststart = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "smithycostmultiplier":
                                    config.smithy.costmultiplier = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "smithyprate":
                                    config.smithy.productionrate = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "smithypspeed":
                                    config.smithy.productionspeed = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "smithyfuel":
                                    config.smithy.fuelconsumption = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "smithymetalchance":
                                    config.smithy.metalchance = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "smithymetalamount":
                                    config.smithy.metalamount = Convert.ToInt32(arg.GetString(3));
                                    break;
                            }
                            break;
                        #endregion
                        #region Miner
                        case "miner":
                            switch (arg.GetString(2))
                            {
                                case "minermaxlevel":
                                    config.miner.maxlvl = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "minercost":
                                    config.miner.pointcoststart = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "minercostmultiplier":
                                    config.miner.costmultiplier = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "minergatherrate":
                                    config.miner.gatherrate = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "minerbonus":
                                    config.miner.bonusincrease = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "minerfuel":
                                    config.miner.fuelconsumption = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "minermetalchance":
                                    config.miner.metalchance = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "minermetalamount":
                                    config.miner.metalamount = Convert.ToInt32(arg.GetString(3));
                                    break;
                            }
                            break;
                        #endregion
                        #region Forager
                        case "forager":
                            switch (arg.GetString(2))
                            {
                                case "foragermaxlevel":
                                    config.forager.maxlvl = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "foragercost":
                                    config.forager.pointcoststart = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "foragercostmultiplier":
                                    config.forager.costmultiplier = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "foragergatherrate":
                                    config.forager.gatherrate = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "foragerseed":
                                    config.forager.chanceincrease = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "foragerrandom":
                                    config.forager.randomchance = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "grubwormincrease":
                                    config.forager.grubwormincrease = Convert.ToDouble(arg.GetString(32));
                                    break;
                            }
                            break;
                        #endregion
                        #region Hunter
                        case "hunter":
                            switch (arg.GetString(2))
                            {
                                case "huntermaxlevel":
                                    config.hunter.maxlvl = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "huntercost":
                                    config.hunter.pointcoststart = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "huntercostmultiplier":
                                    config.hunter.costmultiplier = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "huntergatherrate":
                                    config.hunter.gatherrate = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "hunterbonus":
                                    config.hunter.bonusincrease = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "hunterdamage":
                                    config.hunter.damageincrease = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "hunterndamage":
                                    config.hunter.nightdmgincrease = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "bowdmgincrease":
                                    config.hunter.bowdmgincrease = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "exhunterlongrange":
                                    config.hunter.excludelongrangeweapons = Convert.ToBoolean(arg.GetString(3));
                                    break;
                                case "exhuntermedrange":
                                    config.hunter.excludemedrangeweapons = Convert.ToBoolean(arg.GetString(3));
                                    break;
                            }
                            break;
                        #endregion
                        #region Fisher
                        case "fisher":
                            switch (arg.GetString(2))
                            {
                                case "fishermaxlevel":
                                    config.fisher.maxlvl = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "fishercost":
                                    config.fisher.pointcoststart = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "fishercostmultiplier":
                                    config.fisher.costmultiplier = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "fisheramount":
                                    config.fisher.fishamountincrease = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "fisheritem":
                                    config.fisher.itemamountincrease = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "fisheroxygen":
                                    config.fisher.oxygenreduction = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "fisheroxygentank":
                                    config.fisher.oxygentankreduction = Convert.ToDouble(arg.GetString(3));
                                    break;
                            }
                            break;
                        #endregion
                        #region Crafter
                        case "crafter":
                            switch (arg.GetString(2))
                            {
                                case "craftermaxlevel":
                                    config.crafter.maxlvl = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "craftercost":
                                    config.crafter.pointcoststart = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "craftercostmultiplier":
                                    config.crafter.costmultiplier = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "crafterspeed":
                                    config.crafter.craftspeed = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "craftercosts":
                                    config.crafter.craftcost = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "crafterrepair":
                                    config.crafter.repairincrease = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "crafterrepaircost":
                                    config.crafter.repaircost = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "craftercondtition":
                                    config.crafter.conditionchance = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "craftercondtitionamt":
                                    config.crafter.conditionamount = Convert.ToDouble(arg.GetString(3));
                                    break;
                            }
                            break;
                        #endregion
                        #region Framer
                        case "framer":
                            switch (arg.GetString(2))
                            {
                                case "framermaxlevel":
                                    config.framer.maxlvl = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "framercost":
                                    config.framer.pointcoststart = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "framercostmultiplier":
                                    config.framer.costmultiplier = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "framerupgrade":
                                    config.framer.upgradecost = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "framerrepair":
                                    config.framer.repaircost = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "framertime":
                                    config.framer.repairtime = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "woodcost":
                                    config.framer.woodcost = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "stonecost":
                                    config.framer.stonecost = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "metalcost":
                                    config.framer.metalcost = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "armorcost":
                                    config.framer.armorcost = Convert.ToInt32(arg.GetString(3));
                                    break;
                            }
                            break;
                        #endregion
                        #region Electrician
                        case "electrician":
                            switch (arg.GetString(2))
                            {
                                case "electricianmaxlevel":
                                    config.electrician.maxlvl = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "electriciancost":
                                    config.electrician.pointcoststart = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "electriciancostmultiplier":
                                    config.electrician.costmultiplier = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "solarpanelinputincrease":
                                    config.electrician.solarpanelinputincrease = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "solarpanelmaxincrease":
                                    config.electrician.solarpanelmaxincrease = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "smallbatterymaxincrease":
                                    config.electrician.smallbatterymaxincrease = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "mediumbatterymaxincrease":
                                    config.electrician.mediumbatterymaxincrease = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "largebatterymaxincrease":
                                    config.electrician.largebatterymaxincrease = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "smallgeneratormaxincrease":
                                    config.electrician.smallgeneratormaxincrease = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "testgeneratormaxincrease":
                                    config.electrician.testgeneratormaxincrease = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "electricwindmillmaxincrease":
                                    config.electrician.electricwindmillmaxincrease = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "allowminsolarinput":
                                    config.electrician.allowminsolarinput = Convert.ToBoolean(arg.GetString(3));
                                    break;
                                case "minsolarinput":
                                    config.electrician.minsolarinput = Convert.ToInt32(arg.GetString(3));
                                    break;
                            }
                            break;
                        #endregion
                        #region Medic
                        case "medic":
                            switch (arg.GetString(2))
                            {
                                case "medicmaxlevel":
                                    config.medic.maxlvl = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "mediccost":
                                    config.medic.pointcoststart = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "mediccostmultiplier":
                                    config.medic.costmultiplier = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "medicrevival":
                                    config.medic.revivehp = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "medicrecover":
                                    config.medic.recoverhp = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "mediccraft":
                                    config.medic.crafttime = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "medictools":
                                    config.medic.tools = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "medicteas":
                                    config.medic.teas = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "preventbandageboost":
                                    config.medic.preventbandageboost = Convert.ToBoolean(arg.GetString(3));
                                    break;
                            }
                            break;
                        #endregion
                        #region Scavenger
                        case "scavenger":
                            switch (arg.GetString(2))
                            {
                                case "scavmaxlevel":
                                    config.scavenger.maxlvl = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "scavccost":
                                    config.scavenger.pointcoststart = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "scavcostmultiplier":
                                    config.scavenger.costmultiplier = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "scavchance":
                                    config.scavenger.scavchance = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "scavlootchance":
                                    config.scavenger.scavlootchance = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "scavmultiplier":
                                    config.scavenger.scavmultiplier = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "customscavmultiplier":
                                    config.scavenger.customscavmultiplier = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "customscavrandom":
                                    config.scavenger.customscavrandom = Convert.ToBoolean(arg.GetString(3));
                                    break;
                                case "usecustomscavlist":
                                    config.scavenger.usecustomscavlist = Convert.ToBoolean(arg.GetString(3));
                                    break;
                                case "scavbarrel":
                                    config.scavenger.drops = Convert.ToBoolean(arg.GetString(3));
                                    break;
                                case "scavcrate":
                                    config.scavenger.crates = Convert.ToBoolean(arg.GetString(3));
                                    break;
                                case "scavuncrate":
                                    config.scavenger.uncrates = Convert.ToBoolean(arg.GetString(3));
                                    break;
                                case "scavlockedcrate":
                                    config.scavenger.lockedcrates = Convert.ToBoolean(arg.GetString(3));
                                    break;
                                case "scavhackcrate":
                                    config.scavenger.hackcrates = Convert.ToBoolean(arg.GetString(3));
                                    break;
                                case "scientists":
                                    config.scavenger.scientists = Convert.ToBoolean(arg.GetString(3));
                                    break;
                                case "scavcomponly":
                                    config.scavenger.componentsonly = Convert.ToBoolean(arg.GetString(3));
                                    break;
                            }
                            break;
                        #endregion
                        #region Demolitionist
                        case "demolitionist":
                            switch (arg.GetString(2))
                            {
                                case "demolitionistmaxlevel":
                                    config.demolitionist.maxlvl = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "demolitionistcost":
                                    config.demolitionist.pointcoststart = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "demolitionistcostmultiplier":
                                    config.demolitionist.costmultiplier = Convert.ToInt32(arg.GetString(3));
                                    break;
                                case "explosivedudreduction":
                                    config.demolitionist.explosivedudreduction = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "explosivedamage":
                                    config.demolitionist.explosivedamage = Convert.ToDouble(arg.GetString(3));
                                    break;
                                case "explosiveradius":
                                    config.demolitionist.explosiveradius = Convert.ToDouble(arg.GetString(3));
                                    break;
                            }
                            break;
                        #endregion
                    }
                    DestroyUi(player, XPerienceAdminPanelSkills);
                    AdminSkillsPage(player, arg.GetString(1));
                    break;
                case "playerdata":
                    switch(arg.GetString(1))
                    {
                        case "playtime":
                            config.playerprofilesettings.playtime = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "alivetime":
                            config.playerprofilesettings.alivetime = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "sleepingtime":
                            config.playerprofilesettings.sleepingtime = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "swimmingtime":
                            config.playerprofilesettings.swimingtime = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "drivingtime":
                            config.playerprofilesettings.drivingtime = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "flyingtime":
                            config.playerprofilesettings.flyingtime = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "boatingtime":
                            config.playerprofilesettings.boatingtime = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "basetime":
                            config.playerprofilesettings.basetime = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "monumentime":
                            config.playerprofilesettings.monumenttime = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "wildernesstime":
                            config.playerprofilesettings.wildernesstime = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "metersran":
                            config.playerprofilesettings.metersran = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "meterswalked":
                            config.playerprofilesettings.meterswalked = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "lastdmgrec":
                            config.playerprofilesettings.lastdmgrec = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "lastdmgrecby":
                            config.playerprofilesettings.lastdmgrecby = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "lastdmgdelt":
                            config.playerprofilesettings.lastdmgdelt = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "lastdmgdeltto":
                            config.playerprofilesettings.lastdmgdeltto = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "showunusedeffects":
                            config.playerprofilesettings.showunusedeffects = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "useplayeravatar":
                            config.playerprofilesettings.useplayeravatar = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "profilemenusettings":
                            config.playerprofilesettings.profilemenusettings = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "profilemenuraids":
                            config.playerprofilesettings.profilemenuraids = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "profilemenutopplayers":
                            config.playerprofilesettings.profilemenutopplayers = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "profilemenuhelp":
                            config.playerprofilesettings.profilemenuhelp = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "profilemenucalculations":
                            config.playerprofilesettings.profilemenucalculations = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "skillshelp":
                            config.playerprofilesettings.skillshelp = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "profilemenuwelcome":
                            config.playerprofilesettings.profilemenuwelcome = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "menutype":
                            config.playerprofilesettings.menutype = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "usebgimage":
                            config.playerprofilesettings.usebgimage = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "allowprofilebgchange":
                            config.playerprofilesettings.allowprofilebgchange = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "bgfadein":
                            config.playerprofilesettings.bgfadein = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "usemenubgimage":
                            config.playerprofilesettings.usemenubgimage = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "menuheight":
                            config.playerprofilesettings.menuheight = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "menuwidth":
                            config.playerprofilesettings.menuwidth = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "menubuttonfont":
                            config.playerprofilesettings.menubuttonfont = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "menubuttonheight":
                            config.playerprofilesettings.menubuttonheight = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "AnchorMax":
                            config.playerprofilesettings.AnchorMax = string.Join(" ", arg.Args.Skip(2));
                            break;
                        case "AnchorMin":
                            config.playerprofilesettings.AnchorMin = string.Join(" ", arg.Args.Skip(2));
                            break;
                        case "OffsetMax":
                            config.playerprofilesettings.OffsetMax = string.Join(" ", arg.Args.Skip(2));
                            break;
                        case "OffsetMin":
                            config.playerprofilesettings.OffsetMin = string.Join(" ", arg.Args.Skip(2));
                            break;
                    }
                    DestroyUi(player, XPerienceAdminPanelInfoBox);
                    AdminPlayerInfoPage(player);
                    break;
                case "playerbg":
                    switch(arg.GetString(1))
                    {
                        case "profilebg":
                            config.playerprofilesettings.profilebg = Convert.ToInt32(arg.GetString(2));
                            break;
                    }
                    DestroyUi(player, XPerienceAdminPanelProfileBackgrounds);
                    AdminProfileBackgrounds(player, config.playerprofilesettings.profilebg, Convert.ToInt16(arg.GetString(4)));
                    break;
                case "dailylimits":
                    switch (arg.GetString(1))
                    {
                        case "resetdailytimer":
                            DailyLimit(true);
                            foreach (var players in BasePlayer.activePlayerList)
                            {
                                players.ChatMessage(XPLang("dailylimitreset", players.UserIDString, config.dailytimer.dailyresettimerhours));
                            }
                            break;
                        case "dailyresettimerhours":
                            config.dailytimer.dailyresettimerhours = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "enabledailyxplimit":
                            config.dailyxpLimit.enabledailyxplimit = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "dailyxplimit":
                            config.dailyxpLimit.dailyxplimit = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "dailyxplimitvip":
                            config.dailyxpLimit.dailyxplimitvip = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "limitmultipliertype":
                            config.dailyxpLimit.limitmultipliertype = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "limitmultiplier":
                            config.dailyxpLimit.limitmultiplier = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "limitpercentage":
                            config.dailyxpLimit.limitpercentage = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "enabledailyresetlimit":
                            config.dailyresetLimit.enabledailyresetlimit = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "dailystatlimit":
                            config.dailyresetLimit.dailystatlimit = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "dailystatlimitvip":
                            config.dailyresetLimit.dailystatlimitvip = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "dailyskilllimit":
                            config.dailyresetLimit.dailyskilllimit = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "dailyskilllimitvip":
                            config.dailyresetLimit.dailyskilllimitvip = Convert.ToInt32(arg.GetString(2));
                            break;
                    }
                    DestroyUi(player, XPerienceAdminPanelDailyLimits);
                    AdminDailyLimitsPage(player);
                    break;
                case "timercolor":
                    switch (arg.GetString(1))
                    {
                        case "userpermissions":
                            config.defaultOptions.userpermissions = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "defaultliveuimoveable":
                            config.defaultOptions.liveuistatslocationmoveable = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "defaultliveui":
                            config.defaultOptions.liveuistatslocation = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "showchatprofile":
                            config.defaultOptions.showchatprofileonconnect = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "armorchat":
                            config.defaultOptions.disablearmorchat = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "NotifcationCooldown":
                            config.defaultOptions.NotifcationCooldown = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "defaultrestristresets":
                            config.defaultOptions.restristresets = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "allowrespec":
                            config.defaultOptions.allowrespec = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "defaultstattimer":
                            config.defaultOptions.resetminsstats = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "defaultskilltimer":
                            config.defaultOptions.resetminsskills = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "defaultvipstattimer":
                            config.defaultOptions.vipresetminstats = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "defaultvipskilltimer":
                            config.defaultOptions.vipresetminsskills = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "defaultplayerfixdata":
                            config.defaultOptions.playerfixdatatimer = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "defaultadminbypass":
                            config.defaultOptions.bypassadminreset = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "defaultfixdatadisable":
                            config.defaultOptions.disableplayerfixdata = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "defaulthardcore":
                            config.defaultOptions.hardcorenoreset = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "allowplayersearch":
                            config.defaultOptions.allowplayersearch = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "allowplayerreset":
                            config.defaultOptions.allowplayerreset = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "topplayersperpage":
                            config.defaultOptions.topplayersperpage = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "showonlinestatus":
                            config.defaultOptions.showonlinestatus = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "showfuelguage":
                            config.defaultOptions.showfuelguage = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "showspeedometer":
                            config.defaultOptions.showspeedometer = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "enabledashpanel":
                            config.defaultOptions.enabledashpanel = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "speedometertype":
                            config.defaultOptions.speedometertype = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "useprogressivelevelicons":
                            config.defaultOptions.useprogressivelevelicons = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "dropsgotoplayerinventory":
                            config.defaultOptions.dropsgotoplayerinventory = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "enableconfirmationprompt":
                            config.defaultOptions.enableconfirmationprompt = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "showchatnotifications":
                            config.defaultOptions.showchatnotifications = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "showlevelinchat":
                            config.defaultOptions.showlevelinchat = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "disablechats":
                            config.defaultOptions.hidechatnotifications = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "debugmode":
                            config.defaultOptions.debugmode = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "forcereload":
                            LoadImages(true);
                            break;
                    }
                    DestroyUi(player, XPerienceAdminPanelTimerColor);
                    AdminTimerColorPage(player);
                    break;
                case "soundeffects":
                    switch(arg.GetString(1))
                    {
                        case "levelup":
                            config.soundEffects.levelup = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "leveldown":
                            config.soundEffects.leveldown = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "rankup":
                            config.soundEffects.rankup = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "skillup":
                            config.soundEffects.skillup = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "statup":
                            config.soundEffects.statup = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "statreset":
                            config.soundEffects.statreset = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "skillreset":
                            config.soundEffects.skillreset = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "scavengerloot":
                            config.soundEffects.scavengerloot = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "foragerloot":
                            config.soundEffects.foragerloot = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "levelupeffect":
                            config.soundEffects.levelupeffect = arg.GetString(2);
                            break;
                        case "leveldowneffect":
                            config.soundEffects.leveldowneffect = arg.GetString(2);
                            break;
                        case "rankupeffect":
                            config.soundEffects.rankupeffect = arg.GetString(2);
                            break;
                        case "statupeffect":
                            config.soundEffects.statupeffect = arg.GetString(2);
                            break;
                        case "skillupeffect":
                            config.soundEffects.skillupeffect = arg.GetString(2);
                            break;
                        case "statreseteffect":
                            config.soundEffects.statreseteffect = arg.GetString(2);
                            break;
                        case "skillreseteffect":
                            config.soundEffects.skillreseteffect = arg.GetString(2);
                            break;
                        case "scavengerlooteffect":
                            config.soundEffects.scavengerlooteffect = arg.GetString(2);
                            break;
                        case "foragerlooteffect":
                            config.soundEffects.foragerlooteffect = arg.GetString(2);
                            break;
                    }
                    DestroyUi(player, XPerienceAdminPanelSoundEffects);
                    AdminSoundEffectsPage(player);
                    break;
                case "othermods":
                    switch (arg.GetString(1))
                    {
                        // Kill Records
                        #region Kill Records
                        case "krshowbutton":
                            config.xpBonus.showkrbutton = Convert.ToBoolean(arg.GetString(3));
                            break;
                        case "krenable":
                            config.xpBonus.enablebonus = Convert.ToBoolean(arg.GetString(3));
                            break;
                        case "krrequiredkills":
                            config.xpBonus.requiredkills = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "krbonusamount":
                            config.xpBonus.bonusxp = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "krbonusend":
                            config.xpBonus.endbonus = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "krenablemulti":
                            config.xpBonus.multibonus = Convert.ToBoolean(arg.GetString(3));
                            break;
                        case "krmultitype":
                            if (Convert.ToBoolean(arg.GetString(3)))
                            {
                                config.xpBonus.multibonustype = "increase";
                            }
                            else
                            {
                                config.xpBonus.multibonustype = "fixed";
                            }
                            break;
                        #endregion
                        // Economics
                        #region Economics
                        case "showbalanceprofile":
                            config.xpEcon.showbalanceprofile = Convert.ToBoolean(arg.GetString(3));
                            break;
                        case "econlevelup":
                            config.xpEcon.econlevelup = Convert.ToBoolean(arg.GetString(3));
                            break;
                        case "econleveldown":
                            config.xpEcon.econleveldown = Convert.ToBoolean(arg.GetString(3));
                            break;
                        case "econresetstats":
                            config.xpEcon.econresetstats = Convert.ToBoolean(arg.GetString(3));
                            break;
                        case "econresetskills":
                            config.xpEcon.econresetskills = Convert.ToBoolean(arg.GetString(3));
                            break;
                        case "econresetstat":
                            config.xpEcon.econresetstat = Convert.ToBoolean(arg.GetString(3));
                            break;
                        case "econresetskill":
                            config.xpEcon.econresetskill = Convert.ToBoolean(arg.GetString(3));
                            break;
                        case "econlevelreward":
                            config.xpEcon.econlevelreward = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "econlevelreduction":
                            config.xpEcon.econlevelreduction = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "econresetstatscost":
                            config.xpEcon.econresetstatscost = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "econresetskillscost":
                            config.xpEcon.econresetskillscost = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "econresetstatcost":
                            config.xpEcon.econresetstatcost = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "econresetskillcost":
                            config.xpEcon.econresetskillcost = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "econstatlevelcost":
                            config.xpEcon.econstatlevelcost = Convert.ToBoolean(arg.GetString(3));
                            break;
                        case "econskilllevelcost":
                            config.xpEcon.econskilllevelcost = Convert.ToBoolean(arg.GetString(3));
                            break;
                        case "econskilllevelcostmultiplier":
                            config.xpEcon.econskilllevelcostmultiplier = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "econstatlevelcostmultiplier":
                            config.xpEcon.econstatlevelcostmultiplier = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "econmentality":
                            config.xpEcon.econmentality = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "econdexterity":
                            config.xpEcon.econdexterity = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "econmight":
                            config.xpEcon.econmight = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "econcaptaincy":
                            config.xpEcon.econcaptaincy = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "econweaponry":
                            config.xpEcon.econweaponry = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "econninjary":
                            config.xpEcon.econninjary = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "econwoodcutter":
                            config.xpEcon.econwoodcutter = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "econsmithy":
                            config.xpEcon.econsmithy = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "econminer":
                            config.xpEcon.econminer = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "econforager":
                            config.xpEcon.econforager = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "econhunter":
                            config.xpEcon.econhunter = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "econfisher":
                            config.xpEcon.econfisher = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "econcrafter":
                            config.xpEcon.econcrafter = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "econframer":
                            config.xpEcon.econframer = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "econmedic":
                            config.xpEcon.econmedic = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "econscavenger":
                            config.xpEcon.econscavenger = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "econelectrician":
                            config.xpEcon.econelectrician = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "econdemolitionist":
                            config.xpEcon.econdemolitionist = Convert.ToDouble(arg.GetString(2));
                            break;
                        case "econtamer":
                            config.xpEcon.econtamer = Convert.ToDouble(arg.GetString(2));
                            break;
                        #endregion
                        // Server Rewards
                        #region Server Rewards
                        case "srewardlevelup":
                            config.sRewards.srewardlevelup = Convert.ToBoolean(arg.GetString(3));
                            break;
                        case "srewardleveldown":
                            config.sRewards.srewardleveldown = Convert.ToBoolean(arg.GetString(3));
                            break;
                        case "srewardresetstats":
                            config.sRewards.srewardresetstats = Convert.ToBoolean(arg.GetString(3));
                            break;
                        case "srewardresetskills":
                            config.sRewards.srewardresetskills = Convert.ToBoolean(arg.GetString(3));
                            break;
                        case "srewardresetstat":
                            config.sRewards.srewardresetstat = Convert.ToBoolean(arg.GetString(3));
                            break;
                        case "srewardresetskill":
                            config.sRewards.srewardresetskill = Convert.ToBoolean(arg.GetString(3));
                            break;
                        case "srewardlevelupamt":
                            config.sRewards.srewardlevelupamt = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "srewardleveldownamt":
                            config.sRewards.srewardleveldownamt = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "srewardresetstatscost":
                            config.sRewards.srewardresetstatscost = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "srewardresetskillscost":
                            config.sRewards.srewardresetskillscost = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "srewardresetstatcost":
                            config.sRewards.srewardresetstatcost = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "srewardresetskillcost":
                            config.sRewards.srewardresetskillcost = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "srewardstatlevelcost":
                            config.sRewards.srewardstatlevelcost = Convert.ToBoolean(arg.GetString(3));
                            break;
                        case "srewardskilllevelcost":
                            config.sRewards.srewardskilllevelcost = Convert.ToBoolean(arg.GetString(3));
                            break;
                        case "srewardskilllevelcostmultiplier":
                            config.sRewards.srewardskilllevelcostmultiplier = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "srewardstatlevelcostmultiplier":
                            config.sRewards.srewardstatlevelcostmultiplier = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "srewardmentality":
                            config.sRewards.srewardmentality = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "srewarddexterity":
                            config.sRewards.srewarddexterity = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "srewardmight":
                            config.sRewards.srewardmight = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "srewardcaptaincy":
                            config.sRewards.srewardcaptaincy = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "srewardweaponry":
                            config.sRewards.srewardweaponry = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "srewardninjary":
                            config.sRewards.srewardninjary = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "srewardwoodcutter":
                            config.sRewards.srewardwoodcutter = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "srewardsmithy":
                            config.sRewards.srewardsmithy = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "srewardminer":
                            config.sRewards.srewardminer = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "srewardforager":
                            config.sRewards.srewardforager = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "srewardhunter":
                            config.sRewards.srewardhunter = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "srewardfisher":
                            config.sRewards.srewardfisher = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "srewardcrafter":
                            config.sRewards.srewardcrafter = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "srewardframer":
                            config.sRewards.srewardframer = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "srewardmedic":
                            config.sRewards.srewardmedic = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "srewardscavenger":
                            config.sRewards.srewardscavenger = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "srewardelectrician":
                            config.sRewards.srewardelectrician = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "srewardemolitionist":
                            config.sRewards.srewardemolitionist = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "srewardtamer":
                            config.sRewards.srewardtamer = Convert.ToInt32(arg.GetString(2));
                            break;
                        #endregion
                        // Tamer
                        #region Tamer
                        case "tamerenable":
                            config.tamer.enabletame = Convert.ToBoolean(arg.GetString(3));
                            break;
                        case "tamermaxlevel":
                            config.tamer.maxlvl = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "tamercost":
                            config.tamer.pointcoststart = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "tamercostmultiplier":
                            config.tamer.costmultiplier = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "tamerchicken":
                            config.tamer.tamechicken = Convert.ToBoolean(arg.GetString(3));
                            break;
                        case "tamerboar":
                            config.tamer.tameboar = Convert.ToBoolean(arg.GetString(3));
                            break;
                        case "tamerstag":
                            config.tamer.tamestag = Convert.ToBoolean(arg.GetString(3));
                            break;
                        case "tamerwolf":
                            config.tamer.tamewolf = Convert.ToBoolean(arg.GetString(3));
                            break;
                        case "tamerbear":
                            config.tamer.tamebear = Convert.ToBoolean(arg.GetString(3));
                            break;
                        case "tamerpolarbear":
                            config.tamer.tamepolarbear = Convert.ToBoolean(arg.GetString(3));
                            break;
                        case "tamerchickenlevel":
                            config.tamer.chickenlevel = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "tamerboarlevel":
                            config.tamer.boarlevel = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "tamerstaglevel":
                            config.tamer.staglevel = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "tamerwolflevel":
                            config.tamer.wolflevel = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "tamerbearlevel":
                            config.tamer.bearlevel = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "tamerpolarbearlevel":
                            config.tamer.polarbearlevel = Convert.ToInt32(arg.GetString(2));
                            break;
                        #endregion
                    }
                    DestroyUi(player, XPerienceAdminPanelOtherMods);
                    AdminOtherModsPage(player, arg.GetString(4));
                    break;
                case "backpacks":
                    switch (arg.GetString(2))
                    {
                        case "backpackstatorskill":
                            config.backpacksmod.statorskill = arg.GetString(3);
                            break;
                        case "backpackremove":
                            config.backpacksmod.removeonunload = Convert.ToBoolean(arg.GetString(3));
                            break;
                        case "backpacklevel":
                            var editbackpacklevel = config.backpacksmod.BackPackSlots[Convert.ToInt32(arg.Args[3])];
                            editbackpacklevel.level = Convert.ToInt32(arg.Args[4]);
                            break;
                        case "backpackslots":
                            var editbackpackslot = config.backpacksmod.BackPackSlots[Convert.ToInt32(arg.Args[3])];
                            editbackpackslot.slots = Convert.ToInt32(arg.Args[4]);
                            break;
                    }
                    DestroyUi(player, XPerienceAdminPanelOtherMods);
                    AdminOtherModsPage(player, "backpacks", arg.GetString(1), Convert.ToInt32(arg.Args[3]));
                    break;
                case "backpacktoggle":
                    config.backpacksmod.enablebackpacks = Convert.ToBoolean(arg.GetString(2));
                    DestroyUi(player, XPerienceAdminPanelOtherMods);
                    AdminOtherModsPage(player, "backpacks", arg.GetString(1));
                    break;
                case "sql":
                    switch (arg.GetString(1))
                    {
                        case "sqlenable":
                            config.sql.enablesql = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "sqlhost":
                            config.sql.SQLhost = arg.GetString(2);
                            break;     
                        case "sqlport":
                            config.sql.SQLport = Convert.ToInt32(arg.GetString(2));
                            break;
                        case "sqldatabase":
                            config.sql.SQLdatabase = arg.GetString(2);
                            break;
                        case "sqlusername":
                            config.sql.SQLusername = arg.GetString(2);
                            break;
                        case "sqlpassword":
                            config.sql.SQLpassword = arg.GetString(2);
                            break;
                    }
                    DestroyUi(player, XPerienceAdminPanelSQL);
                    AdminSQLPage(player);
                    break;
                case "zonemanager":
                    switch (arg.GetString(1))
                    {
                        // Zone Manager
                        case "noxpgain":
                            config.zonemanagermod.noxpgain = string.Join(" ", arg.Args.Skip(2));
                            break;
                        case "noxploss":
                            config.zonemanagermod.noxploss = string.Join(" ", arg.Args.Skip(2));
                            break;
                        case "disablestatsandskills":
                            config.zonemanagermod.disablestatsandskills = string.Join(" ", arg.Args.Skip(2));
                            break;
                    }
                    DestroyUi(player, XPerienceAdminPanelOtherMods);
                    AdminOtherModsPage(player, "zonemanager");
                    break;
                case "eventhelper":
                    switch (arg.GetString(1))
                    {
                        // Event Helper
                        case "noxpgain":
                            config.eventhelpermod.noxpgain = string.Join(" ", arg.Args.Skip(2));
                            break;
                        case "noxploss":
                            config.eventhelpermod.noxploss = string.Join(" ", arg.Args.Skip(2));
                            break;
                        case "disablestatsandskills":
                            config.eventhelpermod.disablestatsandskills = string.Join(" ", arg.Args.Skip(2));
                            break;
                        // Survival Arena
                        case "sanoxpgain":
                            config.survivalarenamod.noxpgain = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "sanoxploss":
                            config.survivalarenamod.noxploss = Convert.ToBoolean(arg.GetString(2));
                            break;
                        case "sadisablestatsandskills":
                            config.survivalarenamod.disablestatsandskills = Convert.ToBoolean(arg.GetString(2));
                            break;
                    }
                    DestroyUi(player, XPerienceAdminPanelOtherMods);
                    AdminOtherModsPage(player, "eventhelper");
                    break;
                case "reset":
                    switch (arg.GetString(1))
                    {
                        case "resetconfig":
                            player.ChatMessage(XPLang("adminresetconfig", player.UserIDString));
                            LoadDefaultConfig();
                            SaveConfig();
                            DestroyUi(player, XPerienceAdminPanelReset);
                            AdminResetPage(player);
                            break;
                        case "resetall":
                            if (!player.IsAdmin && !permission.UserHasPermission(player.UserIDString, Admin)) return;
                            _xperienceCache.Clear();
                            _lootCache.Clear();
                            _XPerienceData.Clear();
                            _LootContainData.Clear();
                            _corpseCache.Clear();
                            _CorpseContainData.Clear();
                            CheckOnlineStatus();
                            SaveData();
                            if (config.sql.enablesql)
                            {
                                DeleteSQL();
                            }
                            if (XPerienceAddon != null)
                            {
                                XPerienceAddon.Call("xpglobalremove", player);
                                XPerienceAddon.Call("Xpaddonremove", player);
                                XPerienceAddon.Call("Xpaddonupdate", player);
                            }
                            player.ChatMessage(XPLang("resetxperience", player.UserIDString));
                            Interface.Oxide.ReloadPlugin("XPerience");
                            break;
                        case "resetalllevels":
                            PlayerAllLevelReset(player);
                            CheckOnlineStatus();
                            SaveData();
                            if (XPerienceAddon != null)
                            {
                                XPerienceAddon.Call("xpglobalremove", player);
                                XPerienceAddon.Call("Xpaddonremove", player);
                                XPerienceAddon.Call("Xpaddonupdate", player);
                            }
                            break;
                        case "resetallranks":
                            PlayerAllRankReset(player);
                            CheckOnlineStatus();
                            SaveData();
                            if (XPerienceAddon != null)
                            {
                                XPerienceAddon.Call("xpglobalremove", player);
                                XPerienceAddon.Call("Xpaddonremove", player);
                                XPerienceAddon.Call("Xpaddonupdate", player);
                            }
                            break;
                        case "resetallkr":
                            KillRecords.Call("AdminKRReset", player);
                            break;
                        case "resetnewsave":
                            config.defaultOptions.wipedataonnewsave = Convert.ToBoolean(arg.GetString(3));
                            break;
                        case "fix":
                            PlayerFixDataAll(player);
                            break;
                    }
                    DestroyUi(player, XPerienceAdminPanelReset);
                    AdminResetPage(player);
                    break;
            }
        }
        [ConsoleCommand("xp.color")]
        private void Cmdadminxpcolors(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();
            if (player == null) return;
            if (!player.IsAdmin && !permission.UserHasPermission(player.UserIDString, Admin)) return;
            string color = arg.GetString(1);
            switch (arg.GetString(0))
            {
                case "defaultuicolor":
                    config.uitextColor.defaultcolor = color;
                    break;
                case "ranknameuicolor":
                    config.uitextColor.rankname = color;
                    break;
                case "rankleveluicolor":
                    config.uitextColor.ranklevel = color;
                    break;
                case "rankxpuicolor":
                    config.uitextColor.rankxp = color;
                    break;
                case "leveluicolor":
                    config.uitextColor.level = color;
                    break;
                case "xpuicolor":
                    config.uitextColor.experience = color;
                    break;
                case "nextlvluicolor":
                    config.uitextColor.nextlevel = color;
                    break;
                case "remainuicolor":
                    config.uitextColor.remainingxp = color;
                    break;
                case "ssluicolor":
                    config.uitextColor.statskilllevels = color;
                    break;
                case "perksuicolor":
                    config.uitextColor.perks = color;
                    break;
                case "upointsuicolor":
                    config.uitextColor.unspentpoints = color;
                    break;
                case "spointsuicolor":
                    config.uitextColor.spentpoints = color;
                    break;
                case "petsuicolor":
                    config.uitextColor.pets = color;
                    break;
                case "mentality":
                    config.uitextColor.mentality = color;
                    break;
                case "dexterity":
                    config.uitextColor.dexterity = color;
                    break;
                case "might":
                    config.uitextColor.might = color;
                    break;
                case "captaincy":
                    config.uitextColor.captaincy = color;
                    break;
                case "weaponry":
                    config.uitextColor.weaponry = color;
                    break;
                case "Ninjary":
                    config.uitextColor.Ninjary = color;
                    break;
                case "woodcutter":
                    config.uitextColor.woodcutter = color;
                    break;
                case "smithy":
                    config.uitextColor.smithy = color;
                    break;
                case "miner":
                    config.uitextColor.miner = color;
                    break;
                case "forager":
                    config.uitextColor.forager = color;
                    break;
                case "hunter":
                    config.uitextColor.hunter = color;
                    break;
                case "fisher":
                    config.uitextColor.fisher = color;
                    break;
                case "crafter":
                    config.uitextColor.crafter = color;
                    break;
                case "framer":
                    config.uitextColor.framer = color;
                    break;
                case "medic":
                    config.uitextColor.medic = color;
                    break;
                case "scavenger":
                    config.uitextColor.scavenger = color;
                    break;
                case "electrician":
                    config.uitextColor.electrician = color;
                    break;
                case "demolitionist":
                    config.uitextColor.demolitionist = color;
                    break;
                case "tamer":
                    config.uitextColor.tamer = color;
                    break;
                case "xpbar":
                    config.uitextColor.xpbar = color;
                    break;
                case "armorbar":
                    config.uitextColor.armorbar = color;
                    break;
            }
            DestroyUi(player, XPerienceAdminPanelTimerColor);
            AdminTimerColorPage(player);         
        }
        [ConsoleCommand("xp.electrician")]
        private void Cmdadminxpelectrician(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();
            if (player == null) return;
            if (!player.IsAdmin && !permission.UserHasPermission(player.UserIDString, Admin)) return;
            switch (arg.GetString(0))
            {
                case "solarpaneldefault":
                    config.electrician.solarpaneldefault = Convert.ToInt32(arg.GetString(1));
                    break;
                case "smallbatterydefault":
                    config.electrician.smallbatterydefault = Convert.ToInt32(arg.GetString(1));
                    break;
                case "mediumbatterydefault":
                    config.electrician.mediumbatterydefault = Convert.ToInt32(arg.GetString(1));
                    break;
                case "largebatterydefault":
                    config.electrician.largebatterydefault = Convert.ToInt32(arg.GetString(1));
                    break;
                case "smallgeneratordefault":
                    config.electrician.smallgeneratordefault = Convert.ToInt32(arg.GetString(1));
                    break;
                case "testgeneratordefault":
                    config.electrician.testgeneratordefault = Convert.ToInt32(arg.GetString(1));
                    break;
                case "electricwindmilldefault":
                    config.electrician.electricwindmilldefault = Convert.ToInt32(arg.GetString(1));
                    break;
            }
            DestroyUi(player, XPerienceAdminPanelElectricianSettings);
            AdminElectricianSettings(player);
        }
        [ConsoleCommand("xp.ranks")]
        private void Cmdadminxpranks(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();
            if (player == null) return;
            if (!player.IsAdmin && !permission.UserHasPermission(player.UserIDString, Admin)) return;
            int rankid = 0;
            switch (arg.GetString(0))
            {
                // Edit Rank
                case "editrank":
                    var editrank = config.xpLevelRanks.ranks[Convert.ToInt32(arg.Args[1])];
                    switch (arg.GetString(2))
                    {
                        case "rankname":
                            editrank.name = string.Join(" ", arg.Args.Skip(3));
                            break;
                        case "ranksig":
                            editrank.sig = string.Join(" ", arg.Args.Skip(3));
                            break;
                        case "rankdet":
                            editrank.description = string.Join(" ", arg.Args.Skip(3));
                            break;
                        case "rankimage":
                            editrank.image = string.Join(" ", arg.Args.Skip(3));
                            break;
                        case "rankgroup":
                            editrank.group = string.Join(" ", arg.Args.Skip(3));
                            break;
                    }
                    rankid = Convert.ToInt32(arg.Args[1]);
                    break;
                // New Rank
                case "newrank":
                    config.xpLevelRanks.ranks.Add(config.xpLevelRanks.ranks.Count, new Ranks
                    {
                        name = "Rank Name",
                        sig = "〘SIG〙",
                        image = "https://i.imgur.com/7Z9tg7J.png",
                        group = "groupname",
                        description = "details about this rank"
                    });
                    rankid = config.xpLevelRanks.ranks.Count - 1;
                    break;
            }                     
            DestroyUi(player, XPerienceAdminPanelRanks);
            AdminRanksPage(player, "editrank", rankid);
        }
        [ConsoleCommand("xp.images")]
        private void Cmdadminimages(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();
            if (player == null || !player.IsAdmin) return;
            switch (arg.Args[0])
            {
                case "resetimages":
                    #region Default URLS
                    config.imageicons.xperiencelogo = "https://i.imgur.com/d16zkJk.png";
                    config.imageicons.mainicon = "https://i.imgur.com/JUwd2a8.png";
                    config.imageicons.mentality = "https://i.imgur.com/LQWZH34.png";
                    config.imageicons.dexterity = "https://i.imgur.com/iBizHFq.png";
                    config.imageicons.might = "https://i.imgur.com/k9p16oj.png";
                    config.imageicons.captaincy = "https://i.imgur.com/DNYOr3Q.png";
                    config.imageicons.weaponry = "https://i.imgur.com/P7Tr0rE.png";
                    config.imageicons.ninjary = "https://i.imgur.com/jyo4foK.png";
                    config.imageicons.woodcutter = "https://i.imgur.com/4tQpa6e.png";
                    config.imageicons.smithy = "https://i.imgur.com/wW9oaUx.png";
                    config.imageicons.miner = "https://i.imgur.com/B5JS3es.png";
                    config.imageicons.forager = "https://i.imgur.com/ohoU0Jl.png";
                    config.imageicons.hunter = "https://i.imgur.com/w4dlc8a.png";
                    config.imageicons.fisher = "https://i.imgur.com/ete67me.png";
                    config.imageicons.crafter = "https://i.imgur.com/vut4FVq.png";
                    config.imageicons.framer = "https://i.imgur.com/Rm2pezt.png";
                    config.imageicons.medic = "https://i.imgur.com/DoIP2aL.png";
                    config.imageicons.scavenger = "https://i.imgur.com/yn5F9Cx.png";
                    config.imageicons.electrician = "https://i.imgur.com/0l8dux1.png";
                    config.imageicons.demolitionist = "https://i.imgur.com/VEX9WfH.png";
                    config.imageicons.tamer = "https://i.imgur.com/ZnKAIAR.png";
                    config.imageicons.chicken = "https://i.imgur.com/qJYzAZ6.png";
                    config.imageicons.boar = "https://i.imgur.com/ou1DgxE.png";
                    config.imageicons.stag = "https://i.imgur.com/CwACyuG.png";
                    config.imageicons.wolf = "https://i.imgur.com/J18C2Je.png";
                    config.imageicons.bear = "https://i.imgur.com/kTbD3B1.png";
                    config.imageicons.polarbear = "https://i.imgur.com/Shk1sza.png";
                    config.imageicons.archery = "https://i.imgur.com/qdm8AWg.png";
                    config.imageicons.wizardry = "https://i.imgur.com/aNuEdni.png";
                    config.imageicons.online = "https://i.imgur.com/WafMLkk.png";
                    config.imageicons.offline = "https://i.imgur.com/QtbFqQz.png";
                    config.imageicons.backpack = "https://i.imgur.com/zJbJpwx.png";
                    config.imageicons.xp = "https://i.imgur.com/u46vNfo.png";
                    config.imageicons.level = "https://i.imgur.com/2ouaBoh.png";
                    config.imageicons.armor = "https://i.imgur.com/mEr59mA.png";
                    config.imageicons.level0 = "https://i.imgur.com/7KTHgTa.png";
                    config.imageicons.level2 = "https://i.imgur.com/GocRCM1.png";
                    config.imageicons.level4 = "https://i.imgur.com/KxxRouB.png";
                    config.imageicons.level6 = "https://i.imgur.com/Dgy9X9P.png";
                    config.imageicons.level8 = "https://i.imgur.com/IYloCuJ.png";
                    config.imageicons.level10 = "https://i.imgur.com/Xz9ZgZ4.png";
                    config.imageicons.dash = "https://i.imgur.com/LLKCN1n.png";
                    config.imageicons.raideasy = "https://i.imgur.com/cAUlHlA.png";
                    config.imageicons.raidmedium = "https://i.imgur.com/Tzhbic3.png";
                    config.imageicons.raidhard = "https://i.imgur.com/MGNUPg0.png";
                    config.imageicons.raidexpert = "https://i.imgur.com/bPql6Tz.png";
                    config.imageicons.raidnightmare = "https://i.imgur.com/RpiC5dy.png";
                    config.imageicons.profilebg = "https://i.imgur.com/DdVLKsE.png";
                    config.imageicons.menubg = "https://i.imgur.com/DrWCba0.jpg";
                    config.imageicons.bgimages.Clear();
                    SaveData();
                    SaveConfig();
                    Interface.Oxide.ReloadPlugin("XPerience");
                    #endregion
                    break;
                case "reloadimages":
                    if (config.imageicons.uselocalpath)
                    {
                        DownloadImages();
                    }
                    else
                    {
                        LoadImages(true);
                    }
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "checkimages":
                    int i = 0;
                    int r = 0;
                    _CheckImageList = new Dictionary<string, string>();
                    _CheckImageListReload = new Dictionary<string, string>();
                    _CheckImageList.Add(XPerienceicon, config.imageicons.mainicon);
                    _CheckImageList.Add(XPeriencementality, config.imageicons.mentality);
                    _CheckImageList.Add(XPeriencedexterity, config.imageicons.dexterity);
                    _CheckImageList.Add(XPeriencemight, config.imageicons.might);
                    _CheckImageList.Add(XPeriencecaptaincy, config.imageicons.captaincy);
                    _CheckImageList.Add(XPerienceweaponry, config.imageicons.weaponry);
                    _CheckImageList.Add(XPerienceninjary, config.imageicons.ninjary);
                    _CheckImageList.Add(XPeriencewoodcutter, config.imageicons.woodcutter);
                    _CheckImageList.Add(XPeriencesmithy, config.imageicons.smithy);
                    _CheckImageList.Add(XPerienceminer, config.imageicons.miner);
                    _CheckImageList.Add(XPerienceforager, config.imageicons.forager);
                    _CheckImageList.Add(XPeriencehunter, config.imageicons.hunter);
                    _CheckImageList.Add(XPeriencefisher, config.imageicons.fisher);
                    _CheckImageList.Add(XPeriencecrafter, config.imageicons.crafter);
                    _CheckImageList.Add(XPerienceframer, config.imageicons.framer);
                    _CheckImageList.Add(XPeriencemedic, config.imageicons.medic);
                    _CheckImageList.Add(XPeriencescavenger, config.imageicons.scavenger);
                    _CheckImageList.Add(XPerienceelectrician, config.imageicons.electrician);
                    _CheckImageList.Add(XPeriencedemolitionist, config.imageicons.demolitionist);
                    _CheckImageList.Add(XPeriencetamer, config.imageicons.tamer);
                    _CheckImageList.Add(XPeriencechicken, config.imageicons.chicken);
                    _CheckImageList.Add(XPerienceboar, config.imageicons.boar);
                    _CheckImageList.Add(XPeriencestag, config.imageicons.stag);
                    _CheckImageList.Add(XPeriencewolf, config.imageicons.wolf);
                    _CheckImageList.Add(XPeriencebear, config.imageicons.bear);
                    _CheckImageList.Add(XPeriencepolarbear, config.imageicons.polarbear);
                    _CheckImageList.Add(XPeriencearchery, config.imageicons.archery);
                    _CheckImageList.Add(XPeriencewizardry, config.imageicons.wizardry);
                    _CheckImageList.Add(XPerienceonline, config.imageicons.online);
                    _CheckImageList.Add(XPerienceoffline, config.imageicons.offline);
                    _CheckImageList.Add(XPeriencebackpack, config.imageicons.backpack);
                    _CheckImageList.Add(XPeriencelevel, config.imageicons.level);
                    _CheckImageList.Add(XPeriencelevel0, config.imageicons.level0);
                    _CheckImageList.Add(XPeriencelevel2, config.imageicons.level2);
                    _CheckImageList.Add(XPeriencelevel4, config.imageicons.level4);
                    _CheckImageList.Add(XPeriencelevel6, config.imageicons.level6);
                    _CheckImageList.Add(XPeriencelevel8, config.imageicons.level8);
                    _CheckImageList.Add(XPeriencelevel10, config.imageicons.level10);
                    _CheckImageList.Add(XPeriencedash, config.imageicons.dash);
                    _CheckImageList.Add(XPeriencexp, config.imageicons.xp);
                    _CheckImageList.Add(XPeriencearmor, config.imageicons.armor);
                    _CheckImageList.Add(XPeriencelogo, config.imageicons.xperiencelogo);
                    foreach (var rank in config.xpLevelRanks.ranks)
                    {
                        if (!rank.Value.image.IsNullOrEmpty() && !_CheckImageList.ContainsKey(rank.Value.image))
                        {
                            _CheckImageList.Add(rank.Value.name, rank.Value.image);
                        }
                    }
                    foreach (var bgimg in config.imageicons.bgimages)
                    {
                        if (!bgimg.Value.url.IsNullOrEmpty() && !_CheckImageList.ContainsKey(bgimg.Value.url))
                        {
                            _CheckImageList.Add(bgimg.Value.name, bgimg.Value.url);
                        }
                    }
                    _CheckImageList.Add(XPerienceraideasy, config.imageicons.raideasy);
                    _CheckImageList.Add(XPerienceraidmedium, config.imageicons.raidmedium);
                    _CheckImageList.Add(XPerienceraidhard, config.imageicons.raidhard);
                    _CheckImageList.Add(XPerienceraidexpert, config.imageicons.raidexpert);
                    _CheckImageList.Add(XPerienceraidnightmare, config.imageicons.raidnightmare);
                    _CheckImageList.Add(XPerienceprofilebg, config.imageicons.profilebg);
                    _CheckImageList.Add(XPeriencemenubg, config.imageicons.menubg); 
                    foreach (var image in _CheckImageList)
                    {
                        bool imagefound = ImageLibrary.Call<bool>("HasImage", image.Key);
                        i++;
                        if (!imagefound)
                        {
                            r++;
                            _CheckImageListReload.Add(image.Key, image.Value);
                            Puts($"Image Not Found: {image.Key} - adding image to reload list.");
                        }
                    }
                    if (r > 0)
                    {
                        ImageLibrary?.Call("ImportImageList", Name, _CheckImageListReload, 0UL, true, new Action(Ready));
                    }
                    Puts($"Image Check Complete: {i} images found | {r} images reloaded");
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "uselocalpath":
                    config.imageicons.uselocalpath = Convert.ToBoolean(arg.Args[1]);
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "rootpath":
                    string path = Path.GetPathRoot(string.Join(" ", arg.Args.Skip(1)));
                    config.imageicons.rootpath = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "bgnew":
                    config.imageicons.bgimages.Add(config.imageicons.bgimages.Count, new BackgroundImgs
                    {
                        name = "BG Name",
                        url = "https://i.imgur.com/7Z9tg7J.png"
                    });
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "editbgimage", config.imageicons.bgimages.Count - 1);
                    break;
                case "editbgimage":
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "editbgimage", Convert.ToInt32(arg.Args[1]));
                    break;
                case "editbgimagename":
                    var imgname = config.imageicons.bgimages[Convert.ToInt32(arg.Args[1])];
                    imgname.name = string.Join(" ", arg.Args.Skip(2));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "editbgimage", Convert.ToInt32(arg.Args[1]));
                    break;
                case "editbgimageurl":
                    var imgurl = config.imageicons.bgimages[Convert.ToInt32(arg.Args[1])];
                    imgurl.url = string.Join(" ", arg.Args.Skip(2));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "editbgimage", Convert.ToInt32(arg.Args[1]));
                    break;
                case "deletebgimage":
                    config.imageicons.bgimages.Remove(Convert.ToInt32(arg.Args[1]));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "bgimages");
                    return;
                case "xperiencelogo":
                    config.imageicons.xperiencelogo = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "mainicon":
                    config.imageicons.mainicon = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                #region Stats
                case "mentality":
                    config.imageicons.mentality = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "dexterity":
                    config.imageicons.dexterity = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "might":
                    config.imageicons.might = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "weaponry":
                    config.imageicons.weaponry = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "ninjary":
                    config.imageicons.ninjary = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "captaincy":
                    config.imageicons.captaincy = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                #endregion
                #region Skills
                case "woodcutter":
                    config.imageicons.woodcutter = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "smithy":
                    config.imageicons.smithy = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "miner":
                    config.imageicons.miner = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "fisher":
                    config.imageicons.fisher = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "forager":
                    config.imageicons.forager = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "hunter":
                    config.imageicons.hunter = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "crafter":
                    config.imageicons.crafter = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "framer":
                    config.imageicons.framer = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "medic":
                    config.imageicons.medic = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "scavenger":
                    config.imageicons.scavenger = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "electrician":
                    config.imageicons.electrician = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "demolitionist":
                    config.imageicons.demolitionist = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                #endregion
                #region Other
                case "chicken":
                    config.imageicons.chicken = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "boar":
                    config.imageicons.boar = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "stag":
                    config.imageicons.stag = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "wolf":
                    config.imageicons.wolf = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "bear":
                    config.imageicons.bear = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "polarbear":
                    config.imageicons.polarbear = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "archery":
                    config.imageicons.archery = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "wizardry":
                    config.imageicons.wizardry = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "online":
                    config.imageicons.online = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "offline":
                    config.imageicons.offline = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "backpack":
                    config.imageicons.backpack = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "xp":
                    config.imageicons.xp = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "armor":
                    config.imageicons.armor = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "level":
                    config.imageicons.level = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "level0":
                    config.imageicons.level0 = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "level2":
                    config.imageicons.level2 = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "level4":
                    config.imageicons.level4 = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "level6":
                    config.imageicons.level6 = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "level8":
                    config.imageicons.level8 = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "level10":
                    config.imageicons.level10 = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "dash":
                    config.imageicons.dash = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "profilebg":
                    config.imageicons.profilebg = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "menubg":
                    config.imageicons.menubg = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "raideasy":
                    config.imageicons.raideasy = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "raidmedium":
                    config.imageicons.raidmedium = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "raidhard":
                    config.imageicons.raidhard = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "raidexpert":
                    config.imageicons.raidexpert = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                case "raidnightmare":
                    config.imageicons.raidnightmare = string.Join(" ", arg.Args.Skip(1));
                    DestroyUi(player, XPerienceAdminPanelImages);
                    AdminImagePaths(player, "main");
                    break;
                    #endregion
            }
        }
        [ConsoleCommand("xp.skillitems")]
        private void Cmdadminskillitems(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();
            if (player == null || !player.IsAdmin) return;
            switch (arg.Args[0])
            {
                case "forager":
                    DestroyUi(player, XPerienceAdminPanelSkills);
                    DestroyUi(player, XPerienceAdminPanelSkillItems);
                    AdminSkillItems(player, "forager", "forager");
                    break;
                case "scavenger":
                    DestroyUi(player, XPerienceAdminPanelSkills);
                    DestroyUi(player, XPerienceAdminPanelSkillItems);
                    AdminSkillItems(player, "scavenger", "scavenger");
                    break;
                case "newitem":
                    switch (arg.Args[1])
                    {
                        case "forager":
                            config.forager.randomChanceList.Add(config.forager.randomChanceList.Count, new RandomChanceList
                            {
                                shortname = "item.shortname",
                                displayname = "",
                                SkinID = 0,
                                amount = 1
                            });
                            DestroyUi(player, XPerienceAdminPanelSkills);
                            DestroyUi(player, XPerienceAdminPanelSkillItems);
                            AdminSkillItems(player, "edititem", "forager", config.forager.randomChanceList.Count - 1);
                            break;
                        case "scavenger":
                            config.scavenger.scavChanceList.Add(config.scavenger.scavChanceList.Count, new ScavChanceList
                            {
                                shortname = "item.shortname",
                                displayname = "",
                                SkinID = 0,
                                amount = 1,
                                maxamount = 5,
                                requiredlevel = 1
                            });
                            DestroyUi(player, XPerienceAdminPanelSkills);
                            DestroyUi(player, XPerienceAdminPanelSkillItems);
                            AdminSkillItems(player, "edititem", "scavenger", config.scavenger.scavChanceList.Count - 1);
                            break;
                    }
                    break;
                case "edititem":
                    switch (arg.Args[1])
                    {
                        case "forager":
                            var fitem = config.forager.randomChanceList[Convert.ToInt32(arg.Args[2])];
                            switch (arg.Args[3])
                            {
                                case "shortname":
                                    fitem.shortname = arg.Args[4];
                                    break;
                                case "displayname":
                                    fitem.displayname = string.Join(" ", arg.Args.Skip(4));
                                    //fitem.displayname = arg.Args[4];
                                    break;
                                case "skinid":
                                    fitem.SkinID = Convert.ToUInt64(arg.Args[4]);
                                    break;
                                case "amount":
                                    fitem.amount = Convert.ToInt32(arg.Args[4]);
                                    break;
                            }
                            DestroyUi(player, XPerienceAdminPanelSkillItems);
                            AdminSkillItems(player, "edititem", "forager", Convert.ToInt32(arg.Args[2]));
                            break;
                        case "scavenger":
                            var sitem = config.scavenger.scavChanceList[Convert.ToInt32(arg.Args[2])];
                            switch (arg.Args[3])
                            {
                                case "shortname":
                                    sitem.shortname = arg.Args[4];
                                    break;
                                case "displayname":
                                    sitem.displayname = string.Join(" ", arg.Args.Skip(4));
                                    //sitem.displayname = arg.Args[4];
                                    break;
                                case "skinid":
                                    sitem.SkinID = Convert.ToUInt64(arg.Args[4]);
                                    break;
                                case "amount":
                                    sitem.amount = Convert.ToInt32(arg.Args[4]);
                                    break;
                                case "maxamount":
                                    sitem.maxamount = Convert.ToInt32(arg.Args[4]);
                                    break;
                                case "requiredlevel":
                                    sitem.requiredlevel = Convert.ToInt32(arg.Args[4]);
                                    break;
                            }
                            DestroyUi(player, XPerienceAdminPanelSkillItems);
                            AdminSkillItems(player, "edititem", "scavenger", Convert.ToInt32(arg.Args[2]));
                            break;
                    }
                    break;
                case "deleteitem":
                    switch (arg.Args[1])
                    {
                        case "forager":
                            config.forager.randomChanceList.Remove(Convert.ToInt32(arg.Args[2]));
                            DestroyUi(player, XPerienceAdminPanelSkills);
                            DestroyUi(player, XPerienceAdminPanelSkillItems);
                            AdminSkillItems(player, "forager", "forager");
                            break;
                        case "scavenger":
                            config.scavenger.scavChanceList.Remove(Convert.ToInt32(arg.Args[2]));
                            DestroyUi(player, XPerienceAdminPanelSkills);
                            DestroyUi(player, XPerienceAdminPanelSkillItems);
                            AdminSkillItems(player, "scavenger", "scavenger");
                            break;
                    }
                    break;
            }
        }
        [ConsoleCommand("xp.specialgroups")]
        private void Cmdadminspecialgroups(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();
            if (player == null || !player.IsAdmin) return;
            switch (arg.Args[0])
            {
                case "newgroup":
                    config.specialGroups.specialgroups.Add(config.specialGroups.specialgroups.Count, new Specialgroups
                    {
                        groupname = "Group Name",
                        permissionname = "groupname",
                        grouppriority = 1,
                        xpboost = 0.01,
                        dailyxplimit = 1000,
                        dailystatlimitboost = 1,
                        dailyskilllimitboost = 1
                    });
                    DestroyUi(player, XPerienceAdminPanelSpecialGroups);
                    AdminSpecialGroups(player, "editgroup", config.specialGroups.specialgroups.Count - 1);
                    break;
                case "editgroup":
                    var group = config.specialGroups.specialgroups[Convert.ToInt32(arg.Args[1])];
                    switch(arg.Args[2])
                    {
                        case "groupname":
                            group.groupname = string.Join(" ", arg.Args.Skip(3));
                            break;
                        case "permissionname":
                            group.permissionname = string.Join(" ", arg.Args.Skip(3));
                            break;
                        case "grouppriority":
                            group.grouppriority = Convert.ToInt32(arg.Args[3]);
                            break;
                        case "xpboost":
                            group.xpboost = Convert.ToDouble(arg.Args[3]);
                            break;
                        case "dailyxplimit":
                            group.dailyxplimit = Convert.ToInt32(arg.Args[3]);
                            break;
                        case "dailystatlimitboost":
                            group.dailystatlimitboost = Convert.ToInt32(arg.Args[3]);
                            break;
                        case "dailyskilllimitboost":
                            group.dailyskilllimitboost = Convert.ToInt32(arg.Args[3]);
                            break;
                    }
                    DestroyUi(player, XPerienceAdminPanelSpecialGroups);
                    AdminSpecialGroups(player, "editgroup", Convert.ToInt32(arg.Args[1]));
                    break;
                case "deletegroup":
                    config.specialGroups.specialgroups.Remove(Convert.ToInt32(arg.Args[1]));
                    DestroyUi(player, XPerienceAdminPanelSpecialGroups);
                    AdminSpecialGroups(player);
                    break;
            }
        }
        private void ClearUIs(BasePlayer player)
        {
            if (player == null) return;
            DestroyUi(player, XPerienceAdminPanelInfo);
            DestroyUi(player, XPerienceAdminPanelLevelXP);
            DestroyUi(player, XPerienceAdminPanelRanks);
            DestroyUi(player, XPerienceAdminPanelStats);
            DestroyUi(player, XPerienceAdminPanelSkills);
            DestroyUi(player, XPerienceAdminPanelSkillItems);
            DestroyUi(player, XPerienceAdminPanelTimerColor);
            DestroyUi(player, XPerienceAdminPanelOtherMods);
            DestroyUi(player, XPerienceAdminPanelSQL);
            DestroyUi(player, XPerienceAdminPanelReset);
            DestroyUi(player, XPerienceAdminPanelInfoBox);
            DestroyUi(player, XPerienceAdminPanelAddon);
            DestroyUi(player, XPerienceAdminPanelDailyLimits);
            DestroyUi(player, XPeriencePlayerCalculations);
            DestroyUi(player, XPeriencePlayerCalculationsLevelSelection);
            DestroyUi(player, XPeriencePlayerCalculationsRanksSelection);
            DestroyUi(player, XPerienceAdminPanelSoundEffects);
            DestroyUi(player, XPerienceAdminPanelElectricianSettings);
            DestroyUi(player, XPerienceAdminPanelProfileBackgrounds);
            DestroyUi(player, XPerienceAdminPanelImages);
            DestroyUi(player, XPerienceAdminPanelSpecialGroups);
            DestroyUi(player, XPerienceAdminPanelBackpackSelection);
        }
        #endregion
        // Control Panels
        private void AdminControlPanel(BasePlayer player)
        {
            if (player == null) return;
            if (!player.IsAdmin && !permission.UserHasPermission(player.UserIDString, Admin)) return;
            var ControlPanelelements = new CuiElementContainer();
            float height = 0.050f;
            int font = 14;
            int row = 0;
            double space = .02;
            // Main Screen
            ControlPanelelements.Add(new CuiPanel
            {
                Image =
                {
                    Color = ".1 .1 .1 .99"
                },
                RectTransform =
                {
                    AnchorMin = $"0 0",
                    AnchorMax = $"1 1"
                },
                CursorEnabled = true
            }, "Overlay", XPerienceAdminPanelMain);
            // Top Label
            ControlPanelelements.Add(XPUILabel($"ⓍⓅerience {XPLang("adminpanel", player.UserIDString)}:", 1, 0.060f, TextAnchor.MiddleLeft, 20, ".01", ".18", "1 1 1 1"), XPerienceAdminPanelMain);
            ControlPanelelements.Add(new CuiElement
            {
                Parent = XPerienceAdminPanelMain,
                Components =
                {
                    new CuiRawImageComponent
                    {
                        Png = ImageLibrary?.Call<string>("GetImage", XPerienceicon)
                    },
                    new CuiRectTransformComponent
                    {
                        AnchorMin = ".01 .80",
                        AnchorMax = ".12 .95"
                    }
                }
            });
            // Navigation Menu
            ControlPanelelements.Add(XPUIPanel("0 0", ".15 .75", "1 1 1 0"), XPerienceAdminPanelMain, XPerienceAdminPanelMenu);
            ControlPanelelements.Add(XPUIMenuButton("xp.admin mystats", row++, height, font, "0 0 0 .7", $" <color=#40ff00>◉</color>  {XPLang("adminmenu_014", player.UserIDString)}", ".05", ".95", TextAnchor.MiddleLeft, "1 1 1 1", space), XPerienceAdminPanelMenu);
            ControlPanelelements.Add(XPUIMenuButton("xp.admin main", row++, height, font, "0 0 0 .7", $" <color=#40ff00>◉</color>  {XPLang("adminmenu_001", player.UserIDString)}", ".05", ".95", TextAnchor.MiddleLeft, "1 1 1 1", space), XPerienceAdminPanelMenu);
            ControlPanelelements.Add(XPUIMenuButton("xp.admin levelxp", row++, height, font, "0 0 0 .7", $" <color=#40ff00>◉</color>  {XPLang("adminmenu_002", player.UserIDString)}", ".05", ".95", TextAnchor.MiddleLeft, "1 1 1 1", space), XPerienceAdminPanelMenu);
            ControlPanelelements.Add(XPUIMenuButton("xp.admin ranks main", row++, height, font, "0 0 0 .7", $" <color=#40ff00>◉</color>  {XPLang("adminmenu_020", player.UserIDString)}", ".05", ".95", TextAnchor.MiddleLeft, "1 1 1 1", space), XPerienceAdminPanelMenu);
            ControlPanelelements.Add(XPUIMenuButton("xp.admin dailylimits", row++, height, font, "0 0 0 .7", $" <color=#40ff00>◉</color>  {XPLang("adminmenu_018", player.UserIDString)}", ".05", ".95", TextAnchor.MiddleLeft, "1 1 1 1", space), XPerienceAdminPanelMenu);
            ControlPanelelements.Add(XPUIMenuButton("xp.admin stats main", row++, height, font, "0 0 0 .7", $" <color=#40ff00>◉</color>  {XPLang("adminmenu_003", player.UserIDString)}", ".05", ".95", TextAnchor.MiddleLeft, "1 1 1 1", space), XPerienceAdminPanelMenu);
            ControlPanelelements.Add(XPUIMenuButton("xp.admin skills main", row++, height, font, "0 0 0 .7", $" <color=#40ff00>◉</color>  {XPLang("adminmenu_004", player.UserIDString)}", ".05", ".95", TextAnchor.MiddleLeft, "1 1 1 1", space), XPerienceAdminPanelMenu);
            ControlPanelelements.Add(XPUIMenuButton("xp.admin playerdata", row++, height, font, "0 0 0 .7", $" <color=#40ff00>◉</color>  {XPLang("adminmenu_022", player.UserIDString)}", ".05", ".95", TextAnchor.MiddleLeft, "1 1 1 1", space), XPerienceAdminPanelMenu);
            ControlPanelelements.Add(XPUIMenuButton("xp.admin timercolor", row++, height, font, "0 0 0 .7", $" <color=#40ff00>◉</color>  {XPLang("adminmenu_005", player.UserIDString)}", ".05", ".95", TextAnchor.MiddleLeft, "1 1 1 1", space), XPerienceAdminPanelMenu);
            ControlPanelelements.Add(XPUIMenuButton("xp.admin othermods main", row++, height, font, "0 0 0 .7", $" <color=#40ff00>◉</color>  {XPLang("adminmenu_012", player.UserIDString)}", ".05", ".95", TextAnchor.MiddleLeft, "1 1 1 1", space), XPerienceAdminPanelMenu);
            ControlPanelelements.Add(XPUIMenuButton("xp.admin specialgroups", row++, height, font, "0 0 0 .7", $" <color=#40ff00>◉</color>  {XPLang("adminmenu_024", player.UserIDString)}", ".05", ".95", TextAnchor.MiddleLeft, "1 1 1 1", space), XPerienceAdminPanelMenu);
            ControlPanelelements.Add(XPUIMenuButton("xp.admin images main 0", row++, height, font, "0 0 0 .7", $" <color=#40ff00>◉</color>  {XPLang("adminmenu_023", player.UserIDString)}", ".05", ".95", TextAnchor.MiddleLeft, "1 1 1 1", space), XPerienceAdminPanelMenu);
            ControlPanelelements.Add(XPUIMenuButton("xp.admin soundeffects", row++, height, font, "0 0 0 .7", $" <color=#40ff00>◉</color>  {XPLang("adminmenu_021", player.UserIDString)}", ".05", ".95", TextAnchor.MiddleLeft, "1 1 1 1", space), XPerienceAdminPanelMenu);
            //ControlPanelelements.Add(XPUIMenuButton("xp.admin calculationslevels 0 0", row++, height, font, "0 0 0 .7", $" <color=#40ff00>◉</color>  {XPLang("adminmenu_019", player.UserIDString)} (beta)", ".05", ".95", TextAnchor.MiddleLeft, "1 1 1 1", space), XPerienceAdminPanelMenu);
            ControlPanelelements.Add(XPUIMenuButton("xp.admin sql", row++, height, font, "0 0 0 .7", $" <color=#40ff00>◉</color>  {XPLang("adminmenu_006", player.UserIDString)}", ".05", ".95", TextAnchor.MiddleLeft, "1 1 1 1", space), XPerienceAdminPanelMenu);
            ControlPanelelements.Add(XPUIMenuButton("xp.admin addon", row++, height, font, "0 0 0 .7", $" <color=#00FFFF>◉</color>  {XPLang("adminmenu_017", player.UserIDString)}", ".05", ".95", TextAnchor.MiddleLeft, "1 1 1 1", space), XPerienceAdminPanelMenu);
            ControlPanelelements.Add(XPUIMenuButton("xp.admin save", row++, height, font, "0 0 0 .7", $" <color=#ffff00>◉</color>  {XPLang("adminmenu_0070", player.UserIDString)}", ".05", ".95", TextAnchor.MiddleLeft, "1 1 1 1", space), XPerienceAdminPanelMenu);
            ControlPanelelements.Add(XPUIMenuButton("xp.admin reload", row++, height, font, "0 0 0 .7", $" <color=#40ff00>◉</color>  {XPLang("adminmenu_0080", player.UserIDString)}", ".05", ".95", TextAnchor.MiddleLeft, "1 1 1 1", space), XPerienceAdminPanelMenu);
            ControlPanelelements.Add(XPUIMenuButton("xp.admin close", row++, height, font, "0 0 0 .7", $" <color=#FF0000>◉</color>  {XPLang("adminmenu_009", player.UserIDString)}", ".05", ".95", TextAnchor.MiddleLeft, "1 1 1 1", space), XPerienceAdminPanelMenu);
            ControlPanelelements.Add(XPUIMenuButton("xp.admin reset", row++, height, font, "0 0 0 .7", $" <color=#FF0000>◉</color>  {XPLang("adminmenu_013", player.UserIDString)}", ".05", ".95", TextAnchor.MiddleLeft, "1 1 1 1", space), XPerienceAdminPanelMenu);
            CuiHelper.AddUi(player, ControlPanelelements);
            return;
        }
        private void AdminInfoPage(BasePlayer player)
        {
            var ControlPanelelements = new CuiElementContainer();
            ControlPanelelements.Add(XPUIPanel("0.16 0.0", "1 1", "0 0 0 .7"), XPerienceAdminPanelMain, XPerienceAdminPanelInfo);
            ControlPanelelements.Add(new CuiElement
            {
                Parent = XPerienceAdminPanelInfo,
                Components =
                {
                    new CuiRawImageComponent
                    {
                        Png = ImageLibrary?.Call<string>("GetImage", XPeriencelogo)
                    },
                    new CuiRectTransformComponent
                    {
                        AnchorMin = "0.43 0.70",
                        AnchorMax = "0.57 0.90"
                    }
                }
            });
            ControlPanelelements.Add(new CuiLabel
            {
                Text =
                {
                    Text = $"{XPLang("adminpanelinfonew", player.UserIDString)}",
                    FontSize = 18,
                    Align = TextAnchor.UpperCenter,
                    Color = "1 1 1 1"
                },
                RectTransform =
                {
                    AnchorMin = "0.02 0.0",
                    AnchorMax = "0.98 0.70"
                }
            }, XPerienceAdminPanelInfo);
            CuiHelper.AddUi(player, ControlPanelelements);
            return;
        }
        private void AdminLevelPage(BasePlayer player)
        {
            var ControlPanelelements = new CuiElementContainer();
            #region Layout
            var height = 0.023f;
            double width = .006;
            int row = 4;
            int row2 = 4;
            int row3 = 4;
            // Row 1
            string lableL = ".01";
            string lableR = ".15";
            string valueL = ".17";
            string valueR = ".25";
            string valuePL = ".26";
            string valuePR = ".30";
            // Row 2
            string lableL2 = ".33";
            string lableR2 = ".48";
            string valueL2 = ".49";
            string valueR2 = ".56";
            string valueP2L = ".57";
            string valueP2R = ".66";
            // Row 3
            string lableL3 = ".66";
            string lableR3 = ".81";
            string valueL3 = ".82";
            string valueR3 = ".91";
            //string valueP3L = ".92";
            string valueP3R = ".99";
            #endregion
            ControlPanelelements.Add(XPUIPanel("0.16 0.0", "1 1", "0 0 0 .7"), XPerienceAdminPanelMain, XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUILabel($"{XPLang("adminxp_001", player.UserIDString)}", 1, 0.090f, TextAnchor.MiddleLeft, 18, ".01", "1", "1 1 1 1"), XPerienceAdminPanelLevelXP);
            // Main Level Settings
            #region main
            ControlPanelelements.Add(XPUILabel($"{XPLang("adminxp_002", player.UserIDString)}", row, height, TextAnchor.MiddleLeft, 15, lableL, valuePR, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            row++;
            // Level Start
            ControlPanelelements.Add(XPUILabel($"{XPLang("adminxp_003", player.UserIDString)}", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR , "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp levelstart {UserInputText}", row, height, 12, $"{config.xpLevel.levelstart}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Level Multiplier
            row++;
            ControlPanelelements.Add(XPUILabel($"XP Requirement Increase:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR , "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp levelmultiplier {UserInputText}", row, height, 12, $"{config.xpLevel.levelmultiplier}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Max Level
            row++;
            ControlPanelelements.Add(XPUILabel($"Max Level:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR , "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp levelmax {UserInputText}", row, height, 12, $"{config.xpLevel.maxlevel}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Level XP Boost
            row++;
            ControlPanelelements.Add(XPUILabel($"Level XP Boost:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR , "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp levelxpboost {UserInputText}", row, height, 12, $"{config.xpLevel.levelxpboost}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            ControlPanelelements.Add(XPUILabel($"{config.xpLevel.levelxpboost * 100}%", row, height, TextAnchor.MiddleLeft, 12, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            // Stat Points Per LVL
            row++;
            ControlPanelelements.Add(XPUILabel($"Stat Points Per LVL:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR , "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp statpointsperlvl {UserInputText}", row, height, 12, $"{config.xpLevel.statpointsperlvl}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Skill Points Per LVL
            row++;
            ControlPanelelements.Add(XPUILabel($"Skill Points Per LVL:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR , "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp skillpointsperlvl {UserInputText}", row, height, 12, $"{config.xpLevel.skillpointsperlvl}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Always Earn XP
            row++;
            ControlPanelelements.Add(XPUILabel($"Earn XP Past Max Level:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR , "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPToggle($"xp.config levelxp alwaysearnxp", row, height, config.xpLevel.alwaysearnxp, valueL, width), XPerienceAdminPanelLevelXP);
            // Full Health
            row++;
            ControlPanelelements.Add(XPUILabel($"Max Health on Level Up:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR , "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPToggle($"xp.config levelxp fullhealth", row, height, config.xpLevel.fullhealth, valueL, width), XPerienceAdminPanelLevelXP);
            // Full Metabolism
            row++;
            ControlPanelelements.Add(XPUILabel($"Max Food/Thirst on Level Up:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR , "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPToggle($"xp.config levelxp fullmetabolism", row, height, config.xpLevel.fullmetabolism, valueL, width), XPerienceAdminPanelLevelXP);
            #endregion
            // Night Bonus Settings
            #region night
            row++;
            row++;
            ControlPanelelements.Add(XPUILabel($"[Night Settings]", row, height, TextAnchor.MiddleLeft, 15, lableL, valuePR, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            // Enable / Disable
            row++;
            ControlPanelelements.Add(XPUILabel($"Enable Night Bonus:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR , "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPToggle($"xp.config levelxp nightenable", row, height, config.nightBonus.Enable, valueL, width), XPerienceAdminPanelLevelXP);
            // Start Time
            row++;
            ControlPanelelements.Add(XPUILabel($"Start Time:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR , "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp nightstart {UserInputText}", row, height, 12, $"{config.nightBonus.StartTime}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            // End Time
            row++;
            ControlPanelelements.Add(XPUILabel($"End Time:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR , "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp nightend {UserInputText}", row, height, 12, $"{config.nightBonus.EndTime}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Bonus Amount
            row++;
            ControlPanelelements.Add(XPUILabel($"Bonus Percent:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR , "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp nightbonus {UserInputText}", row, height, 12, $"{config.nightBonus.Bonus}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            ControlPanelelements.Add(XPUILabel($"{config.nightBonus.Bonus * 100}%", row, height, TextAnchor.MiddleLeft, 12, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            // Enable Skill Boost
            row++;
            ControlPanelelements.Add(XPUILabel($"Enable Night Skills:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR , "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPToggle($"xp.config levelxp nightskill", row, height, config.nightBonus.enableskillboosts, valueL, width), XPerienceAdminPanelLevelXP);
            #endregion
            // XP Boost Settings
            #region XP Boost
            row++;
            row++;
            ControlPanelelements.Add(XPUILabel($"[XP Boost Settings] (xperience.xpboost)", row, height, TextAnchor.MiddleLeft, 15, lableL, valuePR, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            // Enable XP Boost
            row++;
            ControlPanelelements.Add(XPUILabel($"Enable XP Boost Permission:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR , "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPToggle($"xp.config levelxp enablexpboost", row, height, config.xpGain.enablexpboost, valueL, width), XPerienceAdminPanelLevelXP);
            // XP Boost Amount
            row++;
            ControlPanelelements.Add(XPUILabel($"XP Boost Amount:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR , "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp xpboostamount {UserInputText}", row, height, 12, $"{config.xpGain.xpboostamount}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            ControlPanelelements.Add(XPUILabel($"{config.xpGain.xpboostamount * 100}%", row, height, TextAnchor.MiddleLeft, 12, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            // Boost Order
            row++;
            var xpboostorder = "";
            switch(config.xpGain.xpboostorder)
            {
                case 1:
                    xpboostorder = "first";
                    break;
                case 2:
                    xpboostorder = "last";
                    break;
            }
            ControlPanelelements.Add(XPUILabel($"Boost Order <size=7>(Before other boosts or after)</size>:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR , "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUILabel($"|       {xpboostorder}", row, height, TextAnchor.MiddleLeft, 12, "0.15", "0.20", "1 1 1 1"), XPerienceAdminPanelLevelXP);
            if (xpboostorder == "first")
            {
                ControlPanelelements.Add(XPUIButton($"xp.config levelxp xpboostorder 2", row, height, 12, "0.0 1.0 0.0 0", "⇩", "0.21", "0.22", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelLevelXP);
            }
            else
            {
                ControlPanelelements.Add(XPUIButton($"xp.config levelxp xpboostorder 1", row, height, 12, "0.0 1.0 0.0 0", "⇧", "0.21", "0.22", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelLevelXP);
            }
            #endregion
            // XP Reduce Settings
            #region Reductions
            row++;
            row++;
            ControlPanelelements.Add(XPUILabel($"[XP Reducer Settings]", row, height, TextAnchor.MiddleLeft, 15, lableL, valuePR, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            // Enable Suicide Reduction
            row++;
            ControlPanelelements.Add(XPUILabel($"Enable Suicide Reduction:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR , "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPToggle($"xp.config levelxp suicide", row, height, config.xpReducer.suicidereduce, valueL, width), XPerienceAdminPanelLevelXP);
            // Suicide Reduction Amount
            row++;
            ControlPanelelements.Add(XPUILabel($"Suicide Reduction Amount:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR , "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp suicideamt {UserInputText}", row, height, 12, $"{config.xpReducer.suicidereduceamount}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Enable Death Reduction
            row++;
            ControlPanelelements.Add(XPUILabel($"Enable Death Reduction:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR , "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPToggle($"xp.config levelxp death", row, height, config.xpReducer.deathreduce, valueL, width), XPerienceAdminPanelLevelXP);
            // Death Reduction Amount
            row++;
            ControlPanelelements.Add(XPUILabel($"Death Reduction Amount:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR , "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp deathamt {UserInputText}", row, height, 12, $"{config.xpReducer.deathreduceamount}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Enable Rank Death Reduction
            row++;
            ControlPanelelements.Add(XPUILabel($"Include Rank Bonus:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPToggle($"xp.config levelxp rankdeath", row, height, config.xpReducer.rankdeathreduce, valueL, width), XPerienceAdminPanelLevelXP);
            #endregion
            // Mission Settings
            #region Missions
            row++;
            row++;
            ControlPanelelements.Add(XPUILabel($"[Mission XP Settings]", row, height, TextAnchor.MiddleLeft, 15, lableL, valuePR, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            // Mission Succeeded
            row++;
            ControlPanelelements.Add(XPUILabel($"Mission Succeeded:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR , "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp missionsucceeded {UserInputText}", row, height, 12, $"{config.xpMissions.missionsucceededxp}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Enable Mission Failed
            row++;
            ControlPanelelements.Add(XPUILabel($"Enable Failed Reduction:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR , "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPToggle($"xp.config levelxp missionfailed", row, height, config.xpMissions.missionfailed, valueL, width), XPerienceAdminPanelLevelXP);
            // Mission Failed
            row++;
            ControlPanelelements.Add(XPUILabel($"Failed Reduction Amount:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR , "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp missionfailedxp {UserInputText}", row, height, 12, $"{config.xpMissions.missionfailedxp}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            #endregion
            // Teams Settings
            #region Teams
            row++;
            row++;
            ControlPanelelements.Add(XPUILabel($"[Team XP Settings]", row, height, TextAnchor.MiddleLeft, 15, lableL, valuePR, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            // Team XP Gain
            row++;
            ControlPanelelements.Add(XPUILabel($"Enable Team XP Gain:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR , "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPToggle($"xp.config levelxp enableteamxpgain", row, height, config.xpTeams.enableteamxpgain, valueL, width), XPerienceAdminPanelLevelXP);
            // Team XP Loss
            row++;
            ControlPanelelements.Add(XPUILabel($"Enable Team XP Loss:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR , "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPToggle($"xp.config levelxp enableteamxploss", row, height, config.xpTeams.enableteamxploss, valueL, width), XPerienceAdminPanelLevelXP);
            // Team Gain Amount
            row++;
            ControlPanelelements.Add(XPUILabel($"Team XP Gain:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR , "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp teamxpgainamt {UserInputText}", row, height, 12, $"{config.xpTeams.teamxpgainamount}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            ControlPanelelements.Add(XPUILabel($"{config.xpTeams.teamxpgainamount * 100}%", row, height, TextAnchor.MiddleLeft, 12, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            // Team Loss Amount
            row++;
            ControlPanelelements.Add(XPUILabel($"Team XP Loss:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR , "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp teamxplossamt {UserInputText}", row, height, 12, $"{config.xpTeams.teamxplossamount}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            ControlPanelelements.Add(XPUILabel($"{config.xpTeams.teamxplossamount * 100}%", row, height, TextAnchor.MiddleLeft, 12, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            // Team Distance
            row++;
            ControlPanelelements.Add(XPUILabel($"Team Distance (feet):", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR , "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp teamdistance {UserInputText}", row, height, 12, $"{config.xpTeams.teamdistance}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            #endregion
            // XP Gathering/Looting
            #region XP Gather/Loot
            ControlPanelelements.Add(XPUILabel($"[XP Gathering/Looting Settings]", row2, height, TextAnchor.MiddleLeft, 15, lableL2, valueP2R, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            row2++;
            // Loot Containers
            ControlPanelelements.Add(XPUILabel($"General Loot Containers:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp loot {UserInputText}", row2, height, 12, $"{config.xpGain.lootcontainerxp}", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Loot Barrrels
            row2++;
            ControlPanelelements.Add(XPUILabel($"Loot Barrels:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp lootbarrel {UserInputText}", row2, height, 12, $"{config.xpGain.lootbarrel}", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Oil Barrrels
            row2++;
            ControlPanelelements.Add(XPUILabel($"Oil Barrels:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp oilbarrel {UserInputText}", row2, height, 12, $"{config.xpGain.oilbarrel}", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Normal Crates
            row2++;
            ControlPanelelements.Add(XPUILabel($"Normal Crates:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp normalcrate {UserInputText}", row2, height, 12, $"{config.xpGain.normalcrate}", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Elite Crates
            row2++;
            ControlPanelelements.Add(XPUILabel($"Elite Crates:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp elitecrate {UserInputText}", row2, height, 12, $"{config.xpGain.elitecrate}", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Tool Crates
            row2++;
            ControlPanelelements.Add(XPUILabel($"Tool Crates:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp toolcrate {UserInputText}", row2, height, 12, $"{config.xpGain.toolcrate}", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Food Crates
            row2++;
            ControlPanelelements.Add(XPUILabel($"Food Crates:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp foodcrate {UserInputText}", row2, height, 12, $"{config.xpGain.foodcrate}", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Vehicle Parts
            row2++;
            ControlPanelelements.Add(XPUILabel($"Vehicle Parts:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp vehicleparts {UserInputText}", row2, height, 12, $"{config.xpGain.vehicleparts}", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Underwater Loot
            row2++;
            ControlPanelelements.Add(XPUILabel($"Underwater Loot Containers:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp lootu {UserInputText}", row2, height, 12, $"{config.xpGain.underwaterlootcontainerxp}", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Locked Crate
            row2++;
            ControlPanelelements.Add(XPUILabel($"Locked Crate:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp lootlocked {UserInputText}", row2, height, 12, $"{config.xpGain.lockedcratexp}", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Hackable Crate
            row2++;
            ControlPanelelements.Add(XPUILabel($"Hackable Crate:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp loothacked {UserInputText}", row2, height, 12, $"{config.xpGain.hackablecratexp}", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            //// Heli
            //row2++;
            //ControlPanelelements.Add(XPUILabel($"Helicopter Crates:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            //ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelLevelXP);
            //ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp heli {UserInputText}", row2, height, 12, $"{config.xpGain.patrolhelicopter}", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Animal Harvest
            row2++;
            ControlPanelelements.Add(XPUILabel($"Animal Harvest:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp aharvest {UserInputText}", row2, height, 12, $"{config.xpGain.animalharvestxp}", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Corpse Harvest
            row2++;
            ControlPanelelements.Add(XPUILabel($"Corpse Harvest:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp charvest {UserInputText}", row2, height, 12, $"{config.xpGain.corpseharvestxp}", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Tree
            row2++;
            ControlPanelelements.Add(XPUILabel($"Tree:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp tree {UserInputText}", row2, height, 12, $"{config.xpGather.treexp}", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // General Ore
            row2++;
            ControlPanelelements.Add(XPUILabel($"General Ore:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp ore {UserInputText}", row2, height, 12, $"{config.xpGather.orexp}", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Metal Ore
            row2++;
            ControlPanelelements.Add(XPUILabel($"Metal Ore:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp metalorexp {UserInputText}", row2, height, 12, $"{config.xpGather.metalorexp}", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Sulfur Ore
            row2++;
            ControlPanelelements.Add(XPUILabel($"Sulfur Ore:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp sulfurorexp {UserInputText}", row2, height, 12, $"{config.xpGather.sulfurorexp}", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Stone Ore
            row2++;
            ControlPanelelements.Add(XPUILabel($"Stone Ore:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp stoneorexp {UserInputText}", row2, height, 12, $"{config.xpGather.stoneorexp}", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Harvest
            row2++;
            ControlPanelelements.Add(XPUILabel($"Gathering:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp harvest {UserInputText}", row2, height, 12, $"{config.xpGather.harvestxp}", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Plant
            row2++;
            ControlPanelelements.Add(XPUILabel($"Plants:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp plant {UserInputText}", row2, height, 12, $"{config.xpGather.plantxp}", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // One Time XP
            row2++;
            ControlPanelelements.Add(XPUILabel($"Only Give XP At End:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPToggle($"xp.config levelxp onetimexp", row2, height, config.xpGather.onetimexp, valueL2, width), XPerienceAdminPanelLevelXP);
            // Disable Tool XP
            row2++;
            ControlPanelelements.Add(XPUILabel($"Disable Power Tool Gains:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPToggle($"xp.config levelxp noxptools", row2, height, config.xpGather.noxptools, valueL2, width), XPerienceAdminPanelLevelXP);
            if (!config.xpGather.noxptools)
            {
                // Tool XP Chance
                row2++;
                ControlPanelelements.Add(XPUILabel($"Tool XP Chance:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelLevelXP);
                ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelLevelXP);
                ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp toolxpchance {UserInputText}", row2, height, 12, $"{config.xpGather.toolxpchance}", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
                ControlPanelelements.Add(XPUILabel($"{config.xpGather.toolxpchance * 100}%", row2, height, TextAnchor.MiddleLeft, 12, valueP2L, valueP2R, "1 1 1 1"), XPerienceAdminPanelLevelXP);
                // Tool XP Percent
                row2++;
                ControlPanelelements.Add(XPUILabel($"Tool XP Percent:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelLevelXP);
                ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelLevelXP);
                ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp toolxppercent {UserInputText}", row2, height, 12, $"{config.xpGather.toolxppercent}", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
                ControlPanelelements.Add(XPUILabel($"{config.xpGather.toolxppercent * 100}%", row2, height, TextAnchor.MiddleLeft, 12, valueP2L, valueP2R, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            }
            #endregion
            // XP Crafting/Building
            #region Craft/Build
            row2++;
            row2++;
            ControlPanelelements.Add(XPUILabel($"[XP Crafting/Building Settings]", row2, height, TextAnchor.MiddleLeft, 15, lableL2, valueP2R, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            // Crafting XP Delay Enable
            row2++;
            ControlPanelelements.Add(XPUILabel($"Delay Crafting XP:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPToggle($"xp.config levelxp craftxpdelay", row2, height, config.xpGain.craftingxpdelay, valueL2, width), XPerienceAdminPanelLevelXP);
            // Crafting XP Delay Seconds
            row2++;
            ControlPanelelements.Add(XPUILabel($"Delay XP Seconds:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp craftxpdelayseconds {UserInputText}", row2, height, 12, $"{config.xpGain.craftingxpdelayseconds}", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Crafting
            row2++;
            ControlPanelelements.Add(XPUILabel($"Crafting:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp crafting {UserInputText}", row2, height, 12, $"{config.xpGain.craftingxp}", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Require Building Privlidge
            row2++;
            ControlPanelelements.Add(XPUILabel($"Require Building Privlidge:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPToggle($"xp.config levelxp requirebuildingprivlidge", row2, height, config.xpBuilding.requirebuildingprivlidge, valueL2, width), XPerienceAdminPanelLevelXP);
            // Twig Building
            row2++;
            ControlPanelelements.Add(XPUILabel($"Twig Structure:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp twigbuild {UserInputText}", row2, height, 12, $"{config.xpBuilding.twigstructure}", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Wood Building
            row2++;
            ControlPanelelements.Add(XPUILabel($"Wood Structure:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp woodbuild {UserInputText}", row2, height, 12, $"{config.xpBuilding.woodstructure}", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Stone Building
            row2++;
            ControlPanelelements.Add(XPUILabel($"Stone Structure:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp stonebuild {UserInputText}", row2, height, 12, $"{config.xpBuilding.stonestructure}", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Metal Building
            row2++;
            ControlPanelelements.Add(XPUILabel($"Metal Structure:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp metalbuild {UserInputText}", row2, height, 12, $"{config.xpBuilding.metalstructure}", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Armor Building
            row2++;
            ControlPanelelements.Add(XPUILabel($"Armor Structure:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp armorbuild {UserInputText}", row2, height, 12, $"{config.xpBuilding.armoredstructure}", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Building XP Delay Enable
            if (BuildingGrades != null)
            {
                row2++;
                ControlPanelelements.Add(XPUILabel($"BuildingGrades Mod Detected", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelLevelXP);
                // Prevent BG XP
                row2++;
                ControlPanelelements.Add(XPUILabel($"No XP with /up:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelLevelXP);
                ControlPanelelements.Add(XPToggle($"xp.config levelxp preventBGxp", row2, height, config.xpBuilding.preventBGxp, valueL2, width), XPerienceAdminPanelLevelXP);
                // Building XP Delay Enable
                row2++;
                ControlPanelelements.Add(XPUILabel($"Delay Building XP:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelLevelXP);
                ControlPanelelements.Add(XPToggle($"xp.config levelxp buildxpdelay", row2, height, config.xpBuilding.buildxpdelay, valueL2, width), XPerienceAdminPanelLevelXP);
                // Building XP Delay Seconds
                row2++;
                ControlPanelelements.Add(XPUILabel($"Delay XP Seconds:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelLevelXP);
                ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelLevelXP);
                ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp buildxpdelayseconds {UserInputText}", row2, height, 12, $"{config.xpBuilding.buildxpdelayseconds}", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
                // Reduce XP
                row2++;
                ControlPanelelements.Add(XPUILabel($"Reduce XP on Downgrade:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelLevelXP);
                ControlPanelelements.Add(XPToggle($"xp.config levelxp reducexp", row2, height, config.xpBuilding.reducexp, valueL2, width), XPerienceAdminPanelLevelXP);
                // Reduce XP Amount
                row2++;
                ControlPanelelements.Add(XPUILabel($"Reduce XP Amount:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelLevelXP);
                ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelLevelXP);
                ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp buildxpreduction {UserInputText}", row2, height, 12, $"{config.xpBuilding.buildxpreduction}", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
                ControlPanelelements.Add(XPUILabel($"{config.xpBuilding.buildxpreduction * 100}%", row2, height, TextAnchor.MiddleLeft, 12, valueP2L, valueP2R, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            }
            #endregion
            // XP Kill Settings
            #region XP Kills
            ControlPanelelements.Add(XPUILabel($"[XP Kill Settings]", row3, height, TextAnchor.MiddleLeft, 15, lableL3, valueP3R, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            // Chicken
            row3++;
            ControlPanelelements.Add(XPUILabel($"Chicken:", row3, height, TextAnchor.MiddleLeft, 12, lableL3, lableR3, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row3, height, "0 0 .1 .75", valueL3, valueR3), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp chicken {UserInputText}", row3, height, 12, $"{config.xpGain.chickenxp}", valueL3, valueR3, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Fish
            row3++;
            ControlPanelelements.Add(XPUILabel($"Fish:", row3, height, TextAnchor.MiddleLeft, 12, lableL3, lableR3, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row3, height, "0 0 .1 .75", valueL3, valueR3), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp fish {UserInputText}", row3, height, 12, $"{config.xpGain.fishxp}", valueL3, valueR3, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Boar
            row3++;
            ControlPanelelements.Add(XPUILabel($"Boar:", row3, height, TextAnchor.MiddleLeft, 12, lableL3, lableR3, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row3, height, "0 0 .1 .75", valueL3, valueR3), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp boar {UserInputText}", row3, height, 12, $"{config.xpGain.bearxp}", valueL3, valueR3, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Stag
            row3++;
            ControlPanelelements.Add(XPUILabel($"Stag:", row3, height, TextAnchor.MiddleLeft, 12, lableL3, lableR3, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row3, height, "0 0 .1 .75", valueL3, valueR3), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp stag {UserInputText}", row3, height, 12, $"{config.xpGain.stagxp}", valueL3, valueR3, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Wolf
            row3++;
            ControlPanelelements.Add(XPUILabel($"Wolf:", row3, height, TextAnchor.MiddleLeft, 12, lableL3, lableR3, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row3, height, "0 0 .1 .75", valueL3, valueR3), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp wolf {UserInputText}", row3, height, 12, $"{config.xpGain.wolfxp}", valueL3, valueR3, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Bear
            row3++;
            ControlPanelelements.Add(XPUILabel($"Bear:", row3, height, TextAnchor.MiddleLeft, 12, lableL3, lableR3, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row3, height, "0 0 .1 .75", valueL3, valueR3), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp bear {UserInputText}", row3, height, 12, $"{config.xpGain.bearxp}", valueL3, valueR3, TextAnchor.MiddleLeft, "1 1 1 1"));
            // PolarBear
            row3++;
            ControlPanelelements.Add(XPUILabel($"PolarBear:", row3, height, TextAnchor.MiddleLeft, 12, lableL3, lableR3, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row3, height, "0 0 .1 .75", valueL3, valueR3), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp polarbear {UserInputText}", row3, height, 12, $"{config.xpGain.polarbearxp}", valueL3, valueR3, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Shark
            row3++;
            ControlPanelelements.Add(XPUILabel($"Shark:", row3, height, TextAnchor.MiddleLeft, 12, lableL3, lableR3, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row3, height, "0 0 .1 .75", valueL3, valueR3), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp shark {UserInputText}", row3, height, 12, $"{config.xpGain.sharkxp}", valueL3, valueR3, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Horse
            row3++;
            ControlPanelelements.Add(XPUILabel($"Horse:", row3, height, TextAnchor.MiddleLeft, 12, lableL3, lableR3, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row3, height, "0 0 .1 .75", valueL3, valueR3), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp horse {UserInputText}", row3, height, 12, $"{config.xpGain.horsexp}", valueL3, valueR3, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Scientist General
            row3++;
            ControlPanelelements.Add(XPUILabel($"General Scientist:", row3, height, TextAnchor.MiddleLeft, 12, lableL3, lableR3, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row3, height, "0 0 .1 .75", valueL3, valueR3), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp scientist {UserInputText}", row3, height, 12, $"{config.xpGain.scientistxp}", valueL3, valueR3, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Scientist Cargo
            row3++;
            ControlPanelelements.Add(XPUILabel($"Cargo Scientist:", row3, height, TextAnchor.MiddleLeft, 12, lableL3, lableR3, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row3, height, "0 0 .1 .75", valueL3, valueR3), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp sc_cargo {UserInputText}", row3, height, 12, $"{config.xpGain.sc_cargo}", valueL3, valueR3, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Scientist Full
            row3++;
            ControlPanelelements.Add(XPUILabel($"Full Scientist:", row3, height, TextAnchor.MiddleLeft, 12, lableL3, lableR3, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row3, height, "0 0 .1 .75", valueL3, valueR3), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp sc_full {UserInputText}", row3, height, 12, $"{config.xpGain.sc_full}", valueL3, valueR3, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Scientist Heavy
            row3++;
            ControlPanelelements.Add(XPUILabel($"Heavy Scientist:", row3, height, TextAnchor.MiddleLeft, 12, lableL3, lableR3, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row3, height, "0 0 .1 .75", valueL3, valueR3), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp sc_heavy {UserInputText}", row3, height, 12, $"{config.xpGain.sc_heavy}", valueL3, valueR3, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Scientist Junkpile
            row3++;
            ControlPanelelements.Add(XPUILabel($"Junkpile Scientist:", row3, height, TextAnchor.MiddleLeft, 12, lableL3, lableR3, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row3, height, "0 0 .1 .75", valueL3, valueR3), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp sc_junkpile {UserInputText}", row3, height, 12, $"{config.xpGain.sc_junkpile}", valueL3, valueR3, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Scientist Oilrig
            row3++;
            ControlPanelelements.Add(XPUILabel($"Oilrig Scientist:", row3, height, TextAnchor.MiddleLeft, 12, lableL3, lableR3, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row3, height, "0 0 .1 .75", valueL3, valueR3), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp sc_oilrig {UserInputText}", row3, height, 12, $"{config.xpGain.sc_oilrig}", valueL3, valueR3, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Scientist Patrol
            row3++;
            ControlPanelelements.Add(XPUILabel($"Patrol Scientist:", row3, height, TextAnchor.MiddleLeft, 12, lableL3, lableR3, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row3, height, "0 0 .1 .75", valueL3, valueR3), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp sc_patrol {UserInputText}", row3, height, 12, $"{config.xpGain.sc_patrol}", valueL3, valueR3, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Scientist PeaceKeeper
            row3++;
            ControlPanelelements.Add(XPUILabel($"PeaceKeeper Scientist:", row3, height, TextAnchor.MiddleLeft, 12, lableL3, lableR3, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row3, height, "0 0 .1 .75", valueL3, valueR3), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp sc_peacekeeper {UserInputText}", row3, height, 12, $"{config.xpGain.sc_peacekeeper}", valueL3, valueR3, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Scientist Roam
            row3++;
            ControlPanelelements.Add(XPUILabel($"Roam Scientist:", row3, height, TextAnchor.MiddleLeft, 12, lableL3, lableR3, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row3, height, "0 0 .1 .75", valueL3, valueR3), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp sc_roam {UserInputText}", row3, height, 12, $"{config.xpGain.sc_roam}", valueL3, valueR3, TextAnchor.MiddleLeft, "1 1 1 1"));
            // General Dweller
            row3++;
            ControlPanelelements.Add(XPUILabel($"General Dweller:", row3, height, TextAnchor.MiddleLeft, 12, lableL3, lableR3, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row3, height, "0 0 .1 .75", valueL3, valueR3), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp dweller {UserInputText}", row3, height, 12, $"{config.xpGain.dwellerxp}", valueL3, valueR3, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Tunnel Dweller
            row3++;
            ControlPanelelements.Add(XPUILabel($"Tunnel  Dweller:", row3, height, TextAnchor.MiddleLeft, 12, lableL3, lableR3, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row3, height, "0 0 .1 .75", valueL3, valueR3), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp tunneldwellerxp {UserInputText}", row3, height, 12, $"{config.xpGain.tunneldwellerxp}", valueL3, valueR3, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Underwater Dweller
            row3++;
            ControlPanelelements.Add(XPUILabel($"Underwater  Dweller:", row3, height, TextAnchor.MiddleLeft, 12, lableL3, lableR3, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row3, height, "0 0 .1 .75", valueL3, valueR3), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp underwaterdwellerxp {UserInputText}", row3, height, 12, $"{config.xpGain.underwaterdwellerxp}", valueL3, valueR3, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Scarecrownpc
            row3++;
            ControlPanelelements.Add(XPUILabel($"Scare Crow:", row3, height, TextAnchor.MiddleLeft, 12, lableL3, lableR3, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row3, height, "0 0 .1 .75", valueL3, valueR3), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp scarecrownpc {UserInputText}", row3, height, 12, $"{config.xpGain.scarecrownpc}", valueL3, valueR3, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Custom NPCs
            row3++;
            ControlPanelelements.Add(XPUILabel($"Custom NPCs:", row3, height, TextAnchor.MiddleLeft, 12, lableL3, lableR3, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row3, height, "0 0 .1 .75", valueL3, valueR3), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp customnpc {UserInputText}", row3, height, 12, $"{config.xpGain.customnpc}", valueL3, valueR3, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Zombie NPCs
            row3++;
            ControlPanelelements.Add(XPUILabel($"Custom Zombie NPCs:", row3, height, TextAnchor.MiddleLeft, 12, lableL3, lableR3, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row3, height, "0 0 .1 .75", valueL3, valueR3), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp zombienpc {UserInputText}", row3, height, 12, $"{config.xpGain.zombienpc}", valueL3, valueR3, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Player
            row3++;
            ControlPanelelements.Add(XPUILabel($"Player:", row3, height, TextAnchor.MiddleLeft, 12, lableL3, lableR3, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row3, height, "0 0 .1 .75", valueL3, valueR3), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp player {UserInputText}", row3, height, 12, $"{config.xpGain.playerxp}", valueL3, valueR3, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Bradley
            row3++;
            ControlPanelelements.Add(XPUILabel($"Bradley:", row3, height, TextAnchor.MiddleLeft, 12, lableL3, lableR3, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row3, height, "0 0 .1 .75", valueL3, valueR3), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp bradley {UserInputText}", row3, height, 12, $"{config.xpGain.bradley}", valueL3, valueR3, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Patrol Helicopter
            row3++;
            ControlPanelelements.Add(XPUILabel($"Patrol Helicopter:", row3, height, TextAnchor.MiddleLeft, 12, lableL3, lableR3, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row3, height, "0 0 .1 .75", valueL3, valueR3), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp heli {UserInputText}", row3, height, 12, $"{config.xpGain.patrolhelicopter}", valueL3, valueR3, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Allow Turrets
            row3++;
            ControlPanelelements.Add(XPUILabel($"Allow AutoTurret XP:", row3, height, TextAnchor.MiddleLeft, 12, lableL3, lableR3, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPToggle($"xp.config levelxp turretallow", row3, height, config.xpGain.allowturretxp, valueL3, width), XPerienceAdminPanelLevelXP);
            // Turrets
            row3++;
            ControlPanelelements.Add(XPUILabel($"Auto Turrets:", row3, height, TextAnchor.MiddleLeft, 12, lableL3, lableR3, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row3, height, "0 0 .1 .75", valueL3, valueR3), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp turret {UserInputText}", row3, height, 12, $"{config.xpGain.turretxp}", valueL3, valueR3, TextAnchor.MiddleLeft, "1 1 1 1"));
            #endregion
            // Seasonal
            #region Seasonal
            row3++;
            row3++;
            ControlPanelelements.Add(XPUILabel($"[Seasonal Settings]", row3, height, TextAnchor.MiddleLeft, 15, lableL3, valueP3R, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            // Gift Loot
            row3++;
            ControlPanelelements.Add(XPUILabel($"Gift Loot:", row3, height, TextAnchor.MiddleLeft, 12, lableL3, lableR3, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row3, height, "0 0 .1 .75", valueL3, valueR3), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp gifts {UserInputText}", row3, height, 12, $"{config.xpGain.gifts}", valueL3, valueR3, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Open Small Gift
            row3++;
            ControlPanelelements.Add(XPUILabel($"Open Small Gift:", row3, height, TextAnchor.MiddleLeft, 12, lableL3, lableR3, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row3, height, "0 0 .1 .75", valueL3, valueR3), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp opengifts {UserInputText}", row3, height, 12, $"{config.xpGain.opengifts}", valueL3, valueR3, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Open Medium Gift
            row3++;
            ControlPanelelements.Add(XPUILabel($"Open Medium Gift:", row3, height, TextAnchor.MiddleLeft, 12, lableL3, lableR3, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row3, height, "0 0 .1 .75", valueL3, valueR3), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp opengiftsmed {UserInputText}", row3, height, 12, $"{config.xpGain.opengiftsmed}", valueL3, valueR3, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Open Large Gift
            row3++;
            ControlPanelelements.Add(XPUILabel($"Open Large Gift:", row3, height, TextAnchor.MiddleLeft, 12, lableL3, lableR3, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row3, height, "0 0 .1 .75", valueL3, valueR3), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp opengiftslarge {UserInputText}", row3, height, 12, $"{config.xpGain.opengiftslarge}", valueL3, valueR3, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Upgrade Medium Gift
            row3++;
            ControlPanelelements.Add(XPUILabel($"Upgrade To Medium Gift:", row3, height, TextAnchor.MiddleLeft, 12, lableL3, lableR3, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row3, height, "0 0 .1 .75", valueL3, valueR3), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp upgradegiftsmed {UserInputText}", row3, height, 12, $"{config.xpGain.upgradegiftsmed}", valueL3, valueR3, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Upgrade Large Gift
            row3++;
            ControlPanelelements.Add(XPUILabel($"Upgrade To Large Gift:", row3, height, TextAnchor.MiddleLeft, 12, lableL3, lableR3, "1 1 1 1"), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInputbackground(row3, height, "0 0 .1 .75", valueL3, valueR3), XPerienceAdminPanelLevelXP);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp upgradegiftslarge {UserInputText}", row3, height, 12, $"{config.xpGain.upgradegiftslarge}", valueL3, valueR3, TextAnchor.MiddleLeft, "1 1 1 1"));
            #endregion
            // Cooking Plugin
            #region Cooking
            if (Cooking != null)
            {
                row3++;
                row3++;
                ControlPanelelements.Add(XPUILabel($"[Cooking Settings]", row3, height, TextAnchor.MiddleLeft, 15, lableL3, valueP3R, "1 1 1 1"), XPerienceAdminPanelLevelXP);
                // Craft Meal
                row3++;
                ControlPanelelements.Add(XPUILabel($"Craft Meal:", row3, height, TextAnchor.MiddleLeft, 12, lableL3, lableR3, "1 1 1 1"), XPerienceAdminPanelLevelXP);
                ControlPanelelements.Add(XPUIInputbackground(row3, height, "0 0 .1 .75", valueL3, valueR3), XPerienceAdminPanelLevelXP);
                ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelLevelXP, $"xp.config levelxp craftmeal {UserInputText}", row3, height, 12, $"{config.xpGain.craftmeal}", valueL3, valueR3, TextAnchor.MiddleLeft, "1 1 1 1"));
            }
            #endregion
            CuiHelper.AddUi(player, ControlPanelelements);
            return;
        }
        private void AdminRanksPage(BasePlayer player, string page = "main", int rank = 0)
        {
            var ControlPanelelements = new CuiElementContainer();
            #region Layout
            var height = 0.025f;
            var height2 = 0.035f;
            double width = .006;
            int row = 1;
            int rowtwo = 1;
            string lableL = ".01";
            string lableR = ".20";
            string valueL = ".20";
            string valueR = ".29";
            string valuePL = ".30";
            string valuePR = ".32";
            string lableL2 = ".33";
            string lableR2 = ".48";
            string valueL2 = ".49";
            string delL = ".01";
            string delR = ".02";
            string ranknameL = ".03";
            string ranknameR = ".50";
            #endregion
            ControlPanelelements.Add(XPUIPanel("0.16 0.0", "1 1", "0 0 0 .7"), XPerienceAdminPanelMain, XPerienceAdminPanelRanks);
            switch (page)
            {
                case "main":
                    // Rank Settings
                    #region Rank Settings
                    int maxranks = config.xpLevelRanks.ranks.Count - 1;
                    row++;
                    ControlPanelelements.Add(XPUILabel($"[Rank Settings]", row, height, TextAnchor.MiddleLeft, 15, "0.01", "0.30", "1 1 1 1"), XPerienceAdminPanelRanks);
                    // Enable Ranks
                    row++;
                    row++;
                    ControlPanelelements.Add(XPUIButton($"xp.admin ranks ranklist", row, height, 12, "0 1 0 .25", "Add / Edit Ranks", ".01", ".16", TextAnchor.MiddleCenter, "1 1 1 1"), XPerienceAdminPanelRanks);
                    row++;
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Enable Prestige Ranks:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelRanks);
                    ControlPanelelements.Add(XPToggle($"xp.config ranks enableranks", row, height, config.xpLevelRanks.enableresetranks, valueL, width), XPerienceAdminPanelRanks);
                    // Reset Stats/Skills
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Reset All Stats/Skills", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelRanks);
                    ControlPanelelements.Add(XPToggle($"xp.config ranks resetallstatsskills", row, height, config.xpLevelRanks.resetallstatsskills, valueL, width), XPerienceAdminPanelRanks);
                    // Allow Player Disable
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Allow Players to Disable Auto Rank:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelRanks);
                    ControlPanelelements.Add(XPToggle($"xp.config ranks playerdisable", row, height, config.xpLevelRanks.allowplayerdisable, valueL, width), XPerienceAdminPanelRanks);
                    // Keep Group on Ranks
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Keep Previous Rank Groups:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelRanks);
                    ControlPanelelements.Add(XPToggle($"xp.config ranks keepgrouponrank", row, height, config.xpLevelRanks.keepgrouponrank, valueL, width), XPerienceAdminPanelRanks);
                    // Show Ranks in Chat
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Show Rank Tag in Chat:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelRanks);
                    ControlPanelelements.Add(XPToggle($"xp.config ranks showrankinchat", row, height, config.xpLevelRanks.showrankinchat, valueL, width), XPerienceAdminPanelRanks);
                    // Show Ranks in LiveUI
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Show Rank in LiveUI:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelRanks);
                    ControlPanelelements.Add(XPToggle($"xp.config ranks showrankinliveui", row, height, config.xpLevelRanks.showrankinliveui, valueL, width), XPerienceAdminPanelRanks);
                    // Max Rank
                    row++;
                    if (config.xpLevelRanks.maxresetrank > maxranks)
                    {
                        config.xpLevelRanks.maxresetrank = maxranks;
                    }
                    ControlPanelelements.Add(XPUILabel($"Max Prestige Rank:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelRanks);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelRanks);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelRanks, $"xp.config ranks maxrank {UserInputText}", row, height, 12, $"{config.xpLevelRanks.maxresetrank}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Enable Increase XP Requirement
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Increase Level XP Requirement:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelRanks);
                    ControlPanelelements.Add(XPToggle($"xp.config ranks increaselevelmultiplier", row, height, config.xpLevelRanks.increaselevelmultiplier, valueL, width), XPerienceAdminPanelRanks);
                    // Rank XP Requirement Increase
                    row++;
                    ControlPanelelements.Add(XPUILabel($"XP Requirement Increase Amount:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelRanks);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelRanks);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelRanks, $"xp.config ranks levelmultiplierincrease {UserInputText}", row, height, 12, $"{config.xpLevelRanks.levelmultiplierincrease}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Enable Rank XP Boost
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Enable Rank XP Boost:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelRanks);
                    ControlPanelelements.Add(XPToggle($"xp.config ranks enablerankxpboost", row, height, config.xpLevelRanks.enablerankxpboost, valueL, width), XPerienceAdminPanelRanks);
                    // Rank XP Boost
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Rank XP Boost Amount:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelRanks);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelRanks);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelRanks, $"xp.config ranks rankxpboost {UserInputText}", row, height, 12, $"{config.xpLevelRanks.rankxpboost}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"{config.xpLevelRanks.rankxpboost * 100}%", row, height, TextAnchor.MiddleLeft, 12, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelRanks);
                    // Enable Rank Stat Boost
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Enable Rank Stats Boost:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelRanks);
                    ControlPanelelements.Add(XPToggle($"xp.config ranks rankstatboost", row, height, config.xpLevelRanks.rankstatboost, valueL, width), XPerienceAdminPanelRanks);
                    // Rank Stat Boost
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Rank Stats Boost Amount:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelRanks);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelRanks);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelRanks, $"xp.config ranks rankstatboostamt {UserInputText}", row, height, 12, $"{config.xpLevelRanks.rankstatboostamount}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"{config.xpLevelRanks.rankstatboostamount * 100}%", row, height, TextAnchor.MiddleLeft, 12, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelRanks);
                    // Rank Stat Point Start
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Rank Stats Points Start:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelRanks);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelRanks);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelRanks, $"xp.config ranks rankstatpointstart {UserInputText}", row, height, 12, $"{config.xpLevelRanks.rankstatpointstart}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Rank Stat Points
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Rank Stats Points Increase:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelRanks);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelRanks);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelRanks, $"xp.config ranks rankstatpoints {UserInputText}", row, height, 12, $"{config.xpLevelRanks.rankstatpointincrease}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Enable Rank Skill Boost
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Enable Rank Skills Boost:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelRanks);
                    ControlPanelelements.Add(XPToggle($"xp.config ranks rankskillboost", row, height, config.xpLevelRanks.rankskillboost, valueL, width), XPerienceAdminPanelRanks);
                    // Rank Skill Boost
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Rank Skills Boost Amount:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelRanks);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelRanks);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelRanks, $"xp.config ranks rankskillboostamt {UserInputText}", row, height, 12, $"{config.xpLevelRanks.rankskillboostamount}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"{config.xpLevelRanks.rankskillboostamount * 100}%", row, height, TextAnchor.MiddleLeft, 12, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelRanks);
                    // Rank Skill Point Start
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Rank Skills Points Start:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelRanks);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelRanks);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelRanks, $"xp.config ranks rankskillpointstart {UserInputText}", row, height, 12, $"{config.xpLevelRanks.rankskillpointstart}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Rank Skill Points
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Rank Skills Points Increase:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelRanks);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelRanks);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelRanks, $"xp.config ranks rankskillpoints {UserInputText}", row, height, 12, $"{config.xpLevelRanks.rankskillpointincrease}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Show Rank TrueLevel
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Show Rank Level:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelRanks);
                    ControlPanelelements.Add(XPToggle($"xp.config ranks truelevels", row, height, config.xpLevelRanks.showtruelevelprofile, valueL, width), XPerienceAdminPanelRanks);
                    // Show Rank TrueXP
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Show Rank XP:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelRanks);
                    ControlPanelelements.Add(XPToggle($"xp.config ranks truexp", row, height, config.xpLevelRanks.showtruexpprofile, valueL, width), XPerienceAdminPanelRanks);
                    #endregion
                    // Rank options
                    #region Rank Options
                    // Stats
                    if (config.xpLevelRanks.rankstatboost)
                    {
                        row++;
                        row++;
                        ControlPanelelements.Add(XPUILabel($"[Rank Options] Stat Effects", row, height, TextAnchor.MiddleLeft, 15, "0.01", "0.30", "1 1 1 1"), XPerienceAdminPanelRanks);
                        row++;
                        row++;
                        ControlPanelelements.Add(XPUILabel($"Mentality Research Cost:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks researchcost", row, height, config.Rankboostssettings.researchcost, valueL, width), XPerienceAdminPanelRanks);
                        row++;
                        ControlPanelelements.Add(XPUILabel($"Mentality Research Speed:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks researchspeed", row, height, config.Rankboostssettings.researchspeed, valueL, width), XPerienceAdminPanelRanks);
                        row++;
                        ControlPanelelements.Add(XPUILabel($"Dexterity Block:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks block", row, height, config.Rankboostssettings.block, valueL, width), XPerienceAdminPanelRanks);
                        row++;
                        ControlPanelelements.Add(XPUILabel($"Dexterity Armor:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks armor", row, height, config.Rankboostssettings.armor, valueL, width), XPerienceAdminPanelRanks);
                        row++;
                        ControlPanelelements.Add(XPUILabel($"Captaincy Effective Distance:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks distance", row, height, config.Rankboostssettings.distance, valueL, width), XPerienceAdminPanelRanks);
                        row++;
                        ControlPanelelements.Add(XPUILabel($"Might Melee Damage:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks meleedmg", row, height, config.Rankboostssettings.meleedmg, valueL, width), XPerienceAdminPanelRanks);
                        row++;
                        ControlPanelelements.Add(XPUILabel($"Might Metabolism:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks metabolism", row, height, config.Rankboostssettings.metabolism, valueL, width), XPerienceAdminPanelRanks);
                    }
                    // Skills
                    if (config.xpLevelRanks.rankskillboost)
                    {
                        rowtwo++;
                        ControlPanelelements.Add(XPUILabel($"[Rank Options] Skill Effects", rowtwo, height, TextAnchor.MiddleLeft, 15, "0.33", "0.56", "1 1 1 1"), XPerienceAdminPanelRanks);
                        rowtwo++;
                        rowtwo++;
                        ControlPanelelements.Add(XPUILabel($"WoodCutter Gather Rate:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks woodcuttergr", rowtwo, height, config.Rankboostssettings.woodcuttergr, valueL2, width), XPerienceAdminPanelRanks);
                        rowtwo++;
                        ControlPanelelements.Add(XPUILabel($"WoodCutter Bonus Amount:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks woodcutterbonus", rowtwo, height, config.Rankboostssettings.woodcutterbonus, valueL2, width), XPerienceAdminPanelRanks);
                        rowtwo++;
                        ControlPanelelements.Add(XPUILabel($"Smithy Production Rate:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks smithypr", rowtwo, height, config.Rankboostssettings.smithypr, valueL2, width), XPerienceAdminPanelRanks);
                        rowtwo++;
                        ControlPanelelements.Add(XPUILabel($"Smithy Production Speed:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks smithyps", rowtwo, height, config.Rankboostssettings.smithyps, valueL2, width), XPerienceAdminPanelRanks);
                        rowtwo++;
                        ControlPanelelements.Add(XPUILabel($"Smithy Fuel Consumption:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks smithyfc", rowtwo, height, config.Rankboostssettings.smithyfc, valueL2, width), XPerienceAdminPanelRanks);
                        rowtwo++;
                        ControlPanelelements.Add(XPUILabel($"Smithy HQ Metal Chance:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks smithyhqmc", rowtwo, height, config.Rankboostssettings.smithyhqmc, valueL2, width), XPerienceAdminPanelRanks);
                        rowtwo++;
                        ControlPanelelements.Add(XPUILabel($"Smithy HQ Metal Amount:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks smithyhqma", rowtwo, height, config.Rankboostssettings.smithyhqma, valueL2, width), XPerienceAdminPanelRanks);
                        rowtwo++;
                        ControlPanelelements.Add(XPUILabel($"Miner Gather Rate:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks minergr", rowtwo, height, config.Rankboostssettings.minergr, valueL2, width), XPerienceAdminPanelRanks);
                        rowtwo++;
                        ControlPanelelements.Add(XPUILabel($"Miner Bonus Amount:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks minerbonus", rowtwo, height, config.Rankboostssettings.minerbonus, valueL2, width), XPerienceAdminPanelRanks);
                        rowtwo++;
                        ControlPanelelements.Add(XPUILabel($"Miner Fuel Consumption:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks minerfuel", rowtwo, height, config.Rankboostssettings.minerfuel, valueL2, width), XPerienceAdminPanelRanks);
                        rowtwo++;
                        ControlPanelelements.Add(XPUILabel($"Miner Metal Frament Chance:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks minermfc", rowtwo, height, config.Rankboostssettings.minermfc, valueL2, width), XPerienceAdminPanelRanks);
                        rowtwo++;
                        ControlPanelelements.Add(XPUILabel($"Miner Metal Frament Amount:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks minermfa", rowtwo, height, config.Rankboostssettings.minermfa, valueL2, width), XPerienceAdminPanelRanks);
                        rowtwo++;
                        ControlPanelelements.Add(XPUILabel($"Fisher Fish Amount:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks fisherfa", rowtwo, height, config.Rankboostssettings.fisherfa, valueL2, width), XPerienceAdminPanelRanks);
                        rowtwo++;
                        ControlPanelelements.Add(XPUILabel($"Fisher Item Amount:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks fisheria", rowtwo, height, config.Rankboostssettings.fisheria, valueL2, width), XPerienceAdminPanelRanks);
                        rowtwo++;
                        ControlPanelelements.Add(XPUILabel($"Fisher Oxygen Tank Reduction:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks fisherotr", rowtwo, height, config.Rankboostssettings.fisherotr, valueL2, width), XPerienceAdminPanelRanks);
                        rowtwo++;
                        ControlPanelelements.Add(XPUILabel($"Forager Gather Rate:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks foragergr", rowtwo, height, config.Rankboostssettings.foragergr, valueL2, width), XPerienceAdminPanelRanks);
                        rowtwo++;
                        ControlPanelelements.Add(XPUILabel($"Forager Grub/Worm Chance:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks foragergwa", rowtwo, height, config.Rankboostssettings.foragergwa, valueL2, width), XPerienceAdminPanelRanks);
                        rowtwo++;
                        ControlPanelelements.Add(XPUILabel($"Forager Random Item Chance:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks foragerric", rowtwo, height, config.Rankboostssettings.foragerric, valueL2, width), XPerienceAdminPanelRanks);
                        rowtwo++;
                        ControlPanelelements.Add(XPUILabel($"Hunter Gather Rate:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks huntergr", rowtwo, height, config.Rankboostssettings.huntergr, valueL2, width), XPerienceAdminPanelRanks);
                        rowtwo++;
                        ControlPanelelements.Add(XPUILabel($"Hunter Bonus Amount:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks hunterbonus", rowtwo, height, config.Rankboostssettings.hunterbonus, valueL2, width), XPerienceAdminPanelRanks);
                        rowtwo++;
                        ControlPanelelements.Add(XPUILabel($"Hunter Damage Increase (wildlife):", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks hunterdmg", rowtwo, height, config.Rankboostssettings.hunterdmg, valueL2, width), XPerienceAdminPanelRanks);
                        rowtwo++;
                        ControlPanelelements.Add(XPUILabel($"Hunter Night Damage Increase:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks hunterndmg", rowtwo, height, config.Rankboostssettings.hunterndmg, valueL2, width), XPerienceAdminPanelRanks);
                        rowtwo++;
                        ControlPanelelements.Add(XPUILabel($"Crafter Crafting Speed:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks crafterspeed", rowtwo, height, config.Rankboostssettings.crafterspeed, valueL2, width), XPerienceAdminPanelRanks);
                        rowtwo++;
                        ControlPanelelements.Add(XPUILabel($"Crafter Crafting Cost:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks craftercost", rowtwo, height, config.Rankboostssettings.craftercost, valueL2, width), XPerienceAdminPanelRanks);
                        rowtwo++;
                        ControlPanelelements.Add(XPUILabel($"Crafter Repair Increase:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks crafterri", rowtwo, height, config.Rankboostssettings.crafterri, valueL2, width), XPerienceAdminPanelRanks);
                        rowtwo++;
                        ControlPanelelements.Add(XPUILabel($"Crafter Repair Cost:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks crafterrc", rowtwo, height, config.Rankboostssettings.crafterrc, valueL2, width), XPerienceAdminPanelRanks);
                        rowtwo++;
                        ControlPanelelements.Add(XPUILabel($"Crafter Condition Chance:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks craftercc", rowtwo, height, config.Rankboostssettings.craftercc, valueL2, width), XPerienceAdminPanelRanks);
                        rowtwo++;
                        ControlPanelelements.Add(XPUILabel($"Crafter Condition Amount:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks crafterca", rowtwo, height, config.Rankboostssettings.crafterca, valueL2, width), XPerienceAdminPanelRanks);
                        rowtwo++;
                        ControlPanelelements.Add(XPUILabel($"Framer Upgrade Cost:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks framerucost", rowtwo, height, config.Rankboostssettings.framerucost, valueL2, width), XPerienceAdminPanelRanks);
                        rowtwo++;
                        ControlPanelelements.Add(XPUILabel($"Framer Repair Cost:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks framerrcost", rowtwo, height, config.Rankboostssettings.framerrcost, valueL2, width), XPerienceAdminPanelRanks);
                        rowtwo++;
                        ControlPanelelements.Add(XPUILabel($"Medic Revival Amount:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks medicrevivala", rowtwo, height, config.Rankboostssettings.medicrevivala, valueL2, width), XPerienceAdminPanelRanks);
                        rowtwo++;
                        ControlPanelelements.Add(XPUILabel($"Medic Recover Amount:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks medicrecovera", rowtwo, height, config.Rankboostssettings.medicrecovera, valueL2, width), XPerienceAdminPanelRanks);
                        rowtwo++;
                        ControlPanelelements.Add(XPUILabel($"Medic Tools:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks medictools", rowtwo, height, config.Rankboostssettings.medictools, valueL2, width), XPerienceAdminPanelRanks);
                        rowtwo++;
                        ControlPanelelements.Add(XPUILabel($"Scavenger Extra Loot Chance:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks scavelc", rowtwo, height, config.Rankboostssettings.scavelc, valueL2, width), XPerienceAdminPanelRanks);
                        rowtwo++;
                        ControlPanelelements.Add(XPUILabel($"Scavenger Extra Loot Multiplier:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks scavelm", rowtwo, height, config.Rankboostssettings.scavelm, valueL2, width), XPerienceAdminPanelRanks);
                        rowtwo++;
                        ControlPanelelements.Add(XPUILabel($"Scavenger Custom Item Chance:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks scavcic", rowtwo, height, config.Rankboostssettings.scavcic, valueL2, width), XPerienceAdminPanelRanks);
                        rowtwo++;
                        ControlPanelelements.Add(XPUILabel($"Scavenger Custom Item Multiplier:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPToggle($"xp.config ranks scavcim", rowtwo, height, config.Rankboostssettings.scavcim, valueL2, width), XPerienceAdminPanelRanks);
                    }
                            #endregion
                    break;
                case "ranklist":
                    // Rank List
                    #region Rank List
                    row++;
                    ControlPanelelements.Add(XPUIButton($"xp.ranks newrank", row, height2, 12, "0 1 0 .25", "Create New Rank", ".01", ".16", TextAnchor.MiddleCenter, "1 1 1 1"), XPerienceAdminPanelRanks);
                    row++;
                    ControlPanelelements.Add(XPUILabel($"(If you add or remove ranks you must update the max prestige rank count on the rank settings page!)", row, height2, TextAnchor.MiddleLeft, 11, delL, ranknameR, "1 1 0 1"), XPerienceAdminPanelRanks);
                    row++;
                    var ranklist = config.xpLevelRanks.ranks;
                    foreach (var getrank in ranklist)
                    {
                        ControlPanelelements.Add(XPUIButton($"xp.admin deleterank {getrank.Key}", row, height2, 12, "0 0 0 .25", $"ⓧ", delL, delR, TextAnchor.MiddleLeft, "1 0 0 1"), XPerienceAdminPanelRanks);
                        ControlPanelelements.Add(XPUIButton($"xp.admin editrank {getrank.Key}", row, height2, 12, "0 0 0 .25", $"[{getrank.Key}] {getrank.Value.name}", ranknameL, ranknameR, TextAnchor.MiddleLeft, "1 1 1 1"), XPerienceAdminPanelRanks);
                        row++;
                    }
                    row++;
                    ControlPanelelements.Add(XPUIButton($"xp.admin ranks main", row, height2, 12, "0 1 0 .25", "Return", ".01", ".11", TextAnchor.MiddleCenter, "1 1 1 1"), XPerienceAdminPanelRanks);
                    #endregion
                    break;
                case "editrank":
                    // Edit Rank
                    #region Edit Rank
                    var editrank = config.xpLevelRanks.ranks[rank];
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Rank Name:", row, height2, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelRanks);
                    ControlPanelelements.Add(XPUIInputbackground(row, height2, "0 0 .1 .75", valueL, ranknameR), XPerienceAdminPanelRanks);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelRanks, $"xp.ranks editrank {rank} rankname {UserInputText}", row, height2, 12, $"{editrank.name}", valueL, ranknameR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Rank Sig:", row, height2, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelRanks);
                    ControlPanelelements.Add(XPUIInputbackground(row, height2, "0 0 .1 .75", valueL, ranknameR), XPerienceAdminPanelRanks);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelRanks, $"xp.ranks editrank {rank} ranksig {UserInputText}", row, height2, 12, $"{editrank.sig}", valueL, ranknameR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Rank Description:", row, height2, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelRanks);
                    ControlPanelelements.Add(XPUIInputbackground(row, height2, "0 0 .1 .75", valueL, ranknameR), XPerienceAdminPanelRanks);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelRanks, $"xp.ranks editrank {rank} rankdet {UserInputText}", row, height2, 12, $"{editrank.description}", valueL, ranknameR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Rank Image:", row, height2, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelRanks);
                    ControlPanelelements.Add(XPUIInputbackground(row, height2, "0 0 .1 .75", valueL, ranknameR), XPerienceAdminPanelRanks);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelRanks, $"xp.ranks editrank {rank} rankimage {UserInputText}", row, height2, 12, $"{editrank.image}", valueL, ranknameR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Rank Group:", row, height2, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelRanks);
                    ControlPanelelements.Add(XPUIInputbackground(row, height2, "0 0 .1 .75", valueL, ranknameR), XPerienceAdminPanelRanks);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelRanks, $"xp.ranks editrank {rank} rankgroup {UserInputText}", row, height2, 12, $"{editrank.group}", valueL, ranknameR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row++;
                    row++;
                    ControlPanelelements.Add(XPUIButton($"xp.admin ranks ranklist", row, height2, 12, "0 1 0 .25", "Return", ".01", ".11", TextAnchor.MiddleCenter, "1 1 1 1"), XPerienceAdminPanelRanks);
                    #endregion
                    break;
            }
            // End
            CuiHelper.AddUi(player, ControlPanelelements);
            return;

        }
        private void AdminDailyLimitsPage(BasePlayer player)
        {
            var ControlPanelelements = new CuiElementContainer();
            #region Layout
            var height = 0.027f;
            double width = .006;
            int row = 4;
            string lableL = "0.01";
            string lableR = "0.20";
            string valueL = "0.20";
            string valueR = "0.25";
            string valuePL = "0.26";
            string valuePR = "0.30";
            string setting1L = "0.26";
            string setting1R = "0.27";
            string setting2L = "0.28";
            string setting2R = "0.29";
            #endregion
            ControlPanelelements.Add(XPUIPanel("0.16 0.0", "1 1", "0 0 0 .7"), XPerienceAdminPanelMain, XPerienceAdminPanelDailyLimits);
            ControlPanelelements.Add(XPUILabel($"Daily Limit Settings", 1, 0.090f, TextAnchor.MiddleLeft, 18, "0.01", "1", "1 1 1 1"), XPerienceAdminPanelDailyLimits);
            // Daily Timer
            #region Daily Timer
            row++;
            row++;
            ControlPanelelements.Add(XPUILabel($"[Daily Limit Reset]", row, height, TextAnchor.MiddleLeft, 15, "0.01", valueL, "1 1 1 1"), XPerienceAdminPanelDailyLimits);
            // Timer Hours
            row++;
            ControlPanelelements.Add(XPUILabel($"Player Daily Limit Reset: (hours)", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelDailyLimits);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelDailyLimits);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelDailyLimits, $"xp.config dailylimits dailyresettimerhours {UserInputText}", row, height, 12, $"{config.dailytimer.dailyresettimerhours}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            row++;
            row++;
            ControlPanelelements.Add(XPUIButton($"xp.config dailylimits resetdailytimer 0 true", row, height, 13, "0 0 0 1", "Reset ALL Player Limits", lableL, lableR, TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelDailyLimits);
            #endregion
            // Daily XP Limit Settings
            #region Daily XP Limits
            row++;
            row++;
            ControlPanelelements.Add(XPUILabel($"[XP Limit Settings] (Players with VIP Overide Special Groups)", row, height, TextAnchor.MiddleLeft, 15, "0.01", "0.5", "1 1 1 1"), XPerienceAdminPanelDailyLimits);
            // Enable Daily Limit
            row++;
            ControlPanelelements.Add(XPUILabel($"Enable Daily XP Limit:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelDailyLimits);
            ControlPanelelements.Add(XPToggle($"xp.config dailylimits enabledailyxplimit", row, height, config.dailyxpLimit.enabledailyxplimit, valueL, width), XPerienceAdminPanelDailyLimits);
            // Daily Limit Default
            string deflimit = config.dailyxpLimit.dailyxplimit.ToString();
            if (deflimit == "0")
            {
                deflimit = "∞";
            }
            row++;
            ControlPanelelements.Add(XPUILabel($"Daily Limit Default:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelDailyLimits);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelDailyLimits);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelDailyLimits, $"xp.config dailylimits dailyxplimit {UserInputText}", row, height, 12, $"{deflimit}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Daily Limit VIP
            string viplimit = config.dailyxpLimit.dailyxplimitvip.ToString();
            if (viplimit == "0")
            {
                viplimit = "∞";
            }
            row++;
            ControlPanelelements.Add(XPUILabel($"Daily Limit VIP:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelDailyLimits);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelDailyLimits);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelDailyLimits, $"xp.config dailylimits dailyxplimitvip {UserInputText}", row, height, 12, $"{viplimit}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Multiplier Type
            string multipliertype = "%";
            if(config.dailyxpLimit.limitmultipliertype == 1)
            {
                multipliertype = "%";
            }
            if(config.dailyxpLimit.limitmultipliertype == 2)
            {
                multipliertype = "X";
            }
            row++;
            ControlPanelelements.Add(XPUILabel($"Daily Limit Multiplier Type:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelDailyLimits);
            ControlPanelelements.Add(XPUILabel($"{multipliertype}", row, height, TextAnchor.MiddleLeft, 12, valueL, valueR, "1 1 1 1"), XPerienceAdminPanelDailyLimits);
            ControlPanelelements.Add(XPUIButton($"xp.config dailylimits limitmultipliertype 1 false", row, height, 12, "0.0 1.0 0.0 0", "%", setting1L, setting1R, TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelDailyLimits);
            ControlPanelelements.Add(XPUIButton($"xp.config dailylimits limitmultipliertype 2 false", row, height, 12, "1.0 0.0 0.0 0", "X", setting2L, setting2R, TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelDailyLimits);
            // Multiplier Value
            if (config.dailyxpLimit.limitmultipliertype == 1)
            {
                row++;
                ControlPanelelements.Add(XPUILabel($"Percentage Amount Per Level:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelDailyLimits);
                ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelDailyLimits);
                ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelDailyLimits, $"xp.config dailylimits limitpercentage {UserInputText}", row, height, 12, $"{config.dailyxpLimit.limitpercentage}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                ControlPanelelements.Add(XPUILabel($"{config.dailyxpLimit.limitpercentage * 100}%", row, height, TextAnchor.MiddleLeft, 12, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelDailyLimits);
                row++;
                row++;
                if (config.dailyxpLimit.dailyxplimit > 0)
                {
                    ControlPanelelements.Add(XPUILabel($"Default: {config.dailyxpLimit.dailyxplimit} + (({config.dailyxpLimit.dailyxplimit} * {config.dailyxpLimit.limitpercentage}) * level)", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelDailyLimits);
                }
                else 
                {
                    ControlPanelelements.Add(XPUILabel($"Default: Unlimited", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelDailyLimits);
                }
                row++;
                if (config.dailyxpLimit.dailyxplimitvip > 0)
                {
                    ControlPanelelements.Add(XPUILabel($"VIP: {config.dailyxpLimit.dailyxplimitvip} + (({config.dailyxpLimit.dailyxplimitvip} * {config.dailyxpLimit.limitpercentage}) * level)", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelDailyLimits);
                }
                else 
                {
                    ControlPanelelements.Add(XPUILabel($"VIP: Unlimited", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelDailyLimits);
                }
            }
            if (config.dailyxpLimit.limitmultipliertype == 2)
            {
                row++;
                ControlPanelelements.Add(XPUILabel($"Multiplier Amount Per Level:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelDailyLimits);
                ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelDailyLimits);
                ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelDailyLimits, $"xp.config dailylimits limitmultiplier {UserInputText}", row, height, 12, $"{config.dailyxpLimit.limitmultiplier}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                row++;
                row++;
                if (config.dailyxpLimit.dailyxplimit > 0)
                {
                    ControlPanelelements.Add(XPUILabel($"Default Value: {config.dailyxpLimit.dailyxplimit} + (({config.dailyxpLimit.dailyxplimit} * {config.dailyxpLimit.limitmultiplier}) * level)", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelDailyLimits);
                }
                else
                {
                    ControlPanelelements.Add(XPUILabel($"Default Value: Unlimited", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelDailyLimits);
                }
                row++;
                if (config.dailyxpLimit.dailyxplimitvip > 0)
                {
                    ControlPanelelements.Add(XPUILabel($"VIP Value: {config.dailyxpLimit.dailyxplimitvip} + (({config.dailyxpLimit.dailyxplimitvip} * {config.dailyxpLimit.limitmultiplier}) * level)", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelDailyLimits);
                }
                else
                {
                    ControlPanelelements.Add(XPUILabel($"VIP Value: Unlimited", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelDailyLimits);
                }
            }
            #endregion
            // Daily Stat & Skill Reset Limits
            #region Daily Stat & Skill
            row++;
            row++;
            ControlPanelelements.Add(XPUILabel($"[Stat & Skill Limit Settings] (Players with VIP Overide Special Groups)", row, height, TextAnchor.MiddleLeft, 15, "0.01", "0.5", "1 1 1 1"), XPerienceAdminPanelDailyLimits);
            // Enable Daily Limit
            row++;
            ControlPanelelements.Add(XPUILabel($"Enable Daily Reset Limits:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelDailyLimits);
            ControlPanelelements.Add(XPToggle($"xp.config dailylimits enabledailyresetlimit", row, height, config.dailyresetLimit.enabledailyresetlimit, valueL, width), XPerienceAdminPanelDailyLimits);
            // Daily Stat Limit Default
            string defstatlimit = config.dailyresetLimit.dailystatlimit.ToString();
            if (defstatlimit == "0")
            {
                defstatlimit = "∞";
            }
            row++;
            ControlPanelelements.Add(XPUILabel($"Daily Stats Reset Limit Default:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelDailyLimits);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelDailyLimits);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelDailyLimits, $"xp.config dailylimits dailystatlimit {UserInputText}", row, height, 12, $"{defstatlimit}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Daily Stat Limit VIP
            string vipstatlimit = config.dailyresetLimit.dailystatlimitvip.ToString();
            if (vipstatlimit == "0")
            {
                vipstatlimit = "∞";
            }
            row++;
            ControlPanelelements.Add(XPUILabel($"Daily Stats Reset Limit VIP:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelDailyLimits);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelDailyLimits);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelDailyLimits, $"xp.config dailylimits dailystatlimitvip {UserInputText}", row, height, 12, $"{vipstatlimit}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Daily Skill Limit Default
            string defskilllimit = config.dailyresetLimit.dailyskilllimit.ToString();
            if (defskilllimit == "0")
            {
                defskilllimit = "∞";
            }
            row++;
            ControlPanelelements.Add(XPUILabel($"Daily Skill Reset Limit Default:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelDailyLimits);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelDailyLimits);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelDailyLimits, $"xp.config dailylimits dailyskilllimit {UserInputText}", row, height, 12, $"{defskilllimit}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Daily Skill Limit VIP
            string vipskilllimit = config.dailyresetLimit.dailyskilllimitvip.ToString();
            if (vipskilllimit == "0")
            {
                vipskilllimit = "∞";
            }
            row++;
            ControlPanelelements.Add(XPUILabel($"Daily Stats Reset Limit VIP:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelDailyLimits);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelDailyLimits);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelDailyLimits, $"xp.config dailylimits dailyskilllimitvip {UserInputText}", row, height, 12, $"{vipskilllimit}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            #endregion
            // End
            CuiHelper.AddUi(player, ControlPanelelements);
            return;
        }
        private void AdminStatsPage(BasePlayer player, string stat = "main")
        {
            var ControlPanelelements = new CuiElementContainer();
            #region Layout
            int fontsize = 15;
            var menuheight = 0.07f;
            var height = 0.035f;
            double width = .006;
            int row = 2;
            string iconL = ".01";
            string iconR = ".04";
            string iconR2 = ".02";
            string MlableL = ".05";
            string MlableL2 = ".03";
            string MlableR = ".50";
            string lableL = ".01";
            string lableR = ".20";
            string valueL = ".20";
            string valueR = ".25";
            string valuePL = ".26";
            string valuePR = ".36";
            #endregion
            ControlPanelelements.Add(XPUIPanel("0.16 0.0", "1 1", "0 0 0 .7"), XPerienceAdminPanelMain, XPerienceAdminPanelStats);
            // Main Page
            if (stat == "main")
            {
                ControlPanelelements.Add(XPUILabel($"Stat Settings - Click the stat below to adjust the settings for that stat.", 1, menuheight, TextAnchor.MiddleLeft, 18, "0.01", "1", "1 1 1 1"), XPerienceAdminPanelStats);
                // Stat List
                ControlPanelelements.Add(XPUIImage(XPerienceAdminPanelStats, XPeriencementality, row, menuheight, iconL, iconR));
                ControlPanelelements.Add(XPUIButton("xp.admin stats mentality", row, menuheight, fontsize, "0 0 0 0", "", iconL, iconR, TextAnchor.MiddleLeft), XPerienceAdminPanelStats);
                ControlPanelelements.Add(XPUIButton("xp.admin stats mentality", row, menuheight, fontsize, "0 0 0 0", $" {XPLang("mentality", player.UserIDString)}", MlableL, MlableR, TextAnchor.MiddleLeft), XPerienceAdminPanelStats);
                row++;
                ControlPanelelements.Add(XPUIImage(XPerienceAdminPanelStats, XPeriencedexterity, row, menuheight, iconL, iconR));
                ControlPanelelements.Add(XPUIButton("xp.admin stats dexterity", row, menuheight, fontsize, "0 0 0 0", "", iconL, iconR, TextAnchor.MiddleLeft), XPerienceAdminPanelStats);
                ControlPanelelements.Add(XPUIButton("xp.admin stats dexterity", row, menuheight, fontsize, "0 0 0 0", $" {XPLang("dexterity", player.UserIDString)}", MlableL, MlableR, TextAnchor.MiddleLeft), XPerienceAdminPanelStats);
                row++;
                ControlPanelelements.Add(XPUIImage(XPerienceAdminPanelStats, XPeriencemight, row, menuheight, iconL, iconR));
                ControlPanelelements.Add(XPUIButton("xp.admin stats might", row, menuheight, fontsize, "0 0 0 0", "", iconL, iconR, TextAnchor.MiddleLeft), XPerienceAdminPanelStats);
                ControlPanelelements.Add(XPUIButton("xp.admin stats might", row, menuheight, fontsize, "0 0 0 0", $" {XPLang("might", player.UserIDString)}", MlableL, MlableR, TextAnchor.MiddleLeft), XPerienceAdminPanelStats);
                row++;
                ControlPanelelements.Add(XPUIImage(XPerienceAdminPanelStats, XPerienceweaponry, row, menuheight, iconL, iconR));
                ControlPanelelements.Add(XPUIButton("xp.admin stats weaponry", row, menuheight, fontsize, "0 0 0 0", "", iconL, iconR, TextAnchor.MiddleLeft), XPerienceAdminPanelStats);
                ControlPanelelements.Add(XPUIButton("xp.admin stats weaponry", row, menuheight, fontsize, "0 0 0 0", $" {XPLang("weaponry", player.UserIDString)}", MlableL, MlableR, TextAnchor.MiddleLeft), XPerienceAdminPanelStats);
                row++;
                ControlPanelelements.Add(XPUIImage(XPerienceAdminPanelStats, XPerienceninjary, row, menuheight, iconL, iconR));
                ControlPanelelements.Add(XPUIButton("xp.admin stats ninjary", row, menuheight, fontsize, "0 0 0 0", "", iconL, iconR, TextAnchor.MiddleLeft), XPerienceAdminPanelStats);
                ControlPanelelements.Add(XPUIButton("xp.admin stats ninjary", row, menuheight, fontsize, "0 0 0 0", $" {XPLang("ninjary", player.UserIDString)}", MlableL, MlableR, TextAnchor.MiddleLeft), XPerienceAdminPanelStats);
                row++;
                ControlPanelelements.Add(XPUIImage(XPerienceAdminPanelStats, XPeriencecaptaincy, row, menuheight, iconL, iconR));
                ControlPanelelements.Add(XPUIButton("xp.admin stats captaincy", row, menuheight, fontsize, "0 0 0 0", "", iconL, iconR, TextAnchor.MiddleLeft), XPerienceAdminPanelStats);
                ControlPanelelements.Add(XPUIButton("xp.admin stats captaincy", row, menuheight, fontsize, "0 0 0 0", $" {XPLang("captaincy", player.UserIDString)}", MlableL, MlableR, TextAnchor.MiddleLeft), XPerienceAdminPanelStats);
                // UI End
                CuiHelper.AddUi(player, ControlPanelelements);
                return;
            }
            // Return to main page
            if (stat != "main")
            {
                ControlPanelelements.Add(XPUIButton("xp.admin stats main", row, height, 11, "0 0 0 .7", "<- Back to Stat list", lableL, lableR, TextAnchor.MiddleCenter, "0 1 1 1"), XPerienceAdminPanelStats);
                row++;
                ControlPanelelements.Add(XPUILabel($"Set Max Level to 0 to disable: (Yellow = max level value | Blue = max rank value)", row, height, TextAnchor.MiddleLeft, 11, "0.01", "1", "1 1 1 1"), XPerienceAdminPanelStats);
                row++;
            }
            // Mentality Settings
            #region Mentality
            if (stat == "mentality")
            {
                ControlPanelelements.Add(XPUIImage(XPerienceAdminPanelStats, XPeriencementality, row, height, iconL, iconR2));
                ControlPanelelements.Add(XPUILabel($"{XPLang($"{stat}", player.UserIDString)} {XPLang($"settings", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 14, MlableL2, MlableR, "1 1 1 1"), XPerienceAdminPanelStats);
                row++;
                // Max Level
                ControlPanelelements.Add(XPUILabel($"Max Level:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} mentalitymaxlevel {UserInputText}", row, height, 12, $"{config.mentality.maxlvl}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                if (config.mentality.maxlvl > 0)
                {
                    // Cost to Start
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Point Cost To Start:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} mentalitycost {UserInputText}", row, height, 12, $"{config.mentality.pointcoststart}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Cost Multiplier
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Cost Multiplier:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} mentalitycostmultiplier {UserInputText}", row, height, 12, $"{config.mentality.costmultiplier}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Enable / Disable Tech Tree
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Lock Tech Tree:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPToggle($"xp.config stats {stat} mentalitylocktechtree", row, height, config.mentality.locktechtree, valueL, width), XPerienceAdminPanelStats);
                    // Tech Tree Level
                    if (config.mentality.locktechtree)
                    {
                        row++;
                        ControlPanelelements.Add(XPUILabel($"Tech Tree Level Requirement:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                        if (config.mentality.unlocktechtreelevel == 0)
                        {
                            ControlPanelelements.Add(XPUILabel($"<color=red>Locked</color>", row, height, TextAnchor.MiddleLeft, 12, "0.15", "0.20", "1 1 1 1"), XPerienceAdminPanelStats);
                        }
                        ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                        ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} mentalityunlocktechtreelevel {UserInputText}", row, height, 12, $"{config.mentality.unlocktechtreelevel}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    }
                    // Research Cost Tech Tree
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Research Cost Reduction (Tech Tree):", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} mentalityresearchcosttechtree {UserInputText}", row, height, 12, $"{config.mentality.researchcosttechtree}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.mentality.researchcosttechtree * config.mentality.maxlvl * 100}%</color> / <color=blue>{((config.mentality.researchcosttechtree * config.mentality.maxlvl) + (config.xpLevelRanks.rankstatboostamount * config.xpLevelRanks.maxresetrank)) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelStats);
                    // Research Cost
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Research Cost Reduction:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} mentalityresearchcost {UserInputText}", row, height, 12, $"{config.mentality.researchcost}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.mentality.researchcost * config.mentality.maxlvl * 100}%</color> / <color=blue>{((config.mentality.researchcost * config.mentality.maxlvl) + (config.xpLevelRanks.rankstatboostamount * config.xpLevelRanks.maxresetrank)) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelStats);
                    // Research Speed
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Research Speed Reduction:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} mentalityresearchspeed {UserInputText}", row, height, 12, $"{config.mentality.researchspeed}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.mentality.researchspeed * config.mentality.maxlvl * 100}%</color> / <color=blue>{((config.mentality.researchspeed * config.mentality.maxlvl) + (config.xpLevelRanks.rankstatboostamount * config.xpLevelRanks.maxresetrank)) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelStats);
                    // Critical Chance
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Critical Chance Percent:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} mentalitycriticalchance {UserInputText}", row, height, 12, $"{config.mentality.criticalchance}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.mentality.criticalchance * config.mentality.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelStats);
                    // Critical Damage
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Critical Damage Percent:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} mentalitycriticaldmg {UserInputText}", row, height, 12, $"{config.mentality.criticaldgm}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=white>{config.mentality.criticaldgm * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelStats);
                    // Damage PVP / NPC
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Damage Increase to NPCs:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} mentalitydamagepvpnpc {UserInputText}", row, height, 12, $"{config.mentality.damageincrease}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.mentality.damageincrease * config.mentality.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelStats);
                    // Enable / Disable Research
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Use Other Research Mod:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPToggle($"xp.config stats {stat} mentalityothermod", row, height, config.mentality.useotherresearchmod, valueL, width), XPerienceAdminPanelStats);
                }
                // End UI
                CuiHelper.AddUi(player, ControlPanelelements);
                return;
            }
            #endregion
            // Dexterity Settings
            #region Dexterity
            if (stat == "dexterity")
            {
                ControlPanelelements.Add(XPUIImage(XPerienceAdminPanelStats, XPeriencedexterity, row, height, iconL, iconR2));
                ControlPanelelements.Add(XPUILabel($"{XPLang($"{stat}", player.UserIDString)} {XPLang($"settings", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 14, MlableL2, MlableR, "1 1 1 1"), XPerienceAdminPanelStats);
                row++;
                // Max Level
                ControlPanelelements.Add(XPUILabel($"Max Level:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} dexteritymaxlevel {UserInputText}", row, height, 12, $"{config.dexterity.maxlvl}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                if (config.dexterity.maxlvl > 0)
                {
                    // Cost to Start
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Point Cost To Start:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} dexteritycost {UserInputText}", row, height, 12, $"{config.dexterity.pointcoststart}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Cost Multiplier
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Cost Multiplier:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} dexteritycostmultiplier {UserInputText}", row, height, 12, $"{config.dexterity.costmultiplier}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Block Chance
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Block Chance Percent:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} dexterityblock {UserInputText}", row, height, 12, $"{config.dexterity.blockchance}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.dexterity.blockchance * config.dexterity.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelStats);
                    // Block Amount
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Block Amount Percent:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} dexterityblockamt {UserInputText}", row, height, 12, $"{config.dexterity.blockamount}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.dexterity.blockamount * config.dexterity.maxlvl * 100}%</color> / <color=blue>{((config.dexterity.blockamount * config.dexterity.maxlvl) + (config.xpLevelRanks.rankstatboostamount * config.xpLevelRanks.maxresetrank)) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelStats);
                    // Dodge Chance
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Dodge Chance Percent:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} dexteritydodge {UserInputText}", row, height, 12, $"{config.dexterity.dodgechance}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.dexterity.dodgechance * config.dexterity.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelStats);
                    // Armor Damage
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Armor Damage Reduction:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} dexterityarmor {UserInputText}", row, height, 12, $"{config.dexterity.reducearmordmg}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.dexterity.reducearmordmg * config.dexterity.maxlvl * 100}%</color> / <color=blue>{((config.dexterity.reducearmordmg * config.dexterity.maxlvl) + (config.xpLevelRanks.rankstatboostamount * config.xpLevelRanks.maxresetrank)) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelStats);
                    // Horse Speed
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Horse Speed:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} horsespeed {UserInputText}", row, height, 12, $"{config.dexterity.horsespeed}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.dexterity.horsespeed * config.dexterity.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelStats);
                    // Boat Speed
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Boat Speed:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} boatspeed {UserInputText}", row, height, 12, $"{config.dexterity.boatspeed}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.dexterity.boatspeed * config.dexterity.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelStats);
                    // Vehicle Speed
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Vehicle Speed:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} vehiclespeed {UserInputText}", row, height, 12, $"{config.dexterity.vehiclespeed}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.dexterity.vehiclespeed * config.dexterity.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelStats);
                    // Fuel Reduce
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Fuel Reduction Chance:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} fuelreduce {UserInputText}", row, height, 12, $"{config.dexterity.fuelreduce}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.dexterity.fuelreduce * config.dexterity.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelStats);
                }
                // End UI
                CuiHelper.AddUi(player, ControlPanelelements);
                return;
            }
            #endregion
            // Might
            #region Might
            if (stat == "might")
            {
                ControlPanelelements.Add(XPUIImage(XPerienceAdminPanelStats, XPeriencemight, row, height, iconL, iconR2));
                ControlPanelelements.Add(XPUILabel($"{XPLang($"{stat}", player.UserIDString)} {XPLang($"settings", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 14, MlableL2, MlableR, "1 1 1 1"), XPerienceAdminPanelStats);
                row++;
                // Max Level
                ControlPanelelements.Add(XPUILabel($"Max Level:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} mightmaxlevel {UserInputText}", row, height, 12, $"{config.might.maxlvl}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                if (config.might.maxlvl > 0)
                {
                    // Max Cost to Start
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Point Cost To Start:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} mightcost {UserInputText}", row, height, 12, $"{config.might.pointcoststart}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Cost Multiplier
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Cost Multiplier:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} mightcostmultiplier {UserInputText}", row, height, 12, $"{config.might.costmultiplier}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Armor
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Armor:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} mightarmor {UserInputText}", row, height, 12, $"{config.might.armor}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.might.armor * config.might.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelStats);
                    // Melee Dmg
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Melee Damage Increase:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} mightmelee {UserInputText}", row, height, 12, $"{config.might.meleedmg}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.might.meleedmg * config.might.maxlvl * 100}%</color> / <color=blue>{((config.might.meleedmg * config.might.maxlvl) + (config.xpLevelRanks.rankstatboostamount * config.xpLevelRanks.maxresetrank)) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelStats);
                    // Metabolism
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Metabolism (Hunger/Thirst):", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} mightmeta {UserInputText}", row, height, 12, $"{config.might.metabolism}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.might.metabolism * config.might.maxlvl * 100}%</color> / <color=blue>{((config.might.metabolism * config.might.maxlvl) + (config.xpLevelRanks.rankstatboostamount * config.xpLevelRanks.maxresetrank)) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelStats);
                    // Bleeding
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Bleed Reduction:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} mightbleed {UserInputText}", row, height, 12, $"{config.might.bleedreduction}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.might.bleedreduction * config.might.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelStats);
                    // Radiation
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Radiation Reduction:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} mightrad {UserInputText}", row, height, 12, $"{config.might.radreduction}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.might.radreduction * config.might.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelStats);
                    // Heat
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Heat Reduction:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} mightheat {UserInputText}", row, height, 12, $"{config.might.heattolerance}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.might.heattolerance * config.might.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelStats);
                    // Cold
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Cold Reduction:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} mightcold {UserInputText}", row, height, 12, $"{config.might.coldtolerance}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.might.coldtolerance * config.might.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelStats);
                }
                // End UI
                CuiHelper.AddUi(player, ControlPanelelements);
                return;
            }
            #endregion
            // Weaponry
            #region Weaponry
            if (stat == "weaponry")
            {
                bool settingsopen = true;
                ControlPanelelements.Add(XPUIImage(XPerienceAdminPanelStats, XPerienceweaponry, row, height, iconL, iconR2));
                ControlPanelelements.Add(XPUILabel($"{XPLang($"{stat}", player.UserIDString)} {XPLang($"settings", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 14, MlableL2, MlableR, "1 1 1 1"), XPerienceAdminPanelStats);
                row++;
                // Max Level
                ControlPanelelements.Add(XPUILabel($"Max Level:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} weaponrymaxlevel {UserInputText}", row, height, 12, $"{config.weaponry.maxlvl}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                if (config.weaponry.maxlvl > 0)
                {
                    // Max Cost to Start
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Point Cost To Start:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} weaponrycost {UserInputText}", row, height, 12, $"{config.weaponry.pointcoststart}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Cost Multiplier
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Cost Multiplier:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} weaponrycostmultiplier {UserInputText}", row, height, 12, $"{config.weaponry.costmultiplier}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // NeverWear Plugin
                    if (NeverWear != null)
                    {
                        row++;
                        ControlPanelelements.Add(XPUILabel($"NeverWear Plugin Detected:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                        row++;
                        ControlPanelelements.Add(XPUILabel($"Override Tool Durability:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                        ControlPanelelements.Add(XPToggle($"xp.config stats {stat} neverweartools", row, height, config.weaponry.neverweartools, valueL, width), XPerienceAdminPanelStats);
                        row++;
                        ControlPanelelements.Add(XPUILabel($"Override Weapon Durability:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                        ControlPanelelements.Add(XPToggle($"xp.config stats {stat} neverwearweapons", row, height, config.weaponry.neverwearweapons, valueL, width), XPerienceAdminPanelStats);
                    }
                    if (NeverWear == null || (config.weaponry.neverweartools || config.weaponry.neverwearweapons))
                    {
                        // Reduction Chance
                        row++;
                        ControlPanelelements.Add(XPUILabel($"Durability Reduction Chance:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                        ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                        ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} weaponrychance {UserInputText}", row, height, 12, $"{config.weaponry.reductionchance}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                        ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.weaponry.reductionchance * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelStats);
                        // Min Damage
                        row++;
                        ControlPanelelements.Add(XPUILabel($"Minimum Durability Damage:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                        ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                        ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} weaponrymindamage {UserInputText}", row, height, 12, $"{config.weaponry.mindamage}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                        ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.weaponry.mindamage * config.weaponry.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelStats);
                    }
                    if (NeverWear == null || config.weaponry.neverweartools)
                    {
                        // Tools
                        row++;
                        ControlPanelelements.Add(XPUILabel($"Tool Condition Reduction:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                        ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                        ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} weaponrytools {UserInputText}", row, height, 12, $"{config.weaponry.tool}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                        ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.weaponry.tool * config.weaponry.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelStats);
                        // Power Tools
                        row++;
                        ControlPanelelements.Add(XPUILabel($"Power Tool Condition Reduction:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                        ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                        ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} weaponrypowertools {UserInputText}", row, height, 12, $"{config.weaponry.powertools}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                        ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.weaponry.powertools * config.weaponry.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelStats);
                    }
                    if (NeverWear == null || config.weaponry.neverwearweapons)
                    {
                        // Melee Weapons
                        row++;
                        ControlPanelelements.Add(XPUILabel($"Melee Weapon Condition Reduction:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                        ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                        ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} weaponrymeleeweapons {UserInputText}", row, height, 12, $"{config.weaponry.meleeweapons}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                        ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.weaponry.meleeweapons * config.weaponry.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelStats);
                        // Projectile Weapons
                        row++;
                        ControlPanelelements.Add(XPUILabel($"Projectile Weapon Condition Reduction:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                        ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                        ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} weaponryprojectileweapons {UserInputText}", row, height, 12, $"{config.weaponry.projectileweapons}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                        ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.weaponry.projectileweapons * config.weaponry.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelStats);
                    }
                    if (SkinBox != null)
                    {
                        // Enable / Disable Skinbox
                        row++;
                        ControlPanelelements.Add(XPUILabel($"Disable ammo for skinbox skins:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                        ControlPanelelements.Add(XPToggle($"xp.config stats {stat} skinboxdisable", row, height, config.weaponry.skinboxdisable, valueL, width), XPerienceAdminPanelStats);
                        ControlPanelelements.Add(XPUILabel($"(There is a known conflict with skinbox that allows unlimited ammo per clip on weapons using skinbox skins.)", row, height, TextAnchor.MiddleLeft, 10, valuePL, "1", "1 1 1 1"), XPerienceAdminPanelStats);
                    }
                    // Weapon Mechanics Plugin
                    if (WeaponMechanics != null)
                    {
                        row++;
                        ControlPanelelements.Add(XPUILabel($"Weapon Mechanics Plugin Detected:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                        row++;
                        ControlPanelelements.Add(XPUILabel($"Use Weapon Mechanics:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                        ControlPanelelements.Add(XPToggle($"xp.config stats {stat} useweaponmechanics", row, height, config.weaponry.useweaponmechanics, valueL, width), XPerienceAdminPanelStats);
                        if (!config.weaponry.useweaponmechanics) settingsopen = false;
                    }
                    if (settingsopen)
                    {
                        if (WeaponMechanics != null && config.weaponry.useweaponmechanics)
                        {
                            row++;
                            ControlPanelelements.Add(XPUILabel($"(These settings will apply after Weapon Mechanics default weapon adjustments)", row, height, TextAnchor.MiddleLeft, 10, lableL, valueR, "1 1 1 1"), XPerienceAdminPanelStats);
                        }
                        // Max Ammo
                        row++;
                        ControlPanelelements.Add(XPUILabel($"Max Ammo Increase:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                        ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                        ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} weaponrymaxammo {UserInputText}", row, height, 12, $"{config.weaponry.maxammo}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                        ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.weaponry.maxammo * config.weaponry.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelStats);
                        // Max Ammo Limit
                        row++;
                        ControlPanelelements.Add(XPUILabel($"Max Ammo Limit:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                        ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                        ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} weaponrymaxammolimit {UserInputText}", row, height, 12, $"{config.weaponry.maxammolimit}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                        ControlPanelelements.Add(XPUILabel($"<color=yellow>x{config.weaponry.maxammolimit * config.weaponry.maxlvl}</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelStats);
                        // Excluded Weapons
                        row++;
                        ControlPanelelements.Add(XPUILabel($"Excluded Weapons (ex1,ex2,ex3):", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                        ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, ".5"), XPerienceAdminPanelStats);
                        ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} excludeweapons {UserInputText}", row, height, 12, $"{config.weaponry.excludedweapons}", valueL, ".5", TextAnchor.MiddleLeft, "1 1 1 1"));
                        // Reload Hook
                        row++;
                        row++;
                        ControlPanelelements.Add(XPUILabel($"Choose Reload Hook: (if you experience issues with max ammo ability you can select a different hook and see if it fixes your issues)", row, height, TextAnchor.MiddleLeft, 12, "0.01", "0.99", "1 1 1 1"), XPerienceAdminPanelStats);
                        row++;
                        string selectedhooka = string.Empty;
                        string selectedhookb = string.Empty;
                        if (config.weaponry.reloadhook == "OnMagazineReload")
                        {
                            selectedhooka = " <color=green>(Selected)</color>";
                        }
                        ControlPanelelements.Add(XPUIButton($"xp.config stats {stat} weaponryreloadhook OnMagazineReload", row, height, 12, "0.0 1.0 0.0 0", $"OnMagazineReload {selectedhooka}", "0.03", "0.25", TextAnchor.MiddleLeft, "1 1 1 1"), XPerienceAdminPanelStats);
                        row++;
                        if (config.weaponry.reloadhook == "OnWeaponReload")
                        {
                            selectedhookb = " <color=green>(Selected)</color>";
                        }
                        ControlPanelelements.Add(XPUIButton($"xp.config stats {stat} weaponryreloadhook OnWeaponReload", row, height, 12, "0.0 1.0 0.0 0", $"OnWeaponReload {selectedhookb}", "0.03", "0.25", TextAnchor.MiddleLeft, "1 1 1 1"), XPerienceAdminPanelStats);
                    }
                }
                // End UI
                CuiHelper.AddUi(player, ControlPanelelements);
                return;
            }
            #endregion
            // Ninjary
            #region Ninjary
            if (stat == "ninjary")
            {
                ControlPanelelements.Add(XPUIImage(XPerienceAdminPanelStats, XPerienceninjary, row, height, iconL, iconR2));
                ControlPanelelements.Add(XPUILabel($"{XPLang($"{stat}", player.UserIDString)} {XPLang($"settings", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 14, MlableL2, MlableR, "1 1 1 1"), XPerienceAdminPanelStats);
                row++;
                // Max Level
                ControlPanelelements.Add(XPUILabel($"Max Level:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} ninjarymaxlevel {UserInputText}", row, height, 12, $"{config.ninjary.maxlvl}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                if (config.ninjary.maxlvl > 0)
                {
                    // Max Cost to Start
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Point Cost To Start:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} ninjarycost {UserInputText}", row, height, 12, $"{config.ninjary.pointcoststart}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Cost Multiplier
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Cost Multiplier:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} ninjarycostmultiplier {UserInputText}", row, height, 12, $"{config.ninjary.costmultiplier}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Patrol Stealth
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Patrol Helicopter Stealth:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} patrolstealth {UserInputText}", row, height, 12, $"{config.ninjary.patrolstealth}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.ninjary.patrolstealth * config.ninjary.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelStats);
                    // CH47 Stealth
                    row++;
                    ControlPanelelements.Add(XPUILabel($"CH47 Stealth:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} ch47stealth {UserInputText}", row, height, 12, $"{config.ninjary.ch47stealth}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.ninjary.ch47stealth * config.ninjary.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelStats);
                    // Bradley Stealth
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Bradley APC Stealth:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} bradleystealth {UserInputText}", row, height, 12, $"{config.ninjary.bradleystealth}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.ninjary.bradleystealth * config.ninjary.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelStats);
                    // NPC Stealth
                    row++;
                    ControlPanelelements.Add(XPUILabel($"NPC Stealth:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} npcstealth {UserInputText}", row, height, 12, $"{config.ninjary.npcstealth}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.ninjary.npcstealth * config.ninjary.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelStats);
                    // Turret Stealth
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Turret Stealth:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} turretstealth {UserInputText}", row, height, 12, $"{config.ninjary.turretstealth}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.ninjary.turretstealth * config.ninjary.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelStats);
                    // Knife Damage
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Knife Damage:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} knifeincrease {UserInputText}", row, height, 12, $"{config.ninjary.knifeincrease}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.ninjary.knifeincrease * config.ninjary.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelStats);
                    // Sword Damage
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Sword Damage:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} swordincrease {UserInputText}", row, height, 12, $"{config.ninjary.swordincrease}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.ninjary.swordincrease * config.ninjary.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelStats);
                }
                // End UI
                CuiHelper.AddUi(player, ControlPanelelements);
                return;
            }
            #endregion
            // Captaincy Settings
            #region Captaincy
            if (stat == "captaincy")
            {
                ControlPanelelements.Add(XPUIImage(XPerienceAdminPanelStats, XPeriencecaptaincy, row, height, iconL, iconR2));
                ControlPanelelements.Add(XPUILabel($"{XPLang($"{stat}", player.UserIDString)} {XPLang($"settings", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 14, MlableL2, MlableR, "1 1 1 1"), XPerienceAdminPanelStats);
                row++;
                // Max Level
                ControlPanelelements.Add(XPUILabel($"Max Level:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} captaincymaxlevel {UserInputText}", row, height, 12, $"{config.captaincy.maxlvl}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                if (config.captaincy.maxlvl > 0)
                {
                    // Cost to Start
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Point Cost To Start:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} captaincycost {UserInputText}", row, height, 12, $"{config.captaincy.pointcoststart}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Cost Multiplier
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Cost Multiplier:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} captaincycostmultiplier {UserInputText}", row, height, 12, $"{config.captaincy.costmultiplier}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Allow No Team
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Allow No Team:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPToggle($"xp.config stats {stat} allownoteam", row, height, config.captaincy.allownoteam, valueL, width), XPerienceAdminPanelStats);
                    // Effective Distance
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Effective Distance (feet):", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} captaincydistance {UserInputText}", row, height, 12, $"{config.captaincy.captaincydistance}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.captaincy.captaincydistance * config.captaincy.maxlvl}</color> / <color=blue>{((config.captaincy.captaincydistance * config.captaincy.maxlvl) + ((config.xpLevelRanks.rankstatboostamount * config.xpLevelRanks.maxresetrank) * 100))}</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelStats);
                    // Skill Boost
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Team Skill Boost:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} captaincyskillboost {UserInputText}", row, height, 12, $"{config.captaincy.skillboost}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.captaincy.skillboost * config.captaincy.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelStats);
                    // Enable XP Boost
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Enable Team XP Boost:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPToggle($"xp.config stats {stat} captaincyenablexpboost", row, height, config.captaincy.enablexpboost, valueL, width), XPerienceAdminPanelStats);
                    // XP Boost
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Team XP Boost:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelStats);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelStats, $"xp.config stats {stat} captaincyxpboost {UserInputText}", row, height, 12, $"{config.captaincy.xpboost}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.captaincy.xpboost * config.captaincy.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelStats);
                }
                // End UI
                CuiHelper.AddUi(player, ControlPanelelements);
                return;
            }
            #endregion
        }
        private void AdminSkillsPage(BasePlayer player, string skill = "main")
        {
            var ControlPanelelements = new CuiElementContainer();
            #region Layout
            int fontsize = 15;
            var menuheight = 0.07f;
            var height = 0.035f;
            double width = .006;
            int row = 2;
            string iconL = ".01";
            string iconR = ".04";
            string iconR2 = ".02";
            string MlableL = ".05";
            string MlableL2 = ".03";
            string MlableR = ".50";
            string lableL = ".01";
            string lableR = ".20";
            string valueL = ".20";
            string valueR = ".25";
            string valuePL = ".26";
            string valuePR = ".36";
            #endregion
            ControlPanelelements.Add(XPUIPanel("0.16 0.0", "1 1", "0 0 0 .7"), XPerienceAdminPanelMain, XPerienceAdminPanelSkills);
            // Main Page
            if(skill == "main")
            {
                ControlPanelelements.Add(XPUILabel($"Skills Settings - Click the skill below to adjust the settings for that skill.", 1, menuheight, TextAnchor.MiddleLeft, 18, "0.01", "1", "1 1 1 1"), XPerienceAdminPanelSkills);
                // Skill List
                ControlPanelelements.Add(XPUIImage(XPerienceAdminPanelSkills, XPeriencewoodcutter, row, menuheight, iconL, iconR));
                ControlPanelelements.Add(XPUIButton("xp.admin skills woodcutter", row, menuheight, fontsize, "0 0 0 0", "", iconL, iconR, TextAnchor.MiddleLeft), XPerienceAdminPanelSkills);
                ControlPanelelements.Add(XPUIButton("xp.admin skills woodcutter", row, menuheight, fontsize, "0 0 0 0", $" {XPLang("woodcutter", player.UserIDString)}", MlableL, MlableR, TextAnchor.MiddleLeft), XPerienceAdminPanelSkills);
                row++;
                ControlPanelelements.Add(XPUIImage(XPerienceAdminPanelSkills, XPeriencesmithy, row, menuheight, iconL, iconR));
                ControlPanelelements.Add(XPUIButton("xp.admin skills smithy", row, menuheight, fontsize, "0 0 0 0", "", iconL, iconR, TextAnchor.MiddleLeft), XPerienceAdminPanelSkills);
                ControlPanelelements.Add(XPUIButton("xp.admin skills smithy", row, menuheight, fontsize, "0 0 0 0", $" {XPLang("smithy", player.UserIDString)}", MlableL, MlableR, TextAnchor.MiddleLeft), XPerienceAdminPanelSkills);
                row++;
                ControlPanelelements.Add(XPUIImage(XPerienceAdminPanelSkills, XPerienceminer, row, menuheight, iconL, iconR));
                ControlPanelelements.Add(XPUIButton("xp.admin skills miner", row, menuheight, fontsize, "0 0 0 0", "", iconL, iconR, TextAnchor.MiddleLeft), XPerienceAdminPanelSkills);
                ControlPanelelements.Add(XPUIButton("xp.admin skills miner", row, menuheight, fontsize, "0 0 0 0", $" {XPLang("miner", player.UserIDString)}", MlableL, MlableR, TextAnchor.MiddleLeft), XPerienceAdminPanelSkills);
                row++;
                ControlPanelelements.Add(XPUIImage(XPerienceAdminPanelSkills, XPeriencefisher, row, menuheight, iconL, iconR));
                ControlPanelelements.Add(XPUIButton("xp.admin skills fisher", row, menuheight, fontsize, "0 0 0 0", "", iconL, iconR, TextAnchor.MiddleLeft), XPerienceAdminPanelSkills);
                ControlPanelelements.Add(XPUIButton("xp.admin skills fisher", row, menuheight, fontsize, "0 0 0 0", $" {XPLang("fisher", player.UserIDString)}", MlableL, MlableR, TextAnchor.MiddleLeft), XPerienceAdminPanelSkills);
                row++;
                ControlPanelelements.Add(XPUIImage(XPerienceAdminPanelSkills, XPerienceforager, row, menuheight, iconL, iconR));
                ControlPanelelements.Add(XPUIButton("xp.admin skills forager", row, menuheight, fontsize, "0 0 0 0", "", iconL, iconR, TextAnchor.MiddleLeft), XPerienceAdminPanelSkills);
                ControlPanelelements.Add(XPUIButton("xp.admin skills forager", row, menuheight, fontsize, "0 0 0 0", $" {XPLang("forager", player.UserIDString)}", MlableL, MlableR, TextAnchor.MiddleLeft), XPerienceAdminPanelSkills);
                row++;
                ControlPanelelements.Add(XPUIImage(XPerienceAdminPanelSkills, XPeriencehunter, row, menuheight, iconL, iconR));
                ControlPanelelements.Add(XPUIButton("xp.admin skills hunter", row, menuheight, fontsize, "0 0 0 0", "", iconL, iconR, TextAnchor.MiddleLeft), XPerienceAdminPanelSkills);
                ControlPanelelements.Add(XPUIButton("xp.admin skills hunter", row, menuheight, fontsize, "0 0 0 0", $" {XPLang("hunter", player.UserIDString)}", MlableL, MlableR, TextAnchor.MiddleLeft), XPerienceAdminPanelSkills);
                row++;
                ControlPanelelements.Add(XPUIImage(XPerienceAdminPanelSkills, XPeriencecrafter, row, menuheight, iconL, iconR));
                ControlPanelelements.Add(XPUIButton("xp.admin skills crafter", row, menuheight, fontsize, "0 0 0 0", "", iconL, iconR, TextAnchor.MiddleLeft), XPerienceAdminPanelSkills);
                ControlPanelelements.Add(XPUIButton("xp.admin skills crafter", row, menuheight, fontsize, "0 0 0 0", $" {XPLang("crafter", player.UserIDString)}", MlableL, MlableR, TextAnchor.MiddleLeft), XPerienceAdminPanelSkills);
                row++;
                ControlPanelelements.Add(XPUIImage(XPerienceAdminPanelSkills, XPerienceframer, row, menuheight, iconL, iconR));
                ControlPanelelements.Add(XPUIButton("xp.admin skills framer", row, menuheight, fontsize, "0 0 0 0", "", iconL, iconR, TextAnchor.MiddleLeft), XPerienceAdminPanelSkills);
                ControlPanelelements.Add(XPUIButton("xp.admin skills framer", row, menuheight, fontsize, "0 0 0 0", $" {XPLang("framer", player.UserIDString)}", MlableL, MlableR, TextAnchor.MiddleLeft), XPerienceAdminPanelSkills);
                row++;
                ControlPanelelements.Add(XPUIImage(XPerienceAdminPanelSkills, XPeriencemedic, row, menuheight, iconL, iconR));
                ControlPanelelements.Add(XPUIButton("xp.admin skills medic", row, menuheight, fontsize, "0 0 0 0", "", iconL, iconR, TextAnchor.MiddleLeft), XPerienceAdminPanelSkills);
                ControlPanelelements.Add(XPUIButton("xp.admin skills medic", row, menuheight, fontsize, "0 0 0 0", $" {XPLang("medic", player.UserIDString)}", MlableL, MlableR, TextAnchor.MiddleLeft), XPerienceAdminPanelSkills);
                row++;
                ControlPanelelements.Add(XPUIImage(XPerienceAdminPanelSkills, XPeriencescavenger, row, menuheight, iconL, iconR));
                ControlPanelelements.Add(XPUIButton("xp.admin skills scavenger", row, menuheight, fontsize, "0 0 0 0", "", iconL, iconR, TextAnchor.MiddleLeft), XPerienceAdminPanelSkills);
                ControlPanelelements.Add(XPUIButton("xp.admin skills scavenger", row, menuheight, fontsize, "0 0 0 0", $" {XPLang("scavenger", player.UserIDString)}", MlableL, MlableR, TextAnchor.MiddleLeft), XPerienceAdminPanelSkills);
                row++;
                ControlPanelelements.Add(XPUIImage(XPerienceAdminPanelSkills, XPerienceelectrician, row, menuheight, iconL, iconR));
                ControlPanelelements.Add(XPUIButton("xp.admin skills electrician", row, menuheight, fontsize, "0 0 0 0", "", iconL, iconR, TextAnchor.MiddleLeft), XPerienceAdminPanelSkills);
                ControlPanelelements.Add(XPUIButton("xp.admin skills electrician", row, menuheight, fontsize, "0 0 0 0", $" {XPLang("electrician", player.UserIDString)}", MlableL, MlableR, TextAnchor.MiddleLeft), XPerienceAdminPanelSkills);
                row++;
                ControlPanelelements.Add(XPUIImage(XPerienceAdminPanelSkills, XPeriencedemolitionist, row, menuheight, iconL, iconR));
                ControlPanelelements.Add(XPUIButton("xp.admin skills demolitionist", row, menuheight, fontsize, "0 0 0 0", "", iconL, iconR, TextAnchor.MiddleLeft), XPerienceAdminPanelSkills);
                ControlPanelelements.Add(XPUIButton("xp.admin skills demolitionist", row, menuheight, fontsize, "0 0 0 0", $" {XPLang("demolitionist", player.UserIDString)}", MlableL, MlableR, TextAnchor.MiddleLeft), XPerienceAdminPanelSkills);
                // UI End
                CuiHelper.AddUi(player, ControlPanelelements);
                return;
            }
            // Return to main page
            if (skill != "main")
            {
                ControlPanelelements.Add(XPUIButton("xp.admin skills main", row, height, 11, "0 0 0 .7", "<- Back to Skill list", lableL, lableR, TextAnchor.MiddleCenter, "0 1 1 1"), XPerienceAdminPanelSkills);
                row++;
                ControlPanelelements.Add(XPUILabel($"Set Max Level to 0 to disable: (Yellow = max level value | Blue = max rank value)", row, height, TextAnchor.MiddleLeft, 11, "0.01", "1", "1 1 1 1"), XPerienceAdminPanelSkills);
                row++;
            }
            // WoodCutter Settings
            #region WoodCutter
            if (skill == "woodcutter")
            {
                ControlPanelelements.Add(XPUIImage(XPerienceAdminPanelSkills, XPeriencewoodcutter, row, height, iconL, iconR2));
                ControlPanelelements.Add(XPUILabel($"{XPLang($"{skill}", player.UserIDString)} {XPLang($"settings", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 14, MlableL2, MlableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                row++;
                // Max Level
                ControlPanelelements.Add(XPUILabel($"Max Level:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} woodcuttermaxlevel {UserInputText}", row, height, 12, $"{config.woodcutter.maxlvl}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                if (config.woodcutter.maxlvl > 0)
                {
                    // Cost to Start
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Point Cost To Start:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} woodcuttercost {UserInputText}", row, height, 12, $"{config.woodcutter.pointcoststart}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Cost Multiplier
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Cost Multiplier:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} woodcuttercostmultiplier {UserInputText}", row, height, 12, $"{config.woodcutter.costmultiplier}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Gather Rate
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Gather Rate:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} woodcuttergatherrate {UserInputText}", row, height, 12, $"{config.woodcutter.gatherrate}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{(config.woodcutter.gatherrate * config.woodcutter.maxlvl) * 100}%</color> / <color=blue>{((config.woodcutter.gatherrate * config.woodcutter.maxlvl) + (config.xpLevelRanks.rankskillboostamount * config.xpLevelRanks.maxresetrank)) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Bonus Amount
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Bonus Amount:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} woodcutterbonus {UserInputText}", row, height, 12, $"{config.woodcutter.bonusincrease}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{(config.woodcutter.bonusincrease * config.woodcutter.maxlvl) * 100}%</color> / <color=blue>{((config.woodcutter.bonusincrease * config.woodcutter.maxlvl) + (config.xpLevelRanks.rankskillboostamount * config.xpLevelRanks.maxresetrank)) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Apple Chance
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Apple Chance:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} woodcutterapple {UserInputText}", row, height, 12, $"{config.woodcutter.applechance}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{(config.woodcutter.applechance * config.woodcutter.maxlvl) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                }
                // UI End
                CuiHelper.AddUi(player, ControlPanelelements);
                return;
            }
            #endregion
            // Smithy Settings
            #region Smithy
            if (skill == "smithy")
            {
                ControlPanelelements.Add(XPUIImage(XPerienceAdminPanelSkills, XPeriencesmithy, row, height, iconL, iconR2));
                ControlPanelelements.Add(XPUILabel($"{XPLang($"{skill}", player.UserIDString)} {XPLang($"settings", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 14, MlableL2, MlableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                row++;
                // Max Level
                ControlPanelelements.Add(XPUILabel($"Max Level:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} smithymaxlevel {UserInputText}", row, height, 12, $"{config.smithy.maxlvl}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                if (config.smithy.maxlvl > 0)
                {
                    // Cost to Start
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Point Cost To Start:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} smithycost {UserInputText}", row, height, 12, $"{config.smithy.pointcoststart}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Cost Multiplier
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Cost Multiplier:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} smithycostmultiplier {UserInputText}", row, height, 12, $"{config.smithy.costmultiplier}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Production Rate
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Production Rate:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} smithyprate {UserInputText}", row, height, 12, $"{config.smithy.productionrate}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{(config.smithy.productionrate * config.smithy.maxlvl) * 100}%</color> / <color=blue>{((config.smithy.productionrate * config.smithy.maxlvl) + (config.xpLevelRanks.rankskillboostamount * config.xpLevelRanks.maxresetrank)) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Production Speed
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Production Speed:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} smithypspeed {UserInputText}", row, height, 12, $"{config.smithy.productionspeed}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{(config.smithy.productionspeed * config.smithy.maxlvl) * 100}%</color> / <color=blue>{((config.smithy.productionspeed * config.smithy.maxlvl) + (config.xpLevelRanks.rankskillboostamount * config.xpLevelRanks.maxresetrank)) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Fuel Consumption
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Fuel Consumption:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} smithyfuel {UserInputText}", row, height, 12, $"{config.smithy.fuelconsumption}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{(config.smithy.fuelconsumption * config.smithy.maxlvl) * 100}%</color> / <color=blue>{((config.smithy.fuelconsumption * config.smithy.maxlvl) + (config.xpLevelRanks.rankskillboostamount * config.xpLevelRanks.maxresetrank)) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Metal Chance
                    row++;
                    ControlPanelelements.Add(XPUILabel($"High Quality Metal Chance:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} smithymetalchance {UserInputText}", row, height, 12, $"{config.smithy.metalchance}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{(config.smithy.metalchance * config.smithy.maxlvl) * 100}%</color> / <color=blue>{((config.smithy.metalchance * config.smithy.maxlvl) + (config.xpLevelRanks.rankskillboostamount * config.xpLevelRanks.maxresetrank)) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Metal Amount
                    row++;
                    ControlPanelelements.Add(XPUILabel($"High Quality Metal Amount:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} smithymetalamount {UserInputText}", row, height, 12, $"{config.smithy.metalamount}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.smithy.metalamount * config.smithy.maxlvl}</color> / <color=blue>{(config.smithy.metalamount * config.smithy.maxlvl) + ((config.xpLevelRanks.rankskillboostamount * config.xpLevelRanks.maxresetrank) * 100)}</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                }
                // UI End
                CuiHelper.AddUi(player, ControlPanelelements);
                return;
            }
            #endregion
            // Miner Settings
            #region Miner
            if (skill == "miner")
            {
                ControlPanelelements.Add(XPUIImage(XPerienceAdminPanelSkills, XPerienceminer, row, height, iconL, iconR2));
                ControlPanelelements.Add(XPUILabel($"{XPLang($"{skill}", player.UserIDString)} {XPLang($"settings", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 14, MlableL2, MlableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                row++;
                // Max Level
                ControlPanelelements.Add(XPUILabel($"Max Level:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} minermaxlevel {UserInputText}", row, height, 12, $"{config.miner.maxlvl}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                if (config.miner.maxlvl > 0)
                {
                    // Cost to Start
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Point Cost To Start:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} minercost {UserInputText}", row, height, 12, $"{config.miner.pointcoststart}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Cost Multiplier
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Cost Multiplier:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} minercostmultiplier {UserInputText}", row, height, 12, $"{config.miner.costmultiplier}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Gather Rate
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Gather Rate:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} minergatherrate {UserInputText}", row, height, 12, $"{config.miner.gatherrate}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{(config.miner.gatherrate * config.miner.maxlvl) * 100}%</color> / <color=blue>{((config.miner.gatherrate * config.miner.maxlvl) + (config.xpLevelRanks.rankskillboostamount * config.xpLevelRanks.maxresetrank)) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Bonus Amount
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Bonus Amount:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} minerbonus {UserInputText}", row, height, 12, $"{config.miner.bonusincrease}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{(config.miner.bonusincrease * config.miner.maxlvl) * 100}%</color> / <color=blue>{((config.miner.bonusincrease * config.miner.maxlvl) + (config.xpLevelRanks.rankskillboostamount * config.xpLevelRanks.maxresetrank)) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Fuel Consumption
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Fuel Consumption:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} minerfuel {UserInputText}", row, height, 12, $"{config.miner.fuelconsumption}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{(config.miner.fuelconsumption * config.miner.maxlvl) * 100}%</color> / <color=blue>{((config.miner.fuelconsumption * config.miner.maxlvl) + (config.xpLevelRanks.rankskillboostamount * config.xpLevelRanks.maxresetrank)) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Metal Chance
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Metal Fragment Chance:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} minermetalchance {UserInputText}", row, height, 12, $"{config.miner.metalchance}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{(config.miner.metalchance * config.miner.maxlvl) * 100}%</color> / <color=blue>{((config.miner.metalchance * config.miner.maxlvl) + (config.xpLevelRanks.rankskillboostamount * config.xpLevelRanks.maxresetrank)) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Metal Amount
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Metal Fragment Amount:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} minermetalamount {UserInputText}", row, height, 12, $"{config.miner.metalamount}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.miner.metalamount * config.miner.maxlvl}</color> / <color=blue>{(config.miner.metalamount * config.miner.maxlvl) + ((config.xpLevelRanks.rankskillboostamount * config.xpLevelRanks.maxresetrank) * 100)}</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                }
                // UI End
                CuiHelper.AddUi(player, ControlPanelelements);
                return;
            }
            #endregion
            // Fisher Settings
            #region Fisher
            if (skill == "fisher")
            {
                ControlPanelelements.Add(XPUIImage(XPerienceAdminPanelSkills, XPeriencefisher, row, height, iconL, iconR2));
                ControlPanelelements.Add(XPUILabel($"{XPLang($"{skill}", player.UserIDString)} {XPLang($"settings", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 14, MlableL2, MlableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                row++;
                // Max Level
                ControlPanelelements.Add(XPUILabel($"Max Level:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} fishermaxlevel {UserInputText}", row, height, 12, $"{config.fisher.maxlvl}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                if (config.woodcutter.maxlvl > 0)
                {
                    // Cost to Start
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Point Cost To Start:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} fishercost {UserInputText}", row, height, 12, $"{config.fisher.pointcoststart}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Cost Multiplier
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Cost Multiplier:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} fishercostmultiplier {UserInputText}", row, height, 12, $"{config.fisher.costmultiplier}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Fish Amount
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Fish Amount:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} fisheramount {UserInputText}", row, height, 12, $"{config.fisher.fishamountincrease}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{(config.fisher.fishamountincrease * config.fisher.maxlvl) * 100}%</color> / <color=blue>{((config.fisher.fishamountincrease * config.fisher.maxlvl) + (config.xpLevelRanks.rankskillboostamount * config.xpLevelRanks.maxresetrank)) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Item Amount
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Item Amount:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} fisheritem {UserInputText}", row, height, 12, $"{config.fisher.itemamountincrease}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{(config.fisher.itemamountincrease * config.fisher.maxlvl) * 100}%</color> / <color=blue>{((config.fisher.itemamountincrease * config.fisher.maxlvl) + (config.xpLevelRanks.rankskillboostamount * config.xpLevelRanks.maxresetrank)) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Oxygen Amount
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Oxygen Reduction:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} fisheroxygen {UserInputText}", row, height, 12, $"{config.fisher.oxygenreduction}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{(config.fisher.oxygenreduction * config.fisher.maxlvl) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Oxygen Tank Amount
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Oxygen Tank Reduction:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} fisheroxygentank {UserInputText}", row, height, 12, $"{config.fisher.oxygentankreduction}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{(config.fisher.oxygentankreduction * config.fisher.maxlvl) * 100}%</color> / <color=blue>{((config.fisher.oxygentankreduction * config.fisher.maxlvl) + (config.xpLevelRanks.rankskillboostamount * config.xpLevelRanks.maxresetrank)) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                }
                // UI End
                CuiHelper.AddUi(player, ControlPanelelements);
                return;
            }
            #endregion
            // Forager
            #region Forager
            if (skill == "forager")
            {
                ControlPanelelements.Add(XPUIImage(XPerienceAdminPanelSkills, XPerienceforager, row, height, iconL, iconR2));
                ControlPanelelements.Add(XPUILabel($"{XPLang($"{skill}", player.UserIDString)} {XPLang($"settings", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 14, MlableL2, MlableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                row++;
                // Max Level
                ControlPanelelements.Add(XPUILabel($"Max Level:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} foragermaxlevel {UserInputText}", row, height, 12, $"{config.forager.maxlvl}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                if (config.forager.maxlvl > 0)
                {
                    // Max Cost to Start
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Point Cost To Start:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} foragercost {UserInputText}", row, height, 12, $"{config.forager.pointcoststart}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Cost Multiplier
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Cost Multiplier:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} foragercostmultiplier {UserInputText}", row, height, 12, $"{config.forager.costmultiplier}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Gather Rate
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Gather Rate:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} foragergatherrate {UserInputText}", row, height, 12, $"{config.forager.gatherrate}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.forager.gatherrate * config.forager.maxlvl * 100}%</color> / <color=blue>{((config.forager.gatherrate * config.forager.maxlvl) + (config.xpLevelRanks.rankskillboostamount * config.xpLevelRanks.maxresetrank)) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Seed Chance
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Increase Seed Chance/Amount:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} foragerseed {UserInputText}", row, height, 12, $"{config.forager.chanceincrease}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.forager.chanceincrease * config.forager.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Worm / Grub Chance
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Increase Grub/Worm Chance:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} grubwormincrease {UserInputText}", row, height, 12, $"{config.forager.grubwormincrease}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.forager.grubwormincrease * config.forager.maxlvl * 100}%</color> / <color=blue>{((config.forager.grubwormincrease * config.forager.maxlvl) + (config.xpLevelRanks.rankskillboostamount * config.xpLevelRanks.maxresetrank)) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Item Chance
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Random Item Chance:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} foragerrandom {UserInputText}", row, height, 12, $"{config.forager.randomchance}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.forager.randomchance * config.forager.maxlvl * 100}%</color> / <color=blue>{((config.forager.randomchance * config.forager.maxlvl) + (config.xpLevelRanks.rankskillboostamount * config.xpLevelRanks.maxresetrank)) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Item List
                    row++;
                    row++;
                    ControlPanelelements.Add(XPUIButton($"xp.skillitems forager", row, height, 12, "0 1 0 .25", "Add/Edit Random Items", ".01", ".15", TextAnchor.MiddleCenter, "1 1 1 1"), XPerienceAdminPanelSkills);
                }
                // UI End
                CuiHelper.AddUi(player, ControlPanelelements);
                return;
            }
            #endregion
            // Hunter
            #region Hunter
            if (skill == "hunter")
            {
                ControlPanelelements.Add(XPUIImage(XPerienceAdminPanelSkills, XPeriencehunter, row, height, iconL, iconR2));
                ControlPanelelements.Add(XPUILabel($"{XPLang($"{skill}", player.UserIDString)} {XPLang($"settings", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 14, MlableL2, MlableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                row++;
                // Max Level
                ControlPanelelements.Add(XPUILabel($"Max Level:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} huntermaxlevel {UserInputText}", row, height, 12, $"{config.hunter.maxlvl}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                if (config.hunter.maxlvl > 0)
                {
                    // Max Cost to Start
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Point Cost To Start:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} huntercost {UserInputText}", row, height, 12, $"{config.hunter.pointcoststart}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Cost Multiplier
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Cost Multiplier:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} huntercostmultiplier {UserInputText}", row, height, 12, $"{config.hunter.costmultiplier}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Gather Rate
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Gather Rate:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} huntergatherrate {UserInputText}", row, height, 12, $"{config.hunter.gatherrate}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.hunter.gatherrate * config.hunter.maxlvl * 100}%</color> / <color=blue>{((config.hunter.gatherrate * config.hunter.maxlvl) + (config.xpLevelRanks.rankskillboostamount * config.xpLevelRanks.maxresetrank)) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Bonus Amount
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Bonus Amount:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} hunterbonus {UserInputText}", row, height, 12, $"{config.hunter.bonusincrease}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.hunter.bonusincrease * config.hunter.maxlvl * 100}%</color> / <color=blue>{((config.hunter.bonusincrease * config.hunter.maxlvl) + (config.xpLevelRanks.rankskillboostamount * config.xpLevelRanks.maxresetrank)) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Damage Increase Wildlife
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Damage Increase (Wildlife):", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} hunterdamage {UserInputText}", row, height, 12, $"{config.hunter.damageincrease}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.hunter.damageincrease * config.hunter.maxlvl * 100}%</color> / <color=blue>{((config.hunter.damageincrease * config.hunter.maxlvl) + (config.xpLevelRanks.rankskillboostamount * config.xpLevelRanks.maxresetrank)) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Exclude Weapons
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Exclude Long Range Weapons:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPToggle($"xp.config skills {skill} exhunterlongrange", row, height, config.hunter.excludelongrangeweapons, valueL, width), XPerienceAdminPanelSkills);
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Exclude Medium Range Weapons:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPToggle($"xp.config skills {skill} exhuntermedrange", row, height, config.hunter.excludemedrangeweapons, valueL, width), XPerienceAdminPanelSkills);
                    // Damage Increase Night
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Night Damage Increase (Wildlife):", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} hunterndamage {UserInputText}", row, height, 12, $"{config.hunter.nightdmgincrease}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.hunter.nightdmgincrease * config.hunter.maxlvl * 100}%</color> / <color=blue>{((config.hunter.nightdmgincrease * config.hunter.maxlvl) + (config.xpLevelRanks.rankskillboostamount * config.xpLevelRanks.maxresetrank)) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Damage Increase Bows
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Bow Damage Increase:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} bowdmgincrease {UserInputText}", row, height, 12, $"{config.hunter.bowdmgincrease}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.hunter.bowdmgincrease * config.hunter.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                }
                // UI End
                CuiHelper.AddUi(player, ControlPanelelements);
                return;
            }
            #endregion
            // Crafter
            #region Crafter
            if (skill == "crafter")
            {
                ControlPanelelements.Add(XPUIImage(XPerienceAdminPanelSkills, XPeriencecrafter, row, height, iconL, iconR2));
                ControlPanelelements.Add(XPUILabel($"{XPLang($"{skill}", player.UserIDString)} {XPLang($"settings", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 14, MlableL2, MlableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                row++;
                // Max Level
                ControlPanelelements.Add(XPUILabel($"Max Level:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} craftermaxlevel {UserInputText}", row, height, 12, $"{config.crafter.maxlvl}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                if (config.crafter.maxlvl > 0)
                {
                    // Max Cost to Start
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Point Cost To Start:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} craftercost {UserInputText}", row, height, 12, $"{config.crafter.pointcoststart}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Cost Multiplier
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Cost Multiplier:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} craftercostmultiplier {UserInputText}", row, height, 12, $"{config.crafter.costmultiplier}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Craft Speed
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Crafting Speed: (+)", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} crafterspeed {UserInputText}", row, height, 12, $"{config.crafter.craftspeed}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.crafter.craftspeed * config.crafter.maxlvl * 100}%</color> / <color=blue>{((config.crafter.craftspeed * config.crafter.maxlvl) + (config.xpLevelRanks.rankskillboostamount * config.xpLevelRanks.maxresetrank)) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Craft Cost
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Crafting Cost: (-)", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} craftercosts {UserInputText}", row, height, 12, $"{config.crafter.craftcost}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.crafter.craftcost * config.crafter.maxlvl * 100}%</color> / <color=blue>{((config.crafter.craftcost * config.crafter.maxlvl) + (config.xpLevelRanks.rankskillboostamount * config.xpLevelRanks.maxresetrank)) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Repair Increase
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Repair Increase:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} crafterrepair {UserInputText}", row, height, 12, $"{config.crafter.repairincrease}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.crafter.repairincrease * config.crafter.maxlvl * 100}%</color> / <color=blue>{((config.crafter.repairincrease * config.crafter.maxlvl) + (config.xpLevelRanks.rankskillboostamount * config.xpLevelRanks.maxresetrank)) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Repair Cost
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Repair Cost: (-)", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} crafterrepaircost {UserInputText}", row, height, 12, $"{config.crafter.repaircost}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.crafter.repaircost * config.crafter.maxlvl * 100}%</color> / <color=blue>{((config.crafter.repaircost * config.crafter.maxlvl) + (config.xpLevelRanks.rankskillboostamount * config.xpLevelRanks.maxresetrank)) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Condition Chance
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Condition Chance:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} craftercondtition {UserInputText}", row, height, 12, $"{config.crafter.conditionchance}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.crafter.conditionchance * config.crafter.maxlvl * 100}%</color> / <color=blue>{((config.crafter.conditionchance * config.crafter.maxlvl) + (config.xpLevelRanks.rankskillboostamount * config.xpLevelRanks.maxresetrank)) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Condition Amount
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Condition Amount: (+)", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} craftercondtitionamt {UserInputText}", row, height, 12, $"{config.crafter.conditionamount}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.crafter.conditionamount * config.crafter.maxlvl * 100}%</color> / <color=blue>{((config.crafter.conditionamount * config.crafter.maxlvl) + (config.xpLevelRanks.rankskillboostamount * config.xpLevelRanks.maxresetrank)) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                }
                // UI End
                CuiHelper.AddUi(player, ControlPanelelements);
                return;
            }
            #endregion
            // Framer Settings
            #region Framer
            if (skill == "framer")
            {
                ControlPanelelements.Add(XPUIImage(XPerienceAdminPanelSkills, XPerienceframer, row, height, iconL, iconR2));
                ControlPanelelements.Add(XPUILabel($"{XPLang($"{skill}", player.UserIDString)} {XPLang($"settings", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 14, MlableL2, MlableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                row++;
                // Max Level
                ControlPanelelements.Add(XPUILabel($"Max Level:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} framermaxlevel {UserInputText}", row, height, 12, $"{config.framer.maxlvl}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                if (config.framer.maxlvl > 0)
                {
                    // Max Cost to Start
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Point Cost To Start:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} framercost {UserInputText}", row, height, 12, $"{config.framer.pointcoststart}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Cost Multiplier
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Cost Multiplier:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} framercostmultiplier {UserInputText}", row, height, 12, $"{config.framer.costmultiplier}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Upgrade Cost
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Upgrade Cost: (-)", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} framerupgrade {UserInputText}", row, height, 12, $"{config.framer.upgradecost}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.framer.upgradecost * config.framer.maxlvl * 100}%</color> / <color=blue>{((config.framer.upgradecost * config.framer.maxlvl) + (config.xpLevelRanks.rankskillboostamount * config.xpLevelRanks.maxresetrank)) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Repair Cost
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Repair Cost: (-)", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} framerrepair {UserInputText}", row, height, 12, $"{config.framer.repaircost}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.framer.repaircost * config.framer.maxlvl * 100}%</color> / <color=blue>{((config.framer.repaircost * config.framer.maxlvl) + (config.xpLevelRanks.rankskillboostamount * config.xpLevelRanks.maxresetrank)) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Repair Time
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Repair Time: (-)", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} framertime {UserInputText}", row, height, 12, $"{config.framer.repairtime}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.framer.repairtime * config.framer.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Base Costs
                    //row++;
                    //row++;
                    //row++;
                    //ControlPanelelements.Add(XPUILabel($"Base Cost (wood)", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    //ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    //ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} woodcost {UserInputText}", row, height, 12, $"{config.framer.woodcost}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    //row++;
                    //ControlPanelelements.Add(XPUILabel($"Base Cost (stone)", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    //ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    //ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} stonecost {UserInputText}", row, height, 12, $"{config.framer.stonecost}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    //row++;
                    //ControlPanelelements.Add(XPUILabel($"Base Cost (metal)", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    //ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    //ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} metalcost {UserInputText}", row, height, 12, $"{config.framer.metalcost}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    //row++;
                    //ControlPanelelements.Add(XPUILabel($"Base Cost (armored)", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    //ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    //ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} armorcost {UserInputText}", row, height, 12, $"{config.framer.armorcost}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                }
                // UI End
                CuiHelper.AddUi(player, ControlPanelelements);
                return;
            }
            #endregion
            // Medic Settings
            #region Medic
            if (skill == "medic")
            {
                ControlPanelelements.Add(XPUIImage(XPerienceAdminPanelSkills, XPeriencemedic, row, height, iconL, iconR2));
                ControlPanelelements.Add(XPUILabel($"{XPLang($"{skill}", player.UserIDString)} {XPLang($"settings", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 14, MlableL2, MlableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                row++;
                // Max Level
                ControlPanelelements.Add(XPUILabel($"Max Level:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} medicmaxlevel {UserInputText}", row, height, 12, $"{config.medic.maxlvl}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                if (config.medic.maxlvl > 0)
                {
                    // Max Cost to Start
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Point Cost To Start:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} mediccost {UserInputText}", row, height, 12, $"{config.medic.pointcoststart}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Cost Multiplier
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Cost Multiplier:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} mediccostmultiplier {UserInputText}", row, height, 12, $"{config.medic.costmultiplier}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Revive HP
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Revival Amount:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} medicrevival {UserInputText}", row, height, 12, $"{config.medic.revivehp}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.medic.revivehp * config.medic.maxlvl}</color> / <color=blue>{(config.medic.revivehp * config.medic.maxlvl) + (config.xpLevelRanks.rankskillboostamount * config.xpLevelRanks.maxresetrank)}</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Recover HP
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Recover Amount:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} medicrecover {UserInputText}", row, height, 12, $"{config.medic.recoverhp}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.medic.recoverhp * config.medic.maxlvl}</color> / <color=blue>{(config.medic.recoverhp * config.medic.maxlvl) + (config.xpLevelRanks.rankskillboostamount * config.xpLevelRanks.maxresetrank)}</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Medic Tools
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Medical Tools:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} medictools {UserInputText}", row, height, 12, $"{config.medic.tools}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.medic.tools * config.medic.maxlvl}</color> / <color=blue>{(config.medic.tools * config.medic.maxlvl) + (config.xpLevelRanks.rankskillboostamount * config.xpLevelRanks.maxresetrank)}</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Medic Teas
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Medical Teas:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} medicteas {UserInputText}", row, height, 12, $"{config.medic.teas}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{(config.medic.teas * config.medic.maxlvl) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Mixing Speed
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Mixing Table Speed:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} mediccraft {UserInputText}", row, height, 12, $"{config.medic.crafttime}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{(config.medic.crafttime * config.medic.maxlvl) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Prevent Bandage Boost:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPToggle($"xp.config skills {skill} preventbandageboost", row, height, config.medic.preventbandageboost, valueL, width), XPerienceAdminPanelSkills);
                }
                // UI End
                CuiHelper.AddUi(player, ControlPanelelements);
                return;
            }
            #endregion
            // Scavenger Settings
            #region Scavenger
            if (skill == "scavenger")
            {
                ControlPanelelements.Add(XPUIImage(XPerienceAdminPanelSkills, XPeriencescavenger, row, height, iconL, iconR2));
                ControlPanelelements.Add(XPUILabel($"{XPLang($"{skill}", player.UserIDString)} {XPLang($"settings", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 14, MlableL2, MlableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                row++;
                // Max Level
                ControlPanelelements.Add(XPUILabel($"Max Level:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} scavmaxlevel {UserInputText}", row, height, 12, $"{config.scavenger.maxlvl}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                if (config.scavenger.maxlvl > 0)
                {
                    // Max Cost to Start
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Point Cost To Start:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} scavccost {UserInputText}", row, height, 12, $"{config.scavenger.pointcoststart}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Cost Multiplier
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Cost Multiplier:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} scavcostmultiplier {UserInputText}", row, height, 12, $"{config.scavenger.costmultiplier}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Default Multiplier Chance
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Extra Loot Chance:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} scavlootchance {UserInputText}", row, height, 12, $"{config.scavenger.scavlootchance}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{(config.scavenger.scavlootchance * config.scavenger.maxlvl) * 100}%</color> / <color=blue>{((config.scavenger.scavlootchance * config.scavenger.maxlvl) + (config.xpLevelRanks.rankskillboostamount * config.xpLevelRanks.maxresetrank)) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Default Multiplier
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Extra Loot Multiplier:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} scavmultiplier {UserInputText}", row, height, 12, $"{config.scavenger.scavmultiplier}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.scavenger.scavmultiplier * config.scavenger.maxlvl}x</color> / <color=blue>{(config.scavenger.scavlootchance * config.scavenger.maxlvl) + (config.xpLevelRanks.rankskillboostamount * config.xpLevelRanks.maxresetrank)}x</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Drops
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Increase Loot Drops:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPToggle($"xp.config skills {skill} scavbarrel", row, height, config.scavenger.drops, valueL, width), XPerienceAdminPanelSkills);
                    // Loot Crates
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Increase Loot Crates:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPToggle($"xp.config skills {skill} scavcrate", row, height, config.scavenger.crates, valueL, width), XPerienceAdminPanelSkills);
                    // UnLoot Crates
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Increase Water Loot Crates:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPToggle($"xp.config skills {skill} scavuncrate", row, height, config.scavenger.uncrates, valueL, width), XPerienceAdminPanelSkills);
                    // Locked Crates
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Increase Locked Crates:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPToggle($"xp.config skills {skill} scavlockedcrate", row, height, config.scavenger.lockedcrates, valueL, width), XPerienceAdminPanelSkills);
                    // Hack Crates
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Increase Hackable Crates:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPToggle($"xp.config skills {skill} scavhackcrate", row, height, config.scavenger.hackcrates, valueL, width), XPerienceAdminPanelSkills);
                    // Scientists
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Increase Scientists Loot:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPToggle($"xp.config skills {skill} scientists", row, height, config.scavenger.scientists, valueL, width), XPerienceAdminPanelSkills);
                    // Components Only
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Increase Components Only:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPToggle($"xp.config skills {skill} scavcomponly", row, height, config.scavenger.componentsonly, valueL, width), XPerienceAdminPanelSkills);
                    // Custom List Enable
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Use Custom Item List:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPToggle($"xp.config skills {skill} usecustomscavlist", row, height, config.scavenger.usecustomscavlist, valueL, width), XPerienceAdminPanelSkills);
                    // Custom Item Chance
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Custom Item Chance:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} scavchance {UserInputText}", row, height, 12, $"{config.scavenger.scavchance}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{(config.scavenger.scavchance * config.scavenger.maxlvl) * 100}%</color> / <color=blue>{((config.scavenger.scavchance * config.scavenger.maxlvl) + (config.xpLevelRanks.rankskillboostamount * config.xpLevelRanks.maxresetrank)) * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Custom Multiplier
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Custom Item Multiplier:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} customscavmultiplier {UserInputText}", row, height, 12, $"{config.scavenger.customscavmultiplier}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.scavenger.customscavmultiplier * config.scavenger.maxlvl}x</color> / <color=blue>{(config.scavenger.scavlootchance * config.scavenger.maxlvl) + (config.xpLevelRanks.rankskillboostamount * config.xpLevelRanks.maxresetrank)}x</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Custom Random
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Custom Item Random Amount:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPToggle($"xp.config skills {skill} customscavrandom", row, height, config.scavenger.customscavrandom, valueL, width), XPerienceAdminPanelSkills);
                    // Item List
                    row++;
                    row++;
                    ControlPanelelements.Add(XPUIButton($"xp.skillitems scavenger", row, height, 12, "0 1 0 .25", "Add/Edit Custom Items", ".01", ".15", TextAnchor.MiddleCenter, "1 1 1 1"), XPerienceAdminPanelSkills);
                }
                // UI End
                CuiHelper.AddUi(player, ControlPanelelements);
                return;
            }
            #endregion
            // Electrician Settings
            #region Electrician
            if (skill == "electrician")
            {
                ControlPanelelements.Add(XPUIImage(XPerienceAdminPanelSkills, XPerienceelectrician, row, height, iconL, iconR2));
                ControlPanelelements.Add(XPUILabel($"{XPLang($"{skill}", player.UserIDString)} {XPLang($"settings", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 14, MlableL2, MlableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                row++;
                ControlPanelelements.Add(XPUIButton($"xp.admin openelectriciansettings", row, height, 12, "1.0 0.0 0.0 0.7", $"〘Edit Default Power Output Settings〙", "0.01", "0.20", TextAnchor.MiddleCenter), XPerienceAdminPanelSkills);
                row++;
                row++;
                // Max Level
                ControlPanelelements.Add(XPUILabel($"Max Level:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} electricianmaxlevel {UserInputText}", row, height, 12, $"{config.electrician.maxlvl}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                if (config.electrician.maxlvl > 0)
                {
                    // Max Cost to Start
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Point Cost To Start:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} electriciancost {UserInputText}", row, height, 12, $"{config.electrician.pointcoststart}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Cost Multiplier
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Cost Multiplier:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} electriciancostmultiplier {UserInputText}", row, height, 12, $"{config.electrician.costmultiplier}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Solar Panel Input Increase
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Solar Panel Input:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} solarpanelinputincrease {UserInputText}", row, height, 12, $"{config.electrician.solarpanelinputincrease}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.electrician.solarpanelinputincrease * config.electrician.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Solar Panel Max Increase
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Solar Panel MaxOutput:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} solarpanelmaxincrease {UserInputText}", row, height, 12, $"{config.electrician.solarpanelmaxincrease}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.electrician.solarpanelmaxincrease * config.electrician.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Small Battery MaxOutput
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Small Battery MaxOutput:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} smallbatterymaxincrease {UserInputText}", row, height, 12, $"{config.electrician.smallbatterymaxincrease}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.electrician.smallbatterymaxincrease * config.electrician.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Medium Battery MaxOutput
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Medium Battery MaxOutput:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} mediumbatterymaxincrease {UserInputText}", row, height, 12, $"{config.electrician.mediumbatterymaxincrease}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.electrician.mediumbatterymaxincrease * config.electrician.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Large Battery MaxOutput
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Large Battery MaxOutput:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} largebatterymaxincrease {UserInputText}", row, height, 12, $"{config.electrician.largebatterymaxincrease}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.electrician.largebatterymaxincrease * config.electrician.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Small Generator MaxOutput
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Small Generator MaxOutput:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} smallgeneratormaxincrease {UserInputText}", row, height, 12, $"{config.electrician.smallgeneratormaxincrease}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.electrician.smallgeneratormaxincrease * config.electrician.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Test Generator MaxOutput
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Test Generator MaxOutput:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} testgeneratormaxincrease {UserInputText}", row, height, 12, $"{config.electrician.testgeneratormaxincrease}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.electrician.testgeneratormaxincrease * config.electrician.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Electric Windmill MaxOutput
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Electric Windmill MaxOutput:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} electricwindmillmaxincrease {UserInputText}", row, height, 12, $"{config.electrician.electricwindmillmaxincrease}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.electrician.electricwindmillmaxincrease * config.electrician.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Allow Min Solar Input
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Allow Min Solar Input:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPToggle($"xp.config skills {skill} allowminsolarinput", row, height, config.electrician.allowminsolarinput, valueL, width), XPerienceAdminPanelSkills);
                    // Minimum Solar Input
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Min Solar Input:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} minsolarinput {UserInputText}", row, height, 12, $"{config.electrician.minsolarinput}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.electrician.minsolarinput * config.electrician.maxlvl}</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                }
                // UI End
                CuiHelper.AddUi(player, ControlPanelelements);
                return;
            }
            #endregion
            // Demolitionist
            #region Demolitionist
            if (skill == "demolitionist")
            {
                ControlPanelelements.Add(XPUIImage(XPerienceAdminPanelSkills, XPeriencedemolitionist, row, height, iconL, iconR2));
                ControlPanelelements.Add(XPUILabel($"{XPLang($"{skill}", player.UserIDString)} {XPLang($"settings", player.UserIDString)}:", row, height, TextAnchor.MiddleLeft, 14, MlableL2, MlableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                row++;
                // Max Level
                ControlPanelelements.Add(XPUILabel($"Max Level:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} demolitionistmaxlevel {UserInputText}", row, height, 12, $"{config.demolitionist.maxlvl}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                if (config.demolitionist.maxlvl > 0)
                {
                    // Max Cost to Start
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Point Cost To Start:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} demolitionistcost {UserInputText}", row, height, 12, $"{config.demolitionist.pointcoststart}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Cost Multiplier
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Cost Multiplier:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} demolitionistcostmultiplier {UserInputText}", row, height, 12, $"{config.demolitionist.costmultiplier}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Explosive Dud Chance
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Explosive Dud Chance:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} explosivedudreduction {UserInputText}", row, height, 12, $"{config.demolitionist.explosivedudreduction}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.demolitionist.explosivedudreduction * config.demolitionist.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Explosive Damage
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Explosive Damage:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} explosivedamage {UserInputText}", row, height, 12, $"{config.demolitionist.explosivedamage}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.demolitionist.explosivedamage * config.demolitionist.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    // Explosive Radius
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Explosive Radius:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkills);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkills, $"xp.config skills {skill} explosiveradius {UserInputText}", row, height, 12, $"{config.demolitionist.explosiveradius}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"<color=yellow>{config.demolitionist.explosiveradius * config.demolitionist.maxlvl * 100}%</color>", row, height, TextAnchor.MiddleLeft, 10, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelSkills);
                }
                // UI End
                CuiHelper.AddUi(player, ControlPanelelements);
                return;
            }
            #endregion
        }
        private void AdminSkillItems(BasePlayer player, string page, string skill, int item = 0)
        {
            var ControlPanelelements = new CuiElementContainer();
            #region Layout
            var height = 0.035f;
            int row = 2;
            string delL = ".01";
            string delR = ".02";
            string lableL = "0.01";
            string lableL2 = "0.03";
            string lableR = "0.15";
            string valueL = "0.15";
            string valueR = "0.45";
            #endregion
            ControlPanelelements.Add(XPUIPanel("0.16 0.0", "1 1", "0 0 0 .7"), XPerienceAdminPanelMain, XPerienceAdminPanelSkillItems);
            switch(page)
            {
                case "forager":
                    #region Forager
                    ControlPanelelements.Add(XPUILabel($"{XPLang($"{skill}", player.UserIDString)} Random Item List:", row, height, TextAnchor.MiddleLeft, 14, ".01", ".99", "1 1 1 1"), XPerienceAdminPanelSkillItems);
                    row++;
                    ControlPanelelements.Add(XPUIButton($"xp.skillitems newitem {skill}", row, height, 12, "0 1 0 .25", "Create New Item", "0.02", "0.12", TextAnchor.MiddleCenter, "0 1 0 1"), XPerienceAdminPanelSkillItems);
                    row++;
                    row++;
                    foreach (var fitems in config.forager.randomChanceList)
                    {
                        ControlPanelelements.Add(XPUIButton($"xp.skillitems deleteitem {skill} {fitems.Key}", row, height, 12, "0 0 0 .25", $"ⓧ", delL, delR, TextAnchor.MiddleLeft, "1 0 0 1"), XPerienceAdminPanelSkillItems);
                        ControlPanelelements.Add(XPUIButton($"xp.skillitems edititem {skill} {fitems.Key} item value", row, height, 12, "0 0 0 .25", $"{fitems.Value.shortname}", lableL2, lableR, TextAnchor.MiddleLeft, "1 1 1 1"), XPerienceAdminPanelSkillItems);
                        row++;
                    }
                    row++;
                    ControlPanelelements.Add(XPUIButton($"xp.admin skills forager", row, height, 12, "0 1 0 .25", "Return", ".01", ".11", TextAnchor.MiddleCenter, "1 1 1 1"), XPerienceAdminPanelSkillItems);
                    #endregion
                    break;
                case "scavenger":
                    #region Scavenger
                    ControlPanelelements.Add(XPUILabel($"{XPLang($"{skill}", player.UserIDString)} Random Item List:", row, height, TextAnchor.MiddleLeft, 14, ".01", ".99", "1 1 1 1"), XPerienceAdminPanelSkillItems);
                    row++;
                    ControlPanelelements.Add(XPUIButton($"xp.skillitems newitem {skill} ", row, height, 12, "0 1 0 .25", "Create New Item", "0.02", "0.12", TextAnchor.MiddleCenter, "0 1 0 1"), XPerienceAdminPanelSkillItems);
                    row++;
                    row++;
                    foreach (var sitems in config.scavenger.scavChanceList)
                    {
                        ControlPanelelements.Add(XPUIButton($"xp.skillitems deleteitem {skill} {sitems.Key}", row, height, 12, "0 0 0 .25", $"ⓧ", delL, delR, TextAnchor.MiddleLeft, "1 0 0 1"), XPerienceAdminPanelSkillItems);
                        ControlPanelelements.Add(XPUIButton($"xp.skillitems edititem {skill} {sitems.Key} item value", row, height, 12, "0 0 0 .25", $"{sitems.Value.shortname}", lableL2, lableR, TextAnchor.MiddleLeft, "1 1 1 1"), XPerienceAdminPanelSkillItems);
                        row++;
                    }
                    row++;
                    ControlPanelelements.Add(XPUIButton($"xp.admin skills scavenger", row, height, 12, "0 1 0 .25", "Return", ".01", ".11", TextAnchor.MiddleCenter, "1 1 1 1"), XPerienceAdminPanelSkillItems);
                    #endregion
                    break;
                case "edititem":
                    switch(skill)
                    {
                        case "forager":
                            #region Forager
                            var fitem = config.forager.randomChanceList[item];
                            ControlPanelelements.Add(XPUILabel($"{XPLang($"{skill}", player.UserIDString)} Random Item List:", row, height, TextAnchor.MiddleLeft, 14, ".01", ".99", "1 1 1 1"), XPerienceAdminPanelSkillItems);
                            row++;
                            row++;
                            ControlPanelelements.Add(XPUILabel($"ShortName:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkillItems);
                            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkillItems);
                            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkillItems, $"xp.skillitems edititem {skill} {item} shortname {UserInputText}", row, height, 12, $"{fitem.shortname}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                            row++;
                            ControlPanelelements.Add(XPUILabel($"Display Name:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkillItems);
                            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkillItems);
                            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkillItems, $"xp.skillitems edititem {skill} {item} displayname {UserInputText}", row, height, 12, $"{fitem.displayname}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                            row++;
                            ControlPanelelements.Add(XPUILabel($"SkinID:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkillItems);
                            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkillItems);
                            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkillItems, $"xp.skillitems edititem {skill} {item} skinid {UserInputText}", row, height, 12, $"{fitem.SkinID}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                            row++;
                            ControlPanelelements.Add(XPUILabel($"Amount:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkillItems);
                            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkillItems);
                            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkillItems, $"xp.skillitems edititem {skill} {item} amount {UserInputText}", row, height, 12, $"{fitem.amount}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                            row++;
                            row++;
                            ControlPanelelements.Add(XPUIButton($"xp.skillitems forager", row, height, 12, "0 1 0 .25", "Return", ".01", ".11", TextAnchor.MiddleCenter, "1 1 1 1"), XPerienceAdminPanelSkillItems);
                            #endregion
                            break;
                        case "scavenger":
                            #region Scavenger
                            var sitem = config.scavenger.scavChanceList[item];
                            ControlPanelelements.Add(XPUILabel($"{XPLang($"{skill}", player.UserIDString)} Random Item List:", row, height, TextAnchor.MiddleLeft, 14, ".01", ".99", "1 1 1 1"), XPerienceAdminPanelSkillItems);
                            row++;
                            row++;
                            ControlPanelelements.Add(XPUILabel($"ShortName:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkillItems);
                            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkillItems);
                            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkillItems, $"xp.skillitems edititem {skill} {item} shortname {UserInputText}", row, height, 12, $"{sitem.shortname}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                            row++;
                            ControlPanelelements.Add(XPUILabel($"Display Name:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkillItems);
                            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkillItems);
                            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkillItems, $"xp.skillitems edititem {skill} {item} displayname {UserInputText}", row, height, 12, $"{sitem.displayname}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                            row++;
                            ControlPanelelements.Add(XPUILabel($"SkinID:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkillItems);
                            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkillItems);
                            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkillItems, $"xp.skillitems edititem {skill} {item} skinid {UserInputText}", row, height, 12, $"{sitem.SkinID}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                            row++;
                            ControlPanelelements.Add(XPUILabel($"Amount:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkillItems);
                            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkillItems);
                            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkillItems, $"xp.skillitems edititem {skill} {item} amount {UserInputText}", row, height, 12, $"{sitem.amount}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                            row++;
                            ControlPanelelements.Add(XPUILabel($"Max Amount:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkillItems);
                            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkillItems);
                            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkillItems, $"xp.skillitems edititem {skill} {item} maxamount {UserInputText}", row, height, 12, $"{sitem.maxamount}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                            row++;
                            ControlPanelelements.Add(XPUILabel($"Required Level:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSkillItems);
                            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSkillItems);
                            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSkillItems, $"xp.skillitems edititem {skill} {item} requiredlevel {UserInputText}", row, height, 12, $"{sitem.requiredlevel}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                            row++;
                            row++;
                            ControlPanelelements.Add(XPUIButton($"xp.skillitems scavenger", row, height, 12, "0 1 0 .25", "Return", ".01", ".11", TextAnchor.MiddleCenter, "1 1 1 1"), XPerienceAdminPanelSkillItems);
                            #endregion
                            break;
                    }
                    break;
            }
            // UI End
            CuiHelper.AddUi(player, ControlPanelelements);
        }
        private void AdminSpecialGroups(BasePlayer player, string page = "main", int groupid = 0)
        {
            var ControlPanelelements = new CuiElementContainer();
            #region Layout
            var height = 0.035f;
            int row = 2;
            string delL = ".01";
            string delR = ".02";
            string lableL = "0.01";
            string lableL2 = "0.03";
            string lableR = "0.15";
            string valueL = "0.15";
            string valueR = "0.45";
            #endregion
            ControlPanelelements.Add(XPUIPanel("0.16 0.0", "1 1", "0 0 0 .7"), XPerienceAdminPanelMain, XPerienceAdminPanelSpecialGroups);
            ControlPanelelements.Add(XPUILabel($"Special Groups:", row, height, TextAnchor.MiddleLeft, 14, ".01", ".99", "1 1 1 1"), XPerienceAdminPanelSpecialGroups);
            row++;
            ControlPanelelements.Add(XPUILabel($"   * Players assigned to these groups will have added bonuses listed within the group.", row, height, TextAnchor.MiddleLeft, 10, ".01", ".99", "1 1 1 1"), XPerienceAdminPanelSpecialGroups);
            row++;
            ControlPanelelements.Add(XPUILabel($"   * If player is listed in multiple groups, highest priority group will be used.", row, height, TextAnchor.MiddleLeft, 10, ".01", ".99", "1 1 1 1"), XPerienceAdminPanelSpecialGroups);
            row++;
            ControlPanelelements.Add(XPUILabel($"   * After you create/edit a group make sure you save and reload plugin for group to be created within oxide!", row, height, TextAnchor.MiddleLeft, 10, ".01", ".99", "1 1 1 1"), XPerienceAdminPanelSpecialGroups);
            switch(page)
            {
                case "main":
                    row++;
                    row++;
                    ControlPanelelements.Add(XPUIButton($"xp.specialgroups newgroup", row, height, 12, "0 1 0 .25", "Create New Group", "0.02", "0.12", TextAnchor.MiddleCenter, "0 1 0 1"), XPerienceAdminPanelSpecialGroups);
                    row++;
                    row++;
                    foreach (var groups in config.specialGroups.specialgroups)
                    {
                        ControlPanelelements.Add(XPUIButton($"xp.specialgroups deletegroup {groups.Key}", row, height, 12, "0 0 0 .25", $"ⓧ", delL, delR, TextAnchor.MiddleLeft, "1 0 0 1"), XPerienceAdminPanelSpecialGroups);
                        ControlPanelelements.Add(XPUIButton($"xp.specialgroups editgroup {groups.Key} group 0", row, height, 12, "0 0 0 .25", $"{groups.Value.groupname}", lableL2, lableR, TextAnchor.MiddleLeft, "1 1 1 1"), XPerienceAdminPanelSpecialGroups);
                        row++;
                    }
                    break;
                case "editgroup":
                    var group = config.specialGroups.specialgroups[groupid];
                    row++;
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Group Name:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSpecialGroups);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSpecialGroups);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSpecialGroups, $"xp.specialgroups editgroup {groupid} groupname {UserInputText}", row, height, 12, $"{group.groupname}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Group Permission Name:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSpecialGroups);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSpecialGroups);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSpecialGroups, $"xp.specialgroups editgroup {groupid} permissionname {UserInputText}", row, height, 12, $"{group.permissionname}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Priority:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSpecialGroups);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSpecialGroups);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSpecialGroups, $"xp.specialgroups editgroup {groupid} grouppriority {UserInputText}", row, height, 12, $"{group.grouppriority}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row++;
                    ControlPanelelements.Add(XPUILabel($"XP Boost: (%)", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSpecialGroups);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSpecialGroups);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSpecialGroups, $"xp.specialgroups editgroup {groupid} xpboost {UserInputText}", row, height, 12, $"{group.xpboost}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    ControlPanelelements.Add(XPUILabel($"{group.xpboost * 100}%", row, height, TextAnchor.MiddleLeft, 12, ".46", ".56", "1 1 1 1"), XPerienceAdminPanelSpecialGroups);
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Daily XP Limit: (+)", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSpecialGroups);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSpecialGroups);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSpecialGroups, $"xp.specialgroups editgroup {groupid} dailyxplimit {UserInputText}", row, height, 12, $"{group.dailyxplimit}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Daily Stat Reset Limit: (+)", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSpecialGroups);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSpecialGroups);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSpecialGroups, $"xp.specialgroups editgroup {groupid} dailystatlimitboost {UserInputText}", row, height, 12, $"{group.dailystatlimitboost}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Daily Skill Reset Limit: (+)", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSpecialGroups);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSpecialGroups);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSpecialGroups, $"xp.specialgroups editgroup {groupid} dailyskilllimitboost {UserInputText}", row, height, 12, $"{group.dailyskilllimitboost}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row++;
                    row++;
                    ControlPanelelements.Add(XPUIButton($"xp.admin specialgroups", row, height, 12, "0 1 0 .25", "Return", ".01", ".11", TextAnchor.MiddleCenter, "1 1 1 1"), XPerienceAdminPanelSpecialGroups);
                    break;
            }
            // UI End
            CuiHelper.AddUi(player, ControlPanelelements);
        }
        private void AdminPlayerInfoPage(BasePlayer player)
        {
            var ControlPanelelements = new CuiElementContainer();
            #region Layout
            var height = 0.028f;
            double width = .006;
            int row = 3;
            int row2 = 3;
            string lableL = "0.01";
            string lableR = "0.20";
            string valueL = "0.20";
            string valueR = "0.25";
            string valuePL = "0.26";
            string valuePR = "0.30";
            string lableL2 = "0.51";
            string lableR2 = "0.70";
            string valueL2 = "0.71";
            #endregion
            ControlPanelelements.Add(XPUIPanel("0.16 0.0", "1 1", "0 0 0 .7"), XPerienceAdminPanelMain, XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPUILabel($"[Player Profile Menu]", row, height, TextAnchor.MiddleLeft, 15, "0.01", "0.50", "1 1 1 1"), XPerienceAdminPanelInfoBox);
            row++;
            ControlPanelelements.Add(XPUILabel($"Profile UI AnchorMax:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelInfoBox, $"xp.config playerdata AnchorMax {UserInputText}", row, height, 12, $"{config.playerprofilesettings.AnchorMax}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            row++;
            ControlPanelelements.Add(XPUILabel($"Profile UI AnchorMin:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelInfoBox, $"xp.config playerdata AnchorMin {UserInputText}", row, height, 12, $"{config.playerprofilesettings.AnchorMin}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            row++;
            ControlPanelelements.Add(XPUILabel($"Profile UI OffsetMax:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelInfoBox, $"xp.config playerdata OffsetMax {UserInputText}", row, height, 12, $"{config.playerprofilesettings.OffsetMax}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            row++;
            ControlPanelelements.Add(XPUILabel($"Profile UI OffsetMin:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelInfoBox, $"xp.config playerdata OffsetMin {UserInputText}", row, height, 12, $"{config.playerprofilesettings.OffsetMin}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            row++;
            ControlPanelelements.Add(XPUILabel($"Menu Height:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelInfoBox, $"xp.config playerdata menuheight {UserInputText}", row, height, 12, $"{config.playerprofilesettings.menuheight}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            ControlPanelelements.Add(XPUILabel($"{config.playerprofilesettings.menuheight * 100}%", row, height, TextAnchor.MiddleLeft, 12, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            //row++;
            //ControlPanelelements.Add(XPUILabel($"Menu Height:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            //ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelInfoBox);
            //ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelInfoBox, $"xp.config playerdata menuheight {UserInputText}", row, height, 12, $"{config.playerprofilesettings.menuheight}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            //ControlPanelelements.Add(XPUILabel($"{config.playerprofilesettings.menuheight * 100}%", row, height, TextAnchor.MiddleLeft, 12, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            row++;
            ControlPanelelements.Add(XPUILabel($"Menu Width:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelInfoBox, $"xp.config playerdata menuwidth {UserInputText}", row, height, 12, $"{config.playerprofilesettings.menuwidth}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            ControlPanelelements.Add(XPUILabel($"{config.playerprofilesettings.menuwidth * 100}%", row, height, TextAnchor.MiddleLeft, 12, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            row++;
            ControlPanelelements.Add(XPUILabel($"Menu Button Height:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelInfoBox, $"xp.config playerdata menubuttonheight {UserInputText}", row, height, 12, $"{config.playerprofilesettings.menubuttonheight}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            ControlPanelelements.Add(XPUILabel($"{config.playerprofilesettings.menubuttonheight * 100}%", row, height, TextAnchor.MiddleLeft, 12, valuePL, valuePR, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            row++;
            ControlPanelelements.Add(XPUILabel($"Menu Button Font:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelInfoBox, $"xp.config playerdata menubuttonfont {UserInputText}", row, height, 12, $"{config.playerprofilesettings.menubuttonfont}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Player Avatar
            row++;
            ControlPanelelements.Add(XPUILabel($"Use Player Avatar:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPToggle($"xp.config playerdata useplayeravatar", row, height, config.playerprofilesettings.useplayeravatar, valueL, width), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPUILabel("<- ImageLibrary Config: (Avatars - Store player avatars = true)", row, height, TextAnchor.MiddleCenter, 8, valuePR, lableL2, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            // Show Settings Button
            row++;
            ControlPanelelements.Add(XPUILabel($"Show Settings Button:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPToggle($"xp.config playerdata profilemenusettings", row, height, config.playerprofilesettings.profilemenusettings, valueL, width), XPerienceAdminPanelInfoBox);
            // Show Top Players Button
            row++;
            ControlPanelelements.Add(XPUILabel($"Show Top Players Button:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPToggle($"xp.config playerdata profilemenutopplayers", row, height, config.playerprofilesettings.profilemenutopplayers, valueL, width), XPerienceAdminPanelInfoBox);
            // Show Help Button
            row++;
            ControlPanelelements.Add(XPUILabel($"Show Help Button:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPToggle($"xp.config playerdata profilemenuhelp", row, height, config.playerprofilesettings.profilemenuhelp, valueL, width), XPerienceAdminPanelInfoBox);
            // Show Calculations Button
            row++;
            ControlPanelelements.Add(XPUILabel($"Show Calculations Button:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPToggle($"xp.config playerdata profilemenucalculations", row, height, config.playerprofilesettings.profilemenucalculations, valueL, width), XPerienceAdminPanelInfoBox);
            // Show Raids Button
            if (RaidableBases != null)
            {
                row++;
                ControlPanelelements.Add(XPUILabel($"Show Raids Button:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelInfoBox);
                ControlPanelelements.Add(XPToggle($"xp.config playerdata profilemenuraids", row, height, config.playerprofilesettings.profilemenuraids, valueL, width), XPerienceAdminPanelInfoBox);
            }
            // Show Welcome Button
            if (XPerienceAddon != null)
            {
                row++;
                ControlPanelelements.Add(XPUILabel($"Show Welcome Panel Button:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelInfoBox);
                ControlPanelelements.Add(XPToggle($"xp.config playerdata profilemenuwelcome", row, height, config.playerprofilesettings.profilemenuwelcome, valueL, width), XPerienceAdminPanelInfoBox);
            }
            row++;
            row++;
            ControlPanelelements.Add(XPUILabel($"[Stats / Skill Pages]", row, height, TextAnchor.MiddleLeft, 15, "0.01", "0.50", "1 1 1 1"), XPerienceAdminPanelInfoBox);
            // Show Unused Effects
            row++;
            ControlPanelelements.Add(XPUILabel($"Show Unused Effects in UI:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPToggle($"xp.config playerdata showunusedeffects", row, height, config.playerprofilesettings.showunusedeffects, valueL, width), XPerienceAdminPanelInfoBox);
            // Menu Style
            row++;
            string menulabel = "";
            switch(config.playerprofilesettings.menutype)
            {
                case 1:
                    menulabel = "All Icons";
                    break;
                case 2:
                    menulabel = "Prev/Next Icons";
                    break;
            }
            ControlPanelelements.Add(XPUILabel($"Stat / Skill Menu Type:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPUILabel($"{menulabel}", row, height, TextAnchor.MiddleLeft, 12, valueL, valuePR, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            if (config.playerprofilesettings.menutype == 1)
            {
                ControlPanelelements.Add(XPUIButton($"xp.config playerdata menutype 2 false", row, height, 12, "0 1 0 0", "◎", ".30", ".31", TextAnchor.MiddleCenter, "0 1 0 1"), XPerienceAdminPanelInfoBox);
            }
            if (config.playerprofilesettings.menutype == 2)
            {
                ControlPanelelements.Add(XPUIButton($"xp.config playerdata menutype 1 false", row, height, 12, "1 0 0 0", "◉", ".30", ".31", TextAnchor.MiddleCenter, "1 0 0 1"), XPerienceAdminPanelInfoBox);
            }
            // Show Help Button
            row++;
            ControlPanelelements.Add(XPUILabel($"Show Stat/Skill Help Button:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPToggle($"xp.config playerdata skillshelp", row, height, config.playerprofilesettings.skillshelp, valueL, width), XPerienceAdminPanelInfoBox);
            row++;
            row++;
            ControlPanelelements.Add(XPUILabel($"[Background Options] - Images can be added/edited on the Image URLs page", row, height, TextAnchor.MiddleLeft, 15, "0.01", "0.50", "1 1 1 1"), XPerienceAdminPanelInfoBox);
            row++;
            ControlPanelelements.Add(XPUILabel($"Use Background Image:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPToggle($"xp.config playerdata usebgimage", row, height, config.playerprofilesettings.usebgimage, valueL, width), XPerienceAdminPanelInfoBox);
            if (config.playerprofilesettings.usebgimage)
            {
                row++;
                ControlPanelelements.Add(XPUILabel($"Allow Players To Change Background:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelInfoBox);
                ControlPanelelements.Add(XPToggle($"xp.config playerdata allowprofilebgchange", row, height, config.playerprofilesettings.allowprofilebgchange, valueL, width), XPerienceAdminPanelInfoBox);
                row++;
                ControlPanelelements.Add(XPUILabel($"Fade-In Effect:(seconds)", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelInfoBox);
                ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelInfoBox);
                ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelInfoBox, $"xp.config playerdata bgfadein {UserInputText}", row, height, 12, $"{config.playerprofilesettings.bgfadein}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                row++;
                ControlPanelelements.Add(XPUILabel($"Use Menu Background Image:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelInfoBox);
                ControlPanelelements.Add(XPToggle($"xp.config playerdata usemenubgimage", row, height, config.playerprofilesettings.usemenubgimage, valueL, width), XPerienceAdminPanelInfoBox);
                ControlPanelelements.Add(XPUILabel($"(uses second image for menu area background)", row, height, TextAnchor.MiddleLeft, 10, ".26", ".5", "1 1 1 1"), XPerienceAdminPanelInfoBox);
                row++;
                ControlPanelelements.Add(XPUILabel($"Select Default Background Image:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelInfoBox);
                ControlPanelelements.Add(XPUIButton($"xp.admin openprofilebg", row, height, 12, "0 1 0 .25", "Open BG Selection", valueL, valuePR, TextAnchor.MiddleCenter, "1 1 1 1"), XPerienceAdminPanelInfoBox);
                ControlPanelelements.Add(XPUIButton($"xp.admin updatebg", row, height, 12, "1 1 0 .25", "Update All Player BGs", "0.31", "0.43", TextAnchor.MiddleCenter, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            }
            // Rust Info
            #region Rust Data
            ControlPanelelements.Add(XPUILabel($"[Player Info]", row2, height, TextAnchor.MiddleLeft, 15, "0.51", "0.99", "1 1 1 1"), XPerienceAdminPanelInfoBox);
            row2++;
            ControlPanelelements.Add(XPUILabel($"Show Play Time:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPToggle($"xp.config playerdata playtime", row2, height, config.playerprofilesettings.playtime, valueL2, width), XPerienceAdminPanelInfoBox);
            row2++;
            ControlPanelelements.Add(XPUILabel($"Show Alive Time:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPToggle($"xp.config playerdata alivetime", row2, height, config.playerprofilesettings.alivetime, valueL2, width), XPerienceAdminPanelInfoBox);
            row2++;
            ControlPanelelements.Add(XPUILabel($"Show Sleeping Time:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPToggle($"xp.config playerdata sleepingtime", row2, height, config.playerprofilesettings.sleepingtime, valueL2, width), XPerienceAdminPanelInfoBox);
            row2++;
            ControlPanelelements.Add(XPUILabel($"Show Swimming Time:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPToggle($"xp.config playerdata swimmingtime", row2, height, config.playerprofilesettings.swimingtime, valueL2, width), XPerienceAdminPanelInfoBox);
            row2++;
            ControlPanelelements.Add(XPUILabel($"Show Driving Time:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPToggle($"xp.config playerdata drivingtime", row2, height, config.playerprofilesettings.drivingtime, valueL2, width), XPerienceAdminPanelInfoBox);
            row2++;
            ControlPanelelements.Add(XPUILabel($"Show Flying Time:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPToggle($"xp.config playerdata flyingtime", row2, height, config.playerprofilesettings.flyingtime, valueL2, width), XPerienceAdminPanelInfoBox);
            row2++;
            ControlPanelelements.Add(XPUILabel($"Show Boating Time:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPToggle($"xp.config playerdata boatingtime", row2, height, config.playerprofilesettings.boatingtime, valueL2, width), XPerienceAdminPanelInfoBox);
            row2++;
            ControlPanelelements.Add(XPUILabel($"Show Base Time:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPToggle($"xp.config playerdata basetime", row2, height, config.playerprofilesettings.basetime, valueL2, width), XPerienceAdminPanelInfoBox);
            row2++;
            ControlPanelelements.Add(XPUILabel($"Show Monument Time:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPToggle($"xp.config playerdata monumentime", row2, height, config.playerprofilesettings.monumenttime, valueL2, width), XPerienceAdminPanelInfoBox);
            row2++;
            ControlPanelelements.Add(XPUILabel($"Show Wilderness Time:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPToggle($"xp.config playerdata wildernesstime", row2, height, config.playerprofilesettings.wildernesstime, valueL2, width), XPerienceAdminPanelInfoBox);
            row2++;
            ControlPanelelements.Add(XPUILabel($"Show Meters Ran:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPToggle($"xp.config playerdata metersran", row2, height, config.playerprofilesettings.metersran, valueL2, width), XPerienceAdminPanelInfoBox);
            row2++;
            ControlPanelelements.Add(XPUILabel($"Show Meters Walked:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPToggle($"xp.config playerdata meterswalked", row2, height, config.playerprofilesettings.meterswalked, valueL2, width), XPerienceAdminPanelInfoBox);
            row2++;
            ControlPanelelements.Add(XPUILabel($"Show Last DMG Recieved:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPToggle($"xp.config playerdata lastdmgrec", row2, height, config.playerprofilesettings.lastdmgrec, valueL2, width), XPerienceAdminPanelInfoBox);
            row2++;
            ControlPanelelements.Add(XPUILabel($"Show Last DMG Recieved By:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPToggle($"xp.config playerdata lastdmgrecby", row2, height, config.playerprofilesettings.lastdmgrecby, valueL2, width), XPerienceAdminPanelInfoBox);
            row2++;
            ControlPanelelements.Add(XPUILabel($"Show Last DMG Delt:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPToggle($"xp.config playerdata lastdmgdelt", row2, height, config.playerprofilesettings.lastdmgdelt, valueL2, width), XPerienceAdminPanelInfoBox);
            row2++;
            ControlPanelelements.Add(XPUILabel($"Show Last DMG Delt To:", row2, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelInfoBox);
            ControlPanelelements.Add(XPToggle($"xp.config playerdata lastdmgdeltto", row2, height, config.playerprofilesettings.lastdmgdeltto, valueL2, width), XPerienceAdminPanelInfoBox);
            #endregion
            // End
            CuiHelper.AddUi(player, ControlPanelelements);
            return;
        }
        private void AdminTimerColorPage(BasePlayer player)
        {
            var ControlPanelelements = new CuiElementContainer();
            #region Layout
            var height = 0.026f;
            double width = .006;
            int row = 4;
            int rowtwo = 4;
            string lableL = "0.01";
            string lableR = "0.20";
            string valueL = "0.20";
            string valueR = "0.30";
            string lableL2 = "0.50";
            string lableR2 = "0.60";
            string valueL2 = "0.60";
            string valueR2 = "0.70";
            string setting1L = "0.26";
            string setting1R = "0.27";
            string setting2L = "0.28";
            string setting2R = "0.29";
            #endregion
            ControlPanelelements.Add(XPUIPanel("0.16 0.0", "1 1", "0 0 0 .7"), XPerienceAdminPanelMain, XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUILabel($"Other Settings", 1, 0.090f, TextAnchor.MiddleLeft, 18, "0.01", "1", "1 1 1 1"), XPerienceAdminPanelTimerColor);
            // Reload Icons
            if (ImageLibrary != null)
            {
                ControlPanelelements.Add(XPUILabel($"[Images & Icons]", row, height, TextAnchor.MiddleLeft, 15, "0.01", "0.30", "1 1 1 1"), XPerienceAdminPanelTimerColor);
                row++;
                row++;
                ControlPanelelements.Add(XPUIButton($"xp.admin images main 0", row, height, 12, "0 1 0 .25", "Add/Edit Images", "0.02", "0.12", TextAnchor.MiddleCenter, "0 1 0 1"), XPerienceAdminPanelTimerColor);
                ControlPanelelements.Add(XPUIButton($"xp.config timercolor forcereload 0 false", row, height, 12, "0 1 0 .25", "Reload Images", "0.15", "0.25", TextAnchor.MiddleCenter, "1 0 0 1"), XPerienceAdminPanelTimerColor);
                row++;
                row++;
            }
            #region Live Stats & UI / Chat Settings
            ControlPanelelements.Add(XPUILabel($"[Live Stats & UI / Chat Settings]", row, height, TextAnchor.MiddleLeft, 15, "0.01", "0.30", "1 1 1 1"), XPerienceAdminPanelTimerColor);
            // Default Location
            row++;
            ControlPanelelements.Add(XPUILabel($"Default Live UI Location:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUILabel($"|       {config.defaultOptions.liveuistatslocation}", row, height, TextAnchor.MiddleLeft, 12, valueL, valueR, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIButton($"xp.config timercolor defaultliveui 1 false", row, height, 12, "0.0 1.0 0.0 0", "1", setting1L, setting1R, TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIButton($"xp.config timercolor defaultliveui 2 false", row, height, 12, "1.0 0.0 0.0 0", "2", setting2L, setting2R, TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIButton($"xp.config timercolor defaultliveui 3 false", row, height, 12, "0.0 1.0 0.0 0", "3", "0.30", "0.31", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIButton($"xp.config timercolor defaultliveui 4 false", row, height, 12, "1.0 0.0 0.0 0", "4", "0.32", "0.33", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIButton($"xp.config timercolor defaultliveui 5 false", row, height, 12, "1.0 0.0 0.0 0", "5", "0.34", "0.35", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelTimerColor);
            // Allow Live UI Location Move
            row++;
            ControlPanelelements.Add(XPUILabel($"Allow Players to Move UI:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPToggle($"xp.config timercolor defaultliveuimoveable", row, height, config.defaultOptions.liveuistatslocationmoveable, valueL, width), XPerienceAdminPanelTimerColor);
            // Enable Dash Panel
            row++;
            ControlPanelelements.Add(XPUILabel($"Enable Dash Panel:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPToggle($"xp.config timercolor enabledashpanel", row, height, config.defaultOptions.enabledashpanel, valueL, width), XPerienceAdminPanelTimerColor);
            // Speedometer Type
            row++;
            string speedometer = "MPH";
            if (config.defaultOptions.speedometertype == 1)
            {
                speedometer = "MPH";
            }
            if (config.defaultOptions.speedometertype == 2)
            {
                speedometer = "KPH";
            }
            ControlPanelelements.Add(XPUILabel($"Default Speedometer Type:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUILabel($"|       {speedometer}", row, height, TextAnchor.MiddleLeft, 12, valueL, valueR, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIButton($"xp.config timercolor speedometertype 1 false", row, height, 12, "0.0 1.0 0.0 0", "MPH", setting1L, setting2L, TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIButton($"xp.config timercolor speedometertype 2 false", row, height, 12, "1.0 0.0 0.0 0", "KPH", setting2R, "0.31", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelTimerColor);
            // Progressive Level Icons
            row++;
            ControlPanelelements.Add(XPUILabel($"Use Progressive Level Icons:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPToggle($"xp.config timercolor useprogressivelevelicons", row, height, config.defaultOptions.useprogressivelevelicons, valueL, width), XPerienceAdminPanelTimerColor);
            // Player Search
            row++;
            ControlPanelelements.Add(XPUILabel($"Allow Player Search:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPToggle($"xp.config timercolor allowplayersearch", row, height, config.defaultOptions.allowplayersearch, valueL, width), XPerienceAdminPanelTimerColor);
            // Show Online Status
            row++;
            ControlPanelelements.Add(XPUILabel($"Show Online Status:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPToggle($"xp.config timercolor showonlinestatus", row, height, config.defaultOptions.showonlinestatus, valueL, width), XPerienceAdminPanelTimerColor);
            // Player Reset
            row++;
            ControlPanelelements.Add(XPUILabel($"Allow Player Reset:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPToggle($"xp.config timercolor allowplayerreset", row, height, config.defaultOptions.allowplayerreset, valueL, width), XPerienceAdminPanelTimerColor);
            // Top Player Per Page
            row++;
            ControlPanelelements.Add(XPUILabel($"Top Players Per Page: (max 20)", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            if (config.defaultOptions.topplayersperpage > 20)
            {
                config.defaultOptions.topplayersperpage = 20;
            }
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.config timercolor topplayersperpage {UserInputText}", row, height, 12, $"{config.defaultOptions.topplayersperpage}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            row++;
            // Live XP Bar Color
            ControlPanelelements.Add(XPUILabel($"XP Bar Color:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.color xpbar {UserInputText}", row, height, 12, $"<color={config.uitextColor.xpbar}>{config.uitextColor.xpbar}</color>", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            row++;
            // Live Armor Bar Color
            ControlPanelelements.Add(XPUILabel($"Armor Bar Color:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.color armorbar {UserInputText}", row, height, 12, $"<color={config.uitextColor.armorbar}>{config.uitextColor.armorbar}</color>", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Show Profile in Chat
            row++;
            ControlPanelelements.Add(XPUILabel($"Show Player Stats in Chat On Connect:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPToggle($"xp.config timercolor showchatprofile", row, height, config.defaultOptions.showchatprofileonconnect, valueL, width), XPerienceAdminPanelTimerColor);
            // Show Level in Chat
            row++;
            ControlPanelelements.Add(XPUILabel($"Show Player Levels in Chat:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPToggle($"xp.config timercolor showlevelinchat", row, height, config.defaultOptions.showlevelinchat, valueL, width), XPerienceAdminPanelTimerColor);
            // Disable Chats
            row++;
            ControlPanelelements.Add(XPUILabel($"Disable All Chat Notifacations:", row, height, TextAnchor.MiddleLeft, 12, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPToggle($"xp.config timercolor disablechats", row, height, config.defaultOptions.hidechatnotifications, valueL, width), XPerienceAdminPanelTimerColor);
            if (!config.defaultOptions.hidechatnotifications)
            {
                // Show Armor Absorb Chat
                row++;
                ControlPanelelements.Add(XPUILabel($"Show Armor Absorb Chat Messages:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelTimerColor);
                ControlPanelelements.Add(XPToggle($"xp.config timercolor armorchat", row, height, config.defaultOptions.disablearmorchat, valueL, width), XPerienceAdminPanelTimerColor);
                // Notifcation Cooldown
                row++;
                ControlPanelelements.Add(XPUILabel($"Chat Message Cooldown: (seconds)", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelTimerColor);
                ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelTimerColor);
                ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.config timercolor NotifcationCooldown {UserInputText}", row, height, 12, $"{config.defaultOptions.NotifcationCooldown}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            }
            #endregion
            // Stat / Skill Settings
            #region Stat / Skill Settings
            row++;
            row++;
            ControlPanelelements.Add(XPUILabel($"[Stat / Skill Settings]", row, height, TextAnchor.MiddleLeft, 15, "0.01", "0.30", "1 1 1 1"), XPerienceAdminPanelTimerColor);
            // Use Permissions
            row++;
            ControlPanelelements.Add(XPUILabel($"Use Permissions:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPToggle($"xp.config timercolor userpermissions", row, height, config.defaultOptions.userpermissions, valueL, width), XPerienceAdminPanelTimerColor);
            // Drops to Inventory
            row++;
            ControlPanelelements.Add(XPUILabel($"Drops go in player inventory:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPToggle($"xp.config timercolor dropsgotoplayerinventory", row, height, config.defaultOptions.dropsgotoplayerinventory, valueL, width), XPerienceAdminPanelTimerColor);
            // Show Confirmation Prompt
            row++;
            ControlPanelelements.Add(XPUILabel($"Show Confirmation Prompt:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPToggle($"xp.config timercolor enableconfirmationprompt", row, height, config.defaultOptions.enableconfirmationprompt, valueL, width), XPerienceAdminPanelTimerColor);
            // Show Chat Messages
            row++;
            ControlPanelelements.Add(XPUILabel($"Show Chat Notifications:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPToggle($"xp.config timercolor showchatnotifications", row, height, config.defaultOptions.showchatnotifications, valueL, width), XPerienceAdminPanelTimerColor);
            // Hardcore Mode Resets
            row++;
            ControlPanelelements.Add(XPUILabel($"Hardcore Mode (No Resets):", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPToggle($"xp.config timercolor defaulthardcore", row, height, config.defaultOptions.hardcorenoreset, valueL, width), XPerienceAdminPanelTimerColor);
            if (!config.defaultOptions.hardcorenoreset)
            {
                // Restrict Resets
                row++;
                ControlPanelelements.Add(XPUILabel($"Restrict Resets:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelTimerColor);
                ControlPanelelements.Add(XPToggle($"xp.config timercolor defaultrestristresets", row, height, config.defaultOptions.restristresets, valueL, width), XPerienceAdminPanelTimerColor);
                // Stat Reset Timer
                row++;
                ControlPanelelements.Add(XPUILabel($"Stat Reset Timer Mins:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelTimerColor);
                ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelTimerColor);
                ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.config timercolor defaultstattimer {UserInputText}", row, height, 12, $"{config.defaultOptions.resetminsstats}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                // Skill Reset Timer
                row++;
                ControlPanelelements.Add(XPUILabel($"Skill Reset Timer:(mins)", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelTimerColor);
                ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelTimerColor);
                ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.config timercolor defaultskilltimer {UserInputText}", row, height, 12, $"{config.defaultOptions.resetminsskills}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                // VIP Stat Reset Timer
                row++;
                ControlPanelelements.Add(XPUILabel($"VIP Stat Reset Timer:(mins)", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelTimerColor);
                ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelTimerColor);
                ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.config timercolor defaultvipstattimer {UserInputText}", row, height, 12, $"{config.defaultOptions.vipresetminstats}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                // VIP Skill Reset Timer
                row++;
                ControlPanelelements.Add(XPUILabel($"VIP Skill Reset Timer:(mins)", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelTimerColor);
                ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelTimerColor);
                ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.config timercolor defaultvipskilltimer {UserInputText}", row, height, 12, $"{config.defaultOptions.vipresetminsskills}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                // Disable Fix Data
                row++;
                ControlPanelelements.Add(XPUILabel($"Disable Fix Data (players):", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelTimerColor);
                ControlPanelelements.Add(XPToggle($"xp.config timercolor defaultfixdatadisable", row, height, config.defaultOptions.disableplayerfixdata, valueL, width), XPerienceAdminPanelTimerColor);
                // Fix Data Reset Timer
                if (!config.defaultOptions.disableplayerfixdata)
                {
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Player Fix Data Timer:(mins)", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelTimerColor);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelTimerColor);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.config timercolor defaultplayerfixdata {UserInputText}", row, height, 12, $"{config.defaultOptions.playerfixdatatimer}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                }
            }
            // Admin Bypass Resets
            row++;
            ControlPanelelements.Add(XPUILabel($"Admins Bypass:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPToggle($"xp.config timercolor defaultadminbypass", row, height, config.defaultOptions.bypassadminreset, valueL, width), XPerienceAdminPanelTimerColor);
            // Debug Mode
            row++;
            ControlPanelelements.Add(XPUILabel($"Debug Mode:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPToggle($"xp.config timercolor debugmode", row, height, config.defaultOptions.debugmode, valueL, width), XPerienceAdminPanelTimerColor);
            #endregion
            // Color Options
            #region Color Options
            ControlPanelelements.Add(XPUILabel($"[UI Text Color Settings]", rowtwo, height, TextAnchor.MiddleLeft, 15, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            // Default
            rowtwo++;
            ControlPanelelements.Add(XPUILabel($"Default Color:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInputbackground(rowtwo, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.color defaultuicolor {UserInputText}", rowtwo, height, 12, $"<color={config.uitextColor.defaultcolor}>{config.uitextColor.defaultcolor}</color>", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Rank Name
            rowtwo++;
            ControlPanelelements.Add(XPUILabel($"Rank Name Color:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInputbackground(rowtwo, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.color ranknameuicolor {UserInputText}", rowtwo, height, 12, $"<color={config.uitextColor.rankname}>{config.uitextColor.rankname}</color>", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Rank Level
            rowtwo++;
            ControlPanelelements.Add(XPUILabel($"Rank Level Color:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInputbackground(rowtwo, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.color rankleveluicolor {UserInputText}", rowtwo, height, 12, $"<color={config.uitextColor.ranklevel}>{config.uitextColor.ranklevel}</color>", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Rank XP
            rowtwo++;
            ControlPanelelements.Add(XPUILabel($"Rank XP Color:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInputbackground(rowtwo, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.color rankxpuicolor {UserInputText}", rowtwo, height, 12, $"<color={config.uitextColor.rankxp}>{config.uitextColor.rankxp}</color>", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Level
            rowtwo++;
            ControlPanelelements.Add(XPUILabel($"Level Color:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInputbackground(rowtwo, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.color leveluicolor {UserInputText}", rowtwo, height, 12, $"<color={config.uitextColor.level}>{config.uitextColor.level}</color>", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Experience
            rowtwo++;
            ControlPanelelements.Add(XPUILabel($"Experience Color:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInputbackground(rowtwo, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.color xpuicolor {UserInputText}", rowtwo, height, 12, $"<color={config.uitextColor.experience}>{config.uitextColor.experience}</color>", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Next Level
            rowtwo++;
            ControlPanelelements.Add(XPUILabel($"Next Level Color:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInputbackground(rowtwo, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.color nextlvluicolor {UserInputText}", rowtwo, height, 12, $"<color={config.uitextColor.nextlevel}>{config.uitextColor.nextlevel}</color>", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Remaining XP
            rowtwo++;
            ControlPanelelements.Add(XPUILabel($"Remaining XP Color:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInputbackground(rowtwo, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.color remainuicolor {UserInputText}", rowtwo, height, 12, $"<color={config.uitextColor.remainingxp}>{config.uitextColor.remainingxp}</color>", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Stats / Skills / Levels
            rowtwo++;
            ControlPanelelements.Add(XPUILabel($"Stats/Skills/Levels Color:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInputbackground(rowtwo, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.color ssluicolor {UserInputText}", rowtwo, height, 12, $"<color={config.uitextColor.statskilllevels}>{config.uitextColor.statskilllevels}</color>", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Perks
            rowtwo++;
            ControlPanelelements.Add(XPUILabel($"Perks Color:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInputbackground(rowtwo, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.color perksuicolor {UserInputText}", rowtwo, height, 12, $"<color={config.uitextColor.perks}>{config.uitextColor.perks}</color>", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Unspent Points
            rowtwo++;
            ControlPanelelements.Add(XPUILabel($"Unspent Points Color:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInputbackground(rowtwo, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.color upointsuicolor {UserInputText}", rowtwo, height, 12, $"<color={config.uitextColor.unspentpoints}>{config.uitextColor.unspentpoints}</color>", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Spent Points
            rowtwo++;
            ControlPanelelements.Add(XPUILabel($"Spent Points Color:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInputbackground(rowtwo, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.color spointsuicolor {UserInputText}", rowtwo, height, 12, $"<color={config.uitextColor.spentpoints}>{config.uitextColor.spentpoints}</color>", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Personal Animals
            rowtwo++;
            ControlPanelelements.Add(XPUILabel($"Personal Animals Color:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInputbackground(rowtwo, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.color petsuicolor {UserInputText}", rowtwo, height, 12, $"<color={config.uitextColor.pets}>{config.uitextColor.pets}</color>", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            rowtwo++;
            rowtwo++;
            // Stats
            ControlPanelelements.Add(XPUILabel($"[Stats Label Color Settings]", rowtwo, height, TextAnchor.MiddleLeft, 15, lableL2, "0.98", "1 1 1 1"), XPerienceAdminPanelTimerColor);
            // Mentality
            rowtwo++;
            ControlPanelelements.Add(XPUILabel($"Mentality:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInputbackground(rowtwo, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.color mentality {UserInputText}", rowtwo, height, 12, $"<color={config.uitextColor.mentality}>{config.uitextColor.mentality}</color>", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Dexterity
            rowtwo++;
            ControlPanelelements.Add(XPUILabel($"Dexterity:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInputbackground(rowtwo, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.color dexterity {UserInputText}", rowtwo, height, 12, $"<color={config.uitextColor.dexterity}>{config.uitextColor.dexterity}</color>", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Might
            rowtwo++;
            ControlPanelelements.Add(XPUILabel($"Might:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInputbackground(rowtwo, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.color might {UserInputText}", rowtwo, height, 12, $"<color={config.uitextColor.might}>{config.uitextColor.might}</color>", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Captaincy
            rowtwo++;
            ControlPanelelements.Add(XPUILabel($"Captaincy:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInputbackground(rowtwo, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.color captaincy {UserInputText}", rowtwo, height, 12, $"<color={config.uitextColor.captaincy}>{config.uitextColor.captaincy}</color>", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Weaponry
            rowtwo++;
            ControlPanelelements.Add(XPUILabel($"Weaponry:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInputbackground(rowtwo, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.color weaponry {UserInputText}", rowtwo, height, 12, $"<color={config.uitextColor.weaponry}>{config.uitextColor.weaponry}</color>", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Ninjary
            rowtwo++;
            ControlPanelelements.Add(XPUILabel($"Ninjary:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInputbackground(rowtwo, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.color Ninjary {UserInputText}", rowtwo, height, 12, $"<color={config.uitextColor.Ninjary}>{config.uitextColor.Ninjary}</color>", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            rowtwo++;
            rowtwo++;
            // Skills
            ControlPanelelements.Add(XPUILabel($"[Skill Label Color Settings]", rowtwo, height, TextAnchor.MiddleLeft, 15, lableL2, "0.98", "1 1 1 1"), XPerienceAdminPanelTimerColor);
            rowtwo++;
            // WoodCutter
            ControlPanelelements.Add(XPUILabel($"WoodCutter:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInputbackground(rowtwo, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.color woodcutter {UserInputText}", rowtwo, height, 12, $"<color={config.uitextColor.woodcutter}>{config.uitextColor.woodcutter}</color>", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            rowtwo++;
            // Smithy
            ControlPanelelements.Add(XPUILabel($"Smithy:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInputbackground(rowtwo, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.color smithy {UserInputText}", rowtwo, height, 12, $"<color={config.uitextColor.smithy}>{config.uitextColor.smithy}</color>", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            rowtwo++;
            // Miner
            ControlPanelelements.Add(XPUILabel($"Miner:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInputbackground(rowtwo, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.color miner {UserInputText}", rowtwo, height, 12, $"<color={config.uitextColor.miner}>{config.uitextColor.miner}</color>", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            rowtwo++;
            // Forager
            ControlPanelelements.Add(XPUILabel($"Forager:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInputbackground(rowtwo, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.color forager {UserInputText}", rowtwo, height, 12, $"<color={config.uitextColor.forager}>{config.uitextColor.forager}</color>", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            rowtwo++;
            // Hunter
            ControlPanelelements.Add(XPUILabel($"Hunter:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInputbackground(rowtwo, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.color hunter {UserInputText}", rowtwo, height, 12, $"<color={config.uitextColor.hunter}>{config.uitextColor.hunter}</color>", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            rowtwo++;
            // Fisher
            ControlPanelelements.Add(XPUILabel($"Fisher:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInputbackground(rowtwo, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.color fisher {UserInputText}", rowtwo, height, 12, $"<color={config.uitextColor.fisher}>{config.uitextColor.fisher}</color>", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            rowtwo++;
            // Crafter
            ControlPanelelements.Add(XPUILabel($"Crafter:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInputbackground(rowtwo, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.color crafter {UserInputText}", rowtwo, height, 12, $"<color={config.uitextColor.crafter}>{config.uitextColor.crafter}</color>", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            rowtwo++;
            // Framer
            ControlPanelelements.Add(XPUILabel($"Framer:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInputbackground(rowtwo, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.color framer {UserInputText}", rowtwo, height, 12, $"<color={config.uitextColor.framer}>{config.uitextColor.framer}</color>", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            rowtwo++;
            // Medic
            ControlPanelelements.Add(XPUILabel($"Medic:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInputbackground(rowtwo, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.color medic {UserInputText}", rowtwo, height, 12, $"<color={config.uitextColor.medic}>{config.uitextColor.medic}</color>", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            rowtwo++;
            // Scavenger
            ControlPanelelements.Add(XPUILabel($"Scavenger:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInputbackground(rowtwo, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.color scavenger {UserInputText}", rowtwo, height, 12, $"<color={config.uitextColor.scavenger}>{config.uitextColor.scavenger}</color>", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            rowtwo++;
            // Electrician
            ControlPanelelements.Add(XPUILabel($"Electrician:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInputbackground(rowtwo, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.color electrician {UserInputText}", rowtwo, height, 12, $"<color={config.uitextColor.electrician}>{config.uitextColor.electrician}</color>", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            rowtwo++;
            // Demolitionist
            ControlPanelelements.Add(XPUILabel($"Demolitionist:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInputbackground(rowtwo, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.color demolitionist {UserInputText}", rowtwo, height, 12, $"<color={config.uitextColor.demolitionist}>{config.uitextColor.demolitionist}</color>", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            rowtwo++;
            // Tamer
            ControlPanelelements.Add(XPUILabel($"Tamer:", rowtwo, height, TextAnchor.MiddleLeft, 12, lableL2, lableR2, "1 1 1 1"), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInputbackground(rowtwo, height, "0 0 .1 .75", valueL2, valueR2), XPerienceAdminPanelTimerColor);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelTimerColor, $"xp.color tamer {UserInputText}", rowtwo, height, 12, $"<color={config.uitextColor.tamer}>{config.uitextColor.tamer}</color>", valueL2, valueR2, TextAnchor.MiddleLeft, "1 1 1 1"));
            #endregion
            // End
            CuiHelper.AddUi(player, ControlPanelelements);
        }
        private void AdminImagePaths(BasePlayer player, string page = "main", int bg = 0)
        {
            var ControlPanelelements = new CuiElementContainer();
            #region Layout
            var height = 0.028f;
            int row = 2;
            string delL = ".01";
            string delR = ".02";
            string lableL = "0.01";
            string lableL2 = "0.03";
            string lableR = "0.10";
            string valueL = "0.10";
            string valueR = "0.48";
            string lable2L = "0.50";
            string lable2R = "0.59";
            string value2L = "0.59";
            string value2R = "0.98";
            #endregion
            ControlPanelelements.Add(XPUIPanel(".16 0", "1 1", "0 0 0 .7"), XPerienceAdminPanelMain, XPerienceAdminPanelImages);
            ControlPanelelements.Add(XPUILabel($"Image URLs: (Once a URL is changed use the reload button so the images are updated)", row, height, TextAnchor.MiddleLeft, 15, lableL, ".99", "1 1 1 1"), XPerienceAdminPanelImages);
            row++;
            row++;
            switch (page)
            {
                case "main":
                    #region Image URLS
                    ControlPanelelements.Add(XPUIButton($"xp.admin images bgimages", row, height, 12, "0 1 0 .25", "Profile BG Images", "0.02", "0.12", TextAnchor.MiddleCenter, "0 1 0 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIButton($"xp.images reloadimages", row, height, 12, "0 1 0 .25", "Reload Images", "0.13", "0.23", TextAnchor.MiddleCenter, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIButton($"xp.images resetimages", row, height, 12, "0 1 0 .25", "Reset Default URLs", "0.24", "0.37", TextAnchor.MiddleCenter, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIButton($"xp.images checkimages", row, height, 12, "0 1 0 .25", "Check Images", "0.38", "0.48", TextAnchor.MiddleCenter, "1 1 1 1"), XPerienceAdminPanelImages);
                    row++;
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Use Local Path:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPToggle($"xp.images uselocalpath", row, height, config.imageicons.uselocalpath, valueL), XPerienceAdminPanelImages);
                    if (config.imageicons.uselocalpath)
                    {
                        row++;
                        ControlPanelelements.Add(XPUILabel($"Path to Oxide folder:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelImages);
                        ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelImages);
                        ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images rootpath {UserInputText}", row, height, 12, $"{config.imageicons.rootpath}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                        if (Directory.Exists($"{config.imageicons.rootpath}"))
                        {
                            row++;
                            ControlPanelelements.Add(XPUILabel("(Oxide Folder Found)", row, height, TextAnchor.MiddleLeft, 12, valueL, valueR, "0 1 0 1"), XPerienceAdminPanelImages);
                        }
                        else
                        {
                            row++;
                            ControlPanelelements.Add(XPUILabel($"(Oxide Folder Not Found, Try: {Directory.GetCurrentDirectory()}/oxide)", row, height, TextAnchor.MiddleLeft, 12, valueL, valueR, "1 0 0 1"), XPerienceAdminPanelImages);
                        }
                        row++;
                        ControlPanelelements.Add(XPUILabel($"(Click Reload Images after path is set. Once images are downloaded make sure you click save on the menu and reload images again. You may have to reload Image Library as well for images to load.)", row, height, TextAnchor.MiddleLeft, 10, ".01", ".99", "1 1 0 1"), XPerienceAdminPanelImages);
                        row++;
                        ControlPanelelements.Add(XPUILabel($"(For help with this you can visit the XPerience website here: https://www.rustlevels.com/XPerience/index.php/setup/image-urls)", row, height, TextAnchor.MiddleLeft, 10, ".01", ".99", "1 1 0 1"), XPerienceAdminPanelImages);
                    }
                    row++;
                    int row2 = row;
                    ControlPanelelements.Add(XPUILabel($"Logo:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images xperiencelogo {UserInputText}", row, height, 12, $"{config.imageicons.xperiencelogo}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Icon:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images mainicon {UserInputText}", row, height, 12, $"{config.imageicons.mainicon}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    // Stats
                    #region Stats
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Mentality:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images mentality {UserInputText}", row, height, 12, $"{config.imageicons.mentality}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Dexterity:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images dexterity {UserInputText}", row, height, 12, $"{config.imageicons.dexterity}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Might:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images might {UserInputText}", row, height, 12, $"{config.imageicons.might}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Weaponry:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images weaponry {UserInputText}", row, height, 12, $"{config.imageicons.weaponry}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Ninjary:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images ninjary {UserInputText}", row, height, 12, $"{config.imageicons.ninjary}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Captaincy:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images captaincy {UserInputText}", row, height, 12, $"{config.imageicons.captaincy}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    #endregion
                    // Skills
                    #region Skills
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Woodcutter:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images woodcutter {UserInputText}", row, height, 12, $"{config.imageicons.woodcutter}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Smithy:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images smithy {UserInputText}", row, height, 12, $"{config.imageicons.smithy}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Miner:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images miner {UserInputText}", row, height, 12, $"{config.imageicons.miner}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Fisher:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images fisher {UserInputText}", row, height, 12, $"{config.imageicons.fisher}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Forager:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images forager {UserInputText}", row, height, 12, $"{config.imageicons.forager}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Hunter:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images hunter {UserInputText}", row, height, 12, $"{config.imageicons.hunter}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Crafter:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images crafter {UserInputText}", row, height, 12, $"{config.imageicons.crafter}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Framer:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images framer {UserInputText}", row, height, 12, $"{config.imageicons.framer}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Medic:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images medic {UserInputText}", row, height, 12, $"{config.imageicons.medic}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Scavenger:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images scavenger {UserInputText}", row, height, 12, $"{config.imageicons.scavenger}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Electrician:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images electrician {UserInputText}", row, height, 12, $"{config.imageicons.electrician}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Demolitionist:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images demolitionist {UserInputText}", row, height, 12, $"{config.imageicons.demolitionist}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    #endregion
                    // Other
                    #region Other
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Chicken:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images chicken {UserInputText}", row, height, 12, $"{config.imageicons.chicken}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Boar:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images boar {UserInputText}", row, height, 12, $"{config.imageicons.boar}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Stag:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images stag {UserInputText}", row, height, 12, $"{config.imageicons.stag}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Wolf:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images wolf {UserInputText}", row, height, 12, $"{config.imageicons.wolf}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Bear:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images bear {UserInputText}", row, height, 12, $"{config.imageicons.bear}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Polar Bear:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images polarbear {UserInputText}", row, height, 12, $"{config.imageicons.polarbear}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    #endregion
                    // Row 2
                    #region Misc
                    ControlPanelelements.Add(XPUILabel($"XP:", row2, height, TextAnchor.MiddleLeft, 12, lable2L, lable2R, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", value2L, value2R), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images xp {UserInputText}", row2, height, 12, $"{config.imageicons.xp}", value2L, value2R, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row2++;
                    ControlPanelelements.Add(XPUILabel($"Level:", row2, height, TextAnchor.MiddleLeft, 12, lable2L, lable2R, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", value2L, value2R), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images level {UserInputText}", row2, height, 12, $"{config.imageicons.level}", value2L, value2R, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row2++;
                    ControlPanelelements.Add(XPUILabel($"Level 0%:", row2, height, TextAnchor.MiddleLeft, 12, lable2L, lable2R, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", value2L, value2R), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images level0 {UserInputText}", row2, height, 12, $"{config.imageicons.level0}", value2L, value2R, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row2++;
                    ControlPanelelements.Add(XPUILabel($"Level 20%:", row2, height, TextAnchor.MiddleLeft, 12, lable2L, lable2R, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", value2L, value2R), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images level2 {UserInputText}", row2, height, 12, $"{config.imageicons.level2}", value2L, value2R, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row2++;
                    ControlPanelelements.Add(XPUILabel($"Level 40%:", row2, height, TextAnchor.MiddleLeft, 12, lable2L, lable2R, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", value2L, value2R), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images level4 {UserInputText}", row2, height, 12, $"{config.imageicons.level4}", value2L, value2R, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row2++;
                    ControlPanelelements.Add(XPUILabel($"Level 60%:", row2, height, TextAnchor.MiddleLeft, 12, lable2L, lable2R, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputb