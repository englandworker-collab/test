ackground(row2, height, "0 0 .1 .75", value2L, value2R), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images level6 {UserInputText}", row2, height, 12, $"{config.imageicons.level6}", value2L, value2R, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row2++;
                    ControlPanelelements.Add(XPUILabel($"Level 80%:", row2, height, TextAnchor.MiddleLeft, 12, lable2L, lable2R, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", value2L, value2R), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images level8 {UserInputText}", row2, height, 12, $"{config.imageicons.level8}", value2L, value2R, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row2++;
                    ControlPanelelements.Add(XPUILabel($"Level 100%:", row2, height, TextAnchor.MiddleLeft, 12, lable2L, lable2R, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", value2L, value2R), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images level10 {UserInputText}", row2, height, 12, $"{config.imageicons.level10}", value2L, value2R, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row2++;
                    ControlPanelelements.Add(XPUILabel($"Armor:", row2, height, TextAnchor.MiddleLeft, 12, lable2L, lable2R, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", value2L, value2R), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images armor {UserInputText}", row2, height, 12, $"{config.imageicons.armor}", value2L, value2R, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row2++;
                    ControlPanelelements.Add(XPUILabel($"Online:", row2, height, TextAnchor.MiddleLeft, 12, lable2L, lable2R, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", value2L, value2R), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images online {UserInputText}", row2, height, 12, $"{config.imageicons.online}", value2L, value2R, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row2++;
                    ControlPanelelements.Add(XPUILabel($"Offline:", row2, height, TextAnchor.MiddleLeft, 12, lable2L, lable2R, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", value2L, value2R), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images offline {UserInputText}", row2, height, 12, $"{config.imageicons.offline}", value2L, value2R, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row2++;
                    ControlPanelelements.Add(XPUILabel($"Backpack:", row2, height, TextAnchor.MiddleLeft, 12, lable2L, lable2R, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", value2L, value2R), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images backpack {UserInputText}", row2, height, 12, $"{config.imageicons.backpack}", value2L, value2R, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row2++;
                    ControlPanelelements.Add(XPUILabel($"Dash Panel:", row2, height, TextAnchor.MiddleLeft, 12, lable2L, lable2R, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", value2L, value2R), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images dash {UserInputText}", row2, height, 12, $"{config.imageicons.dash}", value2L, value2R, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row2++;
                    ControlPanelelements.Add(XPUILabel($"Default Profile BG:", row2, height, TextAnchor.MiddleLeft, 12, lable2L, lable2R, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", value2L, value2R), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images profilebg {UserInputText}", row2, height, 12, $"{config.imageicons.profilebg}", value2L, value2R, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row2++;
                    ControlPanelelements.Add(XPUILabel($"Profile Menu BG:", row2, height, TextAnchor.MiddleLeft, 12, lable2L, lable2R, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", value2L, value2R), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images menubg {UserInputText}", row2, height, 12, $"{config.imageicons.menubg}", value2L, value2R, TextAnchor.MiddleLeft, "1 1 1 1"));
                    if(RaidableBases != null)
                    {
                        row2++;
                        ControlPanelelements.Add(XPUILabel($"Raid Easy:", row2, height, TextAnchor.MiddleLeft, 12, lable2L, lable2R, "1 1 1 1"), XPerienceAdminPanelImages);
                        ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", value2L, value2R), XPerienceAdminPanelImages);
                        ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images raideasy {UserInputText}", row2, height, 12, $"{config.imageicons.raideasy}", value2L, value2R, TextAnchor.MiddleLeft, "1 1 1 1"));
                        row2++;
                        ControlPanelelements.Add(XPUILabel($"Raid Medium:", row2, height, TextAnchor.MiddleLeft, 12, lable2L, lable2R, "1 1 1 1"), XPerienceAdminPanelImages);
                        ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", value2L, value2R), XPerienceAdminPanelImages);
                        ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images raidmedium {UserInputText}", row2, height, 12, $"{config.imageicons.raidmedium}", value2L, value2R, TextAnchor.MiddleLeft, "1 1 1 1"));
                        row2++;
                        ControlPanelelements.Add(XPUILabel($"Raid Hard:", row2, height, TextAnchor.MiddleLeft, 12, lable2L, lable2R, "1 1 1 1"), XPerienceAdminPanelImages);
                        ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", value2L, value2R), XPerienceAdminPanelImages);
                        ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images raidhard {UserInputText}", row2, height, 12, $"{config.imageicons.raidhard}", value2L, value2R, TextAnchor.MiddleLeft, "1 1 1 1"));
                        row2++;
                        ControlPanelelements.Add(XPUILabel($"Raid Expert:", row2, height, TextAnchor.MiddleLeft, 12, lable2L, lable2R, "1 1 1 1"), XPerienceAdminPanelImages);
                        ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", value2L, value2R), XPerienceAdminPanelImages);
                        ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images raidexpert {UserInputText}", row2, height, 12, $"{config.imageicons.raidexpert}", value2L, value2R, TextAnchor.MiddleLeft, "1 1 1 1"));
                        row2++;
                        ControlPanelelements.Add(XPUILabel($"Raid Nightmare:", row2, height, TextAnchor.MiddleLeft, 12, lable2L, lable2R, "1 1 1 1"), XPerienceAdminPanelImages);
                        ControlPanelelements.Add(XPUIInputbackground(row2, height, "0 0 .1 .75", value2L, value2R), XPerienceAdminPanelImages);
                        ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images raidnightmare {UserInputText}", row2, height, 12, $"{config.imageicons.raidnightmare}", value2L, value2R, TextAnchor.MiddleLeft, "1 1 1 1"));
                    }
                    #endregion
                    #endregion
                    break;
                case "bgimages":
                    #region BG Images
                    ControlPanelelements.Add(XPUILabel($"Profile BG Images", row, height, TextAnchor.MiddleLeft, 15, "0.01", "1", "1 1 1 1"), XPerienceAdminPanelImages);
                    row++;
                    row++;
                    ControlPanelelements.Add(XPUIButton($"xp.images bgnew", row, height, 12, "0 1 0 .25", "Create BG Image", "0.02", "0.12", TextAnchor.MiddleCenter, "0 1 0 1"), XPerienceAdminPanelImages);
                    row++;
                    row++;
                    foreach (var bgimage in config.imageicons.bgimages)
                    {
                        ControlPanelelements.Add(XPUIButton($"xp.images deletebgimage {bgimage.Key}", row, height, 12, "0 0 0 .25", $"ⓧ", delL, delR, TextAnchor.MiddleLeft, "1 0 0 1"), XPerienceAdminPanelImages);
                        ControlPanelelements.Add(XPUIButton($"xp.images editbgimage {bgimage.Key}", row, height, 12, "0 0 0 .25", $"{bgimage.Value.name}", lableL2, lableR, TextAnchor.MiddleLeft, "1 1 1 1"), XPerienceAdminPanelImages);
                        row++;
                    }
                    row++;
                    ControlPanelelements.Add(XPUIButton($"xp.admin images main", row, height, 12, "0 1 0 .25", "Return", ".01", ".11", TextAnchor.MiddleCenter, "1 1 1 1"), XPerienceAdminPanelImages);
                    #endregion
                    break;
                case "editbgimage":
                    #region Edit BG Image
                    ControlPanelelements.Add(XPUILabel($"Profile BG Image: {bg}", row, height, TextAnchor.MiddleLeft, 15, "0.01", "1", "1 1 1 1"), XPerienceAdminPanelImages);
                    row++;
                    var editbgimage = config.imageicons.bgimages[bg];
                    ControlPanelelements.Add(XPUILabel($"Name:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images editbgimagename {bg} {UserInputText}", row, height, 12, $"{editbgimage.name}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row++;
                    ControlPanelelements.Add(XPUILabel($"URL:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelImages, $"xp.images editbgimageurl {bg} {UserInputText}", row, height, 12, $"{editbgimage.url}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row++;
                    row++;
                    ControlPanelelements.Add(XPUIButton($"xp.admin images bgimages", row, height, 12, "0 1 0 .25", "Return", ".01", ".11", TextAnchor.MiddleCenter, "1 1 1 1"), XPerienceAdminPanelImages);
                    // Preview
                    row++;
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Preview:", row, height, TextAnchor.MiddleLeft, 12, "0.01", "1", "1 1 1 1"), XPerienceAdminPanelImages);
                    ControlPanelelements.Add(new CuiElement
                    {
                        Parent = XPerienceAdminPanelImages,
                        Components =
                                {
                                    new CuiRawImageComponent
                                    {
                                        Png = ImageLibrary?.Call<string>("GetImage", editbgimage.name)
                                    },
                                    new CuiRectTransformComponent
                                    {
                                        AnchorMin = ".01 .35",
                                        AnchorMax = ".50 .70"
                                    }
                                }
                    });
                    #endregion
                    break;
            }
            // End
            CuiHelper.AddUi(player, ControlPanelelements);
        }
        private void AdminOtherModsPage(BasePlayer player, string mod, string page = "main", int option = 0)
        {
            switch(mod)
            {
                case "main":
                    var ControlPanelelements = new CuiElementContainer();
                    var height = 0.023f;
                    int fontsize = 11;
                    bool modsinstalled = false;
                    ControlPanelelements.Add(XPUIPanel(".16 0", "1 1", "0 0 0 .7"), XPerienceAdminPanelMain, XPerienceAdminPanelOtherMods);
                    ControlPanelelements.Add(XPUILabel($"Other Mod Settings", 1, 0.05f, TextAnchor.MiddleLeft, 18, ".01", "1", "1 1 1 1"), XPerienceAdminPanelOtherMods);
                    ControlPanelelements.Add(XPUILabel("Compatible plugins will show below. Select the plugin you wish to edit or have XPerience control. These mods are not required to use XPerience.", 2, 0.05f, TextAnchor.MiddleLeft, 15, ".01", "1", "1 1 1 1"), XPerienceAdminPanelOtherMods);
                    int row = 6;
                    // Mod List
                    if (ZoneManager != null)
                    {
                        ControlPanelelements.Add(XPUIButton("xp.admin othermods zonemanager", row, height, fontsize, "0 0 0 .7", "Zone Manager", ".02", ".2", TextAnchor.MiddleCenter), XPerienceAdminPanelOtherMods);
                        row++;
                        row++;
                        modsinstalled = true;
                    }
                    if (EventHelper != null || SurvivalArena != null)
                    {
                        ControlPanelelements.Add(XPUIButton("xp.admin othermods eventhelper", row, height, fontsize, "0 0 0 .7", "Event Helper / Survival Arena", ".02", ".2", TextAnchor.MiddleCenter), XPerienceAdminPanelOtherMods);
                        row++;
                        row++;
                        modsinstalled = true;
                    }
                    if (KillRecords != null)
                    {
                        ControlPanelelements.Add(XPUIButton("xp.admin othermods killrecords", row, height, fontsize, "0 0 0 .7", "Kill Records", ".02", ".2", TextAnchor.MiddleCenter), XPerienceAdminPanelOtherMods);
                        row++;
                        row++;
                        modsinstalled = true;
                    }
                    if (Economics != null)
                    {
                        ControlPanelelements.Add(XPUIButton("xp.admin othermods econ", row, height, fontsize, "0 0 0 .7", "Economics", ".02", ".2", TextAnchor.MiddleCenter), XPerienceAdminPanelOtherMods);
                        row++;
                        row++;
                        modsinstalled = true;
                    }
                    if (ServerRewards != null)
                    {
                        ControlPanelelements.Add(XPUIButton("xp.admin othermods srewards", row, height, fontsize, "0 0 0 .7", "Server Rewards", ".02", ".2", TextAnchor.MiddleCenter), XPerienceAdminPanelOtherMods);
                        row++;
                        row++;
                        modsinstalled = true;
                    }
                    if (Backpacks != null)
                    {
                        ControlPanelelements.Add(XPUIButton("xp.admin othermods backpacks", row, height, fontsize, "0 0 0 .7", "Backpacks", ".02", ".2", TextAnchor.MiddleCenter), XPerienceAdminPanelOtherMods);
                        row++;
                        row++;
                        modsinstalled = true;
                    }
                    if (PersonalAnimal != null)
                    {
                        ControlPanelelements.Add(XPUIButton("xp.admin othermods pets", row, height, fontsize, "0 0 0 .7", "Personal Animals (Tamer Skill)", ".02", ".2", TextAnchor.MiddleCenter), XPerienceAdminPanelOtherMods);
                        modsinstalled = true;
                    }
                    if (!modsinstalled)
                    {
                        ControlPanelelements.Add(XPUILabel("There are no compatible plugins installed that can be used/controlled by XPerience.", row, 0.05f, TextAnchor.MiddleLeft, 15, ".01", "1", "1 1 1 1"), XPerienceAdminPanelOtherMods);
                    }
                    // UI End
                    CuiHelper.AddUi(player, ControlPanelelements);
                    break;
                case "zonemanager":
                    OtherMods_ZoneManager(player);
                    break;
                case "eventhelper":
                    OtherMods_EventHelper(player);
                    break;
                case "killrecords":
                    OtherMods_KillRecords(player);
                    break;
                case "econ":
                    OtherMods_Economics(player);
                    break;
                case "srewards":
                    OtherMods_ServerRewards(player);
                    break;
                case "backpacks":
                    OtherMods_Backpacks(player, page, option);
                    break;
                case "pets":
                    OtherMods_Pets(player);
                    break;
            }
        }
        #region Other Mods
        private void OtherMods_KillRecords(BasePlayer player)
        {
            var ControlPanelelements = new CuiElementContainer();
            var height = 0.023f;
            int buttonsize = 12;
            int fontsize = 11;
            int row = 5;
            ControlPanelelements.Add(XPUIPanel("0.16 0.0", "1 1", "0 0 0 .7"), XPerienceAdminPanelMain, XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton("xp.admin othermods main", 2, 0.030f, 15, "0 0 0 .7", $"<-- Back To Mod List", "0.02", "0.15", TextAnchor.MiddleCenter), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"[Kill Records Settings] (Requires KillRecords plugin)", 3, 0.035f, TextAnchor.MiddleLeft, 18, "0.01", "1", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            #region KillRecords
            // KR Enable
            row++;
            ControlPanelelements.Add(XPUILabel($"Enable KillRecords Bonus:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpBonus.enablebonus}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods krenable 0 true killrecords", row, height, fontsize, "0.0 1.0 0.0 0", "T", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods krenable 0 false killrecords", row, height, fontsize, "1.0 0.0 0.0 0", "F", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // KR Button
            row++;
            ControlPanelelements.Add(XPUILabel($"Show KillRecords Button:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpBonus.showkrbutton}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods krshowbutton 0 true killrecords", row, height, fontsize, "0.0 1.0 0.0 0", "T", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods krshowbutton 0 false killrecords", row, height, fontsize, "1.0 0.0 0.0 0", "F", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // KR Required Kills
            row++;
            ControlPanelelements.Add(XPUILabel($"Required Kills:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpBonus.requiredkills}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods krrequiredkills {config.xpBonus.requiredkills + 5} false killrecords", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods krrequiredkills {config.xpBonus.requiredkills - 5} false killrecords", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // KR Bonus Amount
            row++;
            ControlPanelelements.Add(XPUILabel($"Bonus XP Amount:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpBonus.bonusxp}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods krbonusamount {config.xpBonus.bonusxp + 5} false killrecords", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods krbonusamount {config.xpBonus.bonusxp - 5} false killrecords", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // KR Bonus End
            row++;
            ControlPanelelements.Add(XPUILabel($"Bonus XP End:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpBonus.endbonus}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods krbonusend {config.xpBonus.endbonus + 10} false killrecords", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods krbonusend {config.xpBonus.endbonus - 10} false killrecords", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // KR Enable MultiBonus
            row++;
            ControlPanelelements.Add(XPUILabel($"Multiple Bonus:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpBonus.multibonus}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods krenablemulti 0 true killrecords", row, height, fontsize, "0.0 1.0 0.0 0", "T", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods krenablemulti 0 false killrecords", row, height, fontsize, "1.0 0.0 0.0 0", "F", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // KR MultiBonus Type
            row++;
            ControlPanelelements.Add(XPUILabel($"Multiple Bonus Type:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpBonus.multibonustype}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.26", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods krmultitype 0 true killrecords", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods krmultitype 0 false killrecords", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            #endregion
            CuiHelper.AddUi(player, ControlPanelelements);
        }
        private void OtherMods_ZoneManager(BasePlayer player)
        {
            var ControlPanelelements = new CuiElementContainer();
            var height = 0.023f;
            int fontsize = 11;
            int row = 8;
            ControlPanelelements.Add(XPUIPanel("0.16 0.0", "1 1", "0 0 0 .7"), XPerienceAdminPanelMain, XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton("xp.admin othermods main", 2, 0.030f, 15, "0 0 0 .7", $"<-- Back To Mod List", "0.02", "0.15", TextAnchor.MiddleCenter), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"[Zone Manager Settings]", 3, 0.035f, TextAnchor.MiddleLeft, 18, "0.01", "1", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"(Requires ZoneManager plugin: List each zone in the area below seperated by a comma , without spaces)", 4, 0.035f, TextAnchor.MiddleLeft, 13, "0.01", "1", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            #region ZoneManager
            // No XP Gain
            ControlPanelelements.Add(XPUILabel($"No XP Gain:", row, height, TextAnchor.MiddleLeft, fontsize, ".01", ".10", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", ".11", ".99"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelOtherMods, $"xp.config zonemanager noxpgain {UserInputText}", row, height, fontsize, $"{config.zonemanagermod.noxpgain}", ".11", ".99", TextAnchor.MiddleLeft, "1 1 1 1"));
            // No XP Loss
            row++;
            row++;
            ControlPanelelements.Add(XPUILabel($"No XP Loss:", row, height, TextAnchor.MiddleLeft, fontsize, ".01", ".10", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", ".11", ".99"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelOtherMods, $"xp.config zonemanager noxploss {UserInputText}", row, height, fontsize, $"{config.zonemanagermod.noxploss}", ".11", ".99", TextAnchor.MiddleLeft, "1 1 1 1"));
            // No XP Loss
            row++;
            row++;
            ControlPanelelements.Add(XPUILabel($"No Stats/Skills:", row, height, TextAnchor.MiddleLeft, fontsize, ".01", ".10", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", ".11", ".99"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelOtherMods, $"xp.config zonemanager disablestatsandskills {UserInputText}", row, height, fontsize, $"{config.zonemanagermod.disablestatsandskills}", ".11", ".99", TextAnchor.MiddleLeft, "1 1 1 1"));
           #endregion
            CuiHelper.AddUi(player, ControlPanelelements);
        }
        private void OtherMods_EventHelper(BasePlayer player)
        {
            var ControlPanelelements = new CuiElementContainer();
            var height = 0.023f;
            int fontsize = 11;
            int row = 8;
            ControlPanelelements.Add(XPUIPanel("0.16 0.0", "1 1", "0 0 0 .7"), XPerienceAdminPanelMain, XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton("xp.admin othermods main", 2, 0.030f, 15, "0 0 0 .7", $"<-- Back To Mod List", "0.02", "0.15", TextAnchor.MiddleCenter), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"[Event Helper / Survival Arena Settings]", 3, 0.035f, TextAnchor.MiddleLeft, 18, "0.01", "1", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"(Requires EventHelper or Survival Arena plugins)", 4, 0.035f, TextAnchor.MiddleLeft, 13, "0.01", "1", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            #region EventHelper
            if (EventHelper != null)
            { 
                ControlPanelelements.Add(XPUILabel($"EventHelper: List each event name in the area below seperated by a comma ( , )", row, height, TextAnchor.MiddleLeft, 13, "0.01", "1", "1 1 1 1"), XPerienceAdminPanelOtherMods);
                row++;
                // No XP Gain
                ControlPanelelements.Add(XPUILabel($"No XP Gain:", row, height, TextAnchor.MiddleLeft, fontsize, ".01", ".10", "1 1 1 1"), XPerienceAdminPanelOtherMods);
                ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", ".11", ".99"), XPerienceAdminPanelOtherMods);
                ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelOtherMods, $"xp.config eventhelper noxpgain {UserInputText}", row, height, fontsize, $"{config.eventhelpermod.noxpgain}", ".11", ".99", TextAnchor.MiddleLeft, "1 1 1 1"));
                // No XP Loss
                row++;
                ControlPanelelements.Add(XPUILabel($"No XP Loss:", row, height, TextAnchor.MiddleLeft, fontsize, ".01", ".10", "1 1 1 1"), XPerienceAdminPanelOtherMods);
                ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", ".11", ".99"), XPerienceAdminPanelOtherMods);
                ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelOtherMods, $"xp.config eventhelper noxploss {UserInputText}", row, height, fontsize, $"{config.eventhelpermod.noxploss}", ".11", ".99", TextAnchor.MiddleLeft, "1 1 1 1"));
                // No XP Loss
                row++;
                ControlPanelelements.Add(XPUILabel($"No Stats/Skills:", row, height, TextAnchor.MiddleLeft, fontsize, ".01", ".10", "1 1 1 1"), XPerienceAdminPanelOtherMods);
                ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", ".11", ".99"), XPerienceAdminPanelOtherMods);
                ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelOtherMods, $"xp.config eventhelper disablestatsandskills {UserInputText}", row, height, fontsize, $"{config.eventhelpermod.disablestatsandskills}", ".11", ".99", TextAnchor.MiddleLeft, "1 1 1 1"));
                row++;
                row++;
            }
            #endregion
            #region Survival Arena
            if (SurvivalArena != null)
            {
                ControlPanelelements.Add(XPUILabel($"Survival Arena:", row, height, TextAnchor.MiddleLeft, 13, "0.01", "1", "1 1 1 1"), XPerienceAdminPanelOtherMods);
                row++;
                ControlPanelelements.Add(XPUILabel($"Disable XP Gain:", row, height, TextAnchor.MiddleLeft, 12, ".01", ".10", "1 1 1 1"), XPerienceAdminPanelOtherMods);
                ControlPanelelements.Add(XPToggle($"xp.config eventhelper sanoxpgain", row, height, config.survivalarenamod.noxpgain, "0.11"), XPerienceAdminPanelOtherMods);
                row++;
                ControlPanelelements.Add(XPUILabel($"Disable XP Loss:", row, height, TextAnchor.MiddleLeft, 12, ".01", ".10", "1 1 1 1"), XPerienceAdminPanelOtherMods);
                ControlPanelelements.Add(XPToggle($"xp.config eventhelper sanoxploss", row, height, config.survivalarenamod.noxploss, "0.11"), XPerienceAdminPanelOtherMods);
                row++;
                ControlPanelelements.Add(XPUILabel($"Disable Stats/Skills:", row, height, TextAnchor.MiddleLeft, 12, ".01", ".10", "1 1 1 1"), XPerienceAdminPanelOtherMods);
                ControlPanelelements.Add(XPToggle($"xp.config eventhelper sadisablestatsandskills", row, height, config.survivalarenamod.disablestatsandskills, "0.11"), XPerienceAdminPanelOtherMods);
            }
            #endregion
            CuiHelper.AddUi(player, ControlPanelelements);
        }
        private void OtherMods_Economics(BasePlayer player)
        {
            var ControlPanelelements = new CuiElementContainer();
            var height = 0.023f;
            int buttonsize = 12;
            int fontsize = 11;
            int row = 5;
            ControlPanelelements.Add(XPUIPanel("0.16 0.0", "1 1", "0 0 0 .7"), XPerienceAdminPanelMain, XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton("xp.admin othermods main", 2, 0.030f, 15, "0 0 0 .7", $"<-- Back To Mod List", "0.02", "0.15", TextAnchor.MiddleCenter), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"[Economics Settings] (Requires Economics plugin)", 3, 0.035f, TextAnchor.MiddleLeft, 18, "0.01", "1", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            #region Economics
            // Show Profile Balance
            row++;
            ControlPanelelements.Add(XPUILabel($"Show Balance in Profiles:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpEcon.showbalanceprofile}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods showbalanceprofile 0 true econ", row, height, fontsize, "0.0 1.0 0.0 0", "T", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods showbalanceprofile 0 false econ", row, height, fontsize, "1.0 0.0 0.0 0", "F", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Enable Levelup Reward
            row++;
            ControlPanelelements.Add(XPUILabel($"Enable Level Up Reward:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpEcon.econlevelup}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econlevelup 0 true econ", row, height, fontsize, "0.0 1.0 0.0 0", "T", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econlevelup 0 false econ", row, height, fontsize, "1.0 0.0 0.0 0", "F", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Enable Leveldown Reduction
            row++;
            ControlPanelelements.Add(XPUILabel($"Enable Level Down Reduction:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpEcon.econleveldown}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econleveldown 0 true econ", row, height, fontsize, "0.0 1.0 0.0 0", "T", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econleveldown 0 false econ", row, height, fontsize, "1.0 0.0 0.0 0", "F", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Level Up Reward Amount
            row++;
            ControlPanelelements.Add(XPUILabel($"Level Up Reward Amount:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpEcon.econlevelreward}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econlevelreward {config.xpEcon.econlevelreward + 10} false econ", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econlevelreward {config.xpEcon.econlevelreward - 10} false econ", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Level Down Reduction
            row++;
            ControlPanelelements.Add(XPUILabel($"Level Loss Reduction:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpEcon.econlevelreduction}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econlevelreduction {config.xpEcon.econlevelreduction + 5} false econ", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econlevelreduction {config.xpEcon.econlevelreduction - 5} false econ", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Enable ResetStats Cost
            row++;
            ControlPanelelements.Add(XPUILabel($"Enable Reset Stats Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpEcon.econresetstats}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econresetstats 0 true econ", row, height, fontsize, "0.0 1.0 0.0 0", "T", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econresetstats 0 false econ", row, height, fontsize, "1.0 0.0 0.0 0", "F", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Enable ResetSkill Cost
            row++;
            ControlPanelelements.Add(XPUILabel($"Enable Reset Skills Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpEcon.econresetskills}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econresetskills 0 true econ", row, height, fontsize, "0.0 1.0 0.0 0", "T", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econresetskills 0 false econ", row, height, fontsize, "1.0 0.0 0.0 0", "F", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Enable RespecStats Cost
            row++;
            ControlPanelelements.Add(XPUILabel($"Enable Respec Stat Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpEcon.econresetstat}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econresetstat 0 true econ", row, height, fontsize, "0.0 1.0 0.0 0", "T", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econresetstat 0 false econ", row, height, fontsize, "1.0 0.0 0.0 0", "F", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Enable RespecSkill Cost
            row++;
            ControlPanelelements.Add(XPUILabel($"Enable Respec Skill Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpEcon.econresetskill}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econresetskill 0 true econ", row, height, fontsize, "0.0 1.0 0.0 0", "T", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econresetskill 0 false econ", row, height, fontsize, "1.0 0.0 0.0 0", "F", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Reset Stats Cost
            row++;
            ControlPanelelements.Add(XPUILabel($"Reset Stats Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpEcon.econresetstatscost}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econresetstatscost {config.xpEcon.econresetstatscost + 5} false econ", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econresetstatscost {config.xpEcon.econresetstatscost - 5} false econ", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Reset Skills Cost
            row++;
            ControlPanelelements.Add(XPUILabel($"Reset Skills Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpEcon.econresetskillscost}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econresetskillscost {config.xpEcon.econresetskillscost + 5} false econ", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econresetskillscost {config.xpEcon.econresetskillscost - 5} false econ", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Respec Stat Cost
            row++;
            ControlPanelelements.Add(XPUILabel($"Respec Stat Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpEcon.econresetstatcost}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econresetstatcost {config.xpEcon.econresetstatcost + 5} false econ", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econresetstatcost {config.xpEcon.econresetstatcost - 5} false econ", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Respec Skill Cost
            row++;
            ControlPanelelements.Add(XPUILabel($"Respec Skill Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpEcon.econresetskillcost}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econresetskillcost {config.xpEcon.econresetskillcost + 5} false econ", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econresetskillcost {config.xpEcon.econresetskillcost - 5} false econ", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Enable Stat Level Cost
            row++;
            ControlPanelelements.Add(XPUILabel($"Enable Stat Level Up Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpEcon.econstatlevelcost}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econstatlevelcost 0 true econ", row, height, fontsize, "0.0 1.0 0.0 0", "T", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econstatlevelcost 0 false econ", row, height, fontsize, "1.0 0.0 0.0 0", "F", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Stat Level Up Multiplier
            row++;
            ControlPanelelements.Add(XPUILabel($"Stat Cost Multiplier:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpEcon.econstatlevelcostmultiplier}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econstatlevelcostmultiplier {config.xpEcon.econstatlevelcostmultiplier + 1} false econ", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econstatlevelcostmultiplier {config.xpEcon.econstatlevelcostmultiplier - 1} false econ", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Stat Costs
            row++;
            ControlPanelelements.Add(XPUILabel($"Mentality Base Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpEcon.econmentality}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econmentality {config.xpEcon.econmentality + 5} false econ", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econmentality {config.xpEcon.econmentality - 5} false econ", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            row++;
            ControlPanelelements.Add(XPUILabel($"Dexterity Base Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpEcon.econdexterity}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econdexterity {config.xpEcon.econdexterity + 5} false econ", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econdexterity {config.xpEcon.econdexterity - 5} false econ", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            row++;
            ControlPanelelements.Add(XPUILabel($"Might Base Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpEcon.econmight}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econmight {config.xpEcon.econmight + 5} false econ", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econmight {config.xpEcon.econmight - 5} false econ", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            row++;
            ControlPanelelements.Add(XPUILabel($"Captaincy Base Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpEcon.econcaptaincy}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econcaptaincy {config.xpEcon.econcaptaincy + 5} false econ", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econcaptaincy {config.xpEcon.econcaptaincy - 5} false econ", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            row++;
            ControlPanelelements.Add(XPUILabel($"Weaponry Base Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpEcon.econweaponry}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econweaponry {config.xpEcon.econweaponry + 5} false econ", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econweaponry {config.xpEcon.econweaponry - 5} false econ", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            row++;
            ControlPanelelements.Add(XPUILabel($"Ninjary Base Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpEcon.econninjary}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econninjary {config.xpEcon.econninjary + 5} false econ", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econninjary {config.xpEcon.econninjary - 5} false econ", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Enable Skill Level Cost
            row++;
            ControlPanelelements.Add(XPUILabel($"Enable Skill Level Up Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpEcon.econskilllevelcost}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econskilllevelcost 0 true econ", row, height, fontsize, "0.0 1.0 0.0 0", "T", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econskilllevelcost 0 false econ", row, height, fontsize, "1.0 0.0 0.0 0", "F", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Skill Level Up Multiplier
            row++;
            ControlPanelelements.Add(XPUILabel($"Skill Cost Multiplier:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpEcon.econskilllevelcostmultiplier}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econskilllevelcostmultiplier {config.xpEcon.econskilllevelcostmultiplier + 1} false econ", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econskilllevelcostmultiplier {config.xpEcon.econskilllevelcostmultiplier - 1} false econ", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Skill Costs
            row++;
            ControlPanelelements.Add(XPUILabel($"WoodCutter Base Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpEcon.econwoodcutter}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econwoodcutter {config.xpEcon.econwoodcutter + 5} false econ", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econwoodcutter {config.xpEcon.econwoodcutter - 5} false econ", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            row++;
            ControlPanelelements.Add(XPUILabel($"Smithy Base Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpEcon.econsmithy}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econsmithy {config.xpEcon.econsmithy + 5} false econ", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econsmithy {config.xpEcon.econsmithy - 5} false econ", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            row++;
            ControlPanelelements.Add(XPUILabel($"Miner Base Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpEcon.econminer}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econminer {config.xpEcon.econminer + 5} false econ", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econminer {config.xpEcon.econminer - 5} false econ", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            row++;
            ControlPanelelements.Add(XPUILabel($"Forager Base Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpEcon.econforager}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econforager {config.xpEcon.econforager + 5} false econ", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econforager {config.xpEcon.econforager - 5} false econ", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            row++;
            ControlPanelelements.Add(XPUILabel($"Hunter Base Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpEcon.econhunter}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econhunter {config.xpEcon.econhunter + 5} false econ", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econhunter {config.xpEcon.econhunter - 5} false econ", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            row++;
            ControlPanelelements.Add(XPUILabel($"Fisher Base Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpEcon.econfisher}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econfisher {config.xpEcon.econfisher + 5} false econ", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econfisher {config.xpEcon.econfisher - 5} false econ", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            row++;
            ControlPanelelements.Add(XPUILabel($"Crafter Base Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpEcon.econcrafter}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econcrafter {config.xpEcon.econcrafter + 5} false econ", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econcrafter {config.xpEcon.econcrafter - 5} false econ", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            row++;
            ControlPanelelements.Add(XPUILabel($"Framer Base Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpEcon.econframer}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econframer {config.xpEcon.econframer + 5} false econ", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econframer {config.xpEcon.econframer - 5} false econ", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            row++;
            ControlPanelelements.Add(XPUILabel($"Medic Base Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpEcon.econmedic}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econmedic {config.xpEcon.econmedic + 5} false econ", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econmedic {config.xpEcon.econmedic - 5} false econ", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            row++;
            ControlPanelelements.Add(XPUILabel($"Scavenger Base Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpEcon.econscavenger}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econscavenger {config.xpEcon.econscavenger + 5} false econ", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econscavenger {config.xpEcon.econscavenger - 5} false econ", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            row++;
            ControlPanelelements.Add(XPUILabel($"Electrician Base Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpEcon.econelectrician}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econelectrician {config.xpEcon.econelectrician + 5} false econ", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econelectrician {config.xpEcon.econelectrician - 5} false econ", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            row++;
            ControlPanelelements.Add(XPUILabel($"Demolitionist Base Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpEcon.econdemolitionist}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econdemolitionist {config.xpEcon.econdemolitionist + 5} false econ", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econdemolitionist {config.xpEcon.econdemolitionist - 5} false econ", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            row++;
            ControlPanelelements.Add(XPUILabel($"Tamer Base Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.xpEcon.econtamer}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econtamer {config.xpEcon.econtamer + 5} false econ", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods econtamer {config.xpEcon.econtamer - 5} false econ", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            #endregion
            CuiHelper.AddUi(player, ControlPanelelements);
        }
        private void OtherMods_ServerRewards(BasePlayer player)
        {
            var ControlPanelelements = new CuiElementContainer();
            var height = 0.023f;
            int buttonsize = 12;
            int fontsize = 11;
            int row = 5;
            ControlPanelelements.Add(XPUIPanel("0.16 0.0", "1 1", "0 0 0 .7"), XPerienceAdminPanelMain, XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton("xp.admin othermods main", 2, 0.030f, 15, "0 0 0 .7", $"<-- Back To Mod List", "0.02", "0.15", TextAnchor.MiddleCenter), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"[Server Rewards Settings] (Requires Server Rewards plugin)", 3, 0.035f, TextAnchor.MiddleLeft, 18, "0.01", "1", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            #region ServerRewards
            // Enable Level Up Reward
            row++;
            ControlPanelelements.Add(XPUILabel($"Enable Level Up Reward:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.sRewards.srewardlevelup}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardlevelup 0 true srewards", row, height, fontsize, "0.0 1.0 0.0 0", "T", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardlevelup 0 false srewards", row, height, fontsize, "1.0 0.0 0.0 0", "F", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Enable Level Down Reduction
            row++;
            ControlPanelelements.Add(XPUILabel($"Enable Level Down Reduction:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.sRewards.srewardleveldown}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardleveldown 0 true srewards", row, height, fontsize, "0.0 1.0 0.0 0", "T", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardleveldown 0 false srewards", row, height, fontsize, "1.0 0.0 0.0 0", "F", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Level Up Amount
            row++;
            ControlPanelelements.Add(XPUILabel($"Level Up Amount:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.sRewards.srewardlevelupamt}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardlevelupamt {config.sRewards.srewardlevelupamt + 1} false srewards", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardlevelupamt {config.sRewards.srewardlevelupamt - 1} false srewards", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Level Down Amount
            row++;
            ControlPanelelements.Add(XPUILabel($"Level Down Amount:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.sRewards.srewardleveldownamt}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardleveldownamt {config.sRewards.srewardleveldownamt + 1} false srewards", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardleveldownamt {config.sRewards.srewardleveldownamt - 1} false srewards", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Enable ResetStats Cost
            row++;
            ControlPanelelements.Add(XPUILabel($"Enable Reset Stats Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.sRewards.srewardresetstats}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardresetstats 0 true srewards", row, height, fontsize, "0.0 1.0 0.0 0", "T", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardresetstats 0 false srewards", row, height, fontsize, "1.0 0.0 0.0 0", "F", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Enable ResetSkill Cost
            row++;
            ControlPanelelements.Add(XPUILabel($"Enable Reset Skills Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.sRewards.srewardresetskills}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardresetskills 0 true srewards", row, height, fontsize, "0.0 1.0 0.0 0", "T", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardresetskills 0 false srewards", row, height, fontsize, "1.0 0.0 0.0 0", "F", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Enable RespecStats Cost
            row++;
            ControlPanelelements.Add(XPUILabel($"Enable Respec Stat Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.sRewards.srewardresetstat}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardresetstat 0 true srewards", row, height, fontsize, "0.0 1.0 0.0 0", "T", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardresetstat 0 false srewards", row, height, fontsize, "1.0 0.0 0.0 0", "F", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Enable RespecSkill Cost
            row++;
            ControlPanelelements.Add(XPUILabel($"Enable Respec Skill Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.sRewards.srewardresetskill}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardresetskill 0 true srewards", row, height, fontsize, "0.0 1.0 0.0 0", "T", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardresetskill 0 false srewards", row, height, fontsize, "1.0 0.0 0.0 0", "F", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Reset Stats Cost
            row++;
            ControlPanelelements.Add(XPUILabel($"Reset Stats Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.sRewards.srewardresetstatscost}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardresetstatscost {config.sRewards.srewardresetstatscost + 5} false srewards", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardresetstatscost {config.sRewards.srewardresetstatscost - 5} false srewards", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Reset Skills Cost
            row++;
            ControlPanelelements.Add(XPUILabel($"Reset Skills Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.sRewards.srewardresetskillscost}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardresetskillscost {config.sRewards.srewardresetskillscost + 5} false srewards", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardresetskillscost {config.sRewards.srewardresetskillscost - 5} false srewards", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Respec Stats Cost
            row++;
            ControlPanelelements.Add(XPUILabel($"Respec Stat Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.sRewards.srewardresetstatcost}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardresetstatcost {config.sRewards.srewardresetstatcost + 5} false srewards", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardresetstatcost {config.sRewards.srewardresetstatcost - 5} false srewards", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Respec Skills Cost
            row++;
            ControlPanelelements.Add(XPUILabel($"Respec Skill Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.sRewards.srewardresetskillcost}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardresetskillcost {config.sRewards.srewardresetskillcost + 5} false srewards", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardresetskillcost {config.sRewards.srewardresetskillcost - 5} false srewards", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Enable Stat Level Cost
            row++;
            ControlPanelelements.Add(XPUILabel($"Enable Stat Level Up Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.sRewards.srewardstatlevelcost}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardstatlevelcost 0 true srewards", row, height, fontsize, "0.0 1.0 0.0 0", "T", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardstatlevelcost 0 false srewards", row, height, fontsize, "1.0 0.0 0.0 0", "F", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Stat Level Up Multiplier
            row++;
            ControlPanelelements.Add(XPUILabel($"Stat Cost Multiplier:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.sRewards.srewardstatlevelcostmultiplier}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardstatlevelcostmultiplier {config.sRewards.srewardstatlevelcostmultiplier + 1} false srewards", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardstatlevelcostmultiplier {config.sRewards.srewardstatlevelcostmultiplier - 1} false srewards", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Stat Costs
            row++;
            ControlPanelelements.Add(XPUILabel($"Mentality Base Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.sRewards.srewardmentality}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardmentality {config.sRewards.srewardmentality + 5} false srewards", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardmentality {config.sRewards.srewardmentality - 5} false srewards", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            row++;
            ControlPanelelements.Add(XPUILabel($"Dexterity Base Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.sRewards.srewarddexterity}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewarddexterity {config.sRewards.srewarddexterity + 5} false srewards", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewarddexterity {config.sRewards.srewarddexterity - 5} false srewards", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            row++;
            ControlPanelelements.Add(XPUILabel($"Might Base Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.sRewards.srewardmight}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardmight {config.sRewards.srewardmight + 5} false srewards", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardmight {config.sRewards.srewardmight - 5} false srewards", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            row++;
            ControlPanelelements.Add(XPUILabel($"Captaincy Base Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.sRewards.srewardcaptaincy}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardcaptaincy {config.sRewards.srewardcaptaincy + 5} false srewards", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardcaptaincy {config.sRewards.srewardcaptaincy - 5} false srewards", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            row++;
            ControlPanelelements.Add(XPUILabel($"Weaponry Base Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.sRewards.srewardweaponry}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardweaponry {config.sRewards.srewardweaponry + 5} false srewards", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardweaponry {config.sRewards.srewardweaponry - 5} false srewards", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            row++;
            ControlPanelelements.Add(XPUILabel($"Ninjary Base Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.sRewards.srewardninjary}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardninjary {config.sRewards.srewardninjary + 5} false srewards", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardninjary {config.sRewards.srewardninjary - 5} false srewards", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Enable Skill Level Cost
            row++;
            ControlPanelelements.Add(XPUILabel($"Enable Skill Level Up Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.sRewards.srewardskilllevelcost}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardskilllevelcost 0 true srewards", row, height, fontsize, "0.0 1.0 0.0 0", "T", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardskilllevelcost 0 false srewards", row, height, fontsize, "1.0 0.0 0.0 0", "F", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Skill Level Up Multiplier
            row++;
            ControlPanelelements.Add(XPUILabel($"Skill Cost Multiplier:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.sRewards.srewardskilllevelcostmultiplier}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardskilllevelcostmultiplier {config.sRewards.srewardskilllevelcostmultiplier + 1} false srewards", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardskilllevelcostmultiplier {config.sRewards.srewardskilllevelcostmultiplier - 1} false srewards", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Skill Costs
            row++;
            ControlPanelelements.Add(XPUILabel($"WoodCutter Base Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.sRewards.srewardwoodcutter}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardwoodcutter {config.sRewards.srewardwoodcutter + 5} false srewards", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardwoodcutter {config.sRewards.srewardwoodcutter - 5} false srewards", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            row++;
            ControlPanelelements.Add(XPUILabel($"Smithy Base Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.sRewards.srewardsmithy}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardsmithy {config.sRewards.srewardsmithy + 5} false srewards", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardsmithy {config.sRewards.srewardsmithy - 5} false srewards", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            row++;
            ControlPanelelements.Add(XPUILabel($"Miner Base Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.sRewards.srewardminer}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardminer {config.sRewards.srewardminer + 5} false srewards", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardminer {config.sRewards.srewardminer - 5} false srewards", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            row++;
            ControlPanelelements.Add(XPUILabel($"Forager Base Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.sRewards.srewardforager}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardforager {config.sRewards.srewardforager + 5} false srewards", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardforager {config.sRewards.srewardforager - 5} false srewards", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            row++;
            ControlPanelelements.Add(XPUILabel($"Hunter Base Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.sRewards.srewardhunter}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardhunter {config.sRewards.srewardhunter + 5} false srewards", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardhunter {config.sRewards.srewardhunter - 5} false srewards", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            row++;
            ControlPanelelements.Add(XPUILabel($"Fisher Base Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.sRewards.srewardfisher}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardfisher {config.sRewards.srewardfisher + 5} false srewards", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardfisher {config.sRewards.srewardfisher - 5} false srewards", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            row++;
            ControlPanelelements.Add(XPUILabel($"Crafter Base Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.sRewards.srewardcrafter}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardcrafter {config.sRewards.srewardcrafter + 5} false srewards", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardcrafter {config.sRewards.srewardcrafter - 5} false srewards", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            row++;
            ControlPanelelements.Add(XPUILabel($"Framer Base Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.sRewards.srewardframer}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardframer {config.sRewards.srewardframer + 5} false srewards", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardframer {config.sRewards.srewardframer - 5} false srewards", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            row++;
            ControlPanelelements.Add(XPUILabel($"Medic Base Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.sRewards.srewardmedic}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardmedic {config.sRewards.srewardmedic + 5} false srewards", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardmedic {config.sRewards.srewardmedic - 5} false srewards", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            row++;
            ControlPanelelements.Add(XPUILabel($"Scavenger Base Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.sRewards.srewardscavenger}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardscavenger {config.sRewards.srewardscavenger + 5} false srewards", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardscavenger {config.sRewards.srewardscavenger - 5} false srewards", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            row++;
            ControlPanelelements.Add(XPUILabel($"Electrician Base Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.sRewards.srewardelectrician}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardelectrician {config.sRewards.srewardelectrician + 5} false srewards", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardelectrician {config.sRewards.srewardelectrician - 5} false srewards", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            row++;
            ControlPanelelements.Add(XPUILabel($"Demolitionist Base Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.sRewards.srewardemolitionist}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardemolitionist {config.sRewards.srewardemolitionist + 5} false srewards", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardemolitionist {config.sRewards.srewardemolitionist - 5} false srewards", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            row++;
            ControlPanelelements.Add(XPUILabel($"Tamer Base Cost:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.sRewards.srewardtamer}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardtamer {config.sRewards.srewardtamer + 5} false srewards", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods srewardtamer {config.sRewards.srewardtamer - 5} false srewards", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.28", "0.29", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            #endregion
            CuiHelper.AddUi(player, ControlPanelelements);
        }
        private void OtherMods_Pets(BasePlayer player)
        {
            var ControlPanelelements = new CuiElementContainer();
            var height = 0.023f;
            int buttonsize = 12;
            int fontsize = 11;
            int row = 5;
            ControlPanelelements.Add(XPUIPanel("0.16 0.0", "1 1", "0 0 0 .7"), XPerienceAdminPanelMain, XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton("xp.admin othermods main", 2, 0.030f, 15, "0 0 0 .7", $"<-- Back To Mod List", "0.02", "0.15", TextAnchor.MiddleCenter), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"[Tamer Settings] (Requires Personal Animals plugin)", 3, 0.035f, TextAnchor.MiddleLeft, 18, "0.01", "1", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            #region Tamer
            row++;
            // Enable / Disable
            row++;
            ControlPanelelements.Add(XPUILabel($"Enable Pets:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.tamer.enabletame}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods tamerenable 0 true pets", row, height, fontsize, "0.0 1.0 0.0 0", "T", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods tamerenable 0 false pets", row, height, fontsize, "1.0 0.0 0.0 0", "F", "0.27", "0.28", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Max Level
            row++;
            ControlPanelelements.Add(XPUILabel($"Max Level:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.tamer.maxlvl}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods tamermaxlevel {config.tamer.maxlvl + 1} false pets", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods tamermaxlevel {config.tamer.maxlvl - 1} false pets", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.27", "0.28", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Max Cost to Start
            row++;
            ControlPanelelements.Add(XPUILabel($"Point Cost To Start:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.tamer.pointcoststart}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods tamercost {config.tamer.pointcoststart + 1} false pets", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods tamercost {config.tamer.pointcoststart - 1} false pets", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.27", "0.28", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Cost Multiplier
            row++;
            ControlPanelelements.Add(XPUILabel($"Cost Multiplier:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.tamer.costmultiplier}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods tamercostmultiplier {config.tamer.costmultiplier + 1} false pets", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods tamercostmultiplier {config.tamer.costmultiplier - 1} false pets", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.27", "0.28", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Enable Chicken
            row++;
            ControlPanelelements.Add(XPUILabel($"Chicken:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.tamer.tamechicken}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods tamerchicken 0 true pets", row, height, fontsize, "0.0 1.0 0.0 0", "T", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods tamerchicken 0 false pets", row, height, fontsize, "1.0 0.0 0.0 0", "F", "0.27", "0.28", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Enable Boar
            row++;
            ControlPanelelements.Add(XPUILabel($"Boar:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.tamer.tameboar}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods tamerboar 0 true pets", row, height, fontsize, "0.0 1.0 0.0 0", "T", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods tamerboar 0 false pets", row, height, fontsize, "1.0 0.0 0.0 0", "F", "0.27", "0.28", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Enable Stag
            row++;
            ControlPanelelements.Add(XPUILabel($"Stag:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.tamer.tamestag}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods tamerstag 0 true pets", row, height, fontsize, "0.0 1.0 0.0 0", "T", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods tamerstag 0 false pets", row, height, fontsize, "1.0 0.0 0.0 0", "F", "0.27", "0.28", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Enable Wolf
            row++;
            ControlPanelelements.Add(XPUILabel($"Wolf:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.tamer.tamewolf}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods tamerwolf 0 true pets", row, height, fontsize, "0.0 1.0 0.0 0", "T", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods tamerwolf 0 false pets", row, height, fontsize, "1.0 0.0 0.0 0", "F", "0.27", "0.28", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Enable Bear
            row++;
            ControlPanelelements.Add(XPUILabel($"Bear:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.tamer.tamebear}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods tamerbear 0 true pets", row, height, fontsize, "0.0 1.0 0.0 0", "T", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods tamerbear 0 false pets", row, height, fontsize, "1.0 0.0 0.0 0", "F", "0.27", "0.28", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Enable PolarBear
            row++;
            ControlPanelelements.Add(XPUILabel($"PolarBear:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.tamer.tamepolarbear}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods tamerpolarbear 0 true pets", row, height, fontsize, "0.0 1.0 0.0 0", "T", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods tamerpolarbear 0 false pets", row, height, fontsize, "1.0 0.0 0.0 0", "F", "0.27", "0.28", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Chicken Level
            row++;
            ControlPanelelements.Add(XPUILabel($"Chicken Level:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.tamer.chickenlevel}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods tamerchickenlevel {config.tamer.chickenlevel + 1} false pets", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods tamerchickenlevel {config.tamer.chickenlevel - 1} false pets", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.27", "0.28", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Boar Level
            row++;
            ControlPanelelements.Add(XPUILabel($"Boar Level:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.tamer.boarlevel}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods tamerboarlevel {config.tamer.boarlevel + 1} false pets", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods tamerboarlevel {config.tamer.boarlevel - 1} false pets", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.27", "0.28", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Stag Level
            row++;
            ControlPanelelements.Add(XPUILabel($"Stag Level:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.tamer.staglevel}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods tamerstaglevel {config.tamer.staglevel + 1} false pets", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods tamerstaglevel {config.tamer.staglevel - 1} false pets", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.27", "0.28", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Wolf Level
            row++;
            ControlPanelelements.Add(XPUILabel($"Wolf Level:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.tamer.wolflevel}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods tamerwolflevel {config.tamer.wolflevel + 1} false pets", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods tamerwolflevel {config.tamer.wolflevel - 1} false pets", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.27", "0.28", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Bear Level
            row++;
            ControlPanelelements.Add(XPUILabel($"Bear Level:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.tamer.bearlevel}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods tamerbearlevel {config.tamer.bearlevel + 1} false pets", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods tamerbearlevel {config.tamer.bearlevel - 1} false pets", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.27", "0.28", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            // Polar Bear Level
            row++;
            ControlPanelelements.Add(XPUILabel($"Polar Bear Level:", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUILabel($"|       {config.tamer.polarbearlevel}", row, height, TextAnchor.MiddleLeft, fontsize, "0.20", "0.25", "1 1 1 1"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods tamerpolarbearlevel {config.tamer.polarbearlevel + 1} false pets", row, height, buttonsize, "0.0 1.0 0.0 0", "⇧", "0.26", "0.27", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            ControlPanelelements.Add(XPUIButton($"xp.config othermods tamerpolarbearlevel {config.tamer.polarbearlevel - 1} false pets", row, height, buttonsize, "1.0 0.0 0.0 0", "⇩", "0.27", "0.28", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelOtherMods);
            #endregion       
            CuiHelper.AddUi(player, ControlPanelelements);
        }
        private void OtherMods_Backpacks(BasePlayer player, string page = "main", int option = 0)
        {
            var ControlPanelelements = new CuiElementContainer();
            #region Layout
            var height = 0.023f;
            int fontsize = 11;
            int row = 5;
            double width = .006;
            string lableL = ".01";
            string lableR = ".20";
            string valueL = ".20";
            string valueR = ".29";
            string valuePL = ".30";
            string valuePR = ".40";
            string delL = ".02";
            string delR = ".03";
            int i = 0;
            #endregion
            ControlPanelelements.Add(XPUIPanel("0.16 0.0", "1 1", "0 0 0 .7"), XPerienceAdminPanelMain, XPerienceAdminPanelOtherMods);
            switch(page)
            {
                case "main":
                    ControlPanelelements.Add(XPUIButton("xp.admin othermods main", 2, 0.030f, 15, "0 0 0 .7", $"<-- Back To Mod List", "0.02", "0.15", TextAnchor.MiddleCenter), XPerienceAdminPanelOtherMods);
                    ControlPanelelements.Add(XPUILabel($"[Backpacks Settings] (Requires Backpacks plugin)", 3, 0.035f, TextAnchor.MiddleLeft, 18, "0.01", "1", "1 1 1 1"), XPerienceAdminPanelOtherMods);
                    row++;
                    // Enable
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Enable Backpacks:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelOtherMods);
                    ControlPanelelements.Add(XPToggle($"xp.config backpacktoggle main", row, height, config.backpacksmod.enablebackpacks, valueL, width), XPerienceAdminPanelOtherMods);
                    // Stat or Skill
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Stat or Skill Control:", row, height, TextAnchor.MiddleLeft, fontsize, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelOtherMods);
                    ControlPanelelements.Add(XPUILabel($"{XPLang($"{config.backpacksmod.statorskill}")}", row, height, TextAnchor.MiddleLeft, fontsize, valueL, valueR, "1 1 1 1"), XPerienceAdminPanelOtherMods);
                    ControlPanelelements.Add(XPUIButton($"xp.admin backpackselection {config.backpacksmod.statorskill} open", row, height, 12, "0 1 0 .25", $"Select Stat/Skill", valuePL, valuePR, TextAnchor.MiddleCenter), XPerienceAdminPanelOtherMods);
                    //List of Options
                    row++;
                    row++;
                    ControlPanelelements.Add(XPUIButton($"xp.admin newbackpack", row, height, 12, "0 1 0 .25", "Add New Backpack Level", ".01", ".20", TextAnchor.MiddleCenter, "1 1 1 1"), XPerienceAdminPanelOtherMods);
                    row++;
                    row++;
                    ControlPanelelements.Add(XPUILabel($"| Delete |", row, height, TextAnchor.MiddleCenter, fontsize, "0.01", "0.05", "1 1 1 1"), XPerienceAdminPanelOtherMods);
                    ControlPanelelements.Add(XPUILabel($"| Edit |", row, height, TextAnchor.MiddleCenter, fontsize, "0.06", "0.10", "1 1 1 1"), XPerienceAdminPanelOtherMods);
                    ControlPanelelements.Add(XPUILabel($"| Level | Size |", row, height, TextAnchor.MiddleCenter, fontsize, "0.10", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
                    var backpacklist = config.backpacksmod.BackPackSlots;
                    if (backpacklist == null)
                    {
                        row++;
                        ControlPanelelements.Add(XPUILabel($"No Backpack options created", row, height, TextAnchor.MiddleLeft, fontsize, "0.01", "0.20", "1 1 1 1"), XPerienceAdminPanelOtherMods);
                    }
                    else
                    {
                        foreach (var optionlist in backpacklist)
                        {
                            row++;
                            i++;
                            ControlPanelelements.Add(XPUIButton($"xp.admin deletebackpack {optionlist.Key}", row, height, fontsize, "0 0 0 .25", $"ⓧ", ".02", ".03", TextAnchor.MiddleCenter, "1 0 0 1"), XPerienceAdminPanelOtherMods);
                            ControlPanelelements.Add(XPUIButton($"xp.admin editbackpack {optionlist.Key}", row, height, fontsize, "0 0 0 .25", $"≡", ".07", ".08", TextAnchor.MiddleCenter, "1 1 0 1"), XPerienceAdminPanelOtherMods);
                            ControlPanelelements.Add(XPUIButton($"xp.admin editbackpack {optionlist.Key}", row, height, fontsize, "0 0 0 .25", $"| {optionlist.Value.level}  |  {optionlist.Value.slots} |", "0.10", "0.20", TextAnchor.MiddleCenter, "1 1 1 1"), XPerienceAdminPanelOtherMods);
                        }
                    }
                    break;
                case "edit":
                    ControlPanelelements.Add(XPUILabel($"[Create/Edit Backpack Option]", 3, 0.035f, TextAnchor.MiddleLeft, 18, "0.01", "1", "1 1 1 1"), XPerienceAdminPanelOtherMods);
                    var editbackpack = config.backpacksmod.BackPackSlots[option];
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Level:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelOtherMods);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelOtherMods);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelOtherMods, $"xp.config backpacks edit backpacklevel {option} {UserInputText}", row, height, 12, $"{editbackpack.level}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row++;
                    ControlPanelelements.Add(XPUILabel($"Slots:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelOtherMods);
                    ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelOtherMods);
                    ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelOtherMods, $"xp.config backpacks edit backpackslots {option} {UserInputText}", row, height, 12, $"{editbackpack.slots}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
                    row++;
                    ControlPanelelements.Add(XPUIButton($"xp.admin othermods backpacks", row, height, 12, "0 1 0 .25", "Return", ".01", ".11", TextAnchor.MiddleCenter, "1 1 1 1"), XPerienceAdminPanelOtherMods);
                    break;
            }
            CuiHelper.AddUi(player, ControlPanelelements);
        }
        private void OtherMods_BackpacksSelection(BasePlayer player, string selected)
        {
            var height = 0.025f;
            int fontsize = 10;
            int row = 2;
            var ControlPanelelements = new CuiElementContainer();
            ControlPanelelements.Add(XPUIPanel(".5 .25", ".70 .90", "0 0 0 1"), XPerienceAdminPanelMain, XPerienceAdminPanelBackpackSelection);
            ControlPanelelements.Add(XPUILabel($"Select Stat or Skill:", row, height, TextAnchor.MiddleCenter, fontsize, ".01", ".99", "1 1 1 1"), XPerienceAdminPanelBackpackSelection);
            List<string> options = new List<string> 
            { 
                "mentality",
                "dexterity",
                "might",
                "weaponry",
                "ninjary",
                "captaincy",
                "woodcutter",
                "smithy",
                "miner",
                "fisher",
                "forager",
                "hunter",
                "crafter",
                "framer",
                "medic",
                "scavenger",
                "electrician",
                "demolitionist"
            };
            for (int i = 0; i < options.Count; i++)
            {
                row++;
                row++;
                ControlPanelelements.Add(XPUIButton($"xp.admin backpackselection {options[i]}", row, height, fontsize, "0 1 0 .25", $"{XPLang($"{options[i]}")}", ".25", ".75", TextAnchor.MiddleCenter), XPerienceAdminPanelBackpackSelection);
            }
            row++;
            row++;
            ControlPanelelements.Add(XPUIButton($"xp.admin backpackselection close", row, height, fontsize, "1 0 0 .25", $"Close", ".25", ".75", TextAnchor.MiddleCenter), XPerienceAdminPanelBackpackSelection);
            CuiHelper.AddUi(player, ControlPanelelements);
        }
        #endregion
        private void AdminSoundEffectsPage(BasePlayer player)
        {
            var ControlPanelelements = new CuiElementContainer();
            var height = 0.026f;
            double width = .006;
            int row = 4;
            string lableL = "0.01";
            string lableR = "0.20";
            string valueL = "0.20";
            string valueR = "0.60";
            // Page Title
            ControlPanelelements.Add(XPUIPanel("0.16 0.0", "1 1", "0 0 0 .7"), XPerienceAdminPanelMain, XPerienceAdminPanelSoundEffects);
            ControlPanelelements.Add(XPUILabel($"{XPLang("adminmenu_021", player.UserIDString)} - Sound effect path must be entered in config manually", 1, 0.090f, TextAnchor.MiddleLeft, 18, "0.01", "1", "1 1 1 1"), XPerienceAdminPanelSoundEffects);
            #region Enable/Disable
            ControlPanelelements.Add(XPUILabel($"[Sound Effect Settings]", row, height, TextAnchor.MiddleLeft, 15, "0.01", "0.99", "1 1 1 1"), XPerienceAdminPanelSoundEffects);
            row++;
            ControlPanelelements.Add(XPUILabel($"Enable Levelup Effect:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSoundEffects);
            ControlPanelelements.Add(XPToggle($"xp.config soundeffects levelup", row, height, config.soundEffects.levelup, valueL, width), XPerienceAdminPanelSoundEffects);
            row++;
            ControlPanelelements.Add(XPUILabel($"Enable Leveldown Effect:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSoundEffects);
            ControlPanelelements.Add(XPToggle($"xp.config soundeffects leveldown", row, height, config.soundEffects.leveldown, valueL, width), XPerienceAdminPanelSoundEffects);
            row++;
            ControlPanelelements.Add(XPUILabel($"Enable Rankup Effect:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSoundEffects);
            ControlPanelelements.Add(XPToggle($"xp.config soundeffects rankup", row, height, config.soundEffects.rankup, valueL, width), XPerienceAdminPanelSoundEffects);
            row++;
            ControlPanelelements.Add(XPUILabel($"Enable Statup Effect:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSoundEffects);
            ControlPanelelements.Add(XPToggle($"xp.config soundeffects statup", row, height, config.soundEffects.statup, valueL, width), XPerienceAdminPanelSoundEffects);
            row++;
            ControlPanelelements.Add(XPUILabel($"Enable Skillup Effect:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSoundEffects);
            ControlPanelelements.Add(XPToggle($"xp.config soundeffects skillup", row, height, config.soundEffects.skillup, valueL, width), XPerienceAdminPanelSoundEffects);
            row++;
            ControlPanelelements.Add(XPUILabel($"Enable Stat Reset Effect:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSoundEffects);
            ControlPanelelements.Add(XPToggle($"xp.config soundeffects statreset", row, height, config.soundEffects.statreset, valueL, width), XPerienceAdminPanelSoundEffects);
            row++;
            ControlPanelelements.Add(XPUILabel($"Enable Skill Reset Effect:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSoundEffects);
            ControlPanelelements.Add(XPToggle($"xp.config soundeffects skillreset", row, height, config.soundEffects.skillreset, valueL, width), XPerienceAdminPanelSoundEffects);
            row++;
            ControlPanelelements.Add(XPUILabel($"Enable Scavenger Loot Effect:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSoundEffects);
            ControlPanelelements.Add(XPToggle($"xp.config soundeffects scavengerloot", row, height, config.soundEffects.scavengerloot, valueL, width), XPerienceAdminPanelSoundEffects);
            row++;
            ControlPanelelements.Add(XPUILabel($"Enable Forager Item Drop Effect:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSoundEffects);
            ControlPanelelements.Add(XPToggle($"xp.config soundeffects foragerloot", row, height, config.soundEffects.foragerloot, valueL, width), XPerienceAdminPanelSoundEffects);
            row++;
            row++;
            #endregion
            #region Effects Paths
            ControlPanelelements.Add(XPUILabel($"[Sound Effect Paths]", row, height, TextAnchor.MiddleLeft, 15, "0.01", "0.99", "1 1 1 1"), XPerienceAdminPanelSoundEffects);
            row++;
            ControlPanelelements.Add(XPUILabel($"(Full list of prefabs can be found at: https://www.corrosionhour.com/rust-prefab-list/)", row, height, TextAnchor.MiddleLeft, 10, "0.01", "0.99", "1 1 1 1"), XPerienceAdminPanelSoundEffects);
            row++;
            row++;
            ControlPanelelements.Add(XPUILabel($"Levelup Effect:", row, height, TextAnchor.MiddleLeft, 12, "0.01", "0.15", "1 1 1 1"), XPerienceAdminPanelSoundEffects);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSoundEffects);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSoundEffects, $"xp.config soundeffects levelupeffect {UserInputText}", row, height, 12, $"{config.soundEffects.levelupeffect}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            row++;
            ControlPanelelements.Add(XPUILabel($"Leveldown Effect:", row, height, TextAnchor.MiddleLeft, 12, "0.01", "0.15", "1 1 1 1"), XPerienceAdminPanelSoundEffects);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSoundEffects);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSoundEffects, $"xp.config soundeffects leveldowneffect {UserInputText}", row, height, 12, $"{config.soundEffects.leveldowneffect}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            row++;
            ControlPanelelements.Add(XPUILabel($"Rankup Effect:", row, height, TextAnchor.MiddleLeft, 12, "0.01", "0.15", "1 1 1 1"), XPerienceAdminPanelSoundEffects);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSoundEffects);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSoundEffects, $"xp.config soundeffects rankupeffect {UserInputText}", row, height, 12, $"{config.soundEffects.rankupeffect}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            row++;
            ControlPanelelements.Add(XPUILabel($"Statup Effect:", row, height, TextAnchor.MiddleLeft, 12, "0.01", "0.15", "1 1 1 1"), XPerienceAdminPanelSoundEffects);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSoundEffects);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSoundEffects, $"xp.config soundeffects statupeffect {UserInputText}", row, height, 12, $"{config.soundEffects.statupeffect}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            row++;
            ControlPanelelements.Add(XPUILabel($"Skillup Effect:", row, height, TextAnchor.MiddleLeft, 12, "0.01", "0.15", "1 1 1 1"), XPerienceAdminPanelSoundEffects);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSoundEffects);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSoundEffects, $"xp.config soundeffects skillupeffect {UserInputText}", row, height, 12, $"{config.soundEffects.skillupeffect}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            row++;
            ControlPanelelements.Add(XPUILabel($"Stat Reset Effect:", row, height, TextAnchor.MiddleLeft, 12, "0.01", "0.15", "1 1 1 1"), XPerienceAdminPanelSoundEffects);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSoundEffects);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSoundEffects, $"xp.config soundeffects statreseteffect {UserInputText}", row, height, 12, $"{config.soundEffects.statreseteffect}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            row++;
            ControlPanelelements.Add(XPUILabel($"Skill Reset Effect:", row, height, TextAnchor.MiddleLeft, 12, "0.01", "0.15", "1 1 1 1"), XPerienceAdminPanelSoundEffects);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSoundEffects);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSoundEffects, $"xp.config soundeffects skillreseteffect {UserInputText}", row, height, 12, $"{config.soundEffects.skillreseteffect}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            row++;
            ControlPanelelements.Add(XPUILabel($"Scavenger Loot Effect:", row, height, TextAnchor.MiddleLeft, 12, "0.01", "0.15", "1 1 1 1"), XPerienceAdminPanelSoundEffects);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSoundEffects);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSoundEffects, $"xp.config soundeffects scavengerlooteffect {UserInputText}", row, height, 12, $"{config.soundEffects.scavengerlooteffect}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            row++;
            ControlPanelelements.Add(XPUILabel($"Forager Item Drop Effect:", row, height, TextAnchor.MiddleLeft, 12, "0.01", "0.15", "1 1 1 1"), XPerienceAdminPanelSoundEffects);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSoundEffects);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSoundEffects, $"xp.config soundeffects foragerlooteffect {UserInputText}", row, height, 12, $"{config.soundEffects.foragerlooteffect}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            #endregion
            // End
            CuiHelper.AddUi(player, ControlPanelelements);
        }
        private void AdminSQLPage(BasePlayer player)
        {
            var ControlPanelelements = new CuiElementContainer();
            var height = 0.030f;
            double width = .006;
            string lableL = ".01";
            string lableR = ".15";
            string valueL = ".17";
            string valueR = ".40";
            int row = 5;
            ControlPanelelements.Add(XPUIPanel("0.16 0.0", "1 1", "0 0 0 .7"), XPerienceAdminPanelMain, XPerienceAdminPanelSQL);
            ControlPanelelements.Add(XPUILabel($"SQL Settings / Info", 1, 0.090f, TextAnchor.MiddleLeft, 18, "0.01", "1", "1 1 1 1"), XPerienceAdminPanelSQL);
            // Main SQL Settings
            ControlPanelelements.Add(XPUILabel($"[SQL Settings]", row, height, TextAnchor.MiddleLeft, 15, "0.01", "0.30", "1 1 1 1"), XPerienceAdminPanelSQL);
            // Enable SQL
            row++;
            ControlPanelelements.Add(XPUILabel($"Enable SQL Save:", row, height, TextAnchor.MiddleLeft, 12, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelSQL);
            ControlPanelelements.Add(XPToggle($"xp.config sql sqlenable", row, height, config.sql.enablesql, valueL, width), XPerienceAdminPanelSQL);
            // Main SQL Settings
            row++;
            row++;
            ControlPanelelements.Add(XPUILabel($"[SQL Info] (change in config file)", row, height, TextAnchor.MiddleLeft, 15, "0.01", "0.50", "1 1 1 1"), XPerienceAdminPanelSQL);
            // SQL Info
            row++;
            ControlPanelelements.Add(XPUILabel($"SQL Host IP:", row, height, TextAnchor.MiddleLeft, 12, "0.01", "0.15", "1 1 1 1"), XPerienceAdminPanelSQL);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSQL);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSQL, $"xp.config sql sqlhost {UserInputText}", row, height, 12, $"{config.sql.SQLhost}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            row++;
            ControlPanelelements.Add(XPUILabel($"SQL Host Port:", row, height, TextAnchor.MiddleLeft, 12, "0.01", "0.15", "1 1 1 1"), XPerienceAdminPanelSQL);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSQL);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSQL, $"xp.config sql sqlport {UserInputText}", row, height, 12, $"{config.sql.SQLport}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            row++;
            ControlPanelelements.Add(XPUILabel($"SQL Host Database:", row, height, TextAnchor.MiddleLeft, 12, "0.01", "0.15", "1 1 1 1"), XPerienceAdminPanelSQL);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSQL);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSQL, $"xp.config sql sqldatabase {UserInputText}", row, height, 12, $"{config.sql.SQLdatabase}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            row++;
            ControlPanelelements.Add(XPUILabel($"SQL Host Username:", row, height, TextAnchor.MiddleLeft, 12, "0.01", "0.15", "1 1 1 1"), XPerienceAdminPanelSQL);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSQL);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSQL, $"xp.config sql sqlusername {UserInputText}", row, height, 12, $"********", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            row++;
            ControlPanelelements.Add(XPUILabel($"SQL Host Password:", row, height, TextAnchor.MiddleLeft, 12, "0.01", "0.15", "1 1 1 1"), XPerienceAdminPanelSQL);
            ControlPanelelements.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelSQL);
            ControlPanelelements.Add(XPUIInput(XPerienceAdminPanelSQL, $"xp.config sql sqlpassword {UserInputText}", row, height, 12, $"********", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            CuiHelper.AddUi(player, ControlPanelelements);
            return;
        }        
        private void AdminResetPage(BasePlayer player)
        {
            var ControlPanelelements = new CuiElementContainer();
            var height = 0.030f;
            int row = 7;
            ControlPanelelements.Add(XPUIPanel("0.16 0.0", "1 1", "0 0 0 .7"), XPerienceAdminPanelMain, XPerienceAdminPanelReset);
            ControlPanelelements.Add(XPUILabel($"Reset Config / Players", 1, 0.090f, TextAnchor.MiddleLeft, 18, "0.01", "1", "1 1 1 1"), XPerienceAdminPanelReset);
            // Reset Config
            ControlPanelelements.Add(XPUILabel($"[Reset Config]", row, height, TextAnchor.MiddleLeft, 15, "0.01", "0.25", "1 1 1 1"), XPerienceAdminPanelReset);
            ControlPanelelements.Add(XPUIButton($"xp.config reset resetconfig 0 true", row, height, 12, "1 0 0 1", "[ Reset Config ]", "0.30", "0.40", TextAnchor.MiddleCenter, "0 0 0 1"), XPerienceAdminPanelReset);
            ControlPanelelements.Add(XPUILabel($"(Resets config back to default)", row, height, TextAnchor.MiddleLeft, 12, "0.50", "0.99", "1 1 1 1"), XPerienceAdminPanelReset);
            // Reset All Levels
            row++;
            row++;
            ControlPanelelements.Add(XPUILabel($"[Reset All Player Levels]", row, height, TextAnchor.MiddleLeft, 15, "0.01", "0.25", "1 1 1 1"), XPerienceAdminPanelReset);
            ControlPanelelements.Add(XPUIButton($"xp.config reset resetalllevels 0 true", row, height, 12, "1 0 0 1", "[ Reset levels ]", "0.30", "0.40", TextAnchor.MiddleCenter, "0 0 0 1"), XPerienceAdminPanelReset);
            ControlPanelelements.Add(XPUILabel($"(Resets all players level back to 0)", row, height, TextAnchor.MiddleLeft, 12, "0.50", "0.99", "1 1 1 1"), XPerienceAdminPanelReset);
            // Reset All Ranks
            row++;
            row++;
            ControlPanelelements.Add(XPUILabel($"[Reset All Player Ranks]", row, height, TextAnchor.MiddleLeft, 15, "0.01", "0.25", "1 1 1 1"), XPerienceAdminPanelReset);
            ControlPanelelements.Add(XPUIButton($"xp.config reset resetallranks 0 true", row, height, 12, "1 0 0 1", "[ Reset Ranks ]", "0.30", "0.40", TextAnchor.MiddleCenter, "0 0 0 1"), XPerienceAdminPanelReset);
            ControlPanelelements.Add(XPUILabel($"(Resets all players rank back to 0)", row, height, TextAnchor.MiddleLeft, 12, "0.50", "0.99", "1 1 1 1"), XPerienceAdminPanelReset);
            // Reset All Players
            row++;
            row++;
            ControlPanelelements.Add(XPUILabel($"[Reset All Players]", row, height, TextAnchor.MiddleLeft, 15, "0.01", "0.25", "1 1 1 1"), XPerienceAdminPanelReset);
            ControlPanelelements.Add(XPUIButton($"xp.config reset resetall 0 true", row, height, 12, "1 0 0 1", "[ Reset Players ]", "0.30", "0.40", TextAnchor.MiddleCenter, "0 0 0 1"), XPerienceAdminPanelReset);
            ControlPanelelements.Add(XPUILabel($"(Full Wipe of XPerience and all players)", row, height, TextAnchor.MiddleLeft, 12, "0.50", "0.99", "1 1 1 1"), XPerienceAdminPanelReset);
            // Reset Kill Records
            if (KillRecords != null)
            {
                row++;
                row++;
                ControlPanelelements.Add(XPUILabel($"[Reset All Kill Records]", row, height, TextAnchor.MiddleLeft, 15, "0.01", "0.25", "1 1 1 1"), XPerienceAdminPanelReset);
                ControlPanelelements.Add(XPUIButton($"xp.config reset resetallkr 0 true", row, height, 12, "1 0 0 1", "[ Reset Kill Records ]", "0.30", "0.40", TextAnchor.MiddleCenter, "0 0 0 1"), XPerienceAdminPanelReset);
                ControlPanelelements.Add(XPUILabel($"(Deletes all players kill records from Kill Records plugin)", row, height, TextAnchor.MiddleLeft, 12, "0.50", "0.99", "1 1 1 1"), XPerienceAdminPanelReset);
            }
            // Reset on Wipe
            row++;
            row++;
            ControlPanelelements.Add(XPUILabel($"[Reset XPerience on Wipe]", row, height, TextAnchor.MiddleLeft, 15, "0.01", "0.25", "1 1 1 1"), XPerienceAdminPanelReset);
            ControlPanelelements.Add(XPUILabel($"|       {config.defaultOptions.wipedataonnewsave}", row, height, TextAnchor.MiddleLeft, 12, "0.30", "0.35", "1 1 1 1"), XPerienceAdminPanelReset);
            ControlPanelelements.Add(XPUIButton($"xp.config reset resetnewsave 0 true", row, height, 12, "0.0 1.0 0.0 0", "T", "0.40", "0.42", TextAnchor.MiddleCenter, "0.0 1.0 0.0 1.0"), XPerienceAdminPanelReset);
            ControlPanelelements.Add(XPUIButton($"xp.config reset resetnewsave 0 false", row, height, 12, "1.0 0.0 0.0 0", "F", "0.42", "0.44", TextAnchor.MiddleCenter, "1.0 0.0 0.0 1.0"), XPerienceAdminPanelReset);
            ControlPanelelements.Add(XPUILabel($"(Full Wipe of XPerience when new save loaded or wiped)", row, height, TextAnchor.MiddleLeft, 12, "0.50", "0.99", "1 1 1 1"), XPerienceAdminPanelReset);
            // Fix Data
            row++;
            row++;
            ControlPanelelements.Add(XPUILabel($"[Fix Player Data]", row, height, TextAnchor.MiddleLeft, 15, "0.01", "0.25", "1 1 1 1"), XPerienceAdminPanelReset);
            ControlPanelelements.Add(XPUIButton($"xp.config reset fix 0 true", row, height, 12, "1 0 0 1", "[ Fix Player Data ]", "0.30", "0.40", TextAnchor.MiddleCenter, "0 0 0 1"), XPerienceAdminPanelReset);
            ControlPanelelements.Add(XPUILabel($"(Resets & Recalculates all player's data based on current xp)", row, height, TextAnchor.MiddleLeft, 12, "0.50", "0.99", "1 1 1 1"), XPerienceAdminPanelReset);
            CuiHelper.AddUi(player, ControlPanelelements);
            return;
        }
        private void AdminAddonPage(BasePlayer player)
        {
            var ControlPanelelements = new CuiElementContainer();
            var height = 0.030f;
            ControlPanelelements.Add(XPUIPanel(".16 0", "1 1", "0 0 0 .7"), XPerienceAdminPanelMain, XPerienceAdminPanelAddon);
            // Addon Not Installed
            ControlPanelelements.Add(XPUILabel($"[XPerience Addon Not Installed]", 2, height, TextAnchor.MiddleLeft, 18, ".01", ".25", "1 1 1 1"), XPerienceAdminPanelAddon);
            ControlPanelelements.Add(XPUILabel($"You can get the XPerience Addon on Codefling https://codefling.com/ or join our discord at https://discord.rustlevels.com", 3, height, TextAnchor.MiddleLeft, 15, ".01", ".98", "1 1 1 1"), XPerienceAdminPanelAddon);
            ControlPanelelements.Add(new CuiLabel
            {
                Text =
            {
                Text = $"" +
                $"XPerience Addon adds many features including global event, damage bar UI, death records, welcome menu, player notes, global/player UI notifications, stat and skill abilities, special items drops such as xp boosters, stat/skill books, and much more. " +
                $"All servers with the XPerience Addon mod can also be publicly shown on RustLevels.com with their own page and player profiles that show all player data from XPerience and Kill Records(optional). " +
                $"Once purchased you must submit your server's IP or DNS to RustLevels discord at: https://discord.rustlevels.com so that it can be allowed to access RustLevels database and receive your Unique ServerIDKey to place in your Addon config file. This feature is completely optional. " +
                $"Please allow up to 48 hours for your server to be accepted." +
                $"\n\nPlayer steam badges can be hidden on RustLevels.com by config option.This will prevent steam badges for your server players being shown on our website however it will not prevent steam information from being shown on other public sites not releated to RustLevels. " +
                $"All player steam information is supplied by Steamworks API with permissions listed in steams privacy policy section 5.5 which RustLevels has no control over: https://store.steampowered.com/privacy_agreement/ " +
                $"\n\n" +
                $"Features:\n" +
                $"<color=red>▫</color> More Stat/Skill abilities\n" +
                $"<color=red>▫</color> Global Event\n" +
                $"<color=red>▫</color> Damage Bar Popup UI\n" +
                $"<color=red>▫</color> Global/Player Popup Notification UIs\n" +
                $"<color=red>▫</color> Player Kills and Death records\n" +
                $"<color=red>▫</color> Welcome Panel\n" +
                $"<color=red>▫</color> Special Items (xp boosters, stat/skill books)\n" +
                $"<color=red>▫</color> and more...\n" +
                $"\nPlugin Data Sent to RustLevels.com: (Optional)\n" +
                $"<color=red>▫</color> XPerience\n" +
                $"<color=yellow>▫</color> Kill Records\n" +
                $"<color=yellow>▫</color> Personal Animals\n" +
                $"<color=yellow>▫</color> Backpacks\n" +
                $"\n\n" +
                $"DiscordMessages Support: (requires DiscordMessages plugin)\n" +
                $"<color=red>▫</color> Discord webhook URL\n" +
                $"<color=red>▫</color> Option to send player rank up to discord\n" +
                $"<color=red>▫</color> Option to send player level up to discord\n" +
                $"<color=red>▫</color> Option to send player stat level up to discord\n" +
                $"<color=red>▫</color> Option to send player skill level up to discord" +
                $"",
                FontSize = 13,
                Align = TextAnchor.UpperLeft,
                Color = "1 1 1 1"
            },
                RectTransform =
            {
                AnchorMin = ".01 0",
                AnchorMax = ".98 .90"
            }
            }, XPerienceAdminPanelAddon);
            CuiHelper.AddUi(player, ControlPanelelements);
            return;
        }
        private void AdminElectricianSettings(BasePlayer player)
        {
            if (player == null) return;
            if (!player.IsAdmin && !permission.UserHasPermission(player.UserIDString, Admin)) return;
            var ElectricianSettings = new CuiElementContainer();
            #region Layout
            int fontsize = 12;
            var height = 0.040f;
            int row = 2;
            string lableL = ".01";
            string lableR = ".30";
            string valueL = ".35";
            string valueR = ".55";
            #endregion
            ElectricianSettings.Add(new CuiPanel
            {
                Image =
                {
                    Color = "0 0 0 1"
                },
                RectTransform =
                {
                    AnchorMin = "0.25 0.25",
                    AnchorMax = "0.75 0.75"
                },
                CursorEnabled = true
            }, "Overlay", XPerienceAdminPanelElectricianSettings);
            ElectricianSettings.Add(XPUILabel($"Global Default Settings:", row, height, TextAnchor.MiddleCenter, 13, "0.01", "0.99", "1 1 1 1"), XPerienceAdminPanelElectricianSettings);
            // Solar Panel
            row++;
            row++;
            row++;
            ElectricianSettings.Add(XPUILabel($"Solar Panel Default MaxOutput:", row, height, TextAnchor.MiddleLeft, fontsize, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelElectricianSettings);
            ElectricianSettings.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelElectricianSettings);
            ElectricianSettings.Add(XPUIInput(XPerienceAdminPanelElectricianSettings, $"xp.electrician solarpaneldefault {UserInputText}", row, height, fontsize, $"{config.electrician.solarpaneldefault}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Small Battery
            row++;
            row++;
            ElectricianSettings.Add(XPUILabel($"Small Battery Default MaxOutput:", row, height, TextAnchor.MiddleLeft, fontsize, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelElectricianSettings);
            ElectricianSettings.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelElectricianSettings);
            ElectricianSettings.Add(XPUIInput(XPerienceAdminPanelElectricianSettings, $"xp.electrician smallbatterydefault {UserInputText}", row, height, fontsize, $"{config.electrician.smallbatterydefault}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Medium Battery
            row++;
            row++;
            ElectricianSettings.Add(XPUILabel($"Medium Battery Default MaxOutput:", row, height, TextAnchor.MiddleLeft, fontsize, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelElectricianSettings);
            ElectricianSettings.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelElectricianSettings);
            ElectricianSettings.Add(XPUIInput(XPerienceAdminPanelElectricianSettings, $"xp.electrician mediumbatterydefault {UserInputText}", row, height, fontsize, $"{config.electrician.mediumbatterydefault}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Large Battery
            row++;
            row++;
            ElectricianSettings.Add(XPUILabel($"Large Battery Default MaxOutput:", row, height, TextAnchor.MiddleLeft, fontsize, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelElectricianSettings);
            ElectricianSettings.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelElectricianSettings);
            ElectricianSettings.Add(XPUIInput(XPerienceAdminPanelElectricianSettings, $"xp.electrician largebatterydefault {UserInputText}", row, height, fontsize, $"{config.electrician.largebatterydefault}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Small Generator
            row++;
            row++;
            ElectricianSettings.Add(XPUILabel($"Small Generator Default MaxOutput:", row, height, TextAnchor.MiddleLeft, fontsize, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelElectricianSettings);
            ElectricianSettings.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelElectricianSettings);
            ElectricianSettings.Add(XPUIInput(XPerienceAdminPanelElectricianSettings, $"xp.electrician smallgeneratordefault {UserInputText}", row, height, fontsize, $"{config.electrician.smallgeneratordefault}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Test Generator
            row++;
            row++;
            ElectricianSettings.Add(XPUILabel($"Test Generator Default MaxOutput:", row, height, TextAnchor.MiddleLeft, fontsize, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelElectricianSettings);
            ElectricianSettings.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelElectricianSettings);
            ElectricianSettings.Add(XPUIInput(XPerienceAdminPanelElectricianSettings, $"xp.electrician testgeneratordefault {UserInputText}", row, height, fontsize, $"{config.electrician.testgeneratordefault}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Electric Windmill
            row++;
            row++;
            ElectricianSettings.Add(XPUILabel($"Electric Windmill Default MaxOutput:", row, height, TextAnchor.MiddleLeft, fontsize, lableL, lableR, "1 1 1 1"), XPerienceAdminPanelElectricianSettings);
            ElectricianSettings.Add(XPUIInputbackground(row, height, "0 0 .1 .75", valueL, valueR), XPerienceAdminPanelElectricianSettings);
            ElectricianSettings.Add(XPUIInput(XPerienceAdminPanelElectricianSettings, $"xp.electrician electricwindmilldefault {UserInputText}", row, height, fontsize, $"{config.electrician.electricwindmilldefault}", valueL, valueR, TextAnchor.MiddleLeft, "1 1 1 1"));
            // Close
            row++;
            row++;
            ElectricianSettings.Add(XPUIButton("xp.admin closeelectricianbox", row, height, fontsize, "1 0 0 1", "〘Close Default Settings〙", "0.25", "0.75", TextAnchor.MiddleCenter, "1 1 1 1"), XPerienceAdminPanelElectricianSettings);
            // UI End
            CuiHelper.AddUi(player, ElectricianSettings);
        }
        private void AdminProfileBackgrounds(BasePlayer player, int selected = 0, int page = 0)
        {
            if (player == null) return;
            if (!player.IsAdmin && !permission.UserHasPermission(player.UserIDString, Admin)) return;
            var AdminProfileBackgrounds = new CuiElementContainer();
            AdminProfileBackgrounds.Add(new CuiPanel
            {
                Image =
                {
                    Color = "0 0 0 0"
                },
                RectTransform =
                {
                    AnchorMin = $".5 .5",
                    AnchorMax = $".5 .5",
                    OffsetMin = $"-300 -200",
                    OffsetMax = $"300 200"
                },
                CursorEnabled = true
            }, "Overlay", XPerienceAdminPanelProfileBackgrounds);
            int current = 0;
            int bgid = 0;
            var bglist = config.imageicons.bgimages;
            int total = config.imageicons.bgimages.Count;
            foreach (var bgimg in bglist)
            {
                if (current >= page && current < page + 1)
                {
                    int pos = (current - page);
                    // Image
                    AdminProfileBackgrounds.Add(new CuiElement
                    {
                        Parent = XPerienceAdminPanelProfileBackgrounds,
                        Components =
                                {
                                    new CuiRawImageComponent
                                    {
                                        Png = ImageLibrary?.Call<string>("GetImage", bgimg.Value.name)
                                    },
                                    new CuiRectTransformComponent
                                    {
                                        AnchorMin = ".01 .1",
                                        AnchorMax = ".99 .99"
                                    }
                                }
                    });
                    // ID
                    bgid = bgimg.Key;
                }
                current++;
            }
            // Buttons
            AdminProfileBackgrounds.Add(XPUIPanel(".1 0", ".9 .08", "0 0 0 1"), XPerienceAdminPanelProfileBackgrounds, "BGButtons");
            int back = page <= 1 ? 0 : page - 1;
            int next = page + 1 >= current ? page : page + 1;
            // Prev Page
            if (page >= 1)
            {
                AdminProfileBackgrounds.Add(XPUIButton($"xp.admin openprofilebg {bgid} {back}", 1, 1f, 20, "0 0 0 0", "⇦", ".1", ".2", TextAnchor.MiddleCenter, "1 1 0 1"), "BGButtons");
            }
            // Next Page
            if (page + 1 < total)
            {
                AdminProfileBackgrounds.Add(XPUIButton($"xp.admin openprofilebg {bgid} {next}", 1, 1f, 20, "0 0 0 0", "⇨", ".8", ".9", TextAnchor.MiddleCenter, "1 1 0 1"), "BGButtons");
            }
            if(bgid == config.playerprofilesettings.profilebg)
            {
                AdminProfileBackgrounds.Add(XPUIButton($"", 1, 1f, 13, "0 0 0 0", "〘Selected〙", ".3", ".45", TextAnchor.MiddleCenter, "0 1 0 1"), "BGButtons");
            }
            else
            {
                AdminProfileBackgrounds.Add(XPUIButton($"xp.config playerbg profilebg {bgid} false {page}", 1, 1f, 13, "0 0 0 0", "〘Select〙", ".3", ".45", TextAnchor.MiddleCenter, "1 0 0 1"), "BGButtons");
            }
            AdminProfileBackgrounds.Add(XPUIButton("xp.admin closeprofilebg", 1, 1f, 13, "0 0 0 0", "〘Close〙", ".55", ".7", TextAnchor.MiddleCenter, "1 0 0 1"), "BGButtons");
            CuiHelper.AddUi(player, AdminProfileBackgrounds);
        }
        #endregion

        #region Lang
        private string XPLang(string key, string id = null, params object[] args) => string.Format(lang.GetMessage(key, this, id), args);
        protected override void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["adminpanel"] = "Admin",
                ["adminmenu_001"] = "Main",
                ["adminmenu_002"] = "Level / XP",
                ["adminmenu_003"] = "Stats",
                ["adminmenu_004"] = "Skills",
                ["adminmenu_005"] = "Other Settings",
                ["adminmenu_006"] = "SQL",
                ["adminmenu_0070"] = "Save Settings",
                ["adminmenu_0080"] = "Reload Plugin",
                ["adminmenu_009"] = "CLOSE",
                ["adminmenu_010"] = "Reset Default Settings",
                ["adminmenu_011"] = "Fix Player Data",
                ["adminmenu_012"] = "Other Mod Settings",
                ["adminmenu_013"] = "Reset Options",
                ["adminmenu_014"] = "My Stats",
                ["adminmenu_015"] = "Player's Stats",
                ["adminmenu_016"] = "Player Info",
                ["adminmenu_017"] = "XPerience Addon",
                ["adminmenu_018"] = "Daily Limits",
                ["adminmenu_019"] = "Calculations",
                ["adminmenu_020"] = "Ranks",
                ["adminmenu_021"] = "Sound Effects",
                ["adminmenu_022"] = "Player Profiles",
                ["adminmenu_023"] = "Image URLs",
                ["adminmenu_024"] = "Special Groups",
                ["adminitemchange"] = "{0} condition is now {1} and max condition is now {2}",
                ["adminitemchangerequirement"] = "{0} current condition is {1} and max condition is {2}\nTo change this use /{3} (condition value) (maxcondition value)",
                ["adminfixplayers"] = "All player data has been reset except experience.\nLevels, points and requirements recalculated.",
                ["adminresetconfig"] = "Config has been reset to default values.",
                ["saveconfig"] = "New Config has been Saved",
                ["admininfoliveui"] = "Default Live UI Location",
                ["adminxp_001"] = "Level & XP Settings",
                ["adminxp_002"] = "[Level / Point Settings]",
                ["adminxp_003"] = "Level Start:",
                ["adminxp_004"] = "Rank Settings:",
                ["playerfixdata"] = "Your data has been fixed and your level recalculated. You will need to reapply your stat & skill points",
                ["playersettings"] = "My Settings",
                ["playerconfirmationprompt"] = "Show Confirmation Prompt",
                ["playerfixdatabutton"] = "Fix My Data",
                ["playerautoranks"] = "Auto Rank Up",
                ["playerdashpaneltype"] = "Dash Panel Type",
                ["playerdisablefuelgauge"] = "Disable Fuel Gauge",
                ["playerdisablespeedometer"] = "Disable Speedometer",
                ["playerspeedometertype"] = "Speedometer Type",
                ["playerharveststats"] = "Total Harvest Count",
                ["playerharvestreset"] = "Player harvest count has been reset",
                ["selectedplayerharvestreset"] = "Player {0} harvest count has been reset",
                ["playerlevelreset"] = "Player level has been reset",
                ["allplayerlevelreset"] = "All Player levels have been reset",
                ["selectedplayerlevelreset"] = "Player {0} level has been reset",
                ["playerrankreset"] = "Player rank has been reset",
                ["allplayerrankreset"] = "All Player ranks have been reset",
                ["selectedplayerrankreset"] = "Player {0} rank has been reset",
                ["playerresetdisabled"] = "Player reset disabled, contact server admin",
                ["playersearchdisabled"] = "Player searching is currently disabled",
                ["imgwaiting"] = "Waiting On ImageLibrary to finish the load order",
                ["zonedisabled"] = "You have entered a restricted zone. All Stat/Skill abilities have been disabled.",
                ["zoneenabled"] = "You have left the restricted zone. All Stat/Skill abilities have been enabled.",
                ["enterraidbase"] = "You have entered a raidable base. All Stat/Skill abilities have been disabled.",
                ["exitraidbase"] = "You have left the raidable base. All Stat/Skill abilities have been enabled.",
                ["zonenoedit"] = "You are in a restricted zone. Stat/Skill abilities cannot be edited.",
                ["resettimerdata"] = "{0} mins",
                ["xphelpnew"] = "XPerience Plugin by M@CHIN3 - (Most features can be accessed easily within this panel without the need to use chat commands.) \n\n Chat Commands: \n" +
                "/{0} - Opens your profile UI \n" +
                "/{1} - Show your profile in chat \n" +
                "/{2} - Opens top players UI \n" +
                "/{3} (stat) - level up selected stat \n" +
                "/{4} (skill) - level up selected skill \n" +
                "/{5} - resets all stats and refunds points \n" +
                "/{6} - resets all skills and refunds points \n" +
                "/{7} (0-5) - Live UI Location / 0 = off",
                ["xphelpadmin"] = "XPerience Plugin by M@CHIN3 \n Admin Commands: \n" +
                "/{0} - Opens admin control panel for mod setup" +
                "/{1} - resets entire mod and deletes all player data \n" +
                "/{2} (playername) - resets selected player data \n" +
                "/{3} (playername) (amount) - gives x amount of experience to selected player \n" +
                "/{4} (playername) (amount) - takes x amount of experience from selected player \n" +
                "/{5} (conditionvalue) (maxconditionvalue) - changes the item condition and max condition in your hand",
                ["playerprofilechatnew"] = "My Stats: \n" +
                "---------------- \n" +
                "Level: {0} \n" +
                "Current XP: {1} \n" +
                "Next Level: {2} \n" +
                "Stat Points: {3} \n" +
                "Skill Points: {4} \n" +
                "---------------- \n" +
                "Mentality: {5} \n" +
                "Dexterity: {6} \n" +
                "Might: {7} \n" +
                "Captaincy: {8} \n" +
                "Weaponry: {9} \n" +
                "Ninjary: {10} \n" +
                "---------------- \n" +
                "WoodCutter: {11} \n" +
                "Smithy: {12} \n" +
                "Miner: {13} \n" +
                "Forager: {14} \n" +
                "Hunter: {15} \n" +
                "Fisher: {16} \n" +
                "Crafter: {17} \n" +
                "Framer: {18} \n" +
                "Medic: {19} \n" +
                "Scavenger: {20} \n" +
                "Electrician: {21} \n" +
                "Demolitionist: {22} \n" +
                "Tamer: {23} \n",
                ["plusxp"] = "+{0} XP",
                ["suicide"] = "You have lost {0} XP for commiting suicide",
                ["death"] = "Your XP has been reduced by {0} for death",
                ["levelup"] = "You are now Level {0}.  You have recieved {1} stat point and {2} skill points",
                ["leveldown"] = "You have lost a level! You are now Level {0}",
                ["statdown"] = "You have lost {0} stats points",
                ["skilldown"] = "You have lost {0} skill points",
                ["statdownextra"] = "You did not have enough unspent stat points to take, your ({0}) stat has been lowered and you have lost {1} stats points, {2} stat points returned to your unspent amount",
                ["skilldownextra"] = "You did not have enough unspent skill points to take, your ({0}) skill has been lowered and you have lost {1} skill points, {2} skill points returned to your unspent amount",
                ["bonus"] = "You get a bonus {0} XP for {1} {2}",
                ["notenoughpoints"] = "You do not have enough points",
                ["notenoughstatpoints"] = "You do not have enough points for level {0} {1}, requires {2} statpoints",
                ["notenoughskillpoints"] = "You do not have enough points for level {0} {1}, requires {2} skillpoints",
                ["pointsadded"] = "you now have {0} points applied in {1}",
                ["pointsremoved"] = "you have remove {0} points from {1}",
                ["statup"] = "You used {0} statpoints to reach Level {1} in {2}",
                ["skillup"] = "You used {0} skillpoints to reach Level {1} in {2}",
                ["nostatpoints"] = "You have lost all stat points",
                ["noskillpoints"] = "You have lost all skill points",
                ["resetstats"] = "You have reset your stats and have {0} stat points returned",
                ["resetstat"] = "You have reset your {0} stat and have {1} stat points returned",
                ["resetskills"] = "You have reset your skills and have {0} skill points returned",
                ["resetskill"] = "You have reset your {0} skill and have {1} skill points returned",
                ["attackerdodge"] = "Your victim dodged your attack",
                ["attackerblock"] = "Your victim blocked {0} damage from your attack",
                ["boatspeed"] = "Boat Speed",
                ["boatspeedon"] = "Boat Speed Boost Activated",
                ["boatspeedoff"] = "Boat Speed Boost Deactivated",
                ["boatspeedmessage"] = "Press RELOAD to activate/deactivate speed boost",
                ["horsespeed"] = "Horse Speed",
                ["horsespeedon"] = "Horse Speed Boost Activated",
                ["horsespeedoff"] = "Horse Speed Boost Deactivated",
                ["horsespeedmessage"] = "Press USE to activate/deactivate speed boost",
                ["vehiclespeed"] = "Vehicle Speed",
                ["vehiclespeedon"] = "Vehicle Speed Boost Activated",
                ["vehiclespeedoff"] = "Vehicle Speed Boost Deactivated",
                ["vehiclespeedmessage"] = "Press RELOAD to activate/deactivate speed boost",
                ["minispeedon"] = "MiniCopterP Speed Boost Activated",
                ["minispeedoff"] = "MiniCopterP Speed Boost Deactivated",
                ["minispeedmessage"] = "Press RELOAD to activate/deactivate speed boost",
                ["vehiclefuelreduce"] = "Fuel Reduction Chance",
                ["victimdodge"] = "You dodged last attack",
                ["victimblock"] = "You blocked {0} damage from last attack",
                ["crithit"] = "You preformed a critical hit for {0} extra damage",
                ["weaponcon"] = "New weapon condition is now {0}",
                ["medictools"] = "Medical Tools",
                ["medicteas"] = "Healing Teas",
                ["medichealingtimer"] = "Heal Every",
                ["medichealingamount"] = "Healing Amount",
                ["medictooluseowner"] = "You gave an extra {0} health from {1} to {2}",
                ["medictooluse"] = "You recived an extra {0} health from {1}",
                ["medicrecoverplayer"] = "You have recovered with an extra {0} health.",
                ["medicreviveplayer"] = "You have been revived with an extra {0} health.",
                ["medicrevivereviver"] = "You have revived player with an extra {0} health.",
                ["captaincyskillboost"] = "Team Skill Boost",
                ["captaincyxpboost"] = "Team XP Boost",
                ["captaincydistance"] = "Effective Distance",
                ["captaincyteamrequired"] = "Must be part of a team!",
                ["weaponrychance"] = "Condition Reduction Chance",
                ["weaponrytools"] = "Hand Tool Condition",
                ["weaponrypowertools"] = "Power Tool Condition",
                ["weaponryweaponsmelee"] = "Melee Weapon Condition",
                ["weaponryweaponsprojectile"] = "Projectile Weapon Condition",
                ["weaponryweaponsammo"] = "Max Ammo",
                ["techtreelocked"] = "Tech Tree Is Locked By Server.",
                ["techtreereq"] = "You must have a Mentality level of {0} to unlock tech tree items.",
                ["techtreestatus"] = "Tech Tree Status:",
                ["playerinfoalive"] = "Player Info Since Last Spawn:",
                ["timealive"] = "Alive",
                ["timeflying"] = "Flying Time",
                ["timedriving"] = "Driving Time",
                ["timeboating"] = "Boating Time",
                ["timesleeping"] = "Sleeping Time",
                ["timeswimming"] = "Swimming Time",
                ["timeinbase"] = "Time In Base",
                ["timedmgrec"] = "Last Dmg Recieved",
                ["timedmgrecfrom"] = "Last Dmg From",
                ["timedmgdelt"] = "Last Dmg Delt",
                ["timedeltto"] = "Last Dmg To",
                ["timeinmonument"] = "Time In Monuments",
                ["timeinwild"] = "Time In Wilderness",
                ["playtime"] = "Playtime",
                ["status"] = "Status",
                ["online"] = "Online",
                ["offline"] = "Offline",
                ["metersran"] = "Meters Ran",
                ["meterswalk"] = "Meters Walked",
                ["level"] = "Level",
                ["experience"] = "Experience",
                ["basiclevel"] = "Level",
                ["basicexperience"] = "Experience",
                ["xp"] = "XP",
                ["points"] = "Points",
                ["months"] = "Months",
                ["weeks"] = "Weeks",
                ["days"] = "Days",
                ["hours"] = "Hours",
                ["mins"] = "Mins",
                ["secs"] = "Secs",
                ["mentality"] = "Mentality",
                ["dexterity"] = "Dexterity",
                ["might"] = "Might",
                ["captaincy"] = "Captaincy",
                ["weaponry"] = "Weaponry",
                ["ninjary"] = "Ninjary",
                ["woodcutter"] = "WoodCutter",
                ["smithy"] = "Smithy",
                ["miner"] = "Miner",
                ["forager"] = "Forager",
                ["hunter"] = "Hunter",
                ["fisher"] = "Fisher",
                ["crafter"] = "Crafter",
                ["framer"] = "Framer",
                ["medic"] = "Medic",
                ["scavenger"] = "Scavenger",
                ["electrician"] = "Electrician",
                ["demolitionist"] = "Demolitionist",
                ["tamer"] = "Tamer",
                ["stats"] = "Stats",
                ["skills"] = "Skills",
                ["statistics"] = "Statistics",
                ["raids"] = "Raids",
                ["topplayers"] = "Top Players",
                ["close"] = "Close",
                ["profile"] = "Profile",
                ["myprofile"] = "My Profile",
                ["settings"] = "Settings",
                ["researchcost"] = "Research Cost",
                ["researchspeed"] = "Research Speed",
                ["critchance"] = "Critical Chance",
                ["critdmgamount"] = "Critical Damage",
                ["damagenpc"] = "Damage (NPC)",
                ["blockchance"] = "Block Chance",
                ["dodgechance"] = "Dodge Chance",
                ["fishamount"] = "Fish Amount",
                ["fishitems"] = "Item Amount",
                ["fishoxygen"] = "Oxygen Reduction",
                ["fishoxygentank"] = "Oxygen Tank Reduction",
                ["armor"] = "Armor",
                ["tea"] = "Tea Boost",
                ["teatypenone"] = "None",
                ["teatypemaxhealthtea"] = "Basic",
                ["teatypemaxhealthtea.advanced"] = "Advanced",
                ["teatypemaxhealthtea.pure"] = "Pure",
                ["melee"] = "Melee Damage",
                ["calories"] = "Max Calories",
                ["hydration"] = "Max Hydration",
                ["bleed"] = "Bleeding Time",
                ["radiation"] = "Radiation",
                ["radiationpoison"] = "Radiation Poison",
                ["heat"] = "Heat Tolerance",
                ["cold"] = "Cold Tolerance",
                ["craftspeed"] = "Crafting Speed",
                ["woodgather"] = "Wood Gathering",
                ["clothgather"] = "Cloth Gathering",
                ["woodbonus"] = "Bonus Gathering",
                ["woodapple"] = "Apple Chance",
                ["productionrate"] = "Production Chance",
                ["productionspeed"] = "Production Speed",
                ["productionamount"] = "Amount",
                ["fuelconsumption"] = "Fuel Consumption",
                ["fuelconsumptionhats"] = "Fuel Consumption (hats)",
                ["metalchance"] = "Metal Fragment Chance",
                ["metalamount"] = "Metal Fragment Amount",
                ["hmetalchance"] = "High Quality Chance",
                ["hmetalamount"] = "High Quality Amount",
                ["oregather"] = "Ore Gathering",
                ["orebonus"] = "Bonus Gathering",
                ["gather"] = "Gathering",
                ["seedbonus"] = "Seed Bonus",
                ["randomitem"] = "Random Item",
                ["foodgather"] = "Food Gathering",
                ["bonusgather"] = "Bonus Gathering",
                ["damagewildlife"] = "Damage (wildlife)",
                ["nightdamage"] = "Night Damage (wildlife)",
                ["bowdamage"] = "Bow Damage",
                ["costreduction"] = "Cost",
                ["fullrepair"] = "Full Repair Chance",
                ["highcond"] = "Higher Condition Chance",
                ["upgradecost"] = "Upgrade Cost",
                ["repairtime"] = "Repair Time",
                ["repaircost"] = "Repair Cost",
                ["currentlevel"] = "Current Level",
                ["nextlevel"] = "Next Level",
                ["maxlevel"] = "Max Level",
                ["used"] = "Used",
                ["available"] = "Available",
                ["abilities"] = "Abilities",
                ["options"] = "Options",
                ["levelupbutton"] = "Level Up",
                ["reset"] = "Reset",
                ["history"] = "History",
                ["kills"] = "Kills",
                ["deaths"] = "Deaths",
                ["yes"] = "Yes",
                ["no"] = "No",
                ["autorankoffmaxlevel"] = "You have reached max level {0} of rank {1}. Click rank up in your profile or Turn on auto ranks in settings to rank up.",
                ["medicrevive"] = "Revival Health",
                ["medicrecover"] = "Recover Health",
                ["mediccrafting"] = "Mixing Table Speed",
                ["scavchance"] = "Extra Loot Chance",
                ["scavmultiplier"] = "Extra Loot Multiplier",
                ["customscavchance"] = "Custom Loot Chance",
                ["customscavmultiplier"] = "Custom Loot Multiplier",
                ["unusedstatpoints"] = "Stat Points",
                ["unusedskillpoints"] = "Skill Points",
                ["totalspent"] = "Points Used",
                ["liveuilocationoff"] = "Live XP UI Stats are off",
                ["dmgbarskin"] = "Damage Bar Skin",
                ["profilebg"] = "Profile UI Background",
                ["liveuilocation"] = "Live XP UI location is {0}",
                ["liveuilocationhelp"] = "/xpliveui (0-4) - Live UI Location / 0 = off \n Current UI location is {0}",
                ["resetstatsbutton"] = "Reset Stats",
                ["minsolarpanelinput"] = "Min Solar Panel Input",
                ["solarpanelinput"] = "Solar Panel Input",
                ["solarpaneloutput"] = "Solar Panel Max Output",
                ["smallbatteryoutput"] = "Small Battery Max Output",
                ["mediumbatteryoutput"] = "Medium Battery Max Output",
                ["largebatteryoutput"] = "Large Battery Max Output",
                ["smallgeneratoroutput"] = "Small Generator Max Output",
                ["testgeneratoroutput"] = "Test Generator Max Output",
                ["windmilloutput"] = "Windmill Output",
                ["windmillmaxoutput"] = "Windmill Max Output",
                ["resetskillsbutton"] = "Reset Skills",
                ["nopermordisabled"] = "Stat/Skill disabled or you do not have permission to use.",
                ["chicken"] = "Chicken",
                ["boar"] = "Boar",
                ["stag"] = "Stag",
                ["wolf"] = "Wolf",
                ["bear"] = "Bear",
                ["polarbear"] = "PolarBear",
                ["tamerinc"] = "Increase Tamer to tame animals",
                ["tamerpets"] = "Tameable Pets",
                ["topplayers"] = "Top Players",
                ["resetxperience"] = "All XPerience player data deleted",
                ["resettimerstats"] = "You have {0} mins left before you can reset your stats",
                ["resettimerskills"] = "You have {0} mins left before you can reset your skills",
                ["canresetstats"] = "{0} mins",
                ["canresetskills"] = "{0} mins",
                ["victimarmordmg"] = "Armor Absorbed {0} Damage",
                ["armordmgabsorb"] = "Armor Damage",
                ["liveuiselection"] = "LiveUI Location",
                ["mystats"] = "My Stats",
                ["help"] = "HELP",
                ["helpprev"] = "⇦ Prev Page",
                ["helpnext"] = "Next Page ⇨",
                ["helpcommands"] = "Chat Commands",
                ["helpcommandslist"] = "Note that many of these commands can be used within your control panel without using chat. \n\n" +
                "/{0} - shows chat commands in chat \n\n" +
                "/{1} - brings up your control panel \n\n" +
                "/{1} (playername) = brings up another players full profile \n\n" +
                "/{2} - shows your level, xp, stats, and skills in chat \n\n" +
                "/{3} - brings up top players panel \n\n" +
                "/{4} (stat) - level up selected stat \n\n" +
                "/{5} (skill) - level up selected skill \n\n" +
                "/{6} - resets all stats and refunds points \n\n" +
                "/{7} - resets all skills and refunds points \n\n" +
                "/{8} (0-5) - Live UI Location / 0 = off \n\n",
                ["moddetails"] = "About XPerience Created by:",
                ["bindkey"] = "You can bind any key to open your XPerience control panel. \n" +
                "Press F1 to open your console \n" +
                "Decide what key you want to bind the command to \n" +
                "Type bind 0 chat.say /{0} \n" +
                "This will bind the 0 key to open the control panel. \n" +
                "Next execute the writecfg command in your console to save the config so it won't reset when you relaunch the game",
                ["aboutxperience"] = "\n\n XPerience is an extremely detailed RPG based mod that allows players to earn experience and levels by interacting with all aspects of the game. You can earn experience from just about " +
                "anything from cutting down trees, mining ore, hunting, killing, fishing, building, and more.. As you earn experience you will progress in levels that grant stat points and skill points you can spend in different traits " +
                "that will give you increased abilities. There are currently 4 major Stats and 11 secondary Skills each with their own special attributes, more may come in the future. Stats will grant you overall character strengths while Skills grant you increased abilities when " +
                "interacting with the world. For every level you increase these traits it will increase the strength of the abilities that each one gives you. The higher the level of each trait the more points it requires to reach the next level. " +
                "Server owners can configure and adjust every aspect of the XPerience mod including level requirements, level multiplier, xp gained from each source, points awarded per level, point cost per level, bonuses, stat and skill strengths per level, max level of stats " +
                "and skills, reset timers, and more.",
                ["serversettings"] = "Every server that uses XPerience can be setup differently to fit their preference. Below are some of the settings for this server. Many things can effect these values like other mods that may be installed. \n\n" +
                "[MAIN SETTINGS] Levels, Multipliers, Points, Timers, etc..\n" +
                "Level Start: {0} | Required XP to reach level 1 \n" +
                "XP Requirment: {1} | XP Requirement increase for next level ex. ({0} + {1} to reach level 2) \n" +
                "Level XP Boost: {2}% | XP increase per level \n" +
                "Stat Points Earned Per Level: {3} \n" +
                "Skill Points Earned Per Level: {4} \n" +
                "Reset Timers: Enabled:{5} Stats {6} / Skills {7} | Time in mins before you can reset your stats or skills \n" +
                "VIP Reset Timers: Stats {8} / Skills {9} | Time in mins before VIP players can reset stats and skills \n" +
                "Night Bonus XP: Enabled:{10} | {11}% | Bonus XP received between {12}:00 and {13}:00 hours game time if enabled \n" +
                "Night Skills Enabled: {14} | Skills that have bonuses at night between {12}:00 and {13}:00 hours game time \n\n",
                ["xpsettings"] = "[XP Settings]: Amount of XP earned for kills, gathering, building, crafting, etc.. \n",
                ["xpsettingskills"] = "[Kills & Revive] \n\n" +
                "Chickens: {0} \n" +
                "Fish: {1} \n" +
                "Boar: {2} \n" +
                "Stag: {3} \n" +
                "Wolf: {4} \n" +
                "Bear: {5} \n" +
                "Shark: {6} \n" +
                "Horse: {7} \n" +
                "Scientist: {8} \n" +
                "Dweller: {9} \n" +
                "Player: {10} \n" +
                "Bradley: {11} \n" +
                "Helicopter: {12}\n\n" +
                "Reviving: {13}",
                ["xpsettingsloot"] = "[Gathering / Looting] \n\n" +
                "Loot Container: {0} \n" +
                "Underwater Loot Container: {1} \n" +
                "Locked Crate: {2} \n" +
                "Hackable Crate: {3} \n" +
                "Animal Harvest: {4} \n" +
                "Corpse Harvest: {5} \n" +
                "Tree: {6} \n" +
                "Ore: {7} \n" +
                "Gathering: {8} \n" +
                "Plant: {9}",
                ["xpsettingscraft"] = "[Crafting / Building] \n\n" +
                "Crafting: {0} \n" +
                "Wood Structure: {1} \n" +
                "Stone Structure: {2} \n" +
                "Metal Structure: {3} \n" +
                "Armored Structure: {4} \n",
                ["xpmissionsettings"] = "[Missions] \n\n" +
                "Mission Succeeded: {0} \n" +
                "Failed Reduction Enabled: {1} \n" +
                "Failed Reduction Amount: {2} \n",
                ["xpreductionsettings"] = "[XP Reduction] \n\n" +
                "Death: {0}% Enabled: {1}\n" +
                "Suicide: {2}% Enabled: {3}\n",
                ["nextpagestats"] = "To view details about Stats and Skills click Next Page at the top.",
                ["aboutstats"] = "The 4 major Stats are Mentality, Dexterity, Might & Captaincy.",
                ["aboutmentality"] = "Grants you the ability to lower research costs such as the amount of scrap required to unlock new items, Reduces Research Speed that decreases the amount of time it takes to research items in the research station, " +
                "gives you increased chance to attack with a critical hit and cause more damage to an enemy or animal, and give you a damage increase to NPCs",
                ["aboutmentalitysettings"] = "[Current Mentality Settings] \nMax Level: {0} \nStarting Cost: {1} \nCost Multiplier: {2}x  Level \nResearch Cost Reduction: {3}% \nResearch Speed Reduction: {4}% \n" +
                "Critical Chance: {5}%",
                ["aboutdexterity"] = "Grants you increased chance to Block attacks and lower the amount of damage you recieve, increased the chance to Dodge an attack completely and take no damage, and decrease the damage you recieve when your Armor bar is " +
                "full (Armor requires Might). It also give you a speed boost for horses, vehicles, and boats with a chance of consuming less fuel.",
                ["aboutdexteritysettings"] = "[Current Dexterity Settings]\nMax Level: {0} \nStarting Cost: {1} \nCost Multiplier: {2}x Level \nBlock Chance: {3}% | Block Amount: {4} \nDodge Chance: {5}% \nReduced Armor Damage: {6}%",
                ["aboutmight"] = "This is one of the most beneficial stats in the system! It grants you the ability to reduce bleeding time, radiation taken, greater tolerance to heat and cold, higher max calories and hydration, increased max health (Armor) " +
                "as well as increases the damage you do with melee weapons.",
                ["aboutmightsettings"] = "[Current Might Settings] \nMax Level: {0} \nStarting Cost: {1} \nCost Multiplier: {2}x Level \nArmor: {3}% | Increased Max Health \nMelee Damage Increase: {4}% \n" +
                "Metabolism Increase: {5}% | Thirst/Hunger \nBleed Reduction: {6}% \nRadiation Reduction: {7}% \nIncreased Heat Tolerance: {8}% \nIncreased Cold Tolerance: {9}%",
                ["aboutcaptaincy"] = "Gives other team members overall skill boosts and XP boost within a certain range. Stacks on a % increase of the team members skills to increase the skills abilities for each team member seperatly based on the skill level of each member. Only effects skills and not stats. Requires at least 2 members in a team and has no effect on the current player.",
                ["aboutcaptaincysettings"] = "[Current Captaincy Settings]\nMax Level: {0} \nStarting Cost: {1} \nCost Multiplier: {2}x Level \nEffective Distance: {3}FT \nSkill Boost: {4}%\n XP Boost Enabled: {5}\n XP Boost: {6}%",
                ["aboutweaponry"] = "Gives you a chance to have less condition damage when using tools, power tools, melee weapons, projectile weapons,  so they last longer. It also give you a bonus ammo amount so projectile weapons hold more ammo per clip.",
                ["aboutweaponrysettings"] = "[Current Weaponry Settings]\nMax Level: {0} \nStarting Cost: {1} \nCost Multiplier: {2}x Condition Reduction Chance: {3}% \nHand Tools: {4}%\nPower Tools: {5}%\nMelee Weapons: {6}%\nProjectile Weapons: {7}%\nMin Damage Allowed: {8}%\nMax Ammo Increase: {9}%",
                ["aboutskills"] = "The 11 secondary skills are Woodcutter, Smithy, Miner, Forager, Hunter, Crafter, Framer, Fisher, Medic, Scavenger & Tamer\n(taming requires pets mod and may not be available on certain servers).",
                ["aboutwoodcutter"] = "Increases the amount of wood you receive from cutting down trees, increases the bonus amount you get when a tree has been cut down, and gives you increased chances to have apples fall while cutting a tree.",
                ["aboutwoodcuttersettings"] = "[Current WoodCutter Settingss] \nMax Level: {0} \nStarting Cost: {1} \nCost Multiplier: {2}x Level \nGather Rate: +{3}% \nBonus: +{4}% \nApple Chance: {5}%",
                ["aboutsmithy"] = "Increases the chance of extra production from smelting or cooking in a furnace or grill and reduces the amount of fuel used in a furnace or grill so they burn longer with less fuel.",
                ["aboutsmithysettings"] = "[Current Smithy Settings]\nMax Level: {0} \nStarting Cost: {1} \nCost Multiplier: {2}x Level \nIncreased Production: {3}% \n Fuel Consumption: -{4}%",
                ["aboutminer"] ="Increases the amount of ore gathered from stone, metal, sulfur, etc.. and the amount of bonus material recieved when an ore has been fully collected. This skill also reduces the amount of fuel used when wearing a hat that consumes fuel like the mining hat, candle hat, etc..",
                ["aboutminersettings"] = "[Current Miner Settings]\nMax Level: {0}\nStarting Cost: {1}\nCost Multiplier: {2}\nGather Rate: +{3}%\nBonus: +{4}%\nFuel Consumption: -{5}%",
                ["aboutforager"] = "Increases the amount of resources you receive when collecting by hand from the ground such as wood, stone, metal, sulfer, berries, mushrooms, etc.. anything collected on the ground by hand. You also get an increased amount of seeds from berries, hemp, and other resources that provide seeds. This skill also gives you an increased chance to find random items when gathering by hand so make sure you keep an eye out around you for random item.",
                ["aboutforagersettings"] = "[Current Forager Settings]\nMax Level: {0}\nStarting Cost: {1}\nCost Multiplier: {2}\nGather Rate: +{3}%\nSeed Chance: +{4}% Amount: {5}\nRandom Item: {6}%",
                ["abouthunter"] = "Grants you the ability to get more food from animals when harvesting, increased bonus amount when fully harvested, increased damage to wildlife and even greater damage to wildlife when hunting at night.",
                ["abouthuntersettings"] = "[Current Hunter Settings]\nMax Level: {0}\nStarting Cost: {1}\nCost Multiplier: {2}\nGather Rate: +{3}%\nBonus: +{4}%\nWildlife Dmg Increase: +{5}%\nNight Dmg Increase: +{6}%",
                ["aboutcrafter"] = "Grants you increased crafting speed while reducing the amount of material cost when crafting. Gives you increased chance to fully repair items and increased chance to create items with up to 10% higher condition.",
                ["aboutcraftersettings"] = "[Current Crafter Settings]\nMax Level: {0}\nStarting Cost: {1}\nCost Multiplier: {2}\nCraft Speed: -{3}%\nCraft Cost: -{4}%\nRepair Speed: {5}%\nCondition Chance: {6}%\nCondition Increase: +10%",
                ["aboutframer"] = "Decreases the cost of materials needed to upgrade or repair buildings as well as reduces the repair time when a building has been damaged.",
                ["aboutframersettings"] = "[Current Framer Settings]\nMax Level: {0}\nStarting Cost: {1}\nCost Multiplier: {2}\n Upgrade Cost: {3}%\nRepair Cost: {4}%\nRepair Time: {5}%",
                ["aboutfisher"] = "Gives you the ability to catch more fish at one time or increases the items you collect when fishing if you don't catch a fish.",
                ["aboutfishersettings"] = "[Current Fisher Settings]\nMax Level: {0}\nStarting Cost: {1} \nCost Multiplier: {2} \nFish Increase: {3} \nItem Increase: {4}",
                ["aboutmedic"] = "Gives you the ability to revive yourself and other players with more health once revived as well as reduces the time it takes to craft teas or other items in the mixing table.",
                ["aboutscavenger"] = "Increases chance to find more loot inside containers with chance to find bonus items when looting containers. The higher your level the more items you'll find. Keep an eye out around these containers for your extra loot!",
                ["aboutmedicsettings"] = "[Current Medic Settings]\nMax Level: {0}\nStarting Cost: {1} \nCost Multiplier: {2} \nRevival Health: {3} \nRecover Health: {4} \nCrafting Time: {5}%",
                ["abouttamer"] = "If this skill is available then it will grant you the ability to tame animals as pets. Each level allows you to tame a bigger animal that can help you survive in the world. These pets can also carry items and even attack your enemies. Pets are currently controlled by a seperate mod with it's own settings and adjustments. More details about Pets can be found using the '/pet help' chat command",
                ["abouttamersettings"] = "[Current Tamer Settings]\nEnabled: {0} \nMax Level: {1} \nStarting Cost: {2} \nCost Multiplier: {3} \n\n[Tameable Pets]\nChicken: {4} | Level Req: {5} \nBoar: {6} | Level Req: {7} \nStag: {8} | Level Req:{9} \nWolf: {10} | Level Req: {11} \nBear: {12} | Level Req: {13}",
                ["aboutelectrician"] = "Increases the power output of almost all electrical sources including generators, solar panels, windmills, batteries, etc.. Can also increase the amount of power gained from solar panels even durring the night.",
                ["aboutdemolitionist"] = "Decreases the chance of explosive duds, increases the damage and radius of most explosives.",
                ["aboutninjary"] = "Decreases the chance of certain entities detecting you as long as you are not hostile or attack them. This can include the patrol helicopter, bradley tank, turrets, and NPCs. You also gain a bonus damage when using knives and swords to attack.",
                ["nextpageskills"] = "Click Next Page to view more skill information",
                ["techtreenode"] = "You need {0} scrap to research {1}",
                ["xpgiveneedtype"] = "Need to enter a player type: /xpgive (type name or id) (playername or playerid) (amount)",
                ["xpgiveneedname"] = "Need to enter a player name or id: /xpgive (type name or id) (playername or playerid) (amount)",
                ["pointsgiveneedtype"] = "Need to enter a point/player type: /xpgivepoints (type stat or skill) (type name or id) (playername or playerid) (amount)",
                ["pointsgiveneedname"] = "Need to enter a player name or id: /xpgivepoints (type stat or skill) (type name or id) (playername or playerid) (amount)",
                ["xpgivenotfound"] = "Player not found",
                ["xpgiveneedamount"] = "Need to enter an amount /xpgive (type name or id) (playername or playerid) (amount)",
                ["pointsgiveneedamount"] = "Need to enter an amount /xpgivepoints (type stat or skill) (type name or id) (playername or playerid) (amount)",
                ["xpgiveplayer"] = "You have given {0} {1} experience, they now have a total of {2} experience.",
                ["pointsgiveplayer"] = "You have given {0} {1} {2} points, they now have a total of {3} {2} points.",
                ["xpgiveall"] = "You have given all players {0} experience",
                ["xpresetneedtype"] = "Need to enter a player type: /xpreset (name or id) (playername or id)",
                ["xpresetneedname"] = "Need to enter a player name: /xpreset (name or id) (playername or id)",
                ["xpresetnotfound"] = "Player not found",
                ["xpresetplayer"] = "You have reset your character.",
                ["xpresetselectedplayer"] = "You have reset {0}",
                ["xptakeneedtype"] = "Need to enter a player type: /xptake (name or id) (playername or id) (amount)",
                ["xptakeneedname"] = "Need to enter a player name: /xptake (name or id) (playername or id) (amount)",
                ["xptakenotfound"] = "Player not found",
                ["xptakeneedamount"] = "Need to enter an amount: /xptake (name or id) (playername or id) (amount)",
                ["xptakeplayer"] = "You have taken {0} experince from {1}, they now have a total of {2} experience.",
                ["adminpanelinfonew"] = "ⓍⓅerience Admin Control Panel\n\n Here you can adjust all the settings for this mod without having to open and edit the config file. On the menu to your left are several pages where you can adjust " +
                "everything from levels, experience, stats, skills, and more.. Once you have made any adjustments to these pages make sure you click Save & Reload on the menu so that these adjustments are writen to the config " +
                "and loaded. If you do not click save and reload any adjustment you made will be lost! Keep in mind this is an extremely detailed mod and even the slightest adjustment can make a huge difference on how this mod functions! It is " +
                "suggested that you make minor adjustments to see how the settings will effect your server and player's gaming experience. If you adjust the level start, xp requirement increase, stat points per level or skill points per level settings after players have been playing on your server make sure you click Fix Player Data " +
                "on the Reset Options page AFTER you save and reload the mod so that the system can recalculate all players levels and requirements. Players will not loose any XP but they will have their profile reset and will have to reapply any points they have.\n\n" +
                "If you have any issues, questions, or suggestions you can join the mod developer's discord at \ndiscord.rustlevels.com\nhttps://discord.gg/gfZn8tvQGW\n\n You can also get updates, access to prerelease versions (beta), and more on our discord." +
                "\n\nⓍⓅerience was created by MACHIN3",
                ["playerfixdatahelp"] = "You can use the Fix My Data button below to have your xperience data recalculated. This will reset all your stats except your experience. Your level, required xp, points, and info will be reset and recalculated based on the current server settings and your current experience. You will receive " +
                "however many points for stats and skills that your level should have and you will need to reapply them towards your stats and skills.\n\n Reasons you may need to do this:\n1. Server settings may have been changed since your last login.\n2.Map wipe didn't properly link your data.\n3. New features were added.\n4. Server was restored to an earlier date.",
                ["uinotify_xpgain"] = "+{0} XP",
                ["uinotify_xploss"] = "-{0} XP",
                ["econbalance"] = "Balance:",
                ["econdeposit"] = "You received a deposit of {0} into your account for leveling up",
                ["econwidthdrawlevel"] = "You lost {0} from your account for level loss",
                ["econwidthdrawresetstat"] = "You spent {0} for resetting stats, your balance is now {1}",
                ["econwidthdrawresetskill"] = "You spent {0} for resetting skills, your balance is now {1}",
                ["econwidthdrawresetstatfailed"] = "You Do Not Have {0} for resetting stats, your balance is {1}",
                ["econwidthdrawresetskillfailed"] = "You Do Not Have {0} for resetting skills, your balance is {1}",
                ["econwidthdrawlevelup"] = "You spent {0} for leveling up {1}, your balance is now {2}",
                ["econwidthdrawlevelupfailed"] = "You Do Not Have {0} for leveling up {1}, your balance is {2}",
                ["srewardwidthdrawresetstat"] = "You spent {0} points for resetting stats, your balance is now {1}",
                ["srewardwidthdrawresetskill"] = "You spent {0} points for resetting skills, your balance is now {1}",
                ["srewardwidthdrawresetstatfailed"] = "You Do Not Have {0} points for resetting stats, your balance is {1}",
                ["srewardnwidthdrawresetskillfailed"] = "You Do Not Have {0} points for resetting skills, your balance is {1}",
                ["srewardwidthdrawlevelup"] = "You spent {0} points for leveling up {1}, your balance is now {2}",
                ["srewardswidthdrawlevelupfailed"] = "You Do Not Have {0} points for leveling up {1}, your balance is {2}",
                ["srewardsup"] = "You recieved {0} points in server rewards for leveling up",
                ["srewardsdown"] = "You lost {0} points in server rewards for leveling down",
                ["fixdatadisabled"] = "Fix Data Option Disabled By Admin",
                ["hardcorenoreset"] = "Hardcore mode enabled, Stat/Skill Reset is Disabed",
                ["crafternotenough"] = "Not enough resources to repair item",
                ["killrecords"] = "Kill Records",
                ["mykillrecords"] = "My Kill Records",
                ["mydeathrecords"] = "My Death Records",
                ["playerdeathrecords"] = "Player's Death Records",
                ["playerkillrecords"] = "Player's Kill Records",
                ["maxleveled"] = "You have reached the max level for {0}",
                ["playerrankup"] = "You have reached the Rank of {0}, your level, experience, stats, and skills have been reset. You start with {1} stat points and {2} skill points",
                ["rank"] = "Rank",
                ["ranksig"] = "Rank Tag",
                ["ranklevel"] = "Rank Level",
                ["rankxp"] = "Rank XP",
                ["uiscale"] = "UI Scale {0}",
                ["backpackgrant"] = "You have a backpack with {0} slots.",
                ["backpackrevoke"] = "You have lost permission to use your backpack.",
                ["quarryboost"] = "Quarry Production",
                ["quarryduration"] = "Quarry Dursation",
                ["quarrycooldown"] = "Quarry Cooldown",
                ["weaponryaddonammochance"] = "Free Ammo Chance",
                ["weaponryaddonreload"] = "Reload Speed",
                ["weaponryaddondistance"] = "Max Distance",
                ["weaponryaddonrange"] = "Effective Range",
                ["addonscavengervendorchance"] = "Extra Vending Chance",
                ["addonscavengervendoramount"] = "Extra Vending Amount",
                ["addonrecyclerchance"] = "Free Recycle Chance",
                ["addonrecyclerspeed"] = "Recycle Speed",
                ["grubworm"] = "Grub/Worm",
                ["myraids"] = "My Raids Completed",
                ["otherraids"] = "Player's Raids Completed",
                ["dailylimitreset"] = "Daily limit timer has been reset. Next Daily reset will be in {0} hours.",
                ["dailyxplimitreached"] = "You have earned the maximum allowed XP today ({0}). You can start earning XP again in {1} {2}.",
                ["dailyxplimit"] = "Daily XP limit",
                ["dailyresetlimit"] = "Daily Reset limit",
                ["dailyresetlimitreached"] = "You have reached the maximum allowed reset limit today ({0}). You can reset again in {1} {2}.",
                ["evaded"] = "You have evaded detection from {0}.",
                ["Ninjarypatrolstealth"] = "Patrol Helicopter Stealth",
                ["Ninjarych47stealth"] = "CH47 Helicopter Stealth",
                ["Ninjarybradleystealth"] = "Bradley APC Stealth",
                ["Ninjarynpcstealth"] = "NPC Stealth",
                ["Ninjaryturretstealth"] = "Turret Stealth",
                ["Ninjaryknifeincrease"] = "Knife Damage",
                ["Ninjaryswordincrease"] = "Sword Damage",
                ["playernotfound"] = "No player name with {0} found.",
                ["addonwelcome"] = "Welcome Panel",
                ["disabledbyadmin"] = "{0} is disabled by server admin",
                ["donothavepermission"] = "You do not have permission to use {0}",
                ["showaddonwelcome"] = "Show Welcome Panel",
                ["explosivedudreduction"] = "Explosive Dud Chance",
                ["explosivedamage"] = "Explosive Damage",
                ["explosiveradius"] = "Explosive Radius",
                ["rocketlockchance"] = "Rocket Lock Chance",
                ["rocketlocktime"] = "Rocket Lock Time (seconds)",
                ["rocketlockmindistance"] = "Rocket Lock Distance",
                ["rocketexplode"] = "Rocket Detonation Time",
                ["rocketspeed"] = "Rocket Speed",
                ["rocketdmg"] = "Rocket Damage",
                ["calculations"] = "Calculations",
                ["calculationstitle"] = "Level Calculations",
                ["xpboosteractive"] = "XP Boost",
                ["eventnoxpgain"] = "You have entered the {0} event. You will not gain any XP while in this event",
                ["eventnoxploss"] = "You have entered the {0} event. You will not lose any XP while in this event",
                ["eventnoskills"] = "You have entered the {0} event. All Stats and Skills are disabled while in this event",
                ["uihelp"] = "Navigating the UI:\nThe main menu on the side allows you to view the different pages available such as your main profile, statistics, settings, top players, stats or skills, and more depending on what your server allows.\n\nProfiles:\nThe main profile page shows all your XPerience data including XP, level, rank, Stat levels, Skill levels, overall character data and more. There you can tell how much XP you have earned, how much you need to reach the next available level, and the total stat or skill points earned and spent. You can switch between Stats and Skills by clicking the label above those listed and each Stat and Skill name is also clickable to view each ones edit page where you can spend your available points.\n\nStatistics:\nThe statistics page will show you all the recourses you have gathered including wood, stone, metal, sulfur and much more. This page will also show your total kills, kill history, and looting if available.\n\nStats/Skills:\nThese pages will show you all the available stats and skills, the abilities each one grants you, current and max level of each stat or skill, points spent, needed to reach next level and total points needed to reach the max level. Each stat and skill page will have options to level up if you have enough points, reset the stat or skill if allowed, and help button to view more detailed explaination of each one. The icons at the top will switch between each stat or skill and the main icon is also clickable to view the help section for each.\n\nSettings:\nThe settings page will show you all the available options you can change based on how you want certain things to look such as the live UI location on your screen, dash panel UI and the type of display from MPH to KMH, enable or disable confirmation prompts, chat messages, and more.\n\nTop Players:\nThe top players pages allows you to view the top players on the server for different things such as top players in level, rank, XP, as well as each stat or skill. At the top of the page you can switch between the top player lists.",
            }, this);
        }
        #endregion

        #region API / Other Mod Hooks
        [HookMethod("GiveXPID")]
        void GiveXPID(ulong playerid, double amount)
        {
            string player = playerid.ToString();
            if (player == null || amount == 0) return;
            var user = _xperienceCache.ToList().FirstOrDefault(x => x.Value.id.ToString().ToLower().Contains(player));
            if (user.Value == null) return;
            XPRecord vxprecord = GetPlayerRecord(user.Value.id);
            if(vxprecord == null) return;
            GainExpID(user.Value.id, amount);
        }
        [HookMethod("GiveXP")]
        void GiveXP(BasePlayer player, double amount)
        {
            if (player == null || amount == 0) return;
            GainExp(player, amount);
        }
        [HookMethod("GiveXPBasic")]
        void GiveXPBasic(BasePlayer player, double amount)
        {
            if (player == null || amount == 0) return;
            GainExpBasic(player, amount);
        }
        [HookMethod("GiveStatPoints")]
        void GiveStatPoints(BasePlayer player, int amount)
        {
            if (player == null || amount == 0) return;
            GivePoints(player, "stat", amount);
        }
        [HookMethod("GiveSkillPoints")]
        void GiveSkillPoints(BasePlayer player, int amount)
        {
            if (player == null || amount == 0) return;
            GivePoints(player, "skill", amount);
        }
        [HookMethod("TakeXP")]
        void TakeXP(BasePlayer player, double amount)
        {
            if (player == null || amount == 0) return;
            LoseExp(player, amount);
        }
        [HookMethod("GetXPCache")]
        string GetXPCache(BasePlayer player, string info)
        {
            if (player == null || !player.userID.Get().IsSteamId() || info == null) return "Data Missing";
            XPRecord xprecord = GetXPRecord(player);
            Ranks rank = GetXPRank(xprecord.rank);
            switch (info.ToLower())
            {
                case "steamid":
                    info = player.UserIDString;
                    break;
                case "displayname":
                    info = player.displayName;
                    break;
                case "level":
                    info = xprecord.level.ToString();
                    break;
                case "xp":
                    info = xprecord.experience.ToString();
                    break;
                case "lastreqxp":
                    info = (xprecord.requiredxp - (xprecord.level * config.xpLevel.levelmultiplier)).ToString();
                    break;
                case "reqxp":
                    info = xprecord.requiredxp.ToString();
                    break;
                case "statp":
                    info = xprecord.statpoint.ToString();
                    break;
                case "skillp":
                    info = xprecord.skillpoint.ToString();
                    break;
                case "mentality":
                    info = xprecord.Mentality.ToString();
                    break;
                case "mentalityp":
                    info = xprecord.MentalityP.ToString();
                    break;
                case "dexterity":
                    info = xprecord.Dexterity.ToString();
                    break;
                case "dexterityp":
                    info = xprecord.DexterityP.ToString();
                    break;
                case "might":
                    info = xprecord.Might.ToString();
                    break;
                case "mightp":
                    info = xprecord.MightP.ToString();
                    break;
                case "captaincy":
                    info = xprecord.Captaincy.ToString();
                    break;
                case "captaincyp":
                    info = xprecord.CaptaincyP.ToString();
                    break;
                case "weaponry":
                    info = xprecord.Weaponry.ToString();
                    break;
                case "weaponryp":
                    info = xprecord.WeaponryP.ToString();
                    break;
                case "ninjary":
                    info = xprecord.Ninjary.ToString();
                    break;
                case "ninjaryp":
                    info = xprecord.NinjaryP.ToString();
                    break;
                case "woodcutter":
                    info = xprecord.WoodCutter.ToString();
                    break;
                case "woodcutterp":
                    info = xprecord.WoodCutterP.ToString();
                    break;
                case "smithy":
                    info = xprecord.Smithy.ToString();
                    break;
                case "smithyp":
                    info = xprecord.SmithyP.ToString();
                    break;
                case "miner":
                    info = xprecord.Miner.ToString();
                    break;
                case "minerp":
                    info = xprecord.MinerP.ToString();
                    break;
                case "forager":
                    info = xprecord.Forager.ToString();
                    break;
                case "foragerp":
                    info = xprecord.ForagerP.ToString();
                    break;
                case "fisher":
                    info = xprecord.Fisher.ToString();
                    break;
                case "fisherp":
                    info = xprecord.FisherP.ToString();
                    break;
                case "hunter":
                    info = xprecord.Hunter.ToString();
                    break;
                case "hunterp":
                    info = xprecord.HunterP.ToString();
                    break;
                case "scavenger":
                    info = xprecord.Scavenger.ToString();
                    break;
                case "scavengerp":
                    info = xprecord.ScavengerP.ToString();
                    break;
                case "electrician":
                    info = xprecord.Electrician.ToString();
                    break;
                case "electricianp":
                    info = xprecord.ElectricianP.ToString();
                    break;
                case "demolitionist":
                    info = xprecord.Demolitionist.ToString();
                    break;
                case "demolitionistp":
                    info = xprecord.DemolitionistP.ToString();
                    break;
                case "tamer":
                    info = xprecord.Tamer.ToString();
                    break;
                case "tamerp":
                    info = xprecord.TamerP.ToString();
                    break;
                case "medic":
                    info = xprecord.Medic.ToString();
                    break;
                case "medicp":
                    info = xprecord.MedicP.ToString();
                    break;
                case "framer":
                    info = xprecord.Framer.ToString();
                    break;
                case "framerp":
                    info = xprecord.FramerP.ToString();
                    break;
                case "crafter":
                    info = xprecord.Crafter.ToString();
                    break;
                case "crafterp":
                    info = xprecord.CrafterP.ToString();
                    break;
                case "status":
                    info = xprecord.Status.ToString();
                    break;
                case "wood":
                    info = xprecord.Wood.ToString();
                    break;
                case "stone":
                    info = xprecord.Stone.ToString();
                    break;
                case "metal":
                    info = xprecord.Metal.ToString();
                    break;
                case "sulfur":
                    info = xprecord.Sulfur.ToString();
                    break;
                case "cactus":
                    info = xprecord.Cactus.ToString();
                    break;
                case "berries":
                    info = xprecord.Berries.ToString();
                    break;
                case "potato":
                    info = xprecord.Potato.ToString();
                    break;
                case "pumpkin":
                    info = xprecord.Pumpkin.ToString();
                    break;
                case "corn":
                    info = xprecord.Corn.ToString();
                    break;
                case "mushroom":
                    info = xprecord.Mushroom.ToString();
                    break;
                case "hemp":
                    info = xprecord.Hemp.ToString();
                    break;
                case "seed":
                    info = xprecord.Seed.ToString();
                    break;
                case "ranksenabled":
                    info = config.xpLevelRanks.enableresetranks.ToString();
                    break;
                case "truexp":
                    info = xprecord.trueexperience.ToString();
                    break;
                case "truelevel":
                    info = xprecord.truelevel.ToString();
                    break;
                case "rank":
                    info = xprecord.rank.ToString();
                    break;
                case "rankname":
                    info = rank.name.ToString();
                    break;
                case "ranksig":
                    info = rank.sig.ToString();
                    break;
                case "rankimg":
                    info = rank.image.ToString();
                    break;
            }
            return info;
        }
        #endregion
    }
    #region Extension Methods
    namespace XPerienceEx
    {
        public static class PlayerEx
        {
            public static void RunEffect(this BasePlayer player, string prefab)
            {
                Effect effect = new Effect();
                effect.Init(Effect.Type.Generic, player.ServerPosition, Vector3.zero);
                effect.pooledString = prefab;
                EffectNetwork.Send(effect, player.Connection);
            }
        }
    } 
    #endregion
}   

// --- End of file: XPerience.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/xp-revived ---
// --- Original File Path: X/XpRevived/XpRevived.cs ---

using System;
using System.Linq;
using System.Globalization;
using System.Collections.Generic;
using System.Text;
using Newtonsoft.Json;
using UnityEngine;

using Oxide.Core;
using Oxide.Game.Rust.Cui;

// TODO: Better audio.
// TODO: Custom popup UIs.
// TODO: Merge /learn and /level into a UI.
// TODO: XP from recycling.

namespace Oxide.Plugins
{
    [Info("Xp Revived", "Mattparks", "0.2.8")]
    [Description("Brings back the XP system")]
    class XpRevived : RustPlugin
    {
        #region Managers

        [PluginReference] RustPlugin ImageLibrary;
        static XpRevived _plugin;

        public class Images
        {
            public static string TryForImage(string shortname, ulong skin = 99, bool localimage = true)
            {
                if (localimage)
                {
                    if (skin == 99)
                    {
                        return GetImage(shortname, (ulong)_plugin.ResourceId);
                    }
                    else
                    {
                        return GetImage(shortname, skin);
                    }
                }
                else if (skin == 99)
                {
                    return GetImageURL(shortname, (ulong)_plugin.ResourceId);
                }
                else
                {
                    return GetImageURL(shortname, skin);
                }
            }

            public static string GetImageURL(string shortname, ulong skin = 0) => (string)_plugin.ImageLibrary?.Call("GetImageURL", shortname, skin);
            public static uint GetTextureID(string shortname, ulong skin = 0) => (uint)_plugin.ImageLibrary?.Call("GetTextureID", shortname, skin);
            public static string GetImage(string shortname, ulong skin = 0) => (string)_plugin.ImageLibrary?.Call("GetImage", shortname, skin);
            public static bool AddImage(string url, string shortname, ulong skin = 0) => (bool)_plugin.ImageLibrary?.Call("AddImage", url, shortname, skin);
            public static bool HasImage(string shortname, ulong skin = 0) => (bool)_plugin.ImageLibrary?.Call("HasImage", shortname, skin);
            public static void TryAddImage(string url, string shortname, ulong skin = 0)
            {
                if (!HasImage(shortname, skin))
                {
                    AddImage(url, shortname, skin);
                }
            }

            public static List<ulong> GetImageList(string shortname) => (List<ulong>)_plugin.ImageLibrary?.Call("GetImageList", shortname);
        }

        public class UI
        {
            public static CuiElementContainer CreateElementContainer(string panelName, string color, string aMin, string aMax, bool useCursor = false, string parent = "Overlay")
            {
                var NewElement = new CuiElementContainer()
                {
                    {
                        new CuiPanel
                        {
                            Image = {Color = color},
                            RectTransform = {AnchorMin = aMin, AnchorMax = aMax},
                            CursorEnabled = useCursor
                        },
                        new CuiElement().Parent = parent,
                        panelName
                    }
                };
                return NewElement;
            }

            public static void LoadImage(ref CuiElementContainer container, string panel, string url, string aMin, string aMax)
            {
                container.Add(new CuiElement
                {
                    Name = CuiHelper.GetGuid(),
                    Parent = panel,
                    FadeOut = 0.15f,
                    Components =
                    {
                        new CuiRawImageComponent { Url = url, FadeIn = 0.3f },
                        new CuiRectTransformComponent { AnchorMin = aMin, AnchorMax = aMax }
                    }
                });
            }

            public static void CreateInput(ref CuiElementContainer container, string panel, string color, string text, int size, string aMin, string aMax, string command, bool password, int charLimit, TextAnchor align = TextAnchor.MiddleCenter)
            {
                container.Add(new CuiElement
                {
                    Name = CuiHelper.GetGuid(),
                    Parent = panel,
                    Components =
                    {
                        new CuiInputFieldComponent { Text = text, FontSize = size, Align = align, Color = color, Command = command, IsPassword = password, CharsLimit = charLimit},
                        new CuiRectTransformComponent {AnchorMin = aMin, AnchorMax = aMax }
                    }
                });
            }

            public static void CreatePanel(ref CuiElementContainer container, string panel, string color, string aMin, string aMax, bool cursor = false)
            {
                container.Add(new CuiPanel
                {
                    Image = { Color = color },
                    RectTransform = { AnchorMin = aMin, AnchorMax = aMax },
                    CursorEnabled = cursor
                },
                panel);
            }

            public static void CreateText(ref CuiElementContainer container, string panel, string color, string text, int size, string aMin, string aMax, TextAnchor align = TextAnchor.MiddleCenter)
            {
                container.Add(new CuiLabel
                {
                    Text = { Color = color, FontSize = size, Align = align, Text = text },
                    RectTransform = { AnchorMin = aMin, AnchorMax = aMax }
                },
                panel);
            }

            public static void CreateButton(ref CuiElementContainer container, string panel, string color, string text, int size, string aMin, string aMax, string command, TextAnchor align = TextAnchor.MiddleCenter)
            {
                container.Add(new CuiButton
                {
                    Button = { Color = color, Command = command, FadeIn = 1.0f },
                    RectTransform = { AnchorMin = aMin, AnchorMax = aMax },
                    Text = { Text = text, FontSize = size, Align = align }
                },
                panel);
            }

            public static string Color(string hexColor, float alpha)
            {
                if (hexColor.StartsWith("#"))
                {
                    hexColor = hexColor.TrimStart('#');
                }

                int red = int.Parse(hexColor.Substring(0, 2), NumberStyles.AllowHexSpecifier);
                int green = int.Parse(hexColor.Substring(2, 2), NumberStyles.AllowHexSpecifier);
                int blue = int.Parse(hexColor.Substring(4, 2), NumberStyles.AllowHexSpecifier);
                return $"{(double)red / 255} {(double)green / 255} {(double)blue / 255} {alpha}";
            }
        }

        public class UIManager
        {
            public List<string> activeUis = new List<string>();

            public void AddContainer(string container)
            {
                activeUis.Add(container);
            }

            public void RemoveContainer(string container)
            {
                activeUis.Remove(container);
            }

            public void DestroyUI(BasePlayer player, bool destroyNav = false)
            {
                foreach (string activeUi in activeUis)
                {
                    CuiHelper.DestroyUi(player, activeUi);
                }

                activeUis.Clear();
            }
        }

        #endregion

        #region Configuration

        private List<string> BlockedBps = new List<string>{
            "scrap",
            "blueprintbase",
            "bleach",
            "ducttape",
            "gears",
            "glue",
            "techparts",
            "tarp",
            "sticks",
            "metalspring",
            "sewingkit",
            "rope",
            "metalpipe",
            "riflebody",
            "smgbody",
            "semibody",
            "propanetank",
            "metalblade",
            "roadsigns",
            "sheetmetal",
            "targeting.computer",
            "cctv.camera"
        };

        public class ItemData
        {
            public string ShortName;
            public string EnglishName;
            public int UnlockLevel;
            public int CostXP;
            public bool UnlockOnLevel;
        }

        public class Options
        {
            public bool UnlimitedComponents = false; // Allows unlimited components while crafting (items defined in blockedItems list).
            public List<string> BlockedItems = new List<string>(); // A list of blocked items, they will be removed from crafting requirements and loot.
            public List<ItemData> ItemDatas = new List<ItemData>(); // A list of all items that have level and xp requirements.
            public string LevelUpPrefab = "assets/prefabs/misc/xmas/presents/effects/unwrap.prefab"; // The sound that will play when leveling up.
            public string LearnPrefab = "assets/prefabs/misc/xmas/presents/effects/unwrap.prefab"; // The sound that will play the player learns.
            public float LevelPivot = 7.0f; // The point where level growth delines.
            public float LevelXpRatio = 2.666f; // The amount of leveling defined in LevelRates times this value is the XP gained from a level task.
            public float XpFromGivenTool = 0.05f; // The amount of XP shared to a tools original owner. (TODO)
            public bool LootRemoveScrap = true; // Removes scrap from loot containers.
            public bool RemoveIngredients = false; // Removes ingredients from blockedItems from item crafting blueprints.
            public bool UnlockAllOnLevel = false; // This will unlock every BP for a level when the level is unlocked, disables learn commands.
        }

        public class Display
        {
            public string LevelIcon = "https://i.imgur.com/lXpowuB.png"; // The icon displayed by the level.
            public string XpIcon = "https://i.imgur.com/RoKRyG7.png"; // The icon displayed by the xp.
            public float OffsetX = 0.0f; // HUD offset X.
            public float OffsetY = 0.0f; // HUD offset Y.
            public string TextColourLearned = "#27ae60";
            public string TextColourNotLearned = "#e74c3c";
            public string TextColourAutomatic = "#aa42f4";
            public string HudColourLevel = "#CD7C41";
            public string HudColourXp = "#95BB42";
            public bool HudEnabled = true;
        }
        
        public class LevelRates
        {
            public float RepeatDelay = 120.0f; // The timeout between repeated XP (AFK points).
            public float Repeat = 0.054f; // The amount of repeat XP.

            public float PlayerKilled = 0.072f; // Amount from killing a player.
            public float PlayerRecovered = 0.087f; // Amount recovering from wounded.
            public float PlayerHelped = 0.1f; // Amount from helping a player up. (TODO)

            public float ItemCrafted = 0.081f; // Amount from crafting.

            public float Recycling = 0.082f; // Amount from recycling. (TODO)
            public float Looting = 0.072f; // Amount from looting. (TODO)

            public float KilledHeli = 0.92f; // Amount from killing a heli.
            public float KilledAnimal = 0.082f; // Amount from killing a animal (scales with animals health).
            public float BrokeBarrel = 0.063f; // Amount from breaking a barrel.
            public float ItemPickup = 0.045f; // Amount from picking a item up (like hemp or stones, not items).

            public float HitTree = 0.017f; // Amount from hitting a tree.
            public float HitOre = 0.020f; // Amount from hitting a node.
            public float HitFlesh = 0.009f; // Amount from corpse.

            public float SupplyThrown = 0.09f; // Amount from throwing a supply signal.
            
            public float StructureUpgraded = 0.02f; // Amount from upgrading a structure.
        }

        public class NoobKill
        {
            public int MaxNoobLevel = 4; // The highest level to be considered as a noob.
            public float XpPunishment = -0.2f; // The XP removed from a noob killer (per kill).
        }

        public class ConfigData
        {
            public Options Options = new Options();
            public Display Display = new Display();
            public LevelRates LevelRates = new LevelRates();
            public NoobKill NoobKill = new NoobKill();
        }

        public class PlayerData
        {
            public float Level;
            public float Xp;
            public bool ResetBps;
        }

        public class StoredData
        {
            public Dictionary<ulong, PlayerData> PlayerData = new Dictionary<ulong, PlayerData>();
        }

        private UIManager _uiManager;
        private ConfigData _config;
        private StoredData _storedData;

        protected override void LoadDefaultConfig()
        {
            PrintWarning("Creating a new config file!");
            _config = new ConfigData();
            _config.Options.BlockedItems = null;
            _config.Options.ItemDatas = null;
            Config.WriteObject(_config, true);
        }

        protected override void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["XP_ABOUT"] = "<color=#e74c3c>Xp Revived {Version}:</color> by <color=green>mattparks</color>. Xp Revived is a plugin that brings back a XP system. Use the commands as follows: \n <color=#3498db>-</color> /level # (Describes what you can learn from a level) \n <color=#3498db>-</color> /learn 'item' (Lets you learn a item)",
                ["XP_LEVEL_ITEMS"] = "These items are unlocked over level {Level}: ",
                ["XP_LEVEL_NONE"] = "No items unlocked for level {Level}",
                ["XP_LEARN_USAGE"] = "Usage: /learn itemname (You try to learn a item, if you are a high enough level with XP)",
                ["XP_LEARN_MIN_LEVEL"] = "You must be level {Level} to learn {ItemName}",
                ["XP_LEARN_UNKNOWN"] = "Could not find item by name of: {ItemName}",
                ["XP_LEARN_KNOWN"] = "You already know: {ItemName}",
                ["XP_LEARN_NEEDS_XP"] = "You must have {Cost} XP to learn {ItemName}",
                ["XP_LEARN_SUCESS"] = "You learned {ItemName}",
                ["XP_NOOB_KILL"] = "You killed a new player, you will be punished!"
            }, this);
        }

        private void LoadStoredData()
        {
            _storedData = Interface.Oxide.DataFileSystem.ReadObject<StoredData>(Name);

            if (_storedData == null)
            {
                PrintWarning("Creating a new data file!");
                _storedData = new StoredData();
                SaveStoredData();
            }
        }

        private void SaveStoredData()
        {
            Interface.Oxide.DataFileSystem.WriteObject(Name, _storedData);
        }

        #endregion

        #region Hooks

        private void Init()
        {
            _plugin = this;
            _uiManager = new UIManager();
            _config = Config.ReadObject<ConfigData>();
            LoadStoredData();
            
            if (!_config.Options.LootRemoveScrap)
            {
                Unsubscribe(nameof(OnEntitySpawned));
            }
        }

        private void OnServerInitialized()
        {
            if (_config.Options.UnlimitedComponents && _config.Options.BlockedItems == null)
            {
                PrintWarning("Generating blocked item list...");
                _config.Options.BlockedItems = new List<string>()
                {
                    "scrap", "blueprintbase", "bleach", "ducttape", "gears", "glue", "techparts", "tarp", "sticks", "metalspring", "sewingkit", "rope", "metalpipe", "riflebody", "smgbody", "semibody", "propanetank", "metalblade", "roadsigns", "sheetmetal", // "targeting.computer", "cctv.camera"
                };
            }
            
            if (_config.Options.ItemDatas == null)
            {
                _config.Options.ItemDatas = new List<ItemData>();
                ResetConfigXpLevels();
            }
            
            if (_config.Options.RemoveIngredients)
            {
                foreach (ItemDefinition bp in ItemManager.itemList)
                {
                    bp?.Blueprint?.ingredients?.RemoveAll(x =>
                        _config.Options.BlockedItems.Contains(x.itemDef.shortname));
                }
            }

            foreach (BasePlayer player in BasePlayer.activePlayerList)
            {
                InfiniteComponents(player, true, true);
                UpdatePlayerUi(player);
            }
            
            if (_config.LevelRates.Repeat != 0.0f)
            {
                timer.Repeat(_config.LevelRates.RepeatDelay, 0, () =>
                {
                    foreach (BasePlayer player in BasePlayer.activePlayerList)
                    {
                        IncreaseXp(player, _config.LevelRates.Repeat, false);
                    }
                });
            }
            
            Config.WriteObject(_config, true);

            timer.Repeat(300f, 0, () =>
            {
                Puts("Saving stored data...");
                SaveStoredData();
            });
        }
        
        private void OnPlayerInit(BasePlayer player)
        {
            if (player == null || !player.IsConnected)
            {
                return;
            }

            if (player.HasPlayerFlag(BasePlayer.PlayerFlags.ReceivingSnapshot))
            {
                timer.Once(2.0f, () => OnPlayerInit(player));
                return;
            }

            timer.In(1.0f, () =>
            {
                if (player != null && player.IsConnected)
                {
                    InfiniteComponents(player, true, true);
                    UpdatePlayerUi(player);
                }
            });
        }

        private void OnPlayerSpawn(BasePlayer player)
        {
            InfiniteComponents(player, true, true);
            UpdatePlayerUi(player);
        }

        private void OnPlayerRespawned(BasePlayer player)
        {
            InfiniteComponents(player, true, true);
        }

        private void OnPlayerDisconnected(BasePlayer player, string reason)
        {
            InfiniteComponents(player, true, false);
            _uiManager.DestroyUI(player, true);
        }

        private object OnPlayerDie(BasePlayer player, HitInfo info)
        {
            if (player is NPCPlayerApex)
            {
                return null;
            }
            
            PlayerData playerData = GetPlayerData(player.userID);

            if (info?.InitiatorPlayer != null && player != info.InitiatorPlayer)
            {
                PlayerData killerData = GetPlayerData(info.InitiatorPlayer.userID);

                if (Math.Floor(playerData.Level) <= _config.NoobKill.MaxNoobLevel &&
                    Math.Floor(killerData.Level) > _config.NoobKill.MaxNoobLevel)
                {
                    MessagePlayer(Lang("XP_NOOB_KILL", info.InitiatorPlayer), info.InitiatorPlayer);
                    IncreaseXp(info.InitiatorPlayer, _config.NoobKill.XpPunishment);
                }
                else
                {
                    IncreaseXp(info.InitiatorPlayer, _config.LevelRates.PlayerKilled);
                }
            }

            return null;
        }

        private void OnPlayerRecover(BasePlayer player)
        {
            IncreaseXp(player, _config.LevelRates.PlayerRecovered);
        }

        private void OnItemCraftCancelled(ItemCraftTask task)
        {
            foreach (Item item in task.takenItems.ToList())
            {
                if (task != null && item != null && _config.Options.BlockedItems.Contains(item.info.shortname))
                {
                    task.takenItems.Remove(item);
                    item.Remove();
                }
            }
        }

        private void OnEntitySpawned(LootContainer container)
        {
            if (_config.Options.LootRemoveScrap)
            {
                AssignLoot(container);
            }
        }

        private object OnRecycleItem(Recycler recycler, Item item)
        {
            if (_config.Options.BlockedItems == null || !_config.Options.BlockedItems.Any())
            {
                return null;
            }

            if (item.info.Blueprint != null)
            {
                if (item.info.Blueprint.ingredients.Any(x => _config.Options.BlockedItems.Contains(x?.itemDef?.shortname)))
                {
                    foreach (ItemAmount itemAmount in item.info.Blueprint.ingredients)
                    {
                        if (!_config.Options.BlockedItems.Contains(itemAmount.itemDef.shortname))
                        {
                            recycler.MoveItemToOutput(ItemManager.Create(itemAmount.itemDef, Mathf.CeilToInt(itemAmount.amount * recycler.recycleEfficiency))); // Give normal items.
                            continue;
                        }

                        foreach (var componentIngredient in itemAmount.itemDef.Blueprint.ingredients) // Directly convert components into sub materials.
                        {
                            Item newItem = ItemManager.Create(componentIngredient.itemDef, Mathf.CeilToInt((componentIngredient.amount * recycler.recycleEfficiency)) * Mathf.CeilToInt(itemAmount.amount * recycler.recycleEfficiency), 0uL);
                            if (newItem != null)
                            {
                                recycler.MoveItemToOutput(newItem);
                            }
                        }
                    }

                    item.UseItem();
                    return true;
                }
            }

            return null;
        }

        private object OnItemResearch(Item item, BasePlayer player)
        {
            return false;
        }

        private void OnItemCraftFinished(ItemCraftTask task, Item item)
        {
            IncreaseXp(task.owner, _config.LevelRates.ItemCrafted);
        }

        private void OnEntityDeath(BaseCombatEntity entity, HitInfo info)
        {
            BasePlayer victim = entity as BasePlayer;
            if (victim != null)
            {
                InfiniteComponents(victim, true, false);
            }
            
            if (info?.InitiatorPlayer != null)
            {
                if (entity.PrefabName.Contains("npc"))
                {
                    if (entity.PrefabName.Contains("patrolhelicopter"))
                    {
                        IncreaseXp(info.InitiatorPlayer, _config.LevelRates.KilledHeli);
                    }
                }
                else if (entity.PrefabName.Contains("rust.ai") && !entity.PrefabName.Contains("corpse"))
                {
                    IncreaseXp(info.InitiatorPlayer, _config.LevelRates.KilledAnimal * (entity._maxHealth / 90.0f));
                }
                else if (entity.PrefabName.Contains("radtown") || entity.PrefabName.Contains("loot-barrel"))
                {
                    IncreaseXp(info.InitiatorPlayer, _config.LevelRates.BrokeBarrel);
                }
            }
        }

        private void OnCollectiblePickup(Item item, BasePlayer player)
        {
            IncreaseXp(player, _config.LevelRates.ItemPickup);
        }

        private void OnDispenserGather(ResourceDispenser dispenser, BaseEntity entity, Item item)
        {
            BasePlayer player = entity.ToPlayer();
            if (player == null || player is NPCPlayer || dispenser == null)
            {
                return;
            }

            if (dispenser.gatherType == ResourceDispenser.GatherType.Tree)
            {
                IncreaseXp(player, _config.LevelRates.HitTree);
            }

            if (dispenser.gatherType == ResourceDispenser.GatherType.Ore)
            {
                IncreaseXp(player, _config.LevelRates.HitOre);
            }

            if (dispenser.gatherType == ResourceDispenser.GatherType.Flesh)
            {
                IncreaseXp(player, _config.LevelRates.HitFlesh);
            }
        }
        
        private void OnStructureUpgrade(BaseCombatEntity entity, BasePlayer player)
        {
            IncreaseXp(player, _config.LevelRates.StructureUpgraded);
        }

        private void Unload()
        {
            foreach (BasePlayer player in BasePlayer.activePlayerList)
            {
                InfiniteComponents(player, true, false);
                _uiManager.DestroyUI(player, true);
                player.SendConsoleCommand("gametip.hidegametip");
            }

            SaveStoredData();
        }

        #endregion

        #region Chat/Console Commands

        [ChatCommand("xp")]
        private void CommandXp(BasePlayer player, string command, string[] args)
        {
            MessagePlayer(Lang("XP_ABOUT", player).Replace("{Version}", Version.ToString()), player);
        }

        [ChatCommand("level")]
        private void CommandLevel(BasePlayer player, string command, string[] args)
        {
            if (args.Length == 1)
            {
                int level = -1;
                bool isNumeric = int.TryParse(args[0], out level);
                StringBuilder message = new StringBuilder();
                
                if (!isNumeric)
                {
                    return;
                }

                foreach (ItemData item in _config.Options.ItemDatas)
                {
                    if (item.UnlockLevel == level)
                    {
                        if (message.Length == 0)
                        {
                            message.Append(Lang("XP_LEVEL_ITEMS", player).Replace("{Level}", level.ToString()));
                        }

                        var learned = player.blueprints.IsUnlocked(ItemManager.CreateByPartialName(item.ShortName).info);
                        var colour = learned ? _config.Display.TextColourLearned : _config.Display.TextColourNotLearned;
                        
                        if (item.UnlockOnLevel)
                        {
                            colour = _config.Display.TextColourAutomatic;
                        }
                        
                        message.Append($"\n<color={colour}> - {GetItemDefinition(item.ShortName).displayName.english} ({item.CostXP} XP)</color>");
                    }
                }


                if (message.Length != 0)
                {
                    MessagePlayer(message.ToString(), player);
                    return;
                }

                MessagePlayer(Lang("XP_LEVEL_NONE", player).Replace("{Level}", level.ToString()), player);
            }
        }

        [ChatCommand("unlock")]
        private void CommandUnlock(BasePlayer player, string command, string[] args)
        {
            CommandLearn(player, command, args);
        }
        
        [ChatCommand("learn")]
        private void CommandLearn(BasePlayer player, string command, string[] args)
        {
            if (_config.Options.UnlockAllOnLevel)
            {
                return;
            }
            
            PlayerData playerData = GetPlayerData(player.userID);
            string givenName = String.Join(" ", args);

            if (givenName.Trim().Length == 0 || givenName.Trim().ToLower() == "help")
            {
                MessagePlayer(Lang("XP_LEARN_USAGE", player), player);
                return;
            }
            
            ItemData itemData = null;
            ItemDefinition itemDefinition = null;

            foreach (ItemData item in _config.Options.ItemDatas)
            {
                if (!string.Equals(item.ShortName, givenName, StringComparison.CurrentCultureIgnoreCase) &&
                    !string.Equals(item.EnglishName, givenName, StringComparison.CurrentCultureIgnoreCase))
                {
                    continue;
                }

                itemData = item;
                itemDefinition = GetItemDefinition(item.ShortName);

                if (item.UnlockLevel > playerData.Level)
                {
                    MessagePlayer(Lang("XP_LEARN_MIN_LEVEL", player).Replace("{Level}", item.UnlockLevel.ToString()).Replace("{ItemName}", itemDefinition.displayName.english), player);
                    return;
                }
            }

            if (itemData == null || itemDefinition == null)
            {
                MessagePlayer(Lang("XP_LEARN_UNKNOWN", player).Replace("{ItemName}", givenName), player);
                return;
            }

            if (player.blueprints.IsUnlocked(itemDefinition))
            {
                MessagePlayer(Lang("XP_LEARN_KNOWN", player).Replace("{ItemName}", givenName), player);
                return;
            }

            if (itemData.CostXP > playerData.Xp)
            {
                MessagePlayer(Lang("XP_LEARN_NEEDS_XP", player).Replace("{Cost}", itemData.CostXP.ToString()).Replace("{ItemName}", givenName), player);
                return;
            }

            playerData.Xp -= itemData.CostXP;
            Effect.server.Run(_config.Options.LearnPrefab, player.transform.position);
            player.blueprints.Unlock(itemDefinition);

            MessagePlayer(Lang("XP_LEARN_SUCESS", player).Replace("{ItemName}", itemDefinition.displayName.english), player);
            player.SendConsoleCommand("gametip.hidegametip");
            player.SendConsoleCommand("gametip.showgametip", $"You learned {itemDefinition.displayName.english}");

            timer.Once(2.2f, () =>
            {
                player.SendConsoleCommand("gametip.hidegametip");
            });

            UpdatePlayerUi(player, false);
        }

        /*[ConsoleCommand("resetLoot")]
        private void ConsoleResetLoot(ConsoleSystem.Arg arg)
        {
            foreach (var ent in UnityEngine.Object.FindObjectsOfType<LootContainer>())
            {
                if (!ent.IsDestroyed)
                {
                    ent.Kill();
                }
            }

            Puts("Resetting world loot...");
            rust.RunServerCommand("spawn.fill_populations");
            rust.RunServerCommand("spawn.fill_groups");
        }*/

        /*[ConsoleCommand("resetBlueprints")]
        private void ConsoleResetBlueprints(ConsoleSystem.Arg arg)
        {
            Puts("Resetting player blueprints...");
            foreach (var val in _storedData.PlayerData)
            {
                val.Value.ResetBps = true;
            }
        }*/

        #endregion

        #region Xp Revived

        private PlayerData GetPlayerData(ulong playerID)
        {
            PlayerData playerdata;
            if (!_storedData.PlayerData.TryGetValue(playerID, out playerdata))
            {
                playerdata = new PlayerData();
                playerdata.Level = 1.0f;
                playerdata.Xp = 0.0f;
                _storedData.PlayerData[playerID] = playerdata;
            }
            return playerdata;
        }
        
        public float GetPlayerLevel(ulong playerID)
        {
            PlayerData playerdata = GetPlayerData(playerID);
            return playerdata.Level;
        }

        public float GetPlayerXp(ulong playerID)
        {
            PlayerData playerdata = GetPlayerData(playerID);
            return playerdata.Xp;
        }

        public void IncreaseXp(ulong playerID, float amount, bool updateAFK = true)
        {
            IncreaseXp(GetPlayerFromId(playerID, false), amount, updateAFK);
        }

        public void IncreaseXp(BasePlayer player, float amount, bool updateAFK = true)
        {
            if (player == null || !player.IsConnected)
            {
                return;
            }

            PlayerData playerData = GetPlayerData(player.userID);

            float oldLevel = playerData.Level;
            float oldXP = playerData.Xp;

            float levelAmount = amount;

            if (playerData.Level >= _config.Options.LevelPivot)
            {
                levelAmount *= _config.Options.LevelPivot / (playerData.Level);
            }

            playerData.Level += levelAmount;
            playerData.Xp += _config.Options.LevelXpRatio * amount;

            if (playerData.Level < 0.0f)
            {
                playerData.Level = 0.0f;
            }

            if (playerData.Xp < 0.0f)
            {
                playerData.Xp = 0.0f;
            }

            if (Math.Floor(oldLevel) != Math.Floor(playerData.Level))
            {
                playerData.Xp += 2.0f;

                timer.In(2.2f, () =>
                {
                    if (player != null && player.IsConnected)
                    {
                        UnlockLevel(player, (int)Math.Floor(playerData.Level));
                    }
                });
            }

            if (!_config.Options.UnlockAllOnLevel && Math.Floor(oldXP) != Math.Floor(playerData.Xp))
            {
                player.SendConsoleCommand("gametip.hidegametip");
                player.SendConsoleCommand("gametip.showgametip", "You Gained 1 XP");

                timer.Once(2.2f, () =>
                {
                    if (player != null && player.IsConnected)
                    {
                        player.SendConsoleCommand("gametip.hidegametip");

                        if (playerData.Level <= 3.0f)
                        {
                            player.SendConsoleCommand("gametip.showgametip", "Remember to spend XP using /learn");
                        }
                    }
                });

                if (playerData.Level < 5.0f)
                {
                    timer.Once(4.8f, () =>
                    {
                        if (player != null && player.IsConnected)
                        {
                            player.SendConsoleCommand("gametip.hidegametip");
                        }
                    });
                }
            }

            if (BasePlayer.activePlayerList.Contains(player))
            {
                UpdatePlayerUi(player, false);
            }
        }

        public void UnlockLevel(BasePlayer player, int level)
        {
            if (player == null || !player.IsConnected)
            {
                return;
            }

            PlayerData playerData = GetPlayerData(player.userID);
            if (playerData.ResetBps)
            {
                player.blueprints.Reset();
                playerData.ResetBps = false;
            }
            
            Effect.server.Run(_config.Options.LevelUpPrefab, player.transform.position);

            player.SendConsoleCommand("gametip.hidegametip");
            player.SendConsoleCommand("gametip.showgametip", "Welcome to Level " + level);
            float timerOffset = 2.2f;

            foreach (ItemData item in _config.Options.ItemDatas)
            {
                if (item.UnlockLevel <= level)
                {
                    ItemDefinition itemDefinition = GetItemDefinition(item.ShortName);
                    if ((_config.Options.UnlockAllOnLevel || item.UnlockOnLevel) && !player.blueprints.IsUnlocked(itemDefinition))
                    {
                        timer.Once(timerOffset, () =>
                        {
                            if (player != null && player.IsConnected)
                            {
                                player.blueprints.Unlock(itemDefinition);
                                player.SendConsoleCommand("gametip.hidegametip");
                                player.SendConsoleCommand("gametip.showgametip", "You Learned " + itemDefinition.displayName.english);
                            }
                        });

                        timerOffset += 1.8f;
                    }
                    else if (item.UnlockLevel == level)
                    {
                        timer.Once(timerOffset, () =>
                        {
                            if (player != null && player.IsConnected)
                            {
                                player.SendConsoleCommand("gametip.hidegametip");
                                player.SendConsoleCommand("gametip.showgametip", "Unlocked " + itemDefinition.displayName.english);
                            }
                        });

                        timerOffset += 1.8f;
                    }
                }
            }

            timer.Once(timerOffset, () =>
            {
                if (player != null && player.IsConnected)
                {
                    player.SendConsoleCommand("gametip.hidegametip");
                }
            });
        }

        private bool IsUnlockable(string shortName, int level)
        {
            foreach (ItemData item in _config.Options.ItemDatas)
            {
                if (item.ShortName == shortName && item.UnlockLevel <= level)
                {
                    return true;
                }
            }

            return false;
        }

        private void ResetConfigXpLevels()
        {
            PrintWarning("Resetting XP levels...");
            _config.Options.ItemDatas.Clear();

            foreach (ItemDefinition itemDefinition in ItemManager.itemList)
            {
                if (itemDefinition.Blueprint != null && itemDefinition.Blueprint.isResearchable && !itemDefinition.Blueprint.defaultBlueprint && !BlockedBps.Contains(itemDefinition.shortname))
                {
                    float score = 0.0f;

                    Rust.Rarity rarity = itemDefinition.Blueprint.rarity;
                    score += 1.19f * (float)rarity;
                    int workbench = itemDefinition.Blueprint.workbenchLevelRequired;
                    score += 6.34f * (float)workbench;
                    int ingredients = itemDefinition.Blueprint.ingredients.Count;
                    score += 0.13f * (float)ingredients;

                    if (score > 14.0f)
                    {
                        score += (float)Math.Pow(1.25f, score - 14.0f) - 1.0f;
                    }

                    ItemData itemData = new ItemData();
                    itemData.ShortName = itemDefinition.shortname;
                    itemData.EnglishName = itemDefinition.displayName.english;
                    itemData.UnlockLevel = (int)Math.Floor(score);
                    itemData.CostXP = (int)(0.7f * itemData.UnlockLevel + 1.0f);
                    itemData.UnlockOnLevel = false;
                    _config.Options.ItemDatas.Add(itemData);
                }
            }

            Config.WriteObject(_config, true);
        }

        private void InfiniteComponents(BasePlayer player, bool removeComponents, bool giveComponents)
        {
            if (!_config.Options.UnlimitedComponents)
            {
                return;
            }

            if (_config.Options.BlockedItems == null || !_config.Options.BlockedItems.Any())
            {
                return;
            }

            if (removeComponents && player.inventory.containerMain.capacity > 24)
            {
                if (player?.inventory?.containerMain == null)
                {
                    return;
                }

                var retainedMainContainer = player.inventory.containerMain.uid;

                foreach (Item item in player.inventory.containerMain.itemList.ToList())
                {
                    if (_config.Options.BlockedItems.Contains(item?.info.shortname))
                    {
                        item.RemoveFromContainer();
                    }
                }

                ItemManager.DoRemoves();
                player.inventory.containerMain.capacity = 24;
            }

            if (giveComponents)
            {
                player.inventory.containerMain.capacity = 24 + _config.Options.BlockedItems.Count;

                NextFrame(() =>
                {
                    int hiddenSlotNumber = 0;

                    foreach (string itemName in _config.Options.BlockedItems)
                    {
                        Item item = ItemManager.CreateByName(itemName, 99999);
                        if (item != null)
                        {
                            item.MoveToContainer(player.inventory.containerMain, 24 + hiddenSlotNumber, false);
                            item.LockUnlock(true);
                            hiddenSlotNumber++;
                        }
                    }
                });
            }
        }

        private void AssignLoot(LootContainer container)
        {
            if (_config.Options.BlockedItems == null || !_config.Options.BlockedItems.Any())
            {
                return;
            }

            if (container == null || container.inventory == null)
            {
                return;
            }

            foreach (Item item in new List<Item>(container.inventory.itemList))
            {
                if (_config.Options.BlockedItems.Contains(item.info.shortname))
                {
                    item.RemoveFromContainer();
                }
            }

            container.inventory.dirty = true;
        }

        #endregion

        #region UIs

        private string colourText = UI.Color("#ffffff", 0.8f);
        private string colourClear = UI.Color("#ffffff", 0.0f);
        private string colourBackground = UI.Color("#b3b3b3", 0.05f);

        private const string uiPrefix = "XP_";
        private const string uiPanel = uiPrefix + "Panel";
        private const string uiLevel = uiPrefix + "Level";
        private const string uiXp = uiPrefix + "Xp";

        private void UpdatePlayerUi(BasePlayer player, bool refreshAll = true)
        {
            if (!_config.Display.HudEnabled)
            {
                return;
            }
            
            string colourProgressLevel = UI.Color(_config.Display.HudColourLevel, 1.0f);
            string colourProgressXp = UI.Color(_config.Display.HudColourXp, 1.0f);
            PlayerData playerData = GetPlayerData(player.userID);
            float playerLevel = playerData.Level;
            float playerXp = playerData.Xp;

            if (refreshAll)
            {
                // Element Panel.
                CuiHelper.DestroyUi(player, uiPanel);
                _uiManager.RemoveContainer(uiPanel);

                var elementPanel = UI.CreateElementContainer(uiPanel, colourClear,
                    (0.01f + _config.Display.OffsetX) + " " + (0.025f + _config.Display.OffsetY),
                    (0.13f + _config.Display.OffsetX) + " " + (0.1 + _config.Display.OffsetY));

                UI.LoadImage(ref elementPanel, uiPanel, _config.Display.LevelIcon, "0.025 0.65", "0.092 0.895");
                
                if (!_config.Options.UnlockAllOnLevel)
                {
                    UI.LoadImage(ref elementPanel, uiPanel, _config.Display.XpIcon, "0.025 0.10", "0.092 0.365");
                }

                _uiManager.AddContainer(uiPanel);
                CuiHelper.AddUi(player, elementPanel);
            }

            // Element Level.
            CuiHelper.DestroyUi(player, uiLevel);
            _uiManager.RemoveContainer(uiLevel);

            var elementLevel = UI.CreateElementContainer(uiLevel, colourBackground,
                (0.01f + _config.Display.OffsetX) + " " + (0.065f + _config.Display.OffsetY),
                (0.135f + _config.Display.OffsetX) + " " + (0.1 + _config.Display.OffsetY));

            UI.CreatePanel(ref elementLevel, uiLevel, colourProgressLevel, "0.13 0.13",
                (playerLevel - (float)Math.Floor(playerLevel)) + " 0.85");
            UI.CreateText(ref elementLevel, uiLevel, colourText, "" + (int)Math.Floor(playerLevel), 14, "0.165 0.0", "1.0 1.0", TextAnchor.MiddleLeft);

            _uiManager.AddContainer(uiLevel);
            CuiHelper.AddUi(player, elementLevel);
            
            
            // Element Xp.
            CuiHelper.DestroyUi(player, uiXp);
            _uiManager.RemoveContainer(uiXp);

            if (!_config.Options.UnlockAllOnLevel)
            {
                var elementXp = UI.CreateElementContainer(uiXp, colourBackground,
                    (0.01f + _config.Display.OffsetX) + " " + (0.025f + _config.Display.OffsetY),
                    (0.135f + _config.Display.OffsetX) + " " + (0.06 + _config.Display.OffsetY));

                UI.CreatePanel(ref elementXp, uiXp, colourProgressXp, "0.12 0.13",
                    (playerXp - (float)Math.Floor(playerXp)) + " 0.87");
                UI.CreateText(ref elementXp, uiXp, colourText, "" + (int)Math.Floor(playerXp), 14, "0.16 0.0", "1.0 1.0", TextAnchor.MiddleLeft);

                _uiManager.AddContainer(uiXp);
                CuiHelper.AddUi(player, elementXp);
            }
        }

        #endregion

        #region Helpers

        private string Lang(string key, BasePlayer player)
        {
            return lang.GetMessage(key, this, player != null ? player.UserIDString : null);
        }

        private void MessagePlayer(string message, BasePlayer player)
        {
            player.ChatMessage(message);
        }

        private BasePlayer GetPlayerFromId(ulong id, bool canBeOffline)
        {
            foreach (BasePlayer player in BasePlayer.activePlayerList)
            {
                if (player.userID == id)
                {
                    return player;
                }
            }

            if (canBeOffline)
            {
                foreach (BasePlayer player in BasePlayer.sleepingPlayerList)
                {
                    if (player.userID == id)
                    {
                        return player;
                    }
                }
            }

            return null;
        }

        private BasePlayer FindPlayer(string partialName, bool canBeOffline)
        {
            if (string.IsNullOrEmpty(partialName))
            {
                return null;
            }

            HashSet<BasePlayer> players = new HashSet<BasePlayer>();

            foreach (BasePlayer activePlayer in BasePlayer.activePlayerList)
            {
                if (activePlayer.UserIDString.Equals(partialName))
                {
                    players.Add(activePlayer);
                }
                else if (!string.IsNullOrEmpty(activePlayer.displayName) && activePlayer.displayName.Contains(partialName, CompareOptions.IgnoreCase))
                {
                    players.Add(activePlayer);
                }
                else if (activePlayer.net?.connection != null && activePlayer.net.connection.ipaddress.Equals(partialName))
                {
                    players.Add(activePlayer);
                }
            }

            if (canBeOffline)
            {
                foreach (BasePlayer sleepingPlayer in BasePlayer.sleepingPlayerList)
                {
                    if (sleepingPlayer.UserIDString.Equals(partialName))
                    {
                        players.Add(sleepingPlayer);
                    }
                    else if (!string.IsNullOrEmpty(sleepingPlayer.displayName) && sleepingPlayer.displayName.Contains(partialName, CompareOptions.IgnoreCase))
                    {
                        players.Add(sleepingPlayer);
                    }
                }
            }

            if (players.Count <= 0)
            {
                return null;
            }

            return players.First();
        }

        public ItemDefinition GetItemDefinition(string shortName)
        {
            if (string.IsNullOrEmpty(shortName) || shortName == "")
            {
                return null;
            }

            return ItemManager.FindItemDefinition(shortName.ToLower());
        }

        #endregion
    }
}


// --- End of file: XpRevived.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/whoa-boy ---
// --- Original File Path: W/WhoaBoy/WhoaBoy.cs ---

﻿namespace Oxide.Plugins
{
    [Info("Whoa Boy", "Clearshot", "1.1.0")]
    [Description("Stop horses from running away when you dismount")]
    class WhoaBoy : CovalencePlugin
    {
        private PluginConfig _config;

        private void Init()
        {
            permission.RegisterPermission("whoaboy.use", this);
        }

        void OnEntityDismounted(BaseVehicleSeat seat, BasePlayer player)
        {
            if (_config.usePermission && player != null && !permission.UserHasPermission(player.UserIDString, "whoaboy.use")) return;
            if (seat == null) return;

            RidableHorse horse = seat.GetParentEntity() as RidableHorse;
            if (horse == null) return;
 
            if (horse.currentSpeed > 4f)
            {
                horse.SwitchMoveState(_config.stopType.Contains("stop") ? BaseRidableAnimal.RunState.stopped : BaseRidableAnimal.RunState.walk);

                if (_config.stopType == "stopAndStand" && horse.CanStand())
                    horse.ClientRPC(null, "Stand");
            }
            else
            {
                horse.SwitchMoveState(BaseRidableAnimal.RunState.stopped);
            }

            horse.currentSpeed = 0f;
            horse.desiredRotation = 0f;
        }

        #region Config

        protected override void LoadDefaultConfig()
        {
            Config.WriteObject(GetDefaultConfig(), true);
        }

        private PluginConfig GetDefaultConfig()
        {
            return new PluginConfig();
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            _config = Config.ReadObject<PluginConfig>();
        }

        private class PluginConfig
        {
            public bool usePermission = false;
            public string stopType = "stop";
        }

        #endregion
    }
}


// --- End of file: WhoaBoy.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/weapon-changer ---
// --- Original File Path: W/WeaponChanger/WeaponChanger.cs ---

using System.Collections.Generic;
using Newtonsoft.Json;

namespace Oxide.Plugins
{
    [Info("Weapon Changer", "DezLife", "1.0.4")]
    [Description("Change weapon stats on your server")]
    public class WeaponChanger : RustPlugin
    {
        #region Vars

        private Dictionary<string, WeaponEntry> weapons = new Dictionary<string, WeaponEntry>();

        #endregion

        #region Oxide Hooks

        private void OnServerInitialized()
        {
            if (config.weapons.Count == 0)
            {
                GetWeapons();
            }

            foreach (var value in config.weapons)
            {
                weapons.Add(value.shortname, value);
                permission.RegisterPermission(value.config.clip.permission, this);
            }
        }

        private void OnItemCraftFinished(ItemCraftTask task, Item item, ItemCrafter craft)
        {
            CheckItem(item, craft?.owner?.UserIDString ?? "0");
        }

        private void OnItemAddedToContainer(ItemContainer container, Item item)
        {
            CheckItem(item, container.playerOwner?.UserIDString ?? "0");
        }

        private void OnWeaponReload(BaseProjectile weapon, BasePlayer player)
        {
            CheckItem(weapon.GetItem(), player?.UserIDString);
        }

        #endregion

        #region Core

        private void GetWeapons()
        {
            foreach (var item in ItemManager.itemList)
            {
                if (item.category != ItemCategory.Weapon)
                {
                    continue;
                }

                var weapon = item.GetComponent<ItemModEntity>()?.entityPrefab?.Get()?.GetComponent<BaseProjectile>();
                if (weapon == null)
                {
                    continue;
                }

                var size = weapon.primaryMagazine.definition.builtInSize;

                config.weapons.Add(new WeaponEntry
                {
                    shortname = item.shortname,
                    enabled = false,
                    config = new WeaponConfig
                    {
                        clip = new ClipSettings
                        {
                            size = size,
                            permission = $"weaponchanger.clip.{item.shortname}",
                            permSize = size + 10
                        }
                    }
                });
            }

            SaveConfig();
        }

        private void CheckItem(Item item, string playerID)
        {
            var weapon = item?.GetHeldEntity()?.GetComponent<BaseProjectile>();
            if (weapon == null) { return; }
            var name = item.info.shortname;
            var data = (WeaponEntry)null;

            if (weapons.TryGetValue(name, out data) == false)
            {
                return;
            }

            if (data.enabled == false)
            {
                return;
            }

            ChangeClip(weapon, data.config.clip, playerID);
            weapon.SendNetworkUpdate();
        }

        private void ChangeClip(BaseProjectile weapon, ClipSettings settings, string playerID)
        {
            var size = permission.UserHasPermission(playerID, settings.permission) ? settings.permSize : settings.size;
            foreach (BaseEntity child in weapon.children)
            {
                if (child.ShortPrefabName != "extendedmags.entity")
                {
                    continue;
                }
                ProjectileWeaponMod magazine = child as ProjectileWeaponMod;
                weapon.primaryMagazine.capacity = (int)(size * magazine.magazineCapacity.scalar);
                weapon.SendNetworkUpdateImmediate();
                return;
            }
            weapon.primaryMagazine.capacity = size;
            weapon.SendNetworkUpdateImmediate();
        }

        #endregion

        #region Configuration 1.1.0

        private static ConfigData config;

        private class ConfigData
        {
            [JsonProperty(PropertyName = "List")]
            public List<WeaponEntry> weapons = new List<WeaponEntry>();
        }

        private ConfigData GetDefaultConfig()
        {
            return new ConfigData
            {
                weapons = new List<WeaponEntry>()
            };
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();

            try
            {
                config = Config.ReadObject<ConfigData>();

                if (config == null)
                {
                    LoadDefaultConfig();
                }
            }
            catch
            {
                PrintError("Configuration file is corrupt! Unloading plugin...");
                return;
            }

            SaveConfig();
        }

        protected override void LoadDefaultConfig()
        {
            config = GetDefaultConfig();
        }

        protected override void SaveConfig()
        {
            Config.WriteObject(config);
        }

        #endregion

        #region Classes

        private class WeaponEntry
        {
            [JsonProperty(PropertyName = "Shortname")]
            public string shortname;

            [JsonProperty(PropertyName = "Enabled")]
            public bool enabled;

            [JsonProperty(PropertyName = "Settings")]
            public WeaponConfig config;
        }

        private class WeaponConfig
        {
            [JsonProperty(PropertyName = "Magazine")]
            public ClipSettings clip;
        }

        private class ClipSettings
        {
            [JsonProperty(PropertyName = "Size")]
            public int size;

            [JsonProperty(PropertyName = "Permission")]
            public string permission;

            [JsonProperty(PropertyName = "Size with permission")]
            public int permSize;
        }

        #endregion
    }
}

// --- End of file: WeaponChanger.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/wood-swap ---
// --- Original File Path: W/WoodSwap/WoodSwap.cs ---

﻿using System.Collections.Generic;
using Rust;
using System;
using System.Linq;
using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Core.Libraries.Covalence;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("Wood Swap", "The Friendly Chap", "1.0.4")]
    [Description("Instanty burns wood into charcoal on command")]
    public class WoodSwap : RustPlugin
	
/*	MIT License

	©2024 The Friendly Chap

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*/	
	
    {
        #region Variables
        
        private const string permUse = "woodswap.use";
        
        #endregion

        #region Oxide Hooks
        
        private void Init()
        {
            permission.RegisterPermission(permUse, this);
            cmd.AddChatCommand(config.command, this, nameof(cmdSwapChat));
            cmd.AddConsoleCommand(config.command, this, nameof(cmdSwapConsole));
			// ShowLogo();
        }
        
        #endregion

        #region Commands
        
        private void cmdSwapConsole(ConsoleSystem.Arg arg)
        {
            SwapWood(arg.Player());
        }

        private void cmdSwapChat(BasePlayer player)
        {
            SwapWood(player);
        }

        #endregion

        #region Core

        private void SwapWood(BasePlayer player)
        {
            var woodItemList = player.inventory.AllItems().Where(x => x.info.shortname == "wood").ToList();
            if (woodItemList.Count == 0)
            {
                Message(player, "No Wood");
                return;
            }
            
            var countWood = woodItemList.Sum(x => x.amount);
            var countCharcoal = Convert.ToInt32(countWood * config.rate);
            var charcoal = ItemManager.CreateByName("charcoal", countCharcoal);
            
            foreach (var wood in woodItemList)
            {
                wood.GetHeldEntity()?.Kill();
                wood.Remove();
            }
            
            player.GiveItem(charcoal);
            Message(player, "Swap Success", countWood, countCharcoal);
        }
		
				private void ShowLogo()
        {
			Puts(" _______ __               _______        __                 __ __             ______ __           ©2024");
			Puts("|_     _|  |--.-----.    |    ___|.----.|__|.-----.-----.--|  |  |.--.--.    |      |  |--.---.-.-----.");
			Puts("  |   | |     |  -__|    |    ___||   _||  ||  -__|     |  _  |  ||  |  |    |   ---|     |  _  |  _  |");
			Puts("  |___| |__|__|_____|    |___|    |__|  |__||_____|__|__|_____|__||___  |    |______|__|__|___._|   __|");
			Puts("                                 Wood Swap v1.0.3                 |_____| thefriendlychap.co.za |__|");      
        }

        #endregion

        #region Configuration 1.1.0

        private static ConfigData config;

        private class ConfigData
        {
            [JsonProperty(PropertyName = "Command")]
            public string command;

            [JsonProperty(PropertyName = "Rate")]
            public float rate;
        }

        private ConfigData GetDefaultConfig()
        {
            return new ConfigData
            {
                command = "char",
                rate = 1.1f
            };
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();

            try
            {
                config = Config.ReadObject<ConfigData>();

                if (config == null)
                {
                    LoadDefaultConfig();
                }
            }
            catch
            {
                PrintError("Configuration file is corrupt! Unloading plugin...");
                Interface.Oxide.RootPluginManager.RemovePlugin(this);
                return;
            }

            SaveConfig();
        }

        protected override void LoadDefaultConfig()
        {
            config = GetDefaultConfig();
        }

        protected override void SaveConfig()
        {
            Config.WriteObject(config);
        }

        #endregion
        
        #region Localization 1.1.1
        
        protected override void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                {"No Wood", "You don't have wood."},
                {"Swap Success", "You successfully burned wood x{0} into charcoal x{1}"},
            }, this);
        }

        private void Message(BasePlayer player, string messageKey, params object[] args)
        {
            if (player == null)
            {
                return;
            }

            var message = GetMessage(messageKey, player.UserIDString, args);
            player.SendConsoleCommand("chat.add", (object) 0, (object) message);
        }

        private string GetMessage(string messageKey, string playerID, params object[] args)
        {
            return string.Format(lang.GetMessage(messageKey, this, playerID), args);
        }

        #endregion
    }
}

// --- End of file: WoodSwap.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/wipeblock ---
// --- Original File Path: W/WipeBlock/WipeBlock.cs ---

using System;
using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Game.Rust.Cui;
using Rust;
using UnityEngine;
using Random = Oxide.Core.Random;

namespace Oxide.Plugins
{
    [Info("Wipe Block", "Orange", "1.0.6")]
    [Description("Block items for selected time after wipe")]
    public class WipeBlock : RustPlugin
    {
        #region Vars

        private const string elem = "wipeblock.panel";

        #endregion
        
        #region Oxide Hooks

        private void Init()
        {
            foreach (var entity in UnityEngine.Object.FindObjectsOfType<AutoTurret>())
            {
                OnEntitySpawned(entity);
            } 
        } 

        private void OnEntitySpawned(AutoTurret turret)
        {
            if (turret is NPCAutoTurret || turret.OwnerID.IsSteamId() == false)
            {
                return;
            }
            
            NextTick(() =>
            {
                if (turret.IsValid() == true && turret.inventory != null)
                {
                    turret.inventory.onItemAddedRemoved += (item, b) => OnAddedItemInTurret(turret, item, b);
                }
            });
        }

        private void Unload()
        {
            foreach (var player in BasePlayer.activePlayerList.ToList())
            {
                CuiHelper.DestroyUi(player, elem);
            }
        }
        
        private object CanEquipItem(PlayerInventory inventory, Item item, int targetPos)
        {
            return CanWearItem(inventory, item, targetPos);
        }
        
        private object OnWeaponReload(BaseProjectile projectile, BasePlayer player)
        {
            return OnMagazineReload(projectile, -1, player);
        }

        private object CanWearItem(PlayerInventory inventory, Item item, int targetPos)
        {
            var flag = CanUseItem(inventory.GetComponent<BasePlayer>(), item.info.shortname);
            return flag ? (object) null : false;
        }
        
        private object OnMagazineReload(BaseProjectile projectile, int desiredAmount, BasePlayer player)
        {
            if (projectile.primaryMagazine.definition.ammoTypes == AmmoTypes.RIFLE_556MM)
            {
                NextTick(()=> {CheckGun(player, projectile);});
            }

            var flag = CanUseItem(player, projectile.primaryMagazine.ammoType.shortname);
            return flag ? (object) null : true;
        }

        #endregion

        #region Core

        private void OnAddedItemInTurret(AutoTurret turret, Item item, bool added)
        {
            if (added == false)
            {
                return;
            }

            if (item.parent == null)
            {
                return;
            }

            if (IsBlocked(item.info.shortname) == false)
            {
                return;
            } 
            
            item.Drop(turret.transform.position + new Vector3(0, 1, 0), turret.GetDropVelocity());
        }

        private bool CanUseItem(BasePlayer player, string shortName)
        {
            if (player.IsAdmin == true || player.userID.IsSteamId() == false)
            {
                return true;
            }

            if (config.items.ContainsKey(shortName) == false)
            {
                return true;
            }

            var blockLeft = GetBlockTime(shortName);
            if (blockLeft > 0)
            {
                var time = GetTimeString(blockLeft);
                ShowUI(player, time);
                Message(player, "Item Blocked", time);
                return false;
            }
            
            config.items.Remove(shortName);
            return true;
        }

        private int GetBlockTime(string shortname)
        {
            if (config.items.ContainsKey(shortname) == false)
            {
                return 0;
            }

            var blockLeft = config.items[shortname] - PassedSinceWipe();
            return blockLeft;
        }

        private bool IsBlocked(string shortname)
        {
            return GetBlockTime(shortname) > 0;
        }

        private void CheckGun(BasePlayer player, BaseProjectile weapon)
        {
            var magazine = weapon.primaryMagazine;
            if (magazine.contents > 0 && GetBlockTime(magazine.ammoType.shortname) > 0)
            {
                var item = player.inventory.AllItems().FirstOrDefault(x => x.GetHeldEntity() == weapon);
                if (item != null)
                {
                    item._condition = 0f;
                    item._maxCondition = 0f;
                    item.MarkDirty();
                    magazine.contents = 0;
                    magazine.capacity = 0; 
                }
            }
        }

        private void ShowUI(BasePlayer player, string time)
        {
            var container = new CuiElementContainer
            {
                new CuiElement
                {
                    Name = elem,
                    Parent = "Hud.Menu",
                    Components =
                    {
                        new CuiTextComponent
                        {
                            Text = GetMessage("Item Blocked", player.UserIDString, time),
                            Align = TextAnchor.MiddleCenter,
                            FontSize = 20
                        },
                        new CuiRectTransformComponent {AnchorMin = "0.4 0.8", AnchorMax = "0.6 0.9"}
                    }
                }
            };

            CuiHelper.DestroyUi(player, elem);
            CuiHelper.AddUi(player, container);
            
            timer.Once(config.showTime, () =>
            {
                if (player != null)
                {
                    CuiHelper.DestroyUi(player, elem);
                }
            });
        }

        #endregion
        
        #region Time Support

        private double Now()
        {
            return DateTime.UtcNow.Subtract(new DateTime(2019, 1, 1, 0, 0, 0)).TotalSeconds;
        }

        private int Passed(double since)
        {
            return Convert.ToInt32(Now() - since);
        }

        private double SaveTime()
        {
            return SaveRestore.SaveCreatedTime.Subtract(new DateTime(2019, 1, 1, 0, 0, 0)).TotalSeconds;
        }

        private int PassedSinceWipe()
        {
            return Convert.ToInt32(Now() - SaveTime());
        }
        
        private string GetTimeString(int time)
        {
            var timeString = string.Empty;
            var days = time / 86400;
            time = time % 86400;
            if (days > 0)
            {
                timeString += days + "d";
            }
            
            var hours = time / 3600;
            time = time % 3600;
            if (hours > 0)
            {
                if (days > 0)
                {
                    timeString += ", ";
                }
                
                timeString += hours + "h";
            }
            
            var minutes = time / 60;
            time = time % 60;
            if (minutes > 0)
            {
                if (hours > 0)
                {
                    timeString += ", ";
                }
                
                timeString += minutes + "m";
            }

            var seconds = time;
            if (seconds > 0)
            {
                if (minutes > 0)
                {
                    timeString += ", ";
                }
                
                timeString += seconds + "s";
            }

            return timeString;
        }

        #endregion

        #region Localization

        protected override void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                {"Item Blocked", "That item will be wipe-blocked still <color=red>{0}</color>!"}
            }, this);
        }

        private void Message(BasePlayer player, string messageKey, params object[] args)
        {
            if (player == null)
            {
                return;
            }

            var message = GetMessage(messageKey, player.UserIDString, args);
            player.ChatMessage(message);
        }

        private string GetMessage(string messageKey, string playerID, params object[] args)
        {
            return string.Format(lang.GetMessage(messageKey, this, playerID), args);
        }

        #endregion

        #region Configuration | 24.05.2020

        private static ConfigData config = new ConfigData();

        private class ConfigData
        {
            [JsonProperty(PropertyName = "Shortname -> Block time")]
            public Dictionary<string, int> items = new Dictionary<string, int>();

            [JsonProperty(PropertyName = "Announcement duration")]
            public float showTime = 5f;
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();

            try
            {
                config = Config.ReadObject<ConfigData>();
                if (config == null)
                {
                    LoadDefaultConfig();
                }
            }
            catch
            {
                for (var i = 0; i < 3; i++)
                {
                    PrintError("Configuration file is corrupt! Check your config file at https://jsonlint.com/");
                }
                
                LoadDefaultConfig();
                return;
            }

            ValidateConfig();
            SaveConfig();
        }

        private void ValidateConfig()
        {
            if (ConVar.Server.hostname.Contains("[DEBUG]") == true)
            {
                PrintWarning("Using default configuration on debug server");
                config = new ConfigData();
            }

            if (config.items.Count == 0)
            {
                config.items = new Dictionary<string, int>
                {
                    {"pistol.revolver", 86400},
                    {"pistol.python", 86400},
                    {"shotgun.pump", 86400},
                    {"smg.mp5", 86400},
                    {"pistol.m92", 86400},
                    {"rifle.m39", 86400},
                    {"lmg.m249", 86400},
                    {"rifle.lr300", 86400},
                    {"rifle.l96", 86400},
                    {"pistol.semiauto", 86400},
                    {"rifle.semiauto", 86400},
                    {"shotgun.spas12", 86400},
                    {"smg.thompson", 86400},
                    {"shotgun.waterpipe", 86400},
                    {"pistol.eoka", 86400},
                    {"rifle.ak", 86400},
                    {"rifle.bolt", 86400},
                    {"smg.2", 86400},
                    {"shotgun.double", 86400},

                    {"coffeecan.helmet", 86400},
                    {"heavy.plate.helmet", 86400},
                    {"heavy.plate.jacket", 86400},
                    {"heavy.plate.pants", 86400},
                    {"metal.plate.torso", 86400},
                    {"metal.facemask", 86400},
                    {"roadsign.kilt", 86400},
                    {"roadsign.jacket", 86400},
                    {"roadsign.gloves", 86400},

                    {"grenade.beancan", 86400},
                    {"flamethrower", 86400},
                    {"rocket.launcher", 86400},
                    {"multiplegrenadelauncher", 86400},
                    {"explosive.satchel", 86400},
                    {"explosive.timed", 86400},
                    {"surveycharge", 86400},
                    {"ammo.grenadelauncher.buckshot", 86400},
                    {"ammo.grenadelauncher.he", 86400},
                    {"ammo.grenadelauncher.smoke", 86400},
                    {"ammo.rifle.explosive", 86400},
                    {"ammo.rocket.basic", 86400},
                    {"ammo.rocket.fire", 86400},
                    {"ammo.rocket.hv", 86400},
                };
            }
        }

        protected override void LoadDefaultConfig()
        {
            config = new ConfigData();
        }

        protected override void SaveConfig()
        {
            Config.WriteObject(config);
        }

        #endregion

        #region API

        private Dictionary<string, int> API_GetTimesLeft()
        {
            var value = new Dictionary<string, int>();

            foreach (var entry in config.items)
            {
                var blockLeft = entry.Value - PassedSinceWipe();

                if (blockLeft < 0)
                {
                    blockLeft = 0;
                }
                
                value.Add(entry.Key, blockLeft);
            }
            
            return value;
        }

        #endregion
    }
}

// --- End of file: WipeBlock.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/waterless-sprinklers ---
// --- Original File Path: W/WaterlessSprinklers/WaterlessSprinklers.cs ---

﻿using Newtonsoft.Json;
using Oxide.Core.Libraries.Covalence;
using System;
using System.Linq;
//
// rev 0.1.0
// rev 0.2.0
//   change missing space in title from code review.
// rev 0.3.0
//   change to void OnEntitySpawned(Sprinkler sprinkler) to avoid unnecessary hook calls
// rev 1.0.0
//     remove sprinkler.prefabID == 2389629329 check, not needed anymore
// rev 1.0.1
//     Delay sprinkler init by 1 sec.
// rev 1.0.2
//     Option to ignore sprinklers with conections
// rev 1.0.3
//     if sprinkler is assign a skinid , it will not need water

namespace Oxide.Plugins
{
    [Info("Waterless Sprinklers", "Lorenzo", "1.0.3")]
    [Description("Sprinkers dont need water to run")]
    class WaterlessSprinklers : CovalencePlugin
    {
        private ItemDefinition water = ItemManager.FindItemDefinition("water");

        private const int sprinklerID = -781014061;
        private const ulong sprinklerSkinID = 234508;

        #region Configuration

        private static Configuration _config;

        private class Configuration
        {
            [JsonProperty(PropertyName = "Use permission")]
            public bool UsePermission = false;      // use permission or grant access to every players

            [JsonProperty(PropertyName = "Permission")]
            public string PermissionUse = "waterlesssprinklers.use";   // name of permission

            [JsonProperty(PropertyName = "PermissionAdmin")]
            public string PermissionAdmin = "waterlesssprinklers.admin";   // name of permission

            [JsonProperty(PropertyName = "Make sprinkler special command")]
            public string setskincommand = "setsprinklerspecial";

            [JsonProperty(PropertyName = "Only turn on if there is no IO connected to sprinklers")]
            public bool checkIOconnection = false;      // use permission or grant access to every players
        };

        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                _config = Config.ReadObject<Configuration>();
                if (_config == null) throw new Exception();
            }
            catch
            {
                PrintError("Your configuration file contains an error. Using default configuration values.");
                LoadDefaultConfig();
            }

            SaveConfig();
        }

        protected override void LoadDefaultConfig() => _config = new Configuration();

        protected override void SaveConfig() => Config.WriteObject(_config);

        #endregion Configuration

        #region Variables
        #endregion

        #region Hooks Targets
        //
        private void Unload()
        {
            UpdateAllSprinklers(false);
        }

        private void OnServerInitialized()
        {
            permission.RegisterPermission(_config.PermissionUse, this);
            permission.RegisterPermission(_config.PermissionAdmin, this);

            AddCovalenceCommand(_config.setskincommand, nameof(SprinklerSetSkin));

            timer.Once(1f, () =>
            {
                UpdateAllSprinklers(true);
            });            
        }

        void OnEntitySpawned(Sprinkler sprinkler)
        {
            if (CanUse(sprinkler.OwnerID) || sprinkler.skinID == sprinklerSkinID)
            {
                sprinkler.SetFuelType(water, null);
                sprinkler.SetSprinklerState(true);
            }
        }

        #endregion Hooks

        #region Commands
        private void SprinklerSetSkin(IPlayer iplayer, string command, string[] args)
        {
            var player = iplayer.Object as BasePlayer;
            if (player != null && IsAdmin(player.userID))
            {
                Item item = player.inventory.containerMain.FindItemByItemID(sprinklerID);
                if (item==null) item = player.inventory.containerBelt.FindItemByItemID(sprinklerID);

                if (item != null)
                {
                    item.skin = sprinklerSkinID;
                    SendChatMessage(player, "Converted Sprinkler");
                }
                else SendChatMessage(player, "Sprinkler not found");
            }
            else SendChatMessage(player, "You do not have permission");

            return;
        }
        #endregion Commands


        public void SendChatMessage(BasePlayer player, string msg)
        {
            player.ChatMessage(msg);
        }

        void UpdateAllSprinklers(bool state)
        {
            foreach (var sprinkler in BaseNetworkable.serverEntities.OfType<Sprinkler>())
            {
                if ((_config.checkIOconnection && sprinkler.inputs[0].connectedTo.ioEnt == null && sprinkler.outputs[0].connectedTo.ioEnt == null) || !_config.checkIOconnection)
                {
                    if (CanUse(sprinkler.OwnerID) || sprinkler.skinID == sprinklerSkinID)
                    {
                        sprinkler.SetFuelType(water, null);
                        sprinkler.SetSprinklerState(state);
                    }
                }
            }
        }

        private bool CanUse(ulong id) => (!_config.UsePermission || permission.UserHasPermission(id.ToString(), _config.PermissionUse));

        private bool IsAdmin(ulong id) => (permission.UserHasPermission(id.ToString(), _config.PermissionAdmin));
    }
}

// --- End of file: WaterlessSprinklers.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/workcart-safe-zones ---
// --- Original File Path: W/WorkcartSafeZones/WorkcartSafeZones.cs ---

﻿using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;
using Oxide.Core;
using Oxide.Core.Libraries.Covalence;
using Oxide.Core.Plugins;
using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using VLB;

namespace Oxide.Plugins
{
    [Info("Workcart Safe Zones", "WhiteThunder", "2.0.1")]
    [Description("Adds mobile safe zones and optional NPC auto turrets to workcarts.")]
    internal class WorkcartSafeZones : CovalencePlugin
    {
        #region Fields

        [PluginReference]
        private Plugin AutomatedWorkcarts, CargoTrainEvent;

        private static WorkcartSafeZones _pluginInstance;
        private static Configuration _pluginConfig;

        private const string PermissionUse = "workcartsafezones.use";
        private const string BanditSentryPrefab = "assets/content/props/sentry_scientists/sentry.bandit.static.prefab";

        private const float SafeZoneWarningCooldown = 10;

        private Dictionary<ulong, float> _playersLastWarnedTime = new Dictionary<ulong, float>();

        private SavedData _pluginData;

        #endregion

        #region Hooks

        private void Init()
        {
            _pluginInstance = this;
            _pluginData = SavedData.Load();

            permission.RegisterPermission(PermissionUse, this);

            Unsubscribe(nameof(OnEntitySpawned));
            Unsubscribe(nameof(OnWorkcartAutomationStarted));
            Unsubscribe(nameof(OnWorkcartAutomationStopped));
        }

        private void OnServerInitialized()
        {
            CheckDependencies();

            _pluginData.CleanStaleData();

            if (_pluginConfig.AddToAllWorkcarts)
            {
                foreach (var workcart in BaseNetworkable.serverEntities.OfType<TrainEngine>().ToArray())
                    TryCreateSafeZone(workcart);

                Subscribe(nameof(OnEntitySpawned));
            }
            else if (_pluginConfig.AddToAutomatedWorkcarts)
            {
                var workcartList = GetAutomatedWorkcarts();
                if (workcartList != null)
                {
                    foreach (var workcart in workcartList)
                        TryCreateSafeZone(workcart);
                }

                Subscribe(nameof(OnWorkcartAutomationStarted));
                Subscribe(nameof(OnWorkcartAutomationStopped));
            }

            foreach (var workcartId in _pluginData.SafeWorkcarts)
            {
                var workcart = BaseNetworkable.serverEntities.Find(new NetworkableId(workcartId)) as TrainEngine;
                if (workcart != null)
                    TryCreateSafeZone(workcart);
            }
        }

        private void Unload()
        {
            foreach (var workcart in BaseNetworkable.serverEntities.OfType<TrainEngine>())
                SafeWorkcart.RemoveFromWorkcart(workcart);

            _pluginConfig = null;
            _pluginInstance = null;
        }

        private void OnEntitySpawned(TrainEngine workcart)
        {
            TryCreateSafeZone(workcart);
        }

        private bool? OnEntityTakeDamage(TrainEngine workcart)
        {
            if (workcart.GetComponent<SafeWorkcart>() != null)
            {
                // Return true (standard) to cancel default behavior (prevent damage).
                return true;
            }

            return null;
        }

        private void OnEntityEnter(TriggerSafeZone triggerSafeZone, BasePlayer player)
        {
            if (player.IsNpc
                || triggerSafeZone.GetComponentInParent<SafeWorkcart>() == null
                || !player.IsHostile())
                return;

            var hostileTimeRemaining = player.State.unHostileTimestamp - Network.TimeEx.currentTimestamp;
            if (hostileTimeRemaining < 0)
                return;

            float lastWarningTime;
            if (_playersLastWarnedTime.TryGetValue(player.userID, out lastWarningTime)
                && lastWarningTime + SafeZoneWarningCooldown > Time.realtimeSinceStartup)
                return;

            ChatMessage(player, "Warning.Hostile", TimeSpan.FromSeconds(Math.Ceiling(hostileTimeRemaining)).ToString("g"));
            _playersLastWarnedTime[player.userID] = Time.realtimeSinceStartup;
        }

        private void OnEntityEnter(TriggerParent triggerParent, BasePlayer player)
        {
            if (!_pluginConfig.DisarmOccupants
                || player.IsNpc
                || triggerParent.GetComponentInParent<SafeWorkcart>() == null)
                return;

            var activeItem = player.GetActiveItem();
            if (activeItem == null || !player.IsHostileItem(activeItem))
                return;

            var position = activeItem.position;
            activeItem.RemoveFromContainer();
            player.inventory.SendUpdatedInventory(PlayerInventory.Type.Belt, player.inventory.containerBelt);

            // Note: It's possible to leak an item here if the player is killed during the delay,
            // but the number of items that would be leaked this way is insignificant.
            player.Invoke(() =>
            {
                if (!activeItem.MoveToContainer(player.inventory.containerBelt, position))
                    player.inventory.GiveItem(activeItem);
            }, 0.2f);
        }

        // This hook is exposed by plugin: Automated Workcarts (AutomatedWorkcarts).
        private void OnWorkcartAutomationStarted(TrainEngine workcart)
        {
            TryCreateSafeZone(workcart);
        }

        // This hook is exposed by plugin: Automated Workcarts (AutomatedWorkcarts).
        private void OnWorkcartAutomationStopped(TrainEngine workcart)
        {
            SafeWorkcart.RemoveFromWorkcart(workcart);
        }

        // This hook is exposed by plugin: Cargo Train Event (CargoTrainEvent).
        private void OnTrainEventStarted(TrainEngine workcart)
        {
            SafeWorkcart.RemoveFromWorkcart(workcart);
        }

        #endregion

        #region Dependencies

        private void CheckDependencies()
        {
            if (_pluginConfig.AddToAllWorkcarts)
                return;

            if (_pluginConfig.AddToAutomatedWorkcarts && AutomatedWorkcarts == null)
                LogWarning("AutomatedWorkcarts is not loaded, get it at http://umod.org. If you don't intend to use this plugin with Automated Workcarts, then set \"AddToAutomatedWorkcarts\" to false in the config and you will no longer see this message.");
        }

        private TrainEngine[] GetAutomatedWorkcarts()
        {
            return AutomatedWorkcarts?.Call("API_GetAutomatedWorkcarts") as TrainEngine[];
        }

        private bool IsCargoTrain(TrainEngine workcart)
        {
            var result = CargoTrainEvent?.Call("IsTrainSpecial", workcart.net.ID);
            return result is bool && (bool)result;
        }

        #endregion

        #region API

        private bool API_CreateSafeZone(TrainEngine workcart)
        {
            if (workcart.GetComponent<SafeWorkcart>() != null)
                return true;

            return TryCreateSafeZone(workcart);
        }

        #endregion

        #region Exposed Hooks

        private static bool CreateSafeZoneWasBlocked(TrainEngine workcart)
        {
            object hookResult = Interface.CallHook("OnWorkcartSafeZoneCreate", workcart);
            return hookResult is bool && (bool)hookResult == false;
        }

        private static void CallHookSafeZoneCreated(TrainEngine workcart)
        {
            Interface.CallHook("OnWorkcartSafeZoneCreated", workcart);
        }

        #endregion

        #region Commands

        [Command("safecart.add")]
        private void CommandAddSafeZone(IPlayer player, string cmd, string[] args)
        {
            if (player.IsServer)
                return;

            if (!player.HasPermission(PermissionUse))
            {
                ReplyToPlayer(player, "Error.NoPermission");
                return;
            }

            var basePlayer = player.Object as BasePlayer;
            var workcart = GetLookEntity(basePlayer) as TrainEngine;

            if (workcart == null)
            {
                ReplyToPlayer(player, "Error.NoWorkcartFound");
                return;
            }

            if (workcart.GetComponent<SafeWorkcart>() != null)
            {
                ReplyToPlayer(player, "Error.SafeZonePresent");
                return;
            }

            if (TryCreateSafeZone(workcart))
            {
                _pluginData.AddWorkcart(workcart);
                ReplyToPlayer(player, "Add.Success");
            }
            else
            {
                ReplyToPlayer(player, "Add.Error");
            }
        }

        [Command("safecart.remove")]
        private void CommandRemoveSafeZone(IPlayer player, string cmd, string[] args)
        {
            if (player.IsServer)
                return;

            if (!player.HasPermission(PermissionUse))
            {
                ReplyToPlayer(player, "Error.NoPermission");
                return;
            }

            var basePlayer = player.Object as BasePlayer;
            var workcart = GetLookEntity(basePlayer) as TrainEngine;

            if (workcart == null)
            {
                ReplyToPlayer(player, "Error.NoWorkcartFound");
                return;
            }

            var component = workcart.GetComponent<SafeWorkcart>();
            if (component == null)
            {
                ReplyToPlayer(player, "Error.NoSafeZone");
                return;
            }

            SafeWorkcart.RemoveFromWorkcart(workcart);
            _pluginData.RemoveWorkcart(workcart);
            ReplyToPlayer(player, "Remove.Success");
        }

        #endregion

        #region Helper Methods

        private static bool TryCreateSafeZone(TrainEngine workcart)
        {
            if (CreateSafeZoneWasBlocked(workcart))
                return false;

            if (_pluginInstance.IsCargoTrain(workcart))
                return false;

            SafeWorkcart.AddToWorkcart(workcart);
            CallHookSafeZoneCreated(workcart);

            return true;
        }

        private static NPCAutoTurret SpawnTurret(BaseEntity entity, Vector3 position, float rotationAngle)
        {
            var rotation = rotationAngle == 0 ? Quaternion.identity : Quaternion.Euler(0, rotationAngle, 0);

            var autoTurret = GameManager.server.CreateEntity(BanditSentryPrefab, position, rotation) as NPCAutoTurret;
            if (autoTurret == null)
                return null;

            autoTurret.enableSaving = false;
            autoTurret.SetParent(entity);
            autoTurret.Spawn();

            return autoTurret;
        }

        private static BaseEntity GetLookEntity(BasePlayer player, float maxDistance = 10)
        {
            RaycastHit hit;
            return Physics.Raycast(player.eyes.HeadRay(), out hit, maxDistance, Physics.DefaultRaycastLayers, QueryTriggerInteraction.Ignore)
                ? hit.GetEntity()
                : null;
        }

        #endregion

        #region Safe Zone

        private class SafeWorkcart : MonoBehaviour
        {
            public static void AddToWorkcart(TrainEngine workcart) =>
                workcart.GetOrAddComponent<SafeWorkcart>();

            public static void RemoveFromWorkcart(TrainEngine workcart) =>
                UnityEngine.Object.DestroyImmediate(workcart.GetComponent<SafeWorkcart>());

            private TrainEngine _workcart;
            private GameObject _child;
            private ProtectionProperties _originalProtection;
            private List<NPCAutoTurret> _autoTurrets = new List<NPCAutoTurret>();

            private void Awake()
            {
                _workcart = GetComponent<TrainEngine>();
                if (_workcart == null)
                    return;

                _workcart.SetHealth(_workcart.MaxHealth());

                AddVolumetricSafeZone();
                MaybeAddTurrets();
            }

            private void MaybeAddTurrets()
            {
                if (!_pluginConfig.EnableTurrets)
                    return;

                foreach (var turretConfig in _pluginConfig.TurretPositions)
                    _autoTurrets.Add(SpawnTurret(_workcart, turretConfig.Position, turretConfig.RotationAngle));
            }

            private void AddVolumetricSafeZone()
            {
                _child = gameObject.CreateChild();

                var safeZone = _child.AddComponent<TriggerSafeZone>();
                safeZone.interestLayers = Rust.Layers.Mask.Player_Server;
                safeZone.maxAltitude = 10;
                safeZone.maxDepth = 1;

                var radius = _pluginConfig.SafeZoneRadius;
                if (radius > 0)
                {
                    var collider = _child.AddComponent<SphereCollider>();
                    collider.isTrigger = true;
                    collider.gameObject.layer = 18;
                    collider.center = Vector3.zero;
                    collider.radius = radius;
                }
                else
                {
                    // Add a box collider for just the workcart area.
                    var collider = _child.AddComponent<BoxCollider>();
                    collider.isTrigger = true;
                    collider.gameObject.layer = 18;
                    collider.size = _workcart.bounds.extents * 2 + new Vector3(0, safeZone.maxAltitude, 0);
                }
            }

            private void OnDestroy()
            {
                if (_child != null)
                    Destroy(_child);

                foreach (var autoTurret in _autoTurrets)
                    if (autoTurret != null)
                        autoTurret.Kill();
            }
        }

        #endregion

        #region Saved Data

        private class SavedData
        {
            [JsonProperty("SafeWorkcartIds")]
            public List<ulong> SafeWorkcarts = new List<ulong>();

            public static SavedData Load() =>
                Interface.Oxide.DataFileSystem.ReadObject<SavedData>(_pluginInstance.Name) ?? new SavedData();

            public void Save() =>
                Interface.Oxide.DataFileSystem.WriteObject<SavedData>(_pluginInstance.Name, this);

            public void AddWorkcart(TrainEngine workcart)
            {
                SafeWorkcarts.Add(workcart.net.ID.Value);
                Save();
            }

            public void RemoveWorkcart(TrainEngine workcart)
            {
                SafeWorkcarts.Remove(workcart.net.ID.Value);
                Save();
            }

            public void CleanStaleData()
            {
                var cleanedCount = 0;

                for (var i = SafeWorkcarts.Count - 1; i >= 0; i--)
                {
                    var entity = BaseNetworkable.serverEntities.Find(new NetworkableId(SafeWorkcarts[i]));
                    if (entity == null)
                    {
                        SafeWorkcarts.RemoveAt(i);
                        cleanedCount++;
                    }
                }

                if (cleanedCount > 0)
                    Save();
            }
        }

        #endregion

        #region Configuration

        private class Configuration : SerializableConfiguration
        {
            [JsonProperty("AddToAllWorkcarts")]
            public bool AddToAllWorkcarts = false;

            [JsonProperty("AddToAutomatedWorkcarts")]
            public bool AddToAutomatedWorkcarts = true;

            [JsonProperty("SafeZoneRadius")]
            public float SafeZoneRadius = 0;

            [JsonProperty("DisarmOccupants")]
            public bool DisarmOccupants = false;

            [JsonProperty("EnableTurrets")]
            public bool EnableTurrets = false;

            [JsonProperty("TurretPositions")]
            public TurretConfig[] TurretPositions = new TurretConfig[]
            {
                new TurretConfig
                {
                    Position = new Vector3(0.85f, 2.62f, 1.25f),
                    RotationAngle = 180,
                },
                new TurretConfig
                {
                    Position = new Vector3(0.7f, 3.84f, 3.7f)
                }
            };
        }

        private class TurretConfig
        {
            [JsonProperty("Position")]
            public Vector3 Position;

            [JsonProperty("RotationAngle")]
            public float RotationAngle;
        }

        private Configuration GetDefaultConfig() => new Configuration();

        #endregion

        #region Configuration Boilerplate

        private class SerializableConfiguration
        {
            public string ToJson() => JsonConvert.SerializeObject(this);

            public Dictionary<string, object> ToDictionary() => JsonHelper.Deserialize(ToJson()) as Dictionary<string, object>;
        }

        private static class JsonHelper
        {
            public static object Deserialize(string json) => ToObject(JToken.Parse(json));

            private static object ToObject(JToken token)
            {
                switch (token.Type)
                {
                    case JTokenType.Object:
                        return token.Children<JProperty>()
                                    .ToDictionary(prop => prop.Name,
                                                  prop => ToObject(prop.Value));

                    case JTokenType.Array:
                        return token.Select(ToObject).ToList();

                    default:
                        return ((JValue)token).Value;
                }
            }
        }

        private bool MaybeUpdateConfig(SerializableConfiguration config)
        {
            var currentWithDefaults = config.ToDictionary();
            var currentRaw = Config.ToDictionary(x => x.Key, x => x.Value);
            return MaybeUpdateConfigDict(currentWithDefaults, currentRaw);
        }

        private bool MaybeUpdateConfigDict(Dictionary<string, object> currentWithDefaults, Dictionary<string, object> currentRaw)
        {
            bool changed = false;

            foreach (var key in currentWithDefaults.Keys)
            {
                object currentRawValue;
                if (currentRaw.TryGetValue(key, out currentRawValue))
                {
                    var defaultDictValue = currentWithDefaults[key] as Dictionary<string, object>;
                    var currentDictValue = currentRawValue as Dictionary<string, object>;

                    if (defaultDictValue != null)
                    {
                        if (currentDictValue == null)
                        {
                            currentRaw[key] = currentWithDefaults[key];
                            changed = true;
                        }
                        else if (MaybeUpdateConfigDict(defaultDictValue, currentDictValue))
                            changed = true;
                    }
                }
                else
                {
                    currentRaw[key] = currentWithDefaults[key];
                    changed = true;
                }
            }

            return changed;
        }

        protected override void LoadDefaultConfig() => _pluginConfig = GetDefaultConfig();

        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                _pluginConfig = Config.ReadObject<Configuration>();
                if (_pluginConfig == null)
                {
                    throw new JsonException();
                }

                if (MaybeUpdateConfig(_pluginConfig))
                {
                    LogWarning("Configuration appears to be outdated; updating and saving");
                    SaveConfig();
                }
            }
            catch (Exception e)
            {
                LogError(e.Message);
                LogWarning($"Configuration file {Name}.json is invalid; using defaults");
                LoadDefaultConfig();
            }
        }

        protected override void SaveConfig()
        {
            Log($"Configuration changes saved to {Name}.json");
            Config.WriteObject(_pluginConfig, true);
        }

        #endregion

        #region Localization

        private void ReplyToPlayer(IPlayer player, string messageName, params object[] args) =>
            player.Reply(string.Format(GetMessage(player, messageName), args));

        private void ChatMessage(BasePlayer player, string messageName, params object[] args) =>
            player.ChatMessage(string.Format(GetMessage(player.IPlayer, messageName), args));

        private string GetMessage(IPlayer player, string messageName, params object[] args) =>
            GetMessage(player.Id, messageName, args);

        private string GetMessage(string playerId, string messageName, params object[] args)
        {
            var message = lang.GetMessage(messageName, this, playerId);
            return args.Length > 0 ? string.Format(message, args) : message;
        }

        protected override void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["Error.NoPermission"] = "You don't have permission to do that.",
                ["Error.NoWorkcartFound"] = "Error: No workcart found.",
                ["Error.SafeZonePresent"] = "That workcart already has a safe zone.",
                ["Error.NoSafeZone"] = "That workcart doesn't have a safe zone.",
                ["Add.Success"] = "Successfully added safe zone to the workcart.",
                ["Add.Error"] = "Error: Unable to add a safe zone to that workcart.",
                ["Remove.Success"] = "Successfully removed safe zone from the workcart.",
                ["Warning.Hostile"] = "You are <color=red>hostile</color> for <color=red>{0}</color>. No safe zone protection.",
            }, this, "en");
        }

        #endregion
    }
}


// --- End of file: WorkcartSafeZones.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/welcome-screen ---
// --- Original File Path: W/WelcomeScreen/WelcomeScreen.cs ---

using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Game.Rust.Cui;

namespace Oxide.Plugins
{
    [Info("Welcome Screen", "Mevent", "1.1.0")]
    [Description("Showing welcoming image on player joining")]
    public class WelcomeScreen : RustPlugin
    {
        #region Config

        private static ConfigData _config = new ConfigData();

        private class ConfigData
        {
            [JsonProperty(PropertyName = "Image URL")]
            public string url = "https://i.imgur.com/RhMXzvF.jpg";

            [JsonProperty(PropertyName = "Fade-in duration")]
            public float fadeIn = 5f;

            [JsonProperty(PropertyName = "Fade-out duration")]
            public float fadeOut = 5f;

            [JsonProperty(PropertyName = "Delay after joining to create image")]
            public float delay = 10f;

            [JsonProperty(PropertyName = "Delay after creating image to start fade out")]
            public float duration = 20f;

            [JsonProperty(PropertyName = "Anchor min (left bottom coordinate)")]
            public string anchorMin = "0 0";

            [JsonProperty(PropertyName = "Anchor min (right top coordinate)")]
            public string anchorMax = "1 1";

            [JsonProperty(PropertyName = "Image transparency")]
            public float transparency = 1f;

            [JsonProperty(PropertyName = "Show multiple times?")]
            public bool MultipleTimes = true;
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();

            try
            {
                _config = Config.ReadObject<ConfigData>();
                if (_config == null) LoadDefaultConfig();
            }
            catch
            {
                for (var i = 0; i < 3; i++)
                    PrintError("Configuration file is corrupt! Check your config file at https://jsonlint.com/");

                LoadDefaultConfig();
                return;
            }

            ValidateConfig();
            SaveConfig();
        }

        private static void ValidateConfig()
        {
        }

        protected override void LoadDefaultConfig()
        {
            _config = new ConfigData();
        }

        protected override void SaveConfig()
        {
            Config.WriteObject(_config);
        }

        #endregion

        #region Data

        private PluginData _data;

        private void SaveData()
        {
            Interface.Oxide.DataFileSystem.WriteObject(Name, _data);
        }

        private void LoadData()
        {
            try
            {
                _data = Interface.Oxide.DataFileSystem.ReadObject<PluginData>(Name);
            }
            catch (Exception e)
            {
                PrintError(e.ToString());
            }

            if (_data == null) _data = new PluginData();
        }

        private class PluginData
        {
            [JsonProperty(PropertyName = "Players", ObjectCreationHandling = ObjectCreationHandling.Replace)]
            public List<ulong> Players = new List<ulong>();
        }

        #endregion

        #region Hooks

        private void Init()
        {
            if (!_config.MultipleTimes)
                LoadData();

            LoadUi();
        }

        private void OnPlayerConnected(BasePlayer player)
        {
            if (player == null)
                return;
            
            if (!_config.MultipleTimes)
            {
                if (_data.Players.Contains(player.userID))
                    return;
                
                _data.Players.Add(player.userID);
            }

            if (_config.delay > 0)
                timer.Once(_config.delay, () => CreateGUI(player));
            else
                CreateGUI(player);
        }

        private void Unload()
        {
            foreach (var player in BasePlayer.activePlayerList) CuiHelper.DestroyUi(player, Layer);

            if (!_config.MultipleTimes)
                SaveData();

            _config = null;
        }

        #endregion

        #region Commands

        [ChatCommand("welcomescreen")]
        private void Cmd(BasePlayer player)
        {
            OnPlayerConnected(player);
        }

        #endregion

        #region Interface

        private const string Layer = "welcomescreen.main";

        private void CreateGUI(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, Layer);
            CuiHelper.AddUi(player, _mainUi);

            if (_config.duration > 0) timer.Once(_config.duration, () => CuiHelper.DestroyUi(player, Layer));
        }

        #endregion

        #region Utils

        private string _mainUi;

        private void LoadUi()
        {
            var container = new CuiElementContainer
            {
                new CuiElement
                {
                    Name = Layer,
                    FadeOut = _config.fadeOut,
                    Components =
                    {
                        new CuiRawImageComponent
                            {Color = $"1 1 1 {_config.transparency}", FadeIn = _config.fadeIn, Url = _config.url},
                        new CuiRectTransformComponent
                        {
                            AnchorMin = _config.anchorMin,
                            AnchorMax = _config.anchorMax
                        }
                    }
                },
                new CuiElement
                {
                    Parent = Layer,
                    Components =
                    {
                        new CuiButtonComponent
                        {
                            Color = "0 0 0 0",
                            Close = Layer
                        },
                        new CuiRectTransformComponent
                        {
                            AnchorMin = "0 0",
                            AnchorMax = "1 1"
                        }
                    }
                }
            };

            _mainUi = CuiHelper.ToJson(container);
        }

        #endregion
    }
}

// --- End of file: WelcomeScreen.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/weapon-trajectory ---
// --- Original File Path: W/WeaponTrajectory/WeaponTrajectory.cs ---

using System.Collections.Generic;
using System;
using Newtonsoft.Json;
using Oxide.Core.Plugins;
using Oxide.Core.Configuration;
using UnityEngine;
using System.Linq;
using Facepunch;

namespace Oxide.Plugins
{
    [Info("Weapon Trajectory", "Dana", "1.0.4")] //Original author Jake_Rich
    [Description("Draws the trajectory of rockets and explosives.")]

    public class WeaponTrajectory : RustPlugin
    {
        public static WeaponTrajectory _plugin;
        public JSONFile<ConfigData> _settingsFile;
        public ConfigData Settings { get { return _settingsFile.Instance; } }
        public PlayerDataController<GrenadePlayerData> PlayerData;
        public const float UpdateRate = 0.1f;
        public const string Permission_Path = "weapontrajectory.show";

        void Init()
        {
            _plugin = this;
        }

        void Loaded()
        {
            //Dont create empty config files
            if (typeof(ConfigData).GetFields(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic).Length > 0)
            {
                _settingsFile = new JSONFile<ConfigData>($"{Name}", ConfigLocation.Config, extension: ".cfg");
            }
            PlayerData = new PlayerDataController<GrenadePlayerData>();

            //Don't create empty lang files
            if (lang_en.Count > 0) 
            {
                lang.RegisterMessages(lang_en, this);
            }

            permission.RegisterPermission(Permission_Path, this);

            timer.Every(UpdateRate, DoPlayerUpdate);
        }

        void Unload()
        {
            PlayerData.Unload();
        }

        public class ConfigData
        {
            public float GrenadeVelocityScale = 1.25f;
            public float RocketVelocityScale = 1f;
            public float HVRocketVelocityScale = 1f;
            public float FireRocketVelocityScale = 1f;
            public bool UsePermissions = false;
        }

        public class GrenadePlayerData : BasePlayerData
        {

        }

        void DoPlayerUpdate()
        {
            foreach(var player in BasePlayer.activePlayerList)
            {
                try
                {
                    CheckPlayerInput(player);
                }
                catch
                {

                }
            }
        }

        void CheckPlayerInput(BasePlayer player)
        {
            if (player.serverInput.IsDown(BUTTON.FIRE_PRIMARY))
            {
                var heldItem = player.GetActiveItem();
                if (heldItem.info.shortname == "grenade.f1")
                {
                    DrawGrenadePath(player);
                }
            }
            else if (player.serverInput.IsDown(BUTTON.FIRE_SECONDARY))
            {
                var heldItem = player.GetActiveItem();
                if (heldItem.info.shortname == "rocket.launcher")
                {
                    DrawRocketPath(player, heldItem.GetHeldEntity() as BaseLauncher);
                }
                else if(heldItem.info.shortname == "explosive.timed")
                {
                    DrawGrenadePath(player);
                }
            }
        }

        void DrawGrenadePath(BasePlayer player)
        {
            if (Settings.UsePermissions)
            {
                if (!permission.UserHasPermission(player.UserIDString, Permission_Path) && !player.IsAdmin)
                {
                    return;
                }
            }
            //Puts($"{comp.maxThrowVelocity}");
            //DrawArrow(player, UpdateRate, Color.green, player.eyes.position, player.eyes.position + player.eyes.BodyForward());
            List<Vector3> list = Pool.GetList<Vector3>();
            DoMovement(list, player.eyes.position, (player.eyes.BodyForward() * 13 + player.estimatedVelocity * 0.5f) * Settings.GrenadeVelocityScale);
            for (int i = 0; i < list.Count - 1; i++)
            {
                DrawArrow(player, UpdateRate, Color.green, list[i], list[i+1]);
            }
            Pool.FreeList(ref list);
        }

        void DrawRocketPath(BasePlayer player,BaseLauncher launcher)
        {
            if (Settings.UsePermissions)
            {
                if (!permission.UserHasPermission(player.UserIDString, Permission_Path) && !player.IsAdmin)
                {
                    return;
                }
            }
            if (launcher.primaryMagazine.contents == 0)
            {
                return;
            }

            var ammoType = launcher.primaryMagazine.ammoType.GetComponent<ItemModProjectile>().projectileObject.Get().GetComponent<ServerProjectile>();

            float velocityScale = Settings.RocketVelocityScale;
            if (launcher.primaryMagazine.ammoType.shortname == "ammo.rocket.hv")
            {
                velocityScale = Settings.HVRocketVelocityScale;
            }
            else if (launcher.primaryMagazine.ammoType.shortname == "ammo.rocket.fire")
            {
                velocityScale = Settings.FireRocketVelocityScale;
            }

            List<Vector3> list = Pool.GetList<Vector3>();
            float step = 0.3f;
            DoMovement(list, player.eyes.position + (player.eyes.BodyForward() * ammoType.speed) * velocityScale * step, (player.eyes.BodyForward() * ammoType.speed) * velocityScale, step, 30, ammoType.gravityModifier);
            for (int i = 0; i < list.Count - 1; i++)
            {
                DrawArrow(player, UpdateRate, Color.green, list[i], list[i + 1]);
            }
            Pool.FreeList(ref list);
        }

        void OnExplosiveThrown(BasePlayer player, BaseEntity entity)
        {
            if (entity.ShortPrefabName == "grenade.f1.deployed" || entity.ShortPrefabName == "explosive.timed.deployed")
            {
                entity.SetVelocity(entity.GetComponent<Rigidbody>().velocity * Settings.GrenadeVelocityScale);
            }

            //if(entity.ShortPrefabName == "explosive.timed.deployed")
            //{
            //    entity.SetVelocity(entity.GetComponent<Rigidbody>().velocity * Settings.GrenadeVelocityScale);
            //}
        }

        void OnRocketLaunched(BasePlayer player, BaseEntity entity)
        {
            var rocket = entity as TimedExplosive;
            if (rocket == null)
            {
                return;
            }
            var projectile = rocket.GetComponent<ServerProjectile>();
            float velocityScale = Settings.RocketVelocityScale;
            if (entity.ShortPrefabName == "rocket_hv")
            {
                velocityScale = Settings.HVRocketVelocityScale;
            }
            else if (entity.ShortPrefabName == "rocket_fire")
            {
                velocityScale = Settings.FireRocketVelocityScale;
            }
            projectile.CurrentVelocity *= velocityScale;
            Puts(entity.ShortPrefabName);
            //rocket.explosionEffect.
            //assets/prefabs/npc/patrol helicopter/effects/rocket_explosion.prefab
        }

        private void DoMovement(List<Vector3> output, Vector3 currentPos, Vector3 currentVelocity, float step = 0.1f, int maxSteps = 20, float gravityModifier = 1f)
        {
            for(int i = 0; i < maxSteps; i++)
            {
                output.Add(currentPos);
                //DoMovement

                currentVelocity += Physics.gravity * gravityModifier * step;
                currentPos = currentPos + currentVelocity * step;

                //Update velocity

                //currentVelocity -= currentVelocity.normalized * (currentVelocity.magnitude * this.drag * step);
            }
            output.Add(currentPos);
        }

        private class VelocityUpdate
        {
            public Vector3 Position;
            public Vector3 Velocity;
        }

        void OnFrame()
        {
            SendDDrawCommands();
        }

        #region DDraw

        private static Dictionary<BasePlayer, List<string>> DDrawCommandQueue = new Dictionary<BasePlayer, List<string>>();

        private static void QueueDDrawCommand(BasePlayer player, string command, params object[] args)
        {
            List<string> list;
            if (!DDrawCommandQueue.TryGetValue(player, out list))
            {
                list = new List<string>();
                DDrawCommandQueue.Add(player, list);
            }
            list.Add(ConsoleSystem.BuildCommand(command, args));
        }

        public static void DrawCube(BasePlayer player, float duration, UnityEngine.Color color, Vector3 position, float size = 1)
        {
            QueueDDrawCommand(player, "ddraw.box", duration, color, position, size);
        }

        public static void DrawBox(BasePlayer player, float duration, UnityEngine.Color color, Vector3 min, Vector3 max)
        {
            QueueDDrawCommand(player, "ddraw.line", duration, color, new Vector3(min.x, min.y, min.z), new Vector3(min.x, min.y, max.z));
            QueueDDrawCommand(player, "ddraw.line", duration, color, new Vector3(min.x, min.y, min.z), new Vector3(min.x, max.y, min.z));
            QueueDDrawCommand(player, "ddraw.line", duration, color, new Vector3(min.x, min.y, min.z), new Vector3(max.x, min.y, min.z));
            QueueDDrawCommand(player, "ddraw.line", duration, color, new Vector3(max.x, max.y, max.z), new Vector3(max.x, max.y, min.z));
            QueueDDrawCommand(player, "ddraw.line", duration, color, new Vector3(max.x, max.y, max.z), new Vector3(max.x, min.y, max.z));
            QueueDDrawCommand(player, "ddraw.line", duration, color, new Vector3(max.x, max.y, max.z), new Vector3(min.x, max.y, max.z));

            QueueDDrawCommand(player, "ddraw.line", duration, color, new Vector3(min.x, max.y, min.z), new Vector3(min.x, max.y, max.z));
            QueueDDrawCommand(player, "ddraw.line", duration, color, new Vector3(min.x, max.y, min.z), new Vector3(max.x, max.y, min.z));
            QueueDDrawCommand(player, "ddraw.line", duration, color, new Vector3(max.x, min.y, min.z), new Vector3(max.x, max.y, min.z));
            QueueDDrawCommand(player, "ddraw.line", duration, color, new Vector3(max.x, min.y, min.z), new Vector3(max.x, min.y, max.z));
            QueueDDrawCommand(player, "ddraw.line", duration, color, new Vector3(min.x, min.y, max.z), new Vector3(max.x, min.y, max.z));
            QueueDDrawCommand(player, "ddraw.line", duration, color, new Vector3(min.x, min.y, max.z), new Vector3(min.x, max.y, max.z));
        }

        public static void DrawText(BasePlayer player, string text, float duration, UnityEngine.Color color, Vector3 position, int size = 12)
        {
            QueueDDrawCommand(player, "ddraw.text", duration, color, position, size == 12 ? text : $"<size={size}>{text.Replace("\n", "\\n")}</size>");
        }

        public static void DrawSphere(BasePlayer player, float duration, UnityEngine.Color color, Vector3 position, float size)
        {
            QueueDDrawCommand(player, "ddraw.sphere", duration, color, position, size);
        }

        public static void DrawArrow(BasePlayer player, float duration, Color color, Vector3 start, Vector3 end)
        {
            QueueDDrawCommand(player, "ddraw.arrow", duration, color, start, end, 0.1);
        }

        public void SendDDrawCommands()
        {
            if (DDrawCommandQueue.Count == 0)
            {
                return;
            }
            foreach (var request in DDrawCommandQueue)
            {
                if (request.Key == null)
                {
                    continue;
                }
                bool fakeAdmin = request.Key.IsAdmin == false;
                if (fakeAdmin)
                {
                    request.Key.SetPlayerFlag(BasePlayer.PlayerFlags.IsAdmin, true);
                    request.Key.SendNetworkUpdateImmediate();
                }
                foreach (var cmd in request.Value)
                {
                    request.Key.SendConsoleCommand(cmd);
                }
                if (fakeAdmin)
                {
                    request.Key.SetPlayerFlag(BasePlayer.PlayerFlags.IsAdmin, false);
                    request.Key.SendNetworkUpdateImmediate();
                }
            }
            DDrawCommandQueue.Clear();
        }

        #endregion

        #region Lang API

        public Dictionary<string, string> lang_en = new Dictionary<string, string>()
        {
            
        };

        public static string GetLangMessage(string key, BasePlayer player)
        {
            return _plugin.lang.GetMessage(key, _plugin, player.UserIDString);
        }

        public static string GetLangMessage(string key, ulong player)
        {
            return _plugin.lang.GetMessage(key, _plugin, player.ToString());
        }

        public static string GetLangMessage(string key, string player)
        {
            return _plugin.lang.GetMessage(key, _plugin, player);
        }

        #endregion

        #region PlayerData

        public class BasePlayerData
        {
            [JsonIgnore]
            public BasePlayer Player { get; set; }

            public string userID { get; set; } = "";

            public BasePlayerData()
            {

            }
            public BasePlayerData(BasePlayer player) : base()
            {
                userID = player.UserIDString;
                Player = player;
            }
        }

        public class PlayerDataController<T> where T : BasePlayerData
        {
            [JsonPropertyAttribute(Required = Required.Always)]
            private Dictionary<string, T> playerData { get; set; } = new Dictionary<string, T>();
            private JSONFile<Dictionary<string, T>> _file;
            private Timer _timer;
            public IEnumerable<T> All { get { return playerData.Values; } }

            public PlayerDataController()
            {

            }

            public PlayerDataController(string filename = null)
            {
                if (filename == null)
                {
                    return;
                }
                _file = new JSONFile<Dictionary<string, T>>(filename);
                _timer = _plugin.timer.Every(120f, () =>
                {
                    _file.Save();
                });
            }

            public void Unload()
            {
                if (_file == null)
                {
                    return;
                }
                _file.Save();
            }

            public T Get(string identifer)
            {
                T data;
                if (!playerData.TryGetValue(identifer, out data))
                {
                    data = Activator.CreateInstance<T>();
                    playerData[identifer] = data;
                }
                return data;
            }

            public T Get(ulong userID)
            {
                return Get(userID.ToString());
            }

            public T Get(BasePlayer player)
            {
                var data = Get(player.UserIDString);
                data.Player = player;
                return data;
            }

            public bool Has(ulong userID)
            {
                return playerData.ContainsKey(userID.ToString());
            }

            public void Set(string userID, T data)
            {
                playerData[userID] = data;
            }

            public bool Remove(string userID)
            {
                return playerData.Remove(userID);
            }

            public void Update(T data)
            {
                playerData[data.userID] = data;
            }
        }

        #endregion

        #region Configuration Files

        public enum ConfigLocation
        {
            Data = 0,
            Config = 1,
            Logs = 2,
            Plugins = 3,
            Lang = 4,
            Custom = 5,
        }

        public class JSONFile<Type> where Type : class
        {
            private DynamicConfigFile _file;
            public string _name { get; set; }
            public Type Instance { get; set; }
            private ConfigLocation _location { get; set; }
            private string _path { get; set; }

            public JSONFile(string name, ConfigLocation location = ConfigLocation.Data, string path = null, string extension = ".json")
            {
                _name = name.Replace(".json", "");
                _location = location;
                switch (location)
                {
                    case ConfigLocation.Data:
                        {
                            _path = $"{Oxide.Core.Interface.Oxide.DataDirectory}/{name}{extension}";
                            break;
                        }
                    case ConfigLocation.Config:
                        {
                            _path = $"{Oxide.Core.Interface.Oxide.ConfigDirectory}/{name}{extension}";
                            break;
                        }
                    case ConfigLocation.Logs:
                        {
                            _path = $"{Oxide.Core.Interface.Oxide.LogDirectory}/{name}{extension}";
                            break;
                        }
                    case ConfigLocation.Lang:
                        {
                            _path = $"{Oxide.Core.Interface.Oxide.LangDirectory}/{name}{extension}";
                            break;
                        }
                    case ConfigLocation.Custom:
                        {
                            _path = $"{path}/{name}{extension}";
                            break;
                        }
                }
                _file = new DynamicConfigFile(_path);
                _file.Settings = new JsonSerializerSettings() { ReferenceLoopHandling = ReferenceLoopHandling.Ignore };
                Init();
            }

            public virtual void Init()
            {
                Load();
                Save();
                Load();
            }

            public virtual void Load()
            {

                if (!_file.Exists())
                {
                    Save();
                }
                Instance = _file.ReadObject<Type>();
                if (Instance == null)
                {
                    Instance = Activator.CreateInstance<Type>();
                    Save();
                }
                return;
            }

            public virtual void Save()
            {
                _file.WriteObject(Instance);
                return;
            }

            public virtual void Reload()
            {
                Load();
            }

            private void Unload(Plugin sender, PluginManager manager)
            {

            }
        }

        #endregion

    }
}

// --- End of file: WeaponTrajectory.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/windy-airdrop ---
// --- Original File Path: W/WindyAirdrop/WindyAirdrop.cs ---

using UnityEngine;
using Newtonsoft.Json;
using System.Collections.Generic;
using Oxide.Core.Libraries.Covalence;

namespace Oxide.Plugins
{
    [Info("Windy Airdrop", "Colon Blow", "1.0.1")]
    [Description("Airdrops move some as if its windy")]

    public class WindyAirdrop : CovalencePlugin
    {

        //Rust update fixes

        #region Load

        private bool initComplete = false;

        private void OnServerInitialized()
        {
            initComplete = true;
        }

        #endregion

        #region Configuration

        private static PluginConfig config;

        private class PluginConfig
        {
            public WindyAirdropSettings windyAirdropSettings { get; set; }

            public class WindyAirdropSettings
            {
                [JsonProperty(PropertyName = "Wind Speed Max - Maximus wind speed : ")] public float windspeedMax { get; set; }
                [JsonProperty(PropertyName = "Wind Speed Min - Minimum wind speed : ")] public float windspeedMin { get; set; }
            }

            public static PluginConfig DefaultConfig() => new PluginConfig()
            {
                windyAirdropSettings = new PluginConfig.WindyAirdropSettings
                {
                    windspeedMax = 5f,
                    windspeedMin = 1f,
                }
            };
        }

        protected override void LoadDefaultConfig()
        {
            PrintWarning("New configuration file created!!");
            config = PluginConfig.DefaultConfig();
        }
        protected override void LoadConfig()
        {
            base.LoadConfig();
            config = Config.ReadObject<PluginConfig>();
            SaveConfig();
        }
        protected override void SaveConfig()
        {
            Config.WriteObject(config);
        }

        #endregion

        #region Hooks

        private void OnEntitySpawned(SupplyDrop supplyDrop)
        {
            if (!initComplete) return;
            var windModifier = supplyDrop.gameObject.AddComponent<SupplyDropModifier>();
        }

        #endregion

        #region SupplyDrop Wind

        private class SupplyDropModifier : MonoBehaviour
        {
            WindyAirdrop.PluginConfig.WindyAirdropSettings airdropSettings = new PluginConfig.WindyAirdropSettings();
            SupplyDrop supplyDrop;

            Vector3 windDir;
            Vector3 newDir;
            float windSpeed;
            int counter;
            int nextwind;
            bool dropinit = false;

            private void Awake()
            {
                airdropSettings = config.windyAirdropSettings;
                if (airdropSettings == null) { OnDestroy(); return; }
                supplyDrop = GetComponent<SupplyDrop>();
                if (supplyDrop == null) { OnDestroy(); return; }

                windDir = GetDirection();
                windSpeed = Random.Range(airdropSettings.windspeedMin, airdropSettings.windspeedMax);
                counter = 0;
                nextwind = GetRandomInt();
                dropinit = true;
            }

            private Vector3 GetDirection()
            {
                var direction = Random.insideUnitSphere * 5f;
                if (direction.y > -windSpeed) direction.y = -windSpeed;
                return direction;
            }

            private int GetRandomInt()
            {
                var ranInt = Random.Range(100, 1000);
                return ranInt;
            }

            private void FixedUpdate()
            {
                if (!dropinit) return;
                if (supplyDrop == null) { OnDestroy(); return; }
                newDir = Vector3.RotateTowards(transform.forward, windDir, 0.5f * Time.deltaTime, 0.0F);
                newDir.y = 0f;
                supplyDrop.transform.position = Vector3.MoveTowards(transform.position, transform.position + windDir, (windSpeed) * Time.deltaTime);
                supplyDrop.transform.rotation = Quaternion.LookRotation(newDir);
                if (counter == nextwind) { windDir = GetDirection(); counter = 0; nextwind = GetRandomInt(); }
                counter++;
            }

            private void OnDestroy()
            {
                GameObject.Destroy(this);
            }
        }

        #endregion
    }
}

// --- End of file: WindyAirdrop.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/who-knocks ---
// --- Original File Path: W/WhoKnocks/WhoKnocks.cs ---

﻿using System.Collections.Generic;   //dict
using System;   //String.
using Newtonsoft.Json;
using UnityEngine;


namespace Oxide.Plugins
{
    [Info("Who Knocks", "Hockeygel23", "0.0.7")]
    [Description("Get information messages on door knock")]
    class WhoKnocks : RustPlugin
    {
        #region Vars
        private const string AdminPermission = "WhoKnocks.admin";
        private const string KnockPermission = "WhoKnocks.knock";
        private const string MessagePermission = "WhoKnocks.message";
        private ConfigData config;
        private List<BasePlayer> Cooldowns = new List<BasePlayer>();
        private List<string> Colors = new List<string>() { "white", "yellow", "orange", "green", "red", "black", "blue", "blanc", "jaune", "vert", "rouge", "noir", "bleu" };
        const float CellSize = 146.3f;


        #endregion

        #region Init
        private void Init()
        {
            permission.RegisterPermission(KnockPermission, this);
            permission.RegisterPermission(AdminPermission, this);
            permission.RegisterPermission(MessagePermission, this);

        }
        #endregion

        #region Config

        private class ConfigData
        {
            [JsonProperty("Knocking Cooldown in seconds (0 = no cooldown)")]
            public float KnockCooldown;

            [JsonProperty("Display Door coordinates for owner")]
            public bool DoorCoordinates;

            [JsonProperty("Text color when the owner is offline")]
            public string OfflineColor;

            [JsonProperty("Text color when the owner is online")]
            public string OnlineColor;

            [JsonProperty("Display owner online/offline")]
            public bool OwnerDisplay;
        }

        private ConfigData GenerateConfig()
        {
            return new ConfigData
            {
                OfflineColor = "red",
                OnlineColor = "green",
                KnockCooldown = 0,
                DoorCoordinates =  true,
                OwnerDisplay = true,
            };
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();

            try
            {
                config = Config.ReadObject<ConfigData>();

                if (config == null)
                {
                    LoadDefaultConfig();
                }
            }
            catch
            {
                PrintError("Configuration file is corrupt! Check your config file at https://jsonlint.com/");
                LoadDefaultConfig();
                return;
            }

            SaveConfig();
        }

        protected override void LoadDefaultConfig()
        {
            config = GenerateConfig();
        }

        protected override void SaveConfig()
        {
            Config.WriteObject(config);
        }
        #endregion

        #region messages

        protected override void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                {"KnocksMsg", "{0} is knocking your door at {1}."},
                {"KnocksMsgNoCoordinates", "{0} is knocking your door."},
                {"OwnerOnlineMsg", "Owner {0} is online and has been informed."},
                {"OwnerMsg", "Owner {0} has been informed."},
                {"OwnerDisplay", "You have set the knock display owner status to: {0}"},
                {"OwnerOfflineMsg", "Owner {0} is actually sleeping !"},
                {"TooFast", "{0}, You have a cooldown period of {1} seconds" },
                {"MissingArgs", "{0}, You are missing  arguments. Ex, /whoknocks cooldown 5" },
                {"NegativeCooldown", "{0}, The cooldown value has to be greater than 0" },
                {"WrongColor", "{0}, The color is incorrect. The options are: white, yellow, orange, green, red, black, and blue" },
                {"CorrectColor", "{0}, You have set {1} to {2}" },
                {"CorrectCooldown", "{0}, You have set {1} to {2} seconds" },
                {"IsAdmin", "{0}, The server admin, {1}, has knocked on your door!" },
                {"CoordOff", "{0}, door coordinates {1} be displayed!" }
            }, this, "en");

            lang.RegisterMessages(new Dictionary<string, string>
            {
                {"KnocksMsg", "{0} est en train de tocquer à une de vos porte {1}."},
                {"KnocksMsgNoCoordinates", "{0} frappe à votre porte."},
                {"OwnerOnlineMsg", "L'habitant {0} est en ligne et a été informé."},
                {"OwnerMsg", "Le propriétaire {0} a été informé"},
                {"OwnerDisplay", "Vous avez défini le statut de propriétaire de l'affichage Knock sur: {0}" },
                {"OwnerOfflineMsg", "L'habitant {0} est en train de dormir !"},
                {"TooFast", "{0}, Vous avez un temps de recharge de {1} secondes" },
                {"MissingArgs", "{0}, Il vous manque des arguments. Ex, /whoknocks cooldown 5" },
                {"NegativeCooldown", "{0}, La valeur du temps de recharge doit être supérieure à 0" },
                {"WrongColor", "{0}, La couleur est incorrecte. Les options sont: blanc, jaune, orange, vert, rouge, noir et bleu" },
                {"CorrectColor", "{0}, Vous avez défini {1} à {2}" },
                {"CorrectCooldown", "{0}, Vous avez défini {1} à {2} secondes" },
                {"IsAdmin", "L'administrateur du serveur, {1}, a frappé à votre porte!" },
                {"CoordOff", "{0}, les coordonnées de la porte {1} affichées! " }
            }, this, "fr");
        }

        #endregion

        #region OxideHooks
        private void OnDoorKnocked(Door door, BasePlayer player)
        {
            if (door == null || player == null) return;
            BaseEntity DoorItem = door as BaseEntity;
            if (DoorItem == null) return;
            if (DoorItem.OwnerID == null || DoorItem.OwnerID.Equals( (object)null ) ) return;
            BasePlayer owner = null;
            foreach(var Player in BasePlayer.allPlayerList)
            {
                if (Player.userID != DoorItem.OwnerID) continue;
                owner = Player;
            }
            
            if (owner == null) return;
            if (player == owner) return;
            

            switch (permission.UserHasPermission(player.UserIDString, KnockPermission))
            {

                case true:
                    if (owner.IsConnected)
                    {
                        if (InCooldown(player))
                        {
                            //Puts(Cooldowns.Contains(player).ToString());
                            player.ChatMessage($"<color=red>{string.Format(lang.GetMessage("TooFast", this), player.displayName, config.KnockCooldown)}</color>");
                            return;
                        }
                        else
                        {
                            if (config.OwnerDisplay)
                            {
                                player.ChatMessage($"<color={config.OnlineColor}>{String.Format(lang.GetMessage("OwnerOnlineMsg", this), owner.displayName)}</color>");
                            }
                            else
                            {
                                player.ChatMessage($"<color={config.OnlineColor}>{String.Format(lang.GetMessage("OwnerMsg", this), owner.displayName)}</color>");
                            }
                            
                            Cooldown(player);
                        }
                    }
                    else
                    {
                        if (Cooldowns.Contains(player))
                        {
                            player.ChatMessage($"<color=red>{String.Format(lang.GetMessage("TooFast", this), player.displayName, config.KnockCooldown)}</color>");
                            return;
                        }
                        else
                        {
                            if (config.OwnerDisplay)
                            {
                                player.ChatMessage($"<color={config.OfflineColor}>{String.Format(lang.GetMessage("OwnerOfflineMsg", this), owner.displayName)}</color>");
                            }
                            else
                            {
                                player.ChatMessage($"<color={config.OnlineColor}>{String.Format(lang.GetMessage("OwnerMsg", this), owner.displayName)}</color>");
                            }
                            Cooldown(player);
                        }
                    }
                    break;    
            }

            switch (permission.UserHasPermission(owner.UserIDString, MessagePermission))
            {

                case true:
                    if (config.DoorCoordinates)
                    {
                        owner.ChatMessage($"<color={config.OnlineColor}> {String.Format(lang.GetMessage("KnocksMsg", this), player.displayName, GetDoorGridPosition(door.transform.position))} </color>");
                    }
                    else
                    {
                        owner.ChatMessage($"<color={config.OnlineColor}> {String.Format(lang.GetMessage("KnocksMsgNoCoordinates", this), player.displayName)} </color>");
                    }
                    break;
            }
        }
        #endregion

        #region Helpers

        private string GetDoorGridPosition(Vector3 position)
        {
            float GetMiddleWorldSize = World.Size / 2f;

            int BiggestGridSize = Mathf.FloorToInt(World.Size / CellSize) - 1;
            
            
            int GridZAxis = Mathf.Clamp(BiggestGridSize - Mathf.FloorToInt((position.z + GetMiddleWorldSize) / CellSize), 0, BiggestGridSize);

            int GridXAxis = Mathf.Clamp(Mathf.FloorToInt((position.x + GetMiddleWorldSize) / CellSize), 0, BiggestGridSize);

            string extraA = string.Empty;
            if (GridXAxis > 26)
            {
                extraA = $"{(char)('A' + (GridXAxis / 26 - 1))}";
            }

            return $"{extraA}{(char)('A' + GridXAxis % 26)}{GridZAxis.ToString()}";
        }

        private void Cooldown(BasePlayer player)
        {
            if(config.KnockCooldown == 0 || Cooldowns.Contains(player))
            {
                return;
            }
            
            Cooldowns.Add(player);
            TimerCooldown(player);
        }

        private bool InCooldown(BasePlayer player)
        {
            if (Cooldowns.Contains(player))
            {
                return true;
            }
            else return false;
        }
        private void TimerCooldown(BasePlayer player)
        {
            timer.Once(config.KnockCooldown, () =>
            {
                Cooldowns.Remove(player);
            });
        }
        #endregion

        #region ChatCommands
        [ChatCommand("whoknocks")]
        private void cmdChat(BasePlayer player, string command, string[] args)
        {
            if (!permission.UserHasPermission(player.UserIDString, AdminPermission))
            {
                return;
            }

            if (args.IsEmpty())
            {
                player.ChatMessage($"<color=red>{String.Format(lang.GetMessage("MissingArgs", this), player.displayName)}</color>");
                return;
            }

            switch (args[0])
            {
                case "cooldown":
                    if (float.Parse(args[1]) < 0)
                    {
                        player.ChatMessage($"<color=red>{String.Format(lang.GetMessage("NegativeCooldown", this), player.displayName)}</color>");
                        return;
                    }
                    else
                    {
                        
                        config.KnockCooldown = float.Parse(args[1]);
                        player.ChatMessage($"<color=green>{String.Format(lang.GetMessage("CorrectCooldown", this), player.displayName, "Cooldown", config.KnockCooldown)}</color>");
                    }
                    break;
                case "offlinecolor":
                    if (!Colors.Contains(args[1]))
                    {
                        player.ChatMessage($"<color=red>{String.Format(lang.GetMessage("WrongColor", this), player.displayName)}</color>");
                        return;
                    }
                    switch (args[1])
                    {
                        case "black":
                        case "noir":
                            config.OfflineColor = "black";
                            break;

                        case "white":
                        case "blanc":
                            config.OfflineColor = "white";
                            break;

                        case "yellow":
                        case "jaune":
                            config.OfflineColor = "yellow";
                            break;

                        case "green":
                        case "vert":
                            config.OfflineColor = "green";
                            break;

                        case "blue":
                        case "bleu":
                            config.OfflineColor = "blue";
                            break;

                        case "orange":
                            config.OfflineColor = "orange";
                            break;


                        case "red":
                        case "rouge":
                            config.OfflineColor = "red";
                            break;
                    }
                    player.ChatMessage($"<color={config.OfflineColor}>{String.Format(lang.GetMessage("CorrectColor", this), player.displayName, "OfflineColor", config.OfflineColor)}</color>");
                    break;

                case "onlinecolor":
                    if (!Colors.Contains(args[1]))
                    {
                        player.ChatMessage($"<color=red>{String.Format(lang.GetMessage("WrongColor", this), player.displayName)}</color>");
                        return;
                    }
                    switch (args[1])
                    {
                        case "black":
                        case "noir":
                            config.OnlineColor = "black";
                            break;

                        case "white":
                        case "blanc":
                            config.OnlineColor = "white";
                            break;

                        case "yellow":
                        case "jaune":
                            config.OnlineColor = "yellow";
                            break;

                        case "green":
                        case "vert":
                            config.OnlineColor = "green";
                            break;

                        case "blue":
                        case "bleu":
                            config.OnlineColor = "blue";
                            break;

                        case "orange":
                            config.OnlineColor = "orange";
                            break;

                        case "red":
                        case "rouge":
                            config.OnlineColor = "red";
                            break;
                    }
                    player.ChatMessage($"<color={config.OnlineColor}>{String.Format(lang.GetMessage("CorrectColor", this), player.displayName, "OnlineColor", config.OnlineColor)}</color>");

                    break;
                case "coordinates":
                    switch (args[1])
                    {
                        case "on":
                            config.DoorCoordinates = true;
                            player.ChatMessage($"<color=green>{String.Format(lang.GetMessage("CoordOff", this), player.displayName, "will")}</color>");
                            break;

                        case "off":
                            config.DoorCoordinates = false;
                            player.ChatMessage($"<color=red>{String.Format(lang.GetMessage("CoordOff", this), player.displayName, "will not")}</color>");
                            break;
                    }
                    break;

                case "ownerstatus":
                    switch (args[1])
                    {
                        case "on":
                            config.OwnerDisplay = true;
                            player.ChatMessage($"<color=green>{String.Format(lang.GetMessage("OwnerDisplay", this), args[1])}</color>");
                            break;

                        case "off":
                            config.OwnerDisplay = false;
                            player.ChatMessage($"<color=green>{String.Format(lang.GetMessage("OwnerDisplay", this), args[1])}</color>");
                            break;
                    }
                    break;
            }
        }
        #endregion

        private void Unload()
        {
            SaveConfig();
        }
    }
}



// --- End of file: WhoKnocks.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/wipe-kits ---
// --- Original File Path: W/WipeKits/WipeKits.cs ---

﻿using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("Wipe Kits", "Ryan", "1.2.52")]
    [Description("Puts a configurable cooldown on each kit depending on their kitname.")]
    public class WipeKits : RustPlugin
    {
        #region Declaration

        private static ConfigFile _cFile;
        private DateTime _cachedWipeTime;
        private const string Perm = "wipekits.bypass";

        #endregion

        #region Config

        private class ConfigFile
        {
            [JsonProperty(PropertyName = "Kit Names & Cooldowns - Cooldowns (minutes)")]
            public Dictionary<string, float> Kits;

            [JsonProperty(PropertyName = "Use GUI Kits (true/false)")]
            public bool UseGui { get; set; }

            public static ConfigFile DefaultConfig()
            {
                return new ConfigFile
                {
                    Kits = new Dictionary<string, float>()
                    {
                        ["kitname1"] = 5,
                        ["kitname2"] = 5
                    },
                    UseGui = false
                };
            }
        }

        protected override void LoadDefaultConfig()
        {
            PrintWarning("Loading default configuration file...");
            _cFile = ConfigFile.DefaultConfig();
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                _cFile = Config.ReadObject<ConfigFile>();
                if (_cFile == null)
                {
                    Regenerate();
                }
            }
            catch { Regenerate(); }
        }

        protected override void SaveConfig() => Config.WriteObject(_cFile);

        private void Regenerate()
        {
            PrintWarning($"Configuration file at 'oxide/config/{Name}.json' seems to be corrupt, regenerating...");
            LoadDefaultConfig();
        }

        #endregion Config

        #region Lang

        protected override void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                // Time formatting
                ["DayFormat"] = "<color=orange>{0}</color> day and <color=orange>{1}</color> hours",
                ["DaysFormat"] = "<color=orange>{0}</color> days and <color=orange>{1}</color> hours",
                ["HourFormat"] = "<color=orange>{0}</color> hour and <color=orange>{1}</color> minutes",
                ["HoursFormat"] = "<color=orange>{0}</color> hours and <color=orange>{1}</color> minutes",
                ["MinFormat"] = "<color=orange>{0}</color> minute and <color=orange>{1}</color> seconds",
                ["MinsFormat"] = "<color=orange>{0}</color> minutes and <color=orange>{1}</color> seconds",
                ["SecsFormat"] = "<color=orange>{0}</color> seconds",
                // Can't use command
                ["CantUse"] = "The server's just wiped! Try again in {0}",
            }, this);
        }

        #endregion Lang

        #region Methods

        private string Lang(string key, string id = null, params object[] args) => string.Format(lang.GetMessage(key, this, id), args);

        private string GetFormattedTime(double time)
        {
            var timeSpan = TimeSpan.FromSeconds(time);
            if (timeSpan.TotalSeconds < 1)
            {
                return null;
            }

            if (Math.Floor(timeSpan.TotalDays) >= 1)
            {
                return string.Format(timeSpan.Days > 1 ? Lang("DaysFormat", null, timeSpan.Days, timeSpan.Hours) : Lang("DayFormat", null, timeSpan.Days, timeSpan.Hours));
            }

            if (Math.Floor(timeSpan.TotalMinutes) >= 60)
            {
                return string.Format(timeSpan.Hours > 1 ? Lang("HoursFormat", null, timeSpan.Hours, timeSpan.Minutes) : Lang("HourFormat", null, timeSpan.Hours, timeSpan.Minutes));
            }

            if (Math.Floor(timeSpan.TotalSeconds) >= 60)
            {
                return string.Format(timeSpan.Minutes > 1 ? Lang("MinsFormat", null, timeSpan.Minutes, timeSpan.Seconds) : Lang("MinFormat", null, timeSpan.Minutes, timeSpan.Seconds));
            }

            return Lang("SecsFormat", null, timeSpan.Seconds);
        }

        private TimeSpan GetNextKitTime(float cooldown)
        {
            var timeSince = TimeSpan.FromSeconds((DateTime.UtcNow.ToLocalTime() - _cachedWipeTime).TotalSeconds);
            if (timeSince.TotalSeconds > cooldown * 60)
            {
                return TimeSpan.Zero;
            }

            double timeUntil = cooldown * 60 - Math.Round(timeSince.TotalSeconds);
            return TimeSpan.FromSeconds(timeUntil);
        }

        #endregion

        #region Hooks

        private void OnServerInitialized()
        {
            permission.RegisterPermission( Perm, this );

            if (!_cFile.UseGui)
            {
                Unsubscribe(nameof(OnServerCommand));
            }

            _cachedWipeTime = SaveRestore.SaveCreatedTime.ToLocalTime();
        }

        private object OnServerCommand(ConsoleSystem.Arg arg)
        {
            var player = arg?.Player();
            if (player == null || arg.cmd == null)
            {
                return null;
            }

            if (arg.cmd.FullName.ToLower().StartsWith("kit.gui") && _cFile.Kits.ContainsKey(arg.GetString(0).ToLower()))
            {
                float kitCooldown = _cFile.Kits[arg.GetString(0).ToLower()];
                if (GetNextKitTime(kitCooldown) != TimeSpan.Zero)
                {
                    if (permission.UserHasPermission(player.UserIDString, Perm))
                    {
                        return null;
                    }

                    player.SendConsoleCommand("kit.close");
                    PrintToChat(player, Lang("CantUse", player.UserIDString, GetFormattedTime(GetNextKitTime(kitCooldown).TotalSeconds)));
                    return true;
                }
            }
            return null;
        }

        private object OnPlayerCommand(BasePlayer player, string command, string[] args)
        {
            if (command.ToLower() == "kit")
            {
                float kitCooldown;
                if (args.Length == 0 || !_cFile.Kits.TryGetValue(args[0].ToLower().Replace("\"", ""), out kitCooldown))
                {
                    return null;
                }

                if (GetNextKitTime(kitCooldown) == TimeSpan.Zero)
                {
                    return null;
                }

                if ( permission.UserHasPermission( player.UserIDString, Perm ) )
                {
                    return null;
                }

                PrintToChat(player, Lang("CantUse", player.UserIDString, GetFormattedTime(GetNextKitTime(kitCooldown).TotalSeconds)));
                return true;
            }

            return null;
        }

        #endregion
    }
}

// --- End of file: WipeKits.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/water-well-manager ---
// --- Original File Path: W/WaterWellManager/WaterWellManager.cs ---

using System;
using System.Linq;
using System.Reflection;
using System.Collections.Generic;
using UnityEngine;
using Oxide.Core.Plugins;
using Oxide.Core.Libraries.Covalence;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Facepunch;

namespace Oxide.Plugins
{
    [Info("WaterWellManager", "Krungh Crow", "2.0.0")]
    [Description("Configure how the water wells work")]

    #region Changelogs and ToDo
    /*************************************************************
    * 
    * Thx to    : redBDGR the original creator of this plugin
    * 
    * 2.0.0     : Complete rewrite
    * 
    **************************************************************/
    #endregion

    class WaterWellManager : CovalencePlugin
    {
        #region Configuration
        void Init()
        {
            if (!LoadConfigVariables())
            {
            Puts("Config file issue detected. Please delete file, or check syntax and fix.");
            return;
            }
        }

        private ConfigData configData;

        class ConfigData
        {
            [JsonProperty(PropertyName = "Settings")]
            public SettingsWaterWell WellChecks = new SettingsWaterWell();
        }

        class SettingsWaterWell
        {
            [JsonProperty(PropertyName = "Calories needed Per Pump")]
            public float Calories = 5f;
            [JsonProperty(PropertyName = "Pressure per pump")]
            public float Pressure = 0.2f;
            [JsonProperty(PropertyName = "Pressure needed to pump")]
            public float PressureNeeded = 1f;
            [JsonProperty(PropertyName = "Water output per pump")]
            public int Output = 100;
        }

        private bool LoadConfigVariables()
        {
            try
            {
            configData = Config.ReadObject<ConfigData>();
            }
            catch
            {
            return false;
            }
            SaveConf();
            return true;
        }

        protected override void LoadDefaultConfig()
        {
            Puts("Fresh install detected Creating a new config file.");
            configData = new ConfigData();
            SaveConf();
        }

        void SaveConf() => Config.WriteObject(configData, true);
        #endregion

        #region Main
        private void OnServerInitialized()
        {
            UpdateRoutine();
        }

        void Unload()
        {
            VanillaRoutine();
        }

        private void UpdateRoutine()
        {
            foreach (WaterWell well in UnityEngine.Object.FindObjectsOfType<WaterWell>())

            if (well != null)
            {
                well.caloriesPerPump = configData.WellChecks.Calories;
                well.pressurePerPump = configData.WellChecks.Pressure;
                well.pressureForProduction = configData.WellChecks.PressureNeeded;
                well.waterPerPump = configData.WellChecks.Output;
                well.SendNetworkUpdateImmediate();
            }
        }

        private void VanillaRoutine()
        {
            foreach (WaterWell well in UnityEngine.Object.FindObjectsOfType<WaterWell>())

            if (well != null)
            {
                well.caloriesPerPump = 5f;
                well.pressurePerPump = 0.2f;
                well.pressureForProduction = 1f;
                well.waterPerPump = 50;
                well.SendNetworkUpdate(BasePlayer.NetworkQueue.Update);
            }
        }
        #endregion
    }
}

// --- End of file: WaterWellManager.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/wipe-assistant ---
// --- Original File Path: W/WipeAssistant/WipeAssistant.cs ---

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Reflection;
using Oxide.Core;
using Oxide.Core.Plugins;
using Rust;
using UnityEngine;
using Newtonsoft.Json.Linq;

namespace Oxide.Plugins
{
	[Info("WipeAssistant", "S0N_0F_BISCUIT", "1.0.0")]
	[Description("Wipes player deployables, players(active and sleeping), and several mod data files.")]
    class WipeAssistant : RustPlugin
	{
		#region Variables
		const string version = "1.0.0";
		#region Plugin References
		[PluginReference("Economics")]
		Plugin Economics;
		[PluginReference("Backpacks")]
		Plugin Backpacks;
		[PluginReference("PlayerChallenges")]
		Plugin PlayerChallenges;
		[PluginReference("ZLevelsRemastered")]
		Plugin ZLevelsRemastered;
		[PluginReference("GUIShop")]
		Plugin GUIShop;
		[PluginReference("HeliControl")]
		Plugin HeliControl;
		[PluginReference("Kits")]
		Plugin Kits;
		[PluginReference("Pets")]
		Plugin Pets;
		[PluginReference("Replenish")]
		Plugin Replenish;
		[PluginReference("SignTracker")]
		Plugin SignTracker;
		[PluginReference("TargetPractice")]
		Plugin TargetPractice;
		[PluginReference("AutoPurge")]
		Plugin AutoPurge;
		[PluginReference("Airstrike")]
		Plugin Airstrike;
		[PluginReference("RotatingBillboards")]
		Plugin RotatingBillboards;
		[PluginReference("NTeleportation")]
		Plugin NTeleportation;
		[PluginReference("Bounty")]
		Plugin Bounty;
		#endregion

		#region Backpack Classes
		private class EmptyBackpack
		{
			public BackpackInventory Inventory = new BackpackInventory();
			public ulong ownerID;

			private BaseEntity entity;
			private BaseEntity visualEntity;
			private StorageContainer container => entity.GetComponent<StorageContainer>();
			public bool IsOpen => entity != null;
		}

		private class BackpackInventory
		{
			public List<BackpackItem> Items = new List<BackpackItem>();

			public class BackpackItem
			{
				public int ID;
				public int Amount;
				public ulong Skin;
				public float Fuel;
				public int FlameFuel;
				public float Condition;
				public int Ammo;
				public int AmmoType;

				public List<BackpackItem> Contents = new List<BackpackItem>();
			}
		}
		#endregion

		#region Configuration Classes
		class ConfigData
		{
			public bool WipeBackpackOnPlayerJoin { get; set; } = true;
			public ExampleWipe ExampleWipeOptions { get; set; } = new ExampleWipe();
			public HardWipe HardWipeOptions { get; set; } = new HardWipe();
			public SoftWipe SoftWipeOptions { get; set; } = new SoftWipe();
		}

		class ExampleWipe
		{
			public bool WipeAirstrike { get; set; } = false;
			public bool WipeAutoPurge { get; set; } = false;
			public bool WipeBackpacks { get; set; } = false;
			public bool WipeBounty { get; set; } = false;
			public bool WipeEconomics { get; set; } = false;
			public bool WipeGUIShop { get; set; } = false;
			public bool WipeHeliControl { get; set; } = false;
			public bool WipeKits { get; set; } = false;
			public bool WipeNTeleportation { get; set; } = false;
			public bool WipePets { get; set; } = false;
			public bool WipePlayerChallenges { get; set; } = false;
			public bool WipeReplenish { get; set; } = false;
			public bool WipeRotatingBillboards { get; set; } = false;
			public bool WipeSignTracker { get; set; } = false;
			public bool WipeTargetPractice { get; set; } = false;
			public bool WipeZLevelsRemastered { get; set; } = false;
			public List<string> CustomConsoleCommands { get; set; } = new List<string>();
		}

		class HardWipe
		{
			public bool WipeAirstrike { get; set; } = true;
			public bool WipeAutoPurge { get; set; } = true;
			public bool WipeBackpacks { get; set; } = true;
			public bool WipeBounty { get; set; } = true;
			public bool WipeEconomics { get; set; } = true;
			public bool WipeGUIShop { get; set; } = true;
			public bool WipeHeliControl { get; set; } = true;
			public bool WipeKits { get; set; } = true;
			public bool WipeNTeleportation { get; set; } = true;
			public bool WipePets { get; set; } = true;
			public bool WipePlayerChallenges { get; set; } = true;
			public bool WipeReplenish { get; set; } = true;
			public bool WipeRotatingBillboards { get; set; } = true;
			public bool WipeSignTracker { get; set; } = true;
			public bool WipeTargetPractice { get; set; } = true;
			public bool WipeZLevelsRemastered { get; set; } = true;
			public List<string> CustomConsoleCommands { get; set; } = new List<string>();
		}

		class SoftWipe
		{
			public bool WipeAirstrike { get; set; } = true;
			public bool WipeAutoPurge { get; set; } = true;
			public bool WipeBackpacks { get; set; } = true;
			public bool WipeBounty { get; set; } = true;
			public bool WipeEconomics { get; set; } = false;
			public bool WipeGUIShop { get; set; } = true;
			public bool WipeHeliControl { get; set; } = true;
			public bool WipeKits { get; set; } = true;
			public bool WipeNTeleportation { get; set; } = true;
			public bool WipePets { get; set; } = true;
			public bool WipePlayerChallenges { get; set; } = false;
			public bool WipeReplenish { get; set; } = false;
			public bool WipeRotatingBillboards { get; set; } = false;
			public bool WipeSignTracker { get; set; } = true;
			public bool WipeTargetPractice { get; set; } = false;
			public bool WipeZLevelsRemastered { get; set; } = false;
			public List<string> CustomConsoleCommands { get; set; } = new List<string>();
		}
		#endregion

		private Dictionary<ulong, string> PlayerData;
		private ConfigData config = new ConfigData();
		#endregion

		#region Plugin Initialization
		//
		// Load default config file
		//
		protected override void LoadDefaultConfig()
		{
			Config.Clear();
			var config = new ConfigData();
			Config.WriteObject(config, true);
		}

		private void LoadConfig()
		{
			config = Config.ReadObject<ConfigData>();
			config.ExampleWipeOptions.CustomConsoleCommands.Clear();
			config.ExampleWipeOptions.CustomConsoleCommands.Add("say SERVER WIPED BY WIPE ASSISTANT");
			config.ExampleWipeOptions.CustomConsoleCommands.Add("Command 2");
			Config.WriteObject(config, true);
		}

		private void LoadData()
		{
			try
			{
				PlayerData = Interface.Oxide.DataFileSystem.ReadObject<Dictionary<ulong, string>>("WipeAssistant");
			}
			catch
			{
				PlayerData = new Dictionary<ulong, string>();
			}
		}

		private void Init()
		{
			LoadConfig();
			LoadData();
		}

		private void Loaded()
		{
			try
			{
				foreach (BasePlayer current in BasePlayer.activePlayerList)
				{
					string value;
					ulong userID = current.userID;
					string userName = current.displayName;
					if (!PlayerData.TryGetValue(userID, out value))
					{
						PlayerData.Add(userID, userName);
						SaveData();
					}
				}
			}
			catch { }
			try
			{
				foreach (BasePlayer current in BasePlayer.sleepingPlayerList)
				{
					string value;
					ulong userID = current.userID;
					string userName = current.displayName;
					if (!PlayerData.TryGetValue(userID, out value))
					{
						PlayerData.Add(userID, userName);
						SaveData();
					}
				}
			}
			catch { }
		}
		#endregion

		#region Player Hooks
		void OnPlayerConnected(Network.Message packet)
		{
			ulong userID = packet.connection.userid;
			string userName = packet.connection.username;
			if (userID == null)
				return;
			if (Backpacks && config.WipeBackpackOnPlayerJoin)
			{
				string value;
				if (!PlayerData.TryGetValue(userID, out value))
				{
					wipeBackpack(userID, userName);
				}
			}
		}
		#endregion

		#region Data Handling
		//
		// Save PlayerData
		//
		private void SaveData()
		{
			Interface.Oxide.DataFileSystem.WriteObject("WipeAssistant", PlayerData);
		}
		//
		// Clear PlayerData
		//
		private void ClearData()
		{
			PlayerData.Clear();
			Interface.Oxide.DataFileSystem.WriteObject("WipeAssistant", PlayerData);
		}
		#endregion

		#region Functionality
		//
		// Create a backup of the servers files
		//
		void CreateBackup()
		{
			string location = $"backup/WipeAssistant/" + DateTime.Now.ToString("yyyy-MM-dd-HH-mm-ss") + "/" + ConVar.Server.identity;
			DirectoryEx.Backup(location);
			DirectoryEx.CopyAll(ConVar.Server.rootFolder, location);
			Puts($"Backup added to \"" + location + "\"");
		}
		//
		// Create a backup of a players backpack
		//
		void BackupBackpack(string playerName, ulong playerID)
		{
			string location = $"backup/WipeAssistant/Backpacks/{playerName}/{DateTime.Now.ToString("yyyy-MM-dd-HH-mm-ss")}";
			DirectoryEx.Backup(location);
			DirectoryEx.CopyAll(ConVar.Server.rootFolder + "/oxide/data/Backpacks", location);
			Puts($"Backpack backup added to \"" + location + "\"");
		}
		//
		// Kills all active and sleeping players
		//
		void killPlayers(string type)
		{
			int active = 0, sleeping = 0;
			bool unloadedBackpacks = false;
			if (Backpacks && (type == "hard" && config.HardWipeOptions.WipeBackpacks) || (type == "soft" && config.SoftWipeOptions.WipeBackpacks))
			{
				Interface.Oxide.UnloadPlugin("Backpacks");
				unloadedBackpacks = true;
			}
			try
			{
				foreach (BasePlayer current in BasePlayer.activePlayerList)
				{
					current.Hurt(10000);
					active++;
					if (unloadedBackpacks)
						wipeBackpack(current.userID, current.displayName);
				}
			}
			catch { }
			try
			{
				foreach (BasePlayer current in BasePlayer.sleepingPlayerList)
				{
					current.Hurt(10000);
					sleeping++;
					if (unloadedBackpacks)
						wipeBackpack(current.userID, current.displayName);
				}
			}
			catch { }
			Puts($"Killed {active} active players.");
			Puts($"Killed {sleeping} sleeping players.");
			if (unloadedBackpacks)
				Interface.Oxide.LoadPlugin("Backpacks");
		}
		//
		// Removes all corpses from the world
		//
		void removeCorpses()
		{
			int corpses = 0;
			foreach (BaseCorpse entity in BaseNetworkable.serverEntities.Where(p => (p as BaseCorpse) != null).ToList())
			{
				entity.RemoveCorpse();
				corpses++;
			}
			Puts($"Removed {corpses} corpses.");
		}
		//
		// Wipe players from the world (Kill and remove corpses)
		//
		void wipePlayers(string type)
		{
			killPlayers(type);
			removeCorpses();
		}
		//
		// Wipe a players backpack
		//
		void wipeBackpack(ulong userID, string userName)
		{
			EmptyBackpack eb = new EmptyBackpack();
			eb.ownerID = userID;
			BackupBackpack(userName, userID);
			Core.Interface.Oxide.DataFileSystem.WriteObject("Backpacks/" + userID, eb);
			Puts($"Cleared {userName}'s backpack.");
			PlayerData.Add(userID, userName);
			SaveData();
		}
		//
		// Wipe all player deployables from the map
		//
		void wipeDeployables()
		{
			int entities = 0;
			foreach (BaseNetworkable entity in BaseNetworkable.serverEntities.Where(p => (p as BaseEntity).OwnerID != 0).ToList())
			{
				entity.Kill();
				entities++;
			}
			Puts($"Removed {entities} entities from the server.");
		}
		#endregion

		#region Console Commands
		[ConsoleCommand("softwipe")]
        void softWipe(ConsoleSystem.Arg arg)
        {
			if (arg.Connection != null && arg.Connection.authLevel < 2)
				return;
			
			// Create server backup
			CreateBackup();

			#region Clear other mod data
			if (Airstrike && config.SoftWipeOptions.WipeAirstrike)
			{
				Interface.Oxide.UnloadPlugin("Airstrike");
				Core.Interface.Oxide.DataFileSystem.WriteObject("airstrike_data", new Dictionary<object, object>());
				Puts($"Cleared airstrike_data");
				Interface.Oxide.LoadPlugin("Airstrike");
			}
			if (AutoPurge && config.SoftWipeOptions.WipeAutoPurge)
			{
				Interface.Oxide.UnloadPlugin("AutoPurge");
				Core.Interface.Oxide.DataFileSystem.WriteObject("autopurge", new Dictionary<object, object>());
				Puts($"Cleared autopurge");
				Interface.Oxide.LoadPlugin("AutoPurge");
			}
			if (Bounty && config.SoftWipeOptions.WipeBounty)
			{
				Bounty.Call("ccmdbWipe", arg);
			}
			if (Economics && config.SoftWipeOptions.WipeEconomics)
			{
				string[] args = { "wipe" };
				ConsoleSystem.Arg econArg = arg;
				econArg.Args = args;
				Economics.Call("ccmdEco", econArg);
			}
			if (GUIShop && config.SoftWipeOptions.WipeGUIShop)
			{
				Interface.Oxide.UnloadPlugin("GUIShop");
				Core.Interface.Oxide.DataFileSystem.WriteObject("GUIShop", new Dictionary<object, object>());
				Puts($"Cleared GUIShop");
				Interface.Oxide.LoadPlugin("GUIShop");
			}
			if (HeliControl && config.SoftWipeOptions.WipeHeliControl)
			{
				Interface.Oxide.UnloadPlugin("HeliControl");
				Core.Interface.Oxide.DataFileSystem.WriteObject("HeliControlCooldowns", new Dictionary<object, object>());
				Puts($"Cleared HeliControlCooldowns");
				Interface.Oxide.LoadPlugin("HeliControl");
			}
			if (Kits && config.SoftWipeOptions.WipeKits)
			{
				Interface.Oxide.UnloadPlugin("Kits");
				Core.Interface.Oxide.DataFileSystem.WriteObject("Kits_Data", new Dictionary<object, object>());
				Puts($"Cleared Kits_Data");
				Interface.Oxide.LoadPlugin("Kits");
			}
			if (NTeleportation && config.SoftWipeOptions.WipeNTeleportation)
			{
				Interface.Oxide.UnloadPlugin("NTeleportation");
				Core.Interface.Oxide.DataFileSystem.WriteObject("NTeleportationHome", new Dictionary<object, object>());
				Puts($"Cleared NTeleportationHome");
				Interface.Oxide.LoadPlugin("NTeleportation");
			}
			if (Pets && config.SoftWipeOptions.WipePets)
			{
				Interface.Oxide.UnloadPlugin("Pets");
				Core.Interface.Oxide.DataFileSystem.WriteObject("Pets", new Dictionary<object, object>());
				Puts($"Cleared Pets");
				Interface.Oxide.LoadPlugin("Pets");
			}
			if (PlayerChallenges && config.SoftWipeOptions.WipePlayerChallenges)
			{
				PlayerChallenges.Call("ccmdPCWipe", arg);
			}
			if (Replenish && config.SoftWipeOptions.WipeReplenish)
			{
				Interface.Oxide.UnloadPlugin("Replenish");
				Core.Interface.Oxide.DataFileSystem.WriteObject("ReplenishData", new Dictionary<object, object>());
				Puts($"Cleared ReplenishData");
				Interface.Oxide.LoadPlugin("Replenish");
			}
			if (RotatingBillboards && config.SoftWipeOptions.WipeRotatingBillboards)
			{
				Interface.Oxide.UnloadPlugin("RotatingBillboards");
				Core.Interface.Oxide.DataFileSystem.WriteObject("billboard_data", new Dictionary<object, object>());
				Puts($"Cleared billboard_data");
				Interface.Oxide.LoadPlugin("RotatingBillboards");
			}
			if (SignTracker && config.SoftWipeOptions.WipeSignTracker)
			{
				Interface.Oxide.UnloadPlugin("SignTracker");
				Core.Interface.Oxide.DataFileSystem.WriteObject("SignTracker", new Dictionary<object, object>());
				Puts($"Cleared SignTracker");
				Interface.Oxide.LoadPlugin("SignTracker");
			}
			if (TargetPractice && config.SoftWipeOptions.WipeTargetPractice)
			{
				Interface.Oxide.UnloadPlugin("TargetPractice");
				Core.Interface.Oxide.DataFileSystem.WriteObject("targetpractice_scores", new Dictionary<object, object>());
				Puts($"Cleared targetpractice_scores");
				Interface.Oxide.LoadPlugin("TargetPractice");
			}
			if (ZLevelsRemastered && config.SoftWipeOptions.WipeZLevelsRemastered)
			{
				string[] args = { "**", "*", "/2" };
				ConsoleSystem.Arg econArg = arg;
				econArg.Args = args;
				ZLevelsRemastered.Call("ZlvlCommand", econArg);
			}
			#endregion

			foreach (string command in config.SoftWipeOptions.CustomConsoleCommands)
				ConsoleSystem.Run(ConsoleSystem.Option.Server, command);

			ClearData();

			wipePlayers("soft");

			wipeDeployables();
			return;
        }

		[ConsoleCommand("hardwipe")]
		void hardWipe(ConsoleSystem.Arg arg)
		{
			if (arg.Connection != null && arg.Connection.authLevel < 2)
				return;

			// Create server backup
			CreateBackup();

			#region Clear other mod data
			if (Airstrike && config.HardWipeOptions.WipeAirstrike)
			{
				Interface.Oxide.UnloadPlugin("Airstrike");
				Core.Interface.Oxide.DataFileSystem.WriteObject("airstrike_data", new Dictionary<object, object>());
				Puts($"Cleared airstrike_data");
				Interface.Oxide.LoadPlugin("Airstrike");
			}
			if (AutoPurge && config.HardWipeOptions.WipeAutoPurge)
			{
				Interface.Oxide.UnloadPlugin("AutoPurge");
				Core.Interface.Oxide.DataFileSystem.WriteObject("autopurge", new Dictionary<object, object>());
				Puts($"Cleared autopurge");
				Interface.Oxide.LoadPlugin("AutoPurge");
			}
			if (Bounty && config.HardWipeOptions.WipeBounty)
			{
				Bounty.Call("ccmdbWipe", arg);
			}
			if (Economics && config.HardWipeOptions.WipeEconomics)
			{
				string[] args = { "wipe" };
				ConsoleSystem.Arg econArg = arg;
				econArg.Args = args;
				Economics.Call("ccmdEco", econArg);
			}
			if (GUIShop && config.HardWipeOptions.WipeGUIShop)
			{
				Interface.Oxide.UnloadPlugin("GUIShop");
				Core.Interface.Oxide.DataFileSystem.WriteObject("GUIShop", new Dictionary<object, object>());
				Puts($"Cleared GUIShop");
				Interface.Oxide.LoadPlugin("GUIShop");
			}
			if (HeliControl && config.HardWipeOptions.WipeHeliControl)
			{
				Interface.Oxide.UnloadPlugin("HeliControl");
				Core.Interface.Oxide.DataFileSystem.WriteObject("HeliControlCooldowns", new Dictionary<object, object>());
				Puts($"Cleared HeliControlCooldowns");
				Interface.Oxide.LoadPlugin("HeliControl");
			}
			if (Kits && config.HardWipeOptions.WipeKits)
			{
				Interface.Oxide.UnloadPlugin("Kits");
				Core.Interface.Oxide.DataFileSystem.WriteObject("Kits_Data", new Dictionary<object, object>());
				Puts($"Cleared Kits_Data");
				Interface.Oxide.LoadPlugin("Kits");
			}
			if (NTeleportation && config.HardWipeOptions.WipeNTeleportation)
			{
				Interface.Oxide.UnloadPlugin("NTeleportation");
				Core.Interface.Oxide.DataFileSystem.WriteObject("NTeleportationHome", new Dictionary<object, object>());
				Puts($"Cleared NTeleportationHome");
				Interface.Oxide.LoadPlugin("NTeleportation");
			}
			if (Pets && config.HardWipeOptions.WipePets)
			{
				Interface.Oxide.UnloadPlugin("Pets");
				Core.Interface.Oxide.DataFileSystem.WriteObject("Pets", new Dictionary<object, object>());
				Puts($"Cleared Pets");
				Interface.Oxide.LoadPlugin("Pets");
			}
			if (PlayerChallenges && config.HardWipeOptions.WipePlayerChallenges)
			{
				PlayerChallenges.Call("ccmdPCWipe", arg);
			}
			if (Replenish && config.HardWipeOptions.WipeReplenish)
			{
				Interface.Oxide.UnloadPlugin("Replenish");
				Core.Interface.Oxide.DataFileSystem.WriteObject("ReplenishData", new Dictionary<object, object>());
				Puts($"Cleared ReplenishData");
				Interface.Oxide.LoadPlugin("Replenish");
			}
			if (RotatingBillboards && config.HardWipeOptions.WipeRotatingBillboards)
			{
				Interface.Oxide.UnloadPlugin("RotatingBillboards");
				Core.Interface.Oxide.DataFileSystem.WriteObject("billboard_data", new Dictionary<object, object>());
				Puts($"Cleared billboard_data");
				Interface.Oxide.LoadPlugin("RotatingBillboards");
			}
			if (SignTracker && config.HardWipeOptions.WipeSignTracker)
			{
				Interface.Oxide.UnloadPlugin("SignTracker");
				Core.Interface.Oxide.DataFileSystem.WriteObject("SignTracker", new Dictionary<object, object>());
				Puts($"Cleared SignTracker");
				Interface.Oxide.LoadPlugin("SignTracker");
			}
			if (TargetPractice && config.HardWipeOptions.WipeTargetPractice)
			{
				Interface.Oxide.UnloadPlugin("TargetPractice");
				Core.Interface.Oxide.DataFileSystem.WriteObject("targetpractice_scores", new Dictionary<object, object>());
				Puts($"Cleared targetpractice_scores");
				Interface.Oxide.LoadPlugin("TargetPractice");
			}
			if (ZLevelsRemastered && config.HardWipeOptions.WipeZLevelsRemastered)
			{
				string[] args = { "**", "*", "/2" };
				ConsoleSystem.Arg econArg = arg;
				econArg.Args = args;
				ZLevelsRemastered.Call("ZlvlCommand", econArg);
			}
			#endregion

			foreach (string command in config.HardWipeOptions.CustomConsoleCommands)
				ConsoleSystem.Run(ConsoleSystem.Option.Server, command);

			ClearData();

			wipePlayers("hard");

			wipeDeployables();
			return;
		}

		[ConsoleCommand("entitycount")]
		void entityCount(ConsoleSystem.Arg args)
		{
			int entityCount = 0;
			int ownerCount = 0;
			List<ulong> ownerIDs = new List<ulong>();
			if (args.Connection != null && args.Connection.authLevel < 2)
				return;

			Puts($"Owner List:");
			Puts($"--------------------------------------------");
			foreach (var entity in BaseNetworkable.serverEntities.ToList())
			{
				if (!ownerIDs.Contains((entity as BaseEntity).OwnerID))
				{
					ownerIDs.Add((entity as BaseEntity).OwnerID);
					ownerCount++;
					Puts($"" + ownerCount.ToString() + ": " + (entity as BaseEntity).OwnerID.ToString());
				}
				entityCount++;
			}

			Puts($"--------------------------------------------");
			Puts($"Entity count: " + entityCount.ToString());
			return;
		}
		#endregion
	}
}

// --- End of file: WipeAssistant.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/where-is-my-horse ---
// --- Original File Path: W/WhereIsMyHorse/WhereIsMyHorse.cs ---

using System;
using System.Collections.Generic;
using System.Linq;

using Newtonsoft.Json;

using Oxide.Core;
using Oxide.Core.Libraries.Covalence;

using UnityEngine;

//using Layer = Rust.Layer;
using Pool = Facepunch.Pool;
using Time = UnityEngine.Time;

/*  API:
 *  OnHorseSpawned(byPlayer, forPlayer, horse);
 */

namespace Oxide.Plugins
{
    [Info("Where is My Horse", "2CHEVSKII", "1.0.1")]
    [Description("Here is your horse, sir!")]
    class WhereIsMyHorse : CovalencePlugin
    {
        #region Fields

        const string PERMISSION_USE    = "whereismyhorse.use";
        const string PERMISSION_USE_ON = "whereismyhorse.useon";
        const int    DEFAULT_COOLDOWN  = 300;
        const string HORSE_PREFAB      = "assets/content/vehicles/horse/ridablehorse2.prefab";

        const string M_CHAT_PREFIX        = "Prefix",
                     M_NO_PERMISSION      = "No permission",
                     M_CANT_SPAWN_INDOORS = "Can't spawn indoors",
                     M_SPAWNED            = "Spawned",
                     M_COOLDOWN           = "Cooldown",
                     M_NO_ESCAPE          = "NoEscape",
                     M_NRE                = "NRE",
                     M_HORSE_NEARBY       = "Horse nearby",
                     M_PLAYER_NOT_FOUND   = "Player not found",
                     M_HORSE_SPAWNED      = "Horse spawned (on player)",
                     M_NO_POINT_FOR_SPAWN = "No point for spawn";

        const float /*RAYCAST_DISTANCE   = 20f,*/
                    HORSE_NEARBY_RANGE = 5f;

        //readonly int layerMask = LayerMask.GetMask(
        //    nameof(Layer.Terrain),
        //    nameof(Layer.Construction),
        //    nameof(Layer.World),
        //    nameof(Layer.Clutter)
        //);

        //readonly int layerMaskConstruction = LayerMask.GetMask(nameof(Layer.Construction));

        readonly Dictionary<string, float> lastUsed = new Dictionary<string, float>();

        PluginSettings settings;

        #endregion

        #region Oxide hooks

        void Init()
        {
            permission.RegisterPermission(PERMISSION_USE, this);
            permission.RegisterPermission(PERMISSION_USE_ON, this);

            foreach (var perm in settings.CooldownGroups.Keys)
            {
                permission.RegisterPermission(ConstructPermission(perm), this);
            }

            AddCovalenceCommand("horse", nameof(CommandHandler));

            if (!settings.PreventLooting)
            {
                Unsubscribe(nameof(CanLootEntity));
            }
        }

        object CanLootEntity(BasePlayer player, RidableHorse2 horse)
        {
            if (!horse.tag.Contains("wmhorse") || horse.OwnerID == player.userID)
            {
                return null;
            }

            return true;
        }

        #endregion

        #region Core

        bool FindSpawnPoint(BasePlayer targetPlayer, out Vector3 spawnPoint, float spawnDistance = 3f) // move horse on top of the construction block if present
        {
            var refPos = targetPlayer.ServerPosition;
            var refRot = targetPlayer.eyes.rotation;

            var mod = 1;
            for (var i = 0; i <= 90; i++)
            {
                var rotation = refRot * Quaternion.Inverse(Quaternion.AngleAxis(i * mod, Vector3.up));
                var direction = rotation * Vector3.forward * spawnDistance;
                var pos = refPos + direction;

                float height = TerrainMeta.HeightMap.GetHeight(pos);

                var list = Pool.Get<List<BuildingBlock>>();
                Vis.Entities(pos, 1f, list);

                if (list.Count != 0)
                {
                    var bb = list[0];
                    height = bb.transform.position.y;
                }

                Pool.FreeUnmanaged<BuildingBlock>(ref list);

                if (height > 0 && Math.Abs(height - refPos.y) <= 5f)
                {
                    pos.y = height;
                    spawnPoint = pos;
                    return true;
                }

                if (i == 90)
                {
                    if (mod == -1)
                    {
                        break;
                    }

                    i = mod = -1;
                }
            }
            spawnPoint = default(Vector3);
            return false;
        }

        string ConstructPermission(string perm)
        {
            return "whereismyhorse." + perm;
        }

        bool CheckPermission(IPlayer player, string perm, bool allowServer = false)
        {
            if (player.IsServer && allowServer || !player.IsServer && player.HasPermission(perm))
            {
                return true;
            }
            Message(player, M_NO_PERMISSION);
            return false;
        }

        int GetSmallestCooldown(IPlayer player)
        {
            var perms = settings.CooldownGroups.Keys.Where(p => player.HasPermission(ConstructPermission(p))).ToArray();

            if (perms.Length == 0)
            {
                return DEFAULT_COOLDOWN;
            }

            var min = perms.Select(p => settings.CooldownGroups[p]).Min();

            return min;
        }

        bool CheckCooldown(IPlayer player)
        {
            if (!lastUsed.ContainsKey(player.Id))
            {
                return true;
            }

            var cd = GetSmallestCooldown(player);
            var timeSince = Time.realtimeSinceStartup - lastUsed[player.Id];

            if (timeSince > cd)
            {
                return true;
            }

            Message(player, M_COOLDOWN, (int)(cd - timeSince));

            return false;
        }

        bool CheckNoEscape(IPlayer player)
        {
            if (!settings.UseNoEscape)
            {
                return true;
            }

            var callResult = Interface.CallHook("IsEscapeBlocked", player.Id);
            if (callResult == null || callResult is bool && (bool)callResult == false)
            {
                return true;
            }

            Message(player, M_NO_ESCAPE);
            return false;
        }

        bool CheckOutside(BasePlayer player)
        {
            if (settings.AllowInside || player.IsOutside())
            {
                return true;
            }

            Message(player.IPlayer, M_CANT_SPAWN_INDOORS);
            return false;
        }

        void CommandHandler(IPlayer player, string _, string[] args)
        {
            if (args.Length == 0)
            {
                if (!CheckPermission(player, PERMISSION_USE))
                {
                    return;
                }

                if (!CheckCooldown(player))
                {
                    return;
                }

                if (!CheckNoEscape(player))
                {
                    return;
                }

                var basePlayer = (BasePlayer)player.Object;

                if (!CheckOutside(basePlayer))
                {
                    return;
                }

                if (IsHorseNearby(basePlayer.transform.position))
                {
                    Message(player, M_HORSE_NEARBY);
                    return;
                }

                Vector3 position;
                if (!FindSpawnPoint(basePlayer, out position))
                {
                    Message(player, M_NO_POINT_FOR_SPAWN);
                    return;
                }

                var rotation = GetHorseRotation(basePlayer.eyes.rotation);

                //basePlayer.SendConsoleCommand("ddraw.text",);
                var horse = SpawnHorse(position, rotation, basePlayer.OwnerID);
                lastUsed[player.Id] = Time.realtimeSinceStartup;
                Message(player, M_SPAWNED);

                Interface.CallHook("OnHorseSpawned", player, player, horse);
            }
            else
            {
                if (!CheckPermission(player, PERMISSION_USE_ON, true))
                {
                    return;
                }

                var targetId = args[0];
                var targetPlayer = players.FindPlayer(targetId);

                if (targetPlayer == null || !targetPlayer.IsConnected || targetPlayer.IsSleeping || targetPlayer.Health <= 0)
                {
                    Message(player, M_PLAYER_NOT_FOUND, targetId);
                }
                else
                {
                    Vector3 position;
                    var basePlayer = (BasePlayer)targetPlayer.Object;

                    if (!FindSpawnPoint(basePlayer, out position))
                    {
                        Message(player, M_NO_POINT_FOR_SPAWN);
                        return;
                    }

                    var rotation = GetHorseRotation(basePlayer.eyes.rotation);

                    var horse = SpawnHorse(position, rotation, basePlayer.OwnerID);
                    Message(player, M_HORSE_SPAWNED, targetPlayer.Name);
                    Message(targetPlayer, M_SPAWNED);

                    Interface.CallHook(
                        "OnHorseSpawned",
                        player,
                        targetPlayer,
                        horse
                    );
                }
            }
        }

        bool IsHorseNearby(Vector3 position)
        {
            var list = Pool.Get<List<RidableHorse2>>();
            var b = false;

            Vis.Entities(position, HORSE_NEARBY_RANGE, list);

            if (list.Count > 0)
            {
                b = true;
            }

            Pool.FreeUnmanaged(ref list);
            return b;
        }

        Quaternion GetHorseRotation(Quaternion playerRotation)
        {
            return playerRotation * Quaternion.Inverse(Quaternion.AngleAxis(90, Vector3.up));
        }

        RidableHorse2 SpawnHorse(Vector3 position, Quaternion rotation, ulong ownerid)
        {
            var horse = (RidableHorse2)GameManager.server.CreateEntity(HORSE_PREFAB, position, rotation);
            horse.Spawn();

            horse.tag += "wmhorse";
            horse.OwnerID = ownerid;

            return horse;
        }

        #endregion

        #region Configuration

        protected override void LoadDefaultConfig()
        {
            Log("Loading default configuration...");
            settings = PluginSettings.Default;
            SaveConfig();
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();

            try
            {
                settings = Config.ReadObject<PluginSettings>();

                if (settings == null || settings.CooldownGroups == null)
                {
                    throw new Exception("Configuration load error");
                }
            }
            catch (Exception e)
            {
                LogError(e.Message);
                LoadDefaultConfig();
            }
        }

        protected override void SaveConfig()
        {
            Config.WriteObject(settings);
        }

        #endregion

        #region LangAPI

        void Message(IPlayer player, string langKey, params object[] args)
        {
            player.Message(lang.GetMessage(langKey, this, player.Id), lang.GetMessage("Prefix", this, player.Id), args);
        }

        protected override void LoadDefaultMessages() => lang.RegisterMessages(new Dictionary<string, string> {
            { M_NO_PERMISSION, "You have no access to that command." },
            { M_NO_POINT_FOR_SPAWN, "Cannot spawn horse at the current position." },
            { M_CANT_SPAWN_INDOORS, "You can use that command only when outside!" },
            { M_SPAWNED, "Your horse has been spawned, sir! Don't forget to feed it!" },
            { M_COOLDOWN, "You have called you horse recently, wait a bit, please. ({0} seconds left)" },
            { M_CHAT_PREFIX, "[WHERE IS MY HORSE]" },
            { M_NO_ESCAPE, "Can't use command while escape blocked!" },
            { M_NRE, "Could not spawn a horse, it's null. Maybe next time?" },
            { M_HORSE_NEARBY, "There is a horse very close, consider using it instead." },
            { M_PLAYER_NOT_FOUND, "Player {0} was not found." },
            { M_HORSE_SPAWNED, "Horse was spawned for player {0}" }
        }, this, "en");

        #endregion

        #region Nested types

        class PluginSettings
        {
            public static PluginSettings Default =>
                new PluginSettings {
                    CooldownGroups = new Dictionary<string, int> {
                        ["nocooldown"] = 0,
                        ["vip"] = 30
                    },
                    AllowInside = false,
                    UseNoEscape = true
                };

            [JsonProperty("Cooldowns")]
            public Dictionary<string, int> CooldownGroups { get; set; }
            [JsonProperty("Allow usage inside building")]
            public bool AllowInside { get; set; }
            [JsonProperty("Use NoEscape")]
            public bool UseNoEscape { get; set; }
            [JsonProperty("Prevent looting for non-owner")]
            public bool PreventLooting { get; set; }
        }

        #endregion
    }
}

// --- End of file: WhereIsMyHorse.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/water-catcher-boost ---
// --- Original File Path: W/WaterCatcherBoost/WaterCatcherBoost.cs ---

using System;
using System.Collections.Generic;
using Oxide.Core;
using Newtonsoft.Json;

namespace Oxide.Plugins
{
    [Info("Water Catcher Boost", "Substrata", "1.0.3")]
    [Description("Boosts the collection rate of water catchers & pumps")]

    class WaterCatcherBoost : RustPlugin
    {
        System.Random random = new System.Random();
        ItemDefinition freshWater = ItemManager.FindItemDefinition(-1779180711);

        void OnWaterCollect(WaterCatcher waterCatcher)
        {
            if (waterCatcher == null || freshWater == null || waterCatcher.IsFull()) return;

            int amount = 0;
            if (waterCatcher.ShortPrefabName.Contains("water_catcher_small"))
                amount = GetAmount(configData.smallWaterCatchers.minBoost, configData.smallWaterCatchers.maxBoost);
            else if (waterCatcher.ShortPrefabName == "water_catcher_large")
                amount = GetAmount(configData.largeWaterCatchers.minBoost, configData.largeWaterCatchers.maxBoost);

            if (amount > 0)
                waterCatcher.inventory.AddItem(freshWater, amount);
        }

        void OnWaterCollect(WaterPump waterPump, ItemDefinition water)
        {
            if (waterPump == null || water == null || waterPump.IsFull()) return;

            int amount = GetAmount(configData.waterPumps.minBoost, configData.waterPumps.maxBoost);

            if (amount > 0)
                waterPump.inventory.AddItem(water, amount);
        }

        int GetAmount(int min, int max)
        {
            if (min < 0) min = 0;
            if (max < 0) max = 0;
            if (min >= max) return max;
            return random.Next(min, max + 1);
        }

        #region Configuration
        private ConfigData configData;

        private class ConfigData
        {
            [JsonProperty(PropertyName = "Small Water Catchers")]
            public SmallWaterCatchers smallWaterCatchers { get; set; }
            [JsonProperty(PropertyName = "Large Water Catchers")]
            public LargeWaterCatchers largeWaterCatchers { get; set; }
            [JsonProperty(PropertyName = "Water Pumps")]
            public WaterPumps waterPumps { get; set; }

            public class SmallWaterCatchers
            {
                [JsonProperty(PropertyName = "Minimum Boost")]
                public int minBoost { get; set; }
                [JsonProperty(PropertyName = "Maximum Boost")]
                public int maxBoost { get; set; }
            }

            public class LargeWaterCatchers
            {
                [JsonProperty(PropertyName = "Minimum Boost")]
                public int minBoost { get; set; }
                [JsonProperty(PropertyName = "Maximum Boost")]
                public int maxBoost { get; set; }
            }

            public class WaterPumps
            {
                [JsonProperty(PropertyName = "Minimum Boost")]
                public int minBoost { get; set; }
                [JsonProperty(PropertyName = "Maximum Boost")]
                public int maxBoost { get; set; }
            }

            [JsonProperty(PropertyName = "Version (Do not modify)")]
            public Oxide.Core.VersionNumber Version { get; set; }
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                configData = Config.ReadObject<ConfigData>();
                if (configData == null) throw new Exception();

                if (configData.Version < Version)
                    UpdateConfigValues();

                SaveConfig();
            }
            catch
            {
                PrintError("Your configuration file contains an error. Using default configuration values.");
                LoadDefaultConfig();
            }
        }

        private ConfigData GetBaseConfig()
        {
            return new ConfigData
            {
                smallWaterCatchers = new ConfigData.SmallWaterCatchers
                {
                    minBoost = 0,
                    maxBoost = 20
                },
                largeWaterCatchers = new ConfigData.LargeWaterCatchers
                {
                    minBoost = 0,
                    maxBoost = 60
                },
                waterPumps = new ConfigData.WaterPumps
                {
                    minBoost = 0,
                    maxBoost = 85
                },
                Version = Version
            };
        }

        private void UpdateConfigValues()
        {
            PrintWarning("Config update detected! Updating config values...");
            ConfigData baseConfig = GetBaseConfig();
            if (configData.Version < new Core.VersionNumber(1, 0, 3))
            {
                configData = baseConfig;
                configData.smallWaterCatchers.minBoost = Convert.ToInt32(GetConfig("Small Water Catchers", "Minimum Boost (per minute)", 0));
                configData.smallWaterCatchers.maxBoost = Convert.ToInt32(GetConfig("Small Water Catchers", "Maximum Boost (per minute)", 20));
                configData.largeWaterCatchers.minBoost = Convert.ToInt32(GetConfig("Large Water Catchers", "Minimum Boost (per minute)", 0));
                configData.largeWaterCatchers.maxBoost = Convert.ToInt32(GetConfig("Large Water Catchers", "Maximum Boost (per minute)", 60));
                int waterPumpMin = Convert.ToInt32(GetConfig("Water Pumps", "Minimum Boost (per minute)", 0));
                int waterPumpMax = Convert.ToInt32(GetConfig("Water Pumps", "Maximum Boost (per minute)", 85));
                configData.waterPumps.minBoost = waterPumpMin > 0 ? (int)Math.Round((double)waterPumpMin / 6) : waterPumpMin;
                configData.waterPumps.maxBoost = waterPumpMax > 0 ? (int)Math.Round((double)waterPumpMax / 6) : waterPumpMax;
            }
            configData.Version = Version;
            PrintWarning("Config update completed!");
        }

        private object GetConfig(string menu, string dataValue, object defaultValue)
        {
            var data = Config[menu] as Dictionary<string, object>;
            if (data == null)
            {
                data = new Dictionary<string, object>();
                Config[menu] = data;
            }
            object value;
            if (!data.TryGetValue(dataValue, out value))
            {
                value = defaultValue;
                data[dataValue] = value;
            }
            return value;
        }

        protected override void LoadDefaultConfig() => configData = GetBaseConfig();
        protected override void SaveConfig() => Config.WriteObject(configData, true);
        #endregion
    }
}


// --- End of file: WaterCatcherBoost.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/water-works ---
// --- Original File Path: W/WaterWorks/WaterWorks.cs ---

﻿using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Core.Libraries.Covalence;
using System;
using System.Collections.Generic;

namespace Oxide.Plugins
{
    [Info("Water Works", "nivex", "1.1.0")]
    [Description("Control the monopoly on your water supplies.")]
    class WaterWorks : RustPlugin
    {
        private readonly List<string> _itemShortnames = new()
        {
            "bucket.water",
            "waterjug",
            "pistol.water",
            "gun.water",
            "smallwaterbottle",
            "botabag"  // Новый предмет
        };

        private readonly Dictionary<string, ItemConfig> _itemConfigs = new();

        private readonly Dictionary<string, EntityConfig> _entityConfigs = new();

        private void Init()
        {
            Unsubscribe(nameof(OnEntitySpawned));
            AddCovalenceCommand("wwstats", nameof(CommandStats));
        }

        private void OnServerInitialized()
        {
            foreach (var shortname in _itemShortnames)
            {
                ItemDefinition def = ItemManager.FindItemDefinition(shortname);
                if (def != null && def.TryGetComponent<ItemModContainer>(out var container))
                {
                    var itemConfig = new ItemConfig
                    {
                        Shortname = shortname,
                        ItemId = def.itemid,
                        DefaultMaxStackSize = container.maxStackSize,
                        ConfigMaxStackSize = GetConfigValue(shortname)
                    };

                    _itemConfigs[shortname] = itemConfig;

                    if (itemConfig.ConfigMaxStackSize > 0)
                    {
                        container.maxStackSize = itemConfig.ConfigMaxStackSize;
                    }
                }
            }

            InitializeEntityConfigs();
            SetLiquidContainerStackSize(true);
            ConfigureWaterDefinitions(true);
            Subscribe(nameof(OnEntitySpawned));

            if (WaterTypes.WaterItemDef.stackable < int.MaxValue)
            {
                WaterTypes.WaterItemDef.stackable = int.MaxValue;
            }
        }

        private void InitializeEntityConfigs()
        {
            _entityConfigs["waterbarrel"] = new EntityConfig
            {
                ShortPrefabName = "waterbarrel",
                DefaultMaxStackSize = 20000, // Vanilla value
                ConfigMaxStackSize = config.WaterBarrel
            };

            _entityConfigs["water_catcher_small"] = new EntityConfig
            {
                ShortPrefabName = "water_catcher_small",
                DefaultMaxStackSize = 10000, // Vanilla value
                ConfigMaxStackSize = config.SmallWaterCatcher.StackSize,
                MaxItemToCreate = config.SmallWaterCatcher.MaxItemToCreate,
                Interval = config.SmallWaterCatcher.Interval,
            };

            _entityConfigs["water_catcher_large"] = new EntityConfig
            {
                ShortPrefabName = "water_catcher_large",
                DefaultMaxStackSize = 50000, // Vanilla value
                ConfigMaxStackSize = config.LargeWaterCatcher.StackSize,
                MaxItemToCreate = config.LargeWaterCatcher.MaxItemToCreate,
                Interval = config.LargeWaterCatcher.Interval,
            };

            _entityConfigs["poweredwaterpurifier.deployed"] = new EntityConfig
            {
                ShortPrefabName = "poweredwaterpurifier.deployed",
                DefaultMaxStackSize = 5000, // Vanilla value
                ConfigMaxStackSize = config.PoweredWaterPurifier
            };

            _entityConfigs["waterpurifier.deployed"] = new EntityConfig
            {
                ShortPrefabName = "waterpurifier.deployed",
                DefaultMaxStackSize = 5000, // Vanilla value
                ConfigMaxStackSize = config.WaterPurifier
            };

            _entityConfigs["water.pump.deployed"] = new EntityConfig
            {
                ShortPrefabName = "water.pump.deployed",
                DefaultMaxStackSize = 2000, // Vanilla value
                ConfigMaxStackSize = config.WaterPump.StackSize,
                PumpInterval = config.WaterPump.Interval,
                AmountPerPump = config.WaterPump.Amount
            };

            _entityConfigs["paddlingpool.deployed"] = new EntityConfig
            {
                ShortPrefabName = "paddlingpool.deployed",
                DefaultMaxStackSize = 500, // Vanilla value
                ConfigMaxStackSize = config.GroundPool
            };

            _entityConfigs["abovegroundpool.deployed"] = new EntityConfig
            {
                ShortPrefabName = "abovegroundpool.deployed",
                DefaultMaxStackSize = 2000, // Vanilla value
                ConfigMaxStackSize = config.BigGroundPool
            };
        }

        private void Unload()
        {
            if (config.Reset && !Interface.Oxide.IsShuttingDown)
            {
                SetLiquidContainerStackSize(false);
                ConfigureWaterDefinitions(false);
            }
        }

        private void OnEntitySpawned(LiquidContainer lc)
        {
            SetLiquidContainerStackSize(lc, true);
        }

        private void CommandStats(IPlayer user, string command, string[] args)
        {
            if (!user.IsAdmin) return;

            Puts("=== Item Configurations ===");
            foreach (var itemConfig in _itemConfigs.Values)
            {
                Puts("Item: {0}, ItemID: {1}, Current MaxStackSize: {2}, Default MaxStackSize: {3}",
                    itemConfig.Shortname,
                    itemConfig.ItemId,
                    itemConfig.ConfigMaxStackSize > 0 ? itemConfig.ConfigMaxStackSize : itemConfig.DefaultMaxStackSize,
                    itemConfig.DefaultMaxStackSize);
            }

            Puts("=== Entity Configurations ===");
            foreach (var entityConfig in _entityConfigs.Values)
            {
                Puts("Entity: {0}, Current MaxStackSize: {1}, Default MaxStackSize: {2}",
                    entityConfig.ShortPrefabName,
                    entityConfig.ConfigMaxStackSize > 0 ? entityConfig.ConfigMaxStackSize : entityConfig.DefaultMaxStackSize,
                    entityConfig.DefaultMaxStackSize);

                if (entityConfig.ShortPrefabName.Contains("water_catcher"))
                {
                    Puts("  MaxItemToCreate: {0}, Interval: {1}", entityConfig.MaxItemToCreate, entityConfig.Interval);
                }
                if (entityConfig.ShortPrefabName == "water.pump.deployed")
                {
                    Puts("  PumpInterval: {0}, AmountPerPump: {1}", entityConfig.PumpInterval, entityConfig.AmountPerPump);
                }
            }
        }

        private void SetLiquidContainerStackSize(bool state)
        {
            foreach (BaseNetworkable networkable in BaseNetworkable.serverEntities)
            {
                if (networkable is LiquidContainer lc)
                {
                    SetLiquidContainerStackSize(lc, state);
                }
            }
        }

        private void SetLiquidContainerStackSize(LiquidContainer lc, bool state)
        {
            if (lc == null || lc.IsDestroyed)
            {
                return;
            }

            if (!_entityConfigs.TryGetValue(lc.ShortPrefabName, out var entityConfig))
            {
                return;
            }

            switch (lc.ShortPrefabName)
            {
                case "waterbarrel":
                    UpdateWaterBarrel(lc, state, entityConfig);
                    break;

                case "water_catcher_small":
                case "water_catcher_large":
                    UpdateWaterCatcher(lc as WaterCatcher, state, entityConfig);
                    break;

                case "poweredwaterpurifier.deployed":
                    UpdatePoweredWaterPurifier(lc, state, entityConfig);
                    break;

                case "waterpurifier.deployed":
                    UpdateWaterPurifier(lc as WaterPurifier, state, entityConfig);
                    break;

                case "water.pump.deployed":
                    UpdateWaterPump(lc as WaterPump, state, entityConfig);
                    break;

                case "paddlingpool.deployed":
                    UpdateGroundPool(lc, state, entityConfig);
                    break;

                case "abovegroundpool.deployed":
                    UpdateBigGroundPool(lc, state, entityConfig);
                    break;

                default:
                    break;
            }
        }

        private void SetSlotAmounts(LiquidContainer lc, int num)
        {
            if (num > 0)
            {
                Item slot = lc.inventory.GetSlot(0);

                if (slot != null && slot.amount > num)
                {
                    slot.amount = num;
                }
            }
        }

        private static void SetMaxStackSize(LiquidContainer lc, int num)
        {
            lc.maxStackSize = num;
            lc.inventory.maxStackSize = num;
            lc.inventory.MarkDirty();
            // lc.MarkDirtyForceUpdateOutputs();
            lc.SendNetworkUpdateImmediate();
        }

        private void ConfigureWaterDefinitions(bool state)
        {
            foreach (var itemConfig in _itemConfigs.Values)
            {
                ItemDefinition def = ItemManager.FindItemDefinition(itemConfig.Shortname);
                if (def != null && def.TryGetComponent<ItemModContainer>(out var container))
                {
                    if (state && itemConfig.ConfigMaxStackSize > 0)
                    {
                        container.maxStackSize = itemConfig.ConfigMaxStackSize;
                    }
                    else if (!state && itemConfig.DefaultMaxStackSize > 0)
                    {
                        container.maxStackSize = itemConfig.DefaultMaxStackSize;
                    }
                }
            }
        }

        private void UpdateWaterBarrel(LiquidContainer lc, bool state, EntityConfig entityConfig)
        {
            if (entityConfig.ConfigMaxStackSize > 0)
            {
                int num = state ? entityConfig.ConfigMaxStackSize : entityConfig.DefaultMaxStackSize;

                if (num > 0)
                {
                    SetMaxStackSize(lc, num);

                    SetSlotAmounts(lc, num);
                }
            }
        }

        private void UpdateWaterCatcher(WaterCatcher wc, bool state, EntityConfig entityConfig)
        {
            if (wc == null) return;

            if (state)
            {
                if (entityConfig.ConfigMaxStackSize > 0)
                {
                    wc.maxStackSize = wc.inventory.maxStackSize = entityConfig.ConfigMaxStackSize;
                }
                if (entityConfig.MaxItemToCreate > 0)
                {
                    wc.maxItemToCreate = entityConfig.MaxItemToCreate;
                }

                SetSlotAmounts(wc, wc.maxStackSize);

                if (entityConfig.Interval > 0)
                {
                    wc.Invoke(() =>
                    {
                        if (wc.IsDestroyed) return;
                        wc.CancelInvoke(wc.CollectWater);
                        wc.InvokeRepeating(wc.CollectWater, entityConfig.Interval, entityConfig.Interval);
                    }, 0.1f);
                }
            }
            else
            {
                if (entityConfig.ConfigMaxStackSize > 0 && entityConfig.DefaultMaxStackSize > 0)
                {
                    wc.maxStackSize = wc.inventory.maxStackSize = entityConfig.DefaultMaxStackSize;
                }
                if (entityConfig.MaxItemToCreate > 0 && entityConfig.DefaultMaxItemToCreate > 0)
                {
                    wc.maxItemToCreate = entityConfig.DefaultMaxItemToCreate;
                }

                SetSlotAmounts(wc, wc.maxStackSize);

                if (entityConfig.Interval > 0)
                {
                    wc.Invoke(() =>
                    {
                        if (wc.IsDestroyed) return;
                        wc.CancelInvoke(wc.CollectWater);
                        wc.InvokeRandomized(wc.CollectWater, WaterCatcher.collectInterval, WaterCatcher.collectInterval, 6f);
                    }, 0.1f);
                }
            }
        }

        private void UpdatePoweredWaterPurifier(LiquidContainer lc, bool state, EntityConfig entityConfig)
        {
            if (entityConfig.ConfigMaxStackSize > 0)
            {
                int num = state ? entityConfig.ConfigMaxStackSize : entityConfig.DefaultMaxStackSize;

                if (num > 0)
                {
                    SetMaxStackSize(lc, num);

                    SetSlotAmounts(lc, num);
                }
            }
        }

        private void UpdateWaterPurifier(WaterPurifier purifier, bool state, EntityConfig entityConfig)
        {
            if (purifier == null) return;

            if (state && entityConfig.ConfigMaxStackSize > 0)
            {
                purifier.stopWhenOutputFull = true;
                purifier.waterStorage.maxStackSize = entityConfig.ConfigMaxStackSize;
                purifier.waterStorage.MarkDirtyForceUpdateOutputs();

                SetMaxStackSize(purifier, entityConfig.ConfigMaxStackSize);
            }
            else if (!state && entityConfig.DefaultMaxStackSize > 0)
            {
                purifier.waterStorage.maxStackSize = entityConfig.DefaultMaxStackSize;
                purifier.waterStorage.MarkDirtyForceUpdateOutputs();

                SetMaxStackSize(purifier, entityConfig.DefaultMaxStackSize);
            }
        }

        private void UpdateWaterPump(WaterPump pump, bool state, EntityConfig entityConfig)
        {
            if (pump == null) return;

            if (state && entityConfig.ConfigMaxStackSize > 0)
            {
                if (entityConfig.PumpInterval > 0)
                {
                    pump.PumpInterval = entityConfig.PumpInterval;
                }

                if (entityConfig.AmountPerPump > 0)
                {
                    pump.AmountPerPump = entityConfig.AmountPerPump;
                }

                if (entityConfig.ConfigMaxStackSize > 0)
                {
                    SetMaxStackSize(pump, entityConfig.ConfigMaxStackSize);

                    SetSlotAmounts(pump, entityConfig.ConfigMaxStackSize);
                }

                //Puts("Modified water pump ({0} maxStackSize, {1} interval, {2} amount per pump)", pump.maxStackSize, pump.PumpInterval, pump.AmountPerPump);

                if (!pump.IsPowered())
                {
                    pump.CancelInvoke(pump.CreateWater);
                    return;
                }

                pump.CancelInvoke(pump.CreateWater);
                pump.InvokeRandomized(pump.CreateWater, pump.PumpInterval, pump.PumpInterval, pump.PumpInterval * 0.1f);
            }
            else if (!state)
            {
                if (entityConfig.DefaultPumpInterval > 0)
                {
                    pump.PumpInterval = entityConfig.DefaultPumpInterval;
                }

                if (entityConfig.DefaultAmountPerPump > 0)
                {
                    pump.AmountPerPump = entityConfig.DefaultAmountPerPump;
                }

                if (entityConfig.DefaultMaxStackSize > 0)
                {
                    SetMaxStackSize(pump, entityConfig.DefaultMaxStackSize);

                    SetSlotAmounts(pump, entityConfig.DefaultMaxStackSize);
                }

                //Puts("Reverted water pump ({0} maxStackSize, {1} interval, {2} amount per pump)", pump.maxStackSize, pump.PumpInterval, pump.AmountPerPump);

                if (pump.IsPowered())
                {
                    pump.CancelInvoke(pump.CreateWater);
                    pump.InvokeRandomized(pump.CreateWater, pump.PumpInterval, pump.PumpInterval, pump.PumpInterval * 0.1f);
                }
            }
        }

        private void UpdateGroundPool(LiquidContainer lc, bool state, EntityConfig entityConfig)
        {
            if (entityConfig.ConfigMaxStackSize > 0)
            {
                int num = state ? entityConfig.ConfigMaxStackSize : entityConfig.DefaultMaxStackSize;

                if (num > 0)
                {
                    SetMaxStackSize(lc, num);

                    SetSlotAmounts(lc, num);
                }
            }
        }

        private void UpdateBigGroundPool(LiquidContainer lc, bool state, EntityConfig entityConfig)
        {
            if (entityConfig.ConfigMaxStackSize > 0)
            {
                int num = state ? entityConfig.ConfigMaxStackSize : entityConfig.DefaultMaxStackSize;

                if (num > 0)
                {
                    SetMaxStackSize(lc, num);

                    SetSlotAmounts(lc, num);
                }
            }
        }

        #region Configuration

        private Configuration config;

        private int GetConfigValue(string shortname) => shortname switch
        {
            "bucket.water" => config.WaterBucket,
            "waterjug" => config.WaterJug,
            "pistol.water" => config.WaterPistol,
            "gun.water" => config.WaterGun,
            "smallwaterbottle" => config.SmallWaterBottle,
            "botabag" => config.BotaBag,
            _ => 0
        };

        private class SmallWaterCatcherSettings
        {
            [JsonProperty(PropertyName = "Stack Size (vanilla: 10000)")]
            public int StackSize { get; set; } = 50000;

            [JsonProperty(PropertyName = "Add Amount Of Water (vanilla: 10)")]
            public float MaxItemToCreate { get; set; } = 20f;

            [JsonProperty(PropertyName = "Add Water Every X Seconds (vanilla: 60)")]
            public float Interval { get; set; } = 30f;
        }

        private class LargeWaterCatcherSettings
        {
            [JsonProperty(PropertyName = "Stack Size (vanilla: 50000)")]
            public int StackSize { get; set; } = 250000;

            [JsonProperty(PropertyName = "Add Amount Of Water (vanilla: 30)")]
            public float MaxItemToCreate { get; set; } = 60f;

            [JsonProperty(PropertyName = "Add Water Every X Seconds (vanilla: 60)")]
            public float Interval { get; set; } = 30f;
        }

        private class WaterPumpSettings
        {
            [JsonProperty(PropertyName = "ML Capacity (vanilla: 2000)")]
            public int StackSize { get; set; } = 10000;

            [JsonProperty(PropertyName = "Add Amount Of Water To Water Pumps (Vanilla: 85)")]
            public int Amount { get; set; } = 130;

            [JsonProperty(PropertyName = "Add Water To Water Pumps Every X Seconds (Vanilla: 10)")]
            public float Interval { get; set; } = 10f;
        }

        private class Configuration
        {
            [JsonProperty(PropertyName = "Small Water Catcher")]
            public SmallWaterCatcherSettings SmallWaterCatcher { get; set; } = new();

            [JsonProperty(PropertyName = "Large Water Catcher")]
            public LargeWaterCatcherSettings LargeWaterCatcher { get; set; } = new();

            [JsonProperty(PropertyName = "Water Pump")]
            public WaterPumpSettings WaterPump { get; set; } = new();

            [JsonProperty(PropertyName = "Water Jug ML Capacity (vanilla: 5000)")]
            public int WaterJug { get; set; } = 25000;

            [JsonProperty(PropertyName = "Water Barrel ML Capacity (vanilla: 20000)")]
            public int WaterBarrel { get; set; } = 100000;

            [JsonProperty(PropertyName = "Water Bucket ML Capacity (vanilla: 2000)")]
            public int WaterBucket { get; set; } = 10000;

            [JsonProperty(PropertyName = "Water Ground Pool Capacity (vanilla: 500)")]
            public int GroundPool { get; set; } = 500;

            [JsonProperty(PropertyName = "Water Big Ground Pool Capacity (vanilla: 2000)")]
            public int BigGroundPool { get; set; } = 2000;

            [JsonProperty(PropertyName = "Water Purifier ML Capacity (vanilla: 5000)")]
            public int WaterPurifier { get; set; } = 25000;

            [JsonProperty(PropertyName = "Water Purifier (Powered) ML Capacity (vanilla: 5000)")]
            public int PoweredWaterPurifier { get; set; } = 25000;

            [JsonProperty(PropertyName = "Water Pistol ML Capacity (vanilla: 250)")]
            public int WaterPistol { get; set; } = 500;

            [JsonProperty(PropertyName = "Water Gun ML Capacity (vanilla: 1000)")]
            public int WaterGun { get; set; } = 2000;

            [JsonProperty(PropertyName = "Small Water Bottle ML Capacity (vanilla: 250)")]
            public int SmallWaterBottle { get; set; } = 1000;

            [JsonProperty(PropertyName = "Bota Bag ML Capacity (default: 3000)")]
            public int BotaBag { get; set; } = 3000;

            [JsonProperty(PropertyName = "Reset To Vanilla Defaults On Unload")]
            public bool Reset { get; set; }
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            canSaveConfig = false;
            try
            {
                config = Config.ReadObject<Configuration>();
                if (config == null) LoadDefaultConfig();
                canSaveConfig = true;
                SaveConfig();
            }
            catch (Exception ex)
            {
                Puts(ex.ToString());
                LoadDefaultConfig();
            }
        }

        private bool canSaveConfig = true;

        protected override void SaveConfig()
        {
            if (canSaveConfig)
            {
                Config.WriteObject(config);
            }
        }

        protected override void LoadDefaultConfig() => config = new();

        #endregion

        #region Configuration Classes

        private class ItemConfig
        {
            public string Shortname { get; set; }
            public int ItemId { get; set; }
            public int DefaultMaxStackSize { get; set; }
            public int ConfigMaxStackSize { get; set; }
        }

        private class EntityConfig
        {
            public string ShortPrefabName { get; set; }
            public int DefaultMaxStackSize { get; set; }
            public int ConfigMaxStackSize { get; set; }

            // For Water Catchers
            public float DefaultMaxItemToCreate { get; set; } = 10f; // Vanilla value
            public float MaxItemToCreate { get; set; }
            public float Interval { get; set; }

            // For Water Pumps
            public float DefaultPumpInterval { get; set; } = 10f; // Vanilla value
            public float PumpInterval { get; set; }
            public int DefaultAmountPerPump { get; set; } = 85; // Vanilla value
            public int AmountPerPump { get; set; }
        }

        #endregion
    }
}

// --- End of file: WaterWorks.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/welcome-messages ---
// --- Original File Path: W/WelcomeMessages/WelcomeMessages.cs ---

﻿using Oxide.Core.Libraries.Covalence;
using System.Collections.Generic;
using System;

namespace Oxide.Plugins
{
    [Info("WelcomeMessages", "Ankawi", "1.0.7", ResourceId = 2219)]
    [Description("Sends players welcome messages")]

    class WelcomeMessages : CovalencePlugin
    {
        private float timeInSeconds;

        protected override void LoadDefaultConfig()
        {
            PrintWarning("Creating new configuration file for " + this.Title + "--Version#: " + this.Version);
            Config["WaitIntervalInSeconds"] = 20;
            SaveConfig();
        }
        void Init()
        {
            LoadConfig();
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["Welcome"] = "[#cyan]Welcome to the server {0}![/#]"
            }, this, "en");

            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["Welcome"] = "[#cyan]Bienvenido al servidor {0}![/#]"
            }, this, "es");

            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["Welcome"] = "[#cyan]Bienvenue sur le serveur {0}![/#]"
            }, this, "fr");
        }

        void OnUserConnected(IPlayer player)
        {
            timeInSeconds = Convert.ToSingle(Config["WaitIntervalInSeconds"]);
            timer.Once((timeInSeconds), () =>
            {
                if (player != null && player.IsConnected)
                    player.Reply(covalence.FormatText(string.Format(lang.GetMessage("Welcome", this, player.Id), player.Name.Sanitize())));
            });

            return;
        }
    }
}

// --- End of file: WelcomeMessages.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/weapon-damage-scaler ---
// --- Original File Path: W/WeaponDamageScaler/WeaponDamageScaler.cs ---

using System.Collections.Generic;
using System.Text;
using Oxide.Core.Configuration;
using Oxide.Core;
using System;
using System.Linq;
using Oxide.Core.Libraries.Covalence;
using System.Text.RegularExpressions;

namespace Oxide.Plugins
{
    //Body part scaling from k1lly0u's plugin, with permission (thanks, k1lly0u)
    //Further code cleanup/improvement with help of k1lly0u
    [Info("Weapon Damage Scaler", "Shady", "1.1.7", ResourceId = 1594)]
    [Description("Scale damage per weapon, ammo types, skins, prefabs, and per body part.")]
    internal class WeaponDamageScaler : RustPlugin
    {
        private readonly Dictionary<ulong, string> skinIDName = new Dictionary<ulong, string>();
        private WeaponData weaponData;
        private DynamicConfigFile wData;
        private float GlobalDamageScale;

        private readonly Array buildingGrades = Enum.GetValues(typeof(BuildingGrade.Enum));
        private readonly HashSet<string> prefabNames = new HashSet<string>();

        private readonly List<string> _forbiddenTags = new List<string> { "</color>", "</size>", "<b>", "</b>", "<i>", "</i>" };

        private readonly Regex _colorRegex = new Regex("(<color=.+?>)");
        private readonly Regex _sizeRegex = new Regex("(<size=.+?>)");

        #region Data Management
        private class ItemStructure
        {
            public string Name;
            public float GlobalModifier = 1.0f;
            public Dictionary<string, float> IndividualParts = new Dictionary<string, float>();
            public Dictionary<string, float> PrefabModifiers = new Dictionary<string, float>();
        }

        private class WeaponData { public Dictionary<string, ItemStructure> Weapons = new Dictionary<string, ItemStructure>(); }

        private void InitializeWeaponData()
        {
            var skinNameDir = new List<string>();
            foreach (var kvp in Rust.Workshop.Approved.All)
            {
                var skin = kvp.Value;
                if (skin.Skinnable.Category == Rust.Workshop.Category.Weapon) skinNameDir.Add(skin.Name);
            }
            ItemStructure outStructure;
            for (int i = 0; i < ItemManager.itemList.Count; i++)
            {
                var definition = ItemManager.itemList[i];
                if (definition == null) continue;
                if ((definition.category == ItemCategory.Weapon || definition.category == ItemCategory.Tool || definition.category == ItemCategory.Ammunition) && !definition.shortname.Contains("mod") && !weaponData.Weapons.TryGetValue(definition.shortname, out outStructure)) weaponData.Weapons[definition.shortname] = new ItemStructure { Name = definition.displayName.english, GlobalModifier = 1.0f, PrefabModifiers = new Dictionary<string, float>(), IndividualParts = CreateBodypartList() };

                var skinDir = ItemSkinDirectory.ForItem(definition) ?? null;
                if (skinDir != null && skinDir.Length > 0 && (definition.category == ItemCategory.Weapon || definition.category == ItemCategory.Tool))
                {
                    for (int j = 0; j < skinDir.Length; j++)
                    {
                        var skin = skinDir[j];
                        var name = skin.invItem?.displayName?.english ?? skin.name;
                        if (!skinNameDir.Contains(name)) skinNameDir.Add(name);
                    }
                }
            }
            for (int i = 0; i < skinNameDir.Count; i++)
            {
                var skin = skinNameDir[i];
                if (!weaponData.Weapons.TryGetValue(skin, out outStructure)) weaponData.Weapons[skin] = new ItemStructure { Name = skin, GlobalModifier = 1.0f, PrefabModifiers = new Dictionary<string, float>(), IndividualParts = CreateBodypartList() };
            }
            SaveData();
        }
        private Dictionary<string, float> CreateBodypartList()
        {
            Dictionary<string, float> newData = new Dictionary<string, float>();
            for (int i = 0; i < Bodyparts.Length; i++) newData.Add(Bodyparts[i], 1.0f);
            return newData;
        }

        private void SaveData() => wData?.WriteObject(weaponData);

        private void LoadData()
        {
            try
            {
                wData = Interface.Oxide.DataFileSystem.GetFile("damagescaler_data");
                weaponData = Interface.GetMod().DataFileSystem.ReadObject<WeaponData>("damagescaler_data");
                InitializeWeaponData();
            }
            catch (Exception ex)
            {
                PrintError(ex.ToString());
                PrintWarning("Unable to load data, creating new datafile!");
                weaponData = new WeaponData();
            }
        }
        #endregion
        #region Config
        protected override void LoadDefaultConfig()
        {
            Config["GlobalDamageScaler"] = GlobalDamageScale = GetConfig("GlobalDamageScaler", 1.0f);
            SaveConfig();
        }

        private T GetConfig<T>(string name, T defaultValue)
        {
            if (Config[name] == null) return defaultValue;
            return (T)Convert.ChangeType(Config[name], typeof(T));
        }
        public string[] Bodyparts = new string[]
               {
                    "r_forearm",
                    "l_forearm",
                    "l_upperarm",
                    "r_upperarm",
                    "r_hand",
                    "l_hand",
                    "pelvis",
                    "l_hip",
                    "r_hip",
                    "spine3",
                    "spine4",
                    "spine1",
                    "spine2",
                    "r_knee",
                    "r_foot",
                    "r_toe",
                    "l_knee",
                    "l_foot",
                    "l_toe",
                    "head",
                    "neck",
                    "jaw",
                    "r_eye",
                    "l_eye"
               };
        #endregion
        #region Localization       
        protected override void LoadDefaultMessages()
        {
            var messages = new Dictionary<string, string>
            {
                //DO NOT EDIT LANGUAGE FILES HERE!
                {"noPerms", "You do not have permission to use this command!"},
                {"invalidSyntax", "Invalid Syntax, usage example: setscale <weaponname> <x.x>"},
                {"itemSkinNotFound",   "Item/Skin: \"" + "{item}" + "\" does not exist, syntax example: setscale <WeaponOrAmmoOrSkinName> <x.x>" },
                {"invalidSyntaxBodyPart", "<color=orange>/scalebp weapon <shortname> <bone> <amount></color> - Scale damage done for <shortname> to <bone>"},
                {"bodyPartExample", "<color=orange>-- ex. /scalebp weapon rifle.ak pelvis 1.25</color> - Damage done from a assault rifle to a pelvis is set to 125%"},
                {"scaleList", "<color=orange>/scalebp list</color> - Displays all bones"},
                {"shortnameNotFound", "Could not find a weapon with the shortname: <color=orange>{0}</color>"},
                {"bonePartNotFound", "Could not find a bone called: <color=orange>{0}</color>. Check /scalebp list"},
                {"bodyPartExample2", "<color=orange>/scalebp weapon <shortname> <bone> <amount></color>"},
                {"successfullyChangedValueBP","You have changed <color=orange>{0}'s</color> damage against <color=orange>{1}</color> to <color=orange>{2}</color>x damage" },
                {"alreadySameValue", "This is already the value for the selected item!"},
                {"scaledItem", "Scaled \"" + "{engName}" + "\" (" + "{shortName}" + ") " + "to: " + "{scaledValue}"},
                {"prefabNotExist", "Prefab/Building grade does not exist: {0}" },
                {"scaledPrefab", "Scaled Prefab/Building grade \"{0}\" by {1} for weapon {2}" },
            };
            lang.RegisterMessages(messages, this);
        }
        private string GetMessage(string key, string steamId = null) => lang.GetMessage(key, this, steamId);
        #endregion
        #region Oxide Hooks
        private void OnServerInitialized()
        {
            var strs = GameManifest.Current.pooledStrings;
            for (int i = 0; i < strs.Length; i++)
            {
                var str = strs[i].str ?? string.Empty;
                prefabNames.Add(str);
            }

            for (int i = 0; i < ItemManager.itemList.Count; i++)
            {
                var item = ItemManager.itemList[i];
                var skinDir = ItemSkinDirectory.ForItem(item);
                if (skinDir == null || skinDir.Length < 1) continue;
                for (int j = 0; j < skinDir.Length; j++)
                {
                    var skin = skinDir[j];
                    ulong skinID;
                    if (ulong.TryParse(skin.id.ToString(), out skinID)) skinIDName[skinID] = (skin.invItem?.displayName?.english ?? skin.name);
                }
            }

            foreach (var kvp in Rust.Workshop.Approved.All)
            {
                var val = kvp.Value;
                skinIDName[val.WorkshopdId] = val.Name;
            }

            LoadData();
        }

        private void Init()
        {
            RegisterPerm("weapondamagescaler.setscale");
            RegisterPerm("weapondamagescaler.setscalebp");
            RegisterPerm("weapondamagescaler.allowed");
            AddCovalenceCommand("setscale", nameof(CmdSetScale));
            AddCovalenceCommand("scalebp", nameof(cmdScaleBP));
            LoadDefaultConfig();
            LoadDefaultMessages();
        }

        private void Unload() => SaveData();

        private void OnExplosiveThrown(BasePlayer player, BaseEntity entity)
        {
            if (player == null || entity == null) return;

         

            var sb = Facepunch.Pool.Get<StringBuilder>();
            try 
            {
                ItemStructure itemStruct;
                var prefabName = sb.Clear().Append(entity.ShortPrefabName).Replace("_", ".").Replace(".deployed", string.Empty).ToString(); 
                if (weaponData.Weapons.TryGetValue(prefabName, out itemStruct))
                {
                    var c4 = entity?.GetComponent<TimedExplosive>() ?? null;
                    if (c4 != null) for (int i = 0; i < c4.damageTypes.Count; i++) c4.damageTypes[i].amount *= itemStruct?.GlobalModifier ?? 1f;
                }
            }
            finally { Facepunch.Pool.Free(ref sb); }
         
        }

        private void OnRocketLaunched(BasePlayer player, BaseEntity entity)
        {
            var explosive = entity as TimedExplosive;
            if (explosive == null) return;

            var sb = Facepunch.Pool.Get<StringBuilder>();
            try 
            {
                var ammoName = sb.Clear().Append("ammo.").Append(entity.ShortPrefabName).Replace("_", ".").ToString();
                ItemStructure itemStruct;
                if (weaponData.Weapons.TryGetValue(ammoName, out itemStruct)) for (int i = 0; i < explosive.damageTypes.Count; i++) explosive.damageTypes[i].amount *= itemStruct?.GlobalModifier ?? 1f;
            }
            finally { Facepunch.Pool.Free(ref sb); }

    
        }

        private void OnEntityTakeDamage(BaseCombatEntity entity, HitInfo hitInfo)
        {
            if (entity == null || hitInfo == null) return;

            var type = hitInfo?.damageTypes?.GetMajorityDamageType() ?? Rust.DamageType.Generic;
            if (type == Rust.DamageType.Suicide) return;

            var attacker = hitInfo?.Initiator as BasePlayer;
            if (attacker != null && HasPermID(attacker.UserIDString, "weapondamagescaler.allowed"))
            {
                if (GlobalDamageScale != 1.0f) hitInfo?.damageTypes?.ScaleAll(GlobalDamageScale);
                else ScaleDealtDamage(hitInfo);
            }
        }
        #endregion
        #region Commands
        private void CmdSetScale(IPlayer player, string command, string[] args)
        {
            if (!HasPerm(player, "weapondamagescaler.setscale"))
            {
                SendReply(player, GetMessage("noPerms", player.Id));
                return;
            }
            if (args.Length <= 1)
            {
                SendReply(player, GetMessage("invalidSyntax", player.Id));
                return;
            }


            var itemName = args[0].ToLower();
            var englishName = GetEnglishName(itemName);
            var prefabName = (args.Length > 2) ? args[2].ToLower() : string.Empty;
            var shortName = string.Empty;

            foreach (var entry in weaponData.Weapons)
            {
                if (entry.Value.Name.Equals(itemName, StringComparison.OrdinalIgnoreCase))
                {
                    shortName = entry.Key;
                    break;
                }
                else if (entry.Key.Equals(itemName, StringComparison.OrdinalIgnoreCase))
                {
                    shortName = entry.Key;
                    break;
                }
            }
            if (string.IsNullOrEmpty(shortName)) shortName = skinIDName?.Where(p => p.Value.ToLower() == itemName)?.FirstOrDefault().Value ?? string.Empty;
            ItemStructure itemStruct;
            if (string.IsNullOrEmpty(shortName) || !weaponData.Weapons.TryGetValue(shortName, out itemStruct))
            {
                SendReply(player, GetMessage("itemSkinNotFound", player.Id).Replace("{item}", englishName));
                return;
            }

            var value = 0f;
            if (!float.TryParse(args[1], out value))
            {
                SendReply(player, GetMessage("invalidSyntax", player.Id));
                return;
            }

            if (!string.IsNullOrEmpty(shortName))
            {
                if (!string.IsNullOrEmpty(prefabName))
                {
                    if (!PrefabExists(prefabName) && !GradeExists(prefabName))
                    {
                        SendReply(player, string.Format(GetMessage("prefabNotExist", player.Id), prefabName));
                        return;
                    }
                    if (weaponData.Weapons[shortName].PrefabModifiers == null || weaponData.Weapons[shortName].PrefabModifiers.Count < 1) weaponData.Weapons[shortName].PrefabModifiers = new Dictionary<string, float>();
                    weaponData.Weapons[shortName].PrefabModifiers[prefabName] = value;
                    SendReply(player, string.Format(GetMessage("scaledPrefab", player.Id), prefabName, value, englishName));
                    return;
                }
                if (weaponData.Weapons[shortName].GlobalModifier == value)
                {
                    SendReply(player, GetMessage("alreadySameValue", player.Id));
                    return;
                }

                weaponData.Weapons[shortName].GlobalModifier = value;


                var sb = new StringBuilder(GetMessage("scaledItem", player.Id));

                var finalstring =
                    sb
                        .Replace("{engName}", englishName)
                        .Replace("{shortName}", shortName)
                        .Replace("{scaledValue}", value.ToString())
                        .ToString();

                SendReply(player, finalstring);
            }
            else SendReply(player, GetMessage("invalidSyntax", player.Id));
        }

        private void cmdScaleBP(IPlayer player, string command, string[] args)
        {
            if (!HasPerm(player, "weapondamagescaler.setscalebp"))
            {
                SendReply(player, GetMessage("noPerms", player.Id));
                return;
            }
            if (args.Length < 1)
            {
                SendReply(player, GetMessage("invalidSyntaxBodyPart", player.Id));
                SendReply(player, GetMessage("bodyPartExample", player.Id));
                SendReply(player, GetMessage("scaleList", player.Id)); //send in three messages to prevent it going invisible from character limit(?)
                return;
            }
            switch (args[0].ToLower())
            {
                case "weapon":
                    if (args.Length >= 3)
                    {
                        var shortName = string.Empty;
                        var engName = args[1].ToLower();

                        foreach (var entry in weaponData.Weapons)
                        {
                            if (entry.Value.Name.ToLower() == engName)
                            {
                                shortName = entry.Key;
                                break;
                            }
                            else if (entry.Key.ToLower() == engName)
                            {
                                shortName = entry.Key;
                                break;
                            }
                        }
                        if (!string.IsNullOrEmpty(shortName))
                        {
                            if (weaponData.Weapons.ContainsKey(shortName))
                            {
                                if (weaponData.Weapons[shortName].IndividualParts.ContainsKey(args[2].ToLower()))
                                {
                                    float i = 0;
                                    if (args.Length == 4)
                                        if (!float.TryParse(args[3], out i)) i = 1.0f;
                                    weaponData.Weapons[shortName].IndividualParts[args[2].ToLower()] = i;
                                    SaveData();
                                    SendReply(player, string.Format(GetMessage("successfullyChangedValueBP", player.Id), args[1], args[2], i));
                                    return;
                                }
                                SendReply(player, string.Format(GetMessage("bonePartNotFound", player.Id), args[2]));
                                return;
                            }
                            SendReply(player, string.Format(GetMessage("shortnameNotFound", player.Id), args[1]));
                            return;
                        }
                    }
                    SendReply(player, GetMessage("bodyPartExample2", player.Id));
                    return;

                case "list":
                    var bpPlayer = player?.Object as BasePlayer;
                    if (bpPlayer == null) return;
                    var BPsb = new StringBuilder();
                    for (int i = 0; i < Bodyparts.Length; i++)
                    {
                        var bp = Bodyparts[i];
                        var bpName = FirstUpper(bpPlayer?.skeletonProperties?.FindBone(StringPool.Get(bp))?.name?.english ?? bp);
                        BPsb.AppendLine(bp + " (" + bpName + "), ");
                    }
                    SendReply(bpPlayer, BPsb.ToString().TrimEnd().TrimEnd(','));
                    return;
            }
        }
        #endregion
        #region Util
        private string GetSkinName(ulong skinID)
        {
            string skinName;
            skinIDName.TryGetValue(skinID, out skinName);
            return skinName;
        }

        private ItemDefinition GetItemDefFromPrefabName(string shortprefabName)
        {
            if (string.IsNullOrEmpty(shortprefabName)) return null;
            var adjName = shortprefabName.Replace("_deployed", "").Replace(".deployed", "").Replace("_", "").Replace(".entity", "");
            var def = ItemManager.FindItemDefinition(adjName);
            if (def != null) return def;
            adjName = shortprefabName.Replace("_deployed", "").Replace(".deployed", "").Replace("_", ".").Replace(".entity", "");
            return ItemManager.FindItemDefinition(adjName);
        }

        //this code feels messy but it works I guess
        private void ScaleDealtDamage(HitInfo hitInfo)
        {
            if (hitInfo == null || hitInfo?.damageTypes == null) return;
            if (hitInfo?.Weapon == null && hitInfo?.WeaponPrefab == null) hitInfo.WeaponPrefab = hitInfo.Weapon = hitInfo?.InitiatorPlayer?.GetHeldEntity()?.GetComponent<AttackEntity>() ?? null;

            if (hitInfo?.Weapon == null && hitInfo?.WeaponPrefab == null) return;
            var bodypart = StringPool.Get((hitInfo?.HitBone ?? 0)) ?? string.Empty;
            var wepPrefab = hitInfo?.Weapon?.ShortPrefabName ?? hitInfo?.WeaponPrefab?.ShortPrefabName ?? string.Empty;
            var weaponName = hitInfo?.Weapon?.GetItem()?.info?.shortname ?? hitInfo?.WeaponPrefab?.GetItem()?.info?.shortname ?? string.Empty;
            if (string.IsNullOrEmpty(weaponName) && !string.IsNullOrEmpty(wepPrefab) && !wepPrefab.Contains("rocket") && !wepPrefab.Contains("explosive")) weaponName = GetItemDefFromPrefabName(wepPrefab)?.shortname ?? string.Empty;
            var ammoName = hitInfo?.Weapon?.GetItem()?.GetHeldEntity()?.GetComponent<BaseProjectile>()?.primaryMagazine?.ammoType?.shortname ?? string.Empty;
            if (string.IsNullOrEmpty(ammoName)) ammoName = (hitInfo?.Weapon ?? hitInfo?.WeaponPrefab ?? null)?.GetComponent<BaseProjectile>()?.primaryMagazine?.ammoType?.shortname ?? string.Empty;

            var skinName = GetSkinName(hitInfo?.Weapon?.GetItem()?.skin ?? 0);
            ItemStructure weaponInfo = null;
            ItemStructure ammoInfo = null;
            ItemStructure skinInfo = null;
            if (!string.IsNullOrEmpty(weaponName)) weaponData.Weapons.TryGetValue(weaponName, out weaponInfo);
            if (!string.IsNullOrEmpty(ammoName)) weaponData.Weapons.TryGetValue(ammoName, out ammoInfo);
            if (!string.IsNullOrEmpty(skinName)) weaponData.Weapons.TryGetValue(skinName, out skinInfo);
            var ammoMod = ammoInfo?.GlobalModifier ?? 1.0f;
            var skinMod = skinInfo?.GlobalModifier ?? 1.0f;
            var prefabName = hitInfo?.HitEntity?.ShortPrefabName ?? string.Empty;
            var gradeName = (hitInfo?.HitEntity?.GetComponent<BuildingBlock>()?.grade ?? BuildingGrade.Enum.None).ToString().ToLower();


            var prefabModWeapon = 1.0f;
            var prefabModAmmo = 1.0f;
            var prefabModSkin = 1.0f;
            var individualModWeapon = 1.0f;
            var individualModAmmo = 1.0f;
            var individualModSkin = 1.0f;
            if (weaponInfo != null)
            {
                if (!weaponInfo.PrefabModifiers.TryGetValue(prefabName, out prefabModWeapon) && !weaponInfo.PrefabModifiers.TryGetValue(gradeName, out prefabModWeapon)) prefabModWeapon = 1.0f;
                if (!weaponInfo.IndividualParts.TryGetValue(bodypart, out individualModWeapon)) individualModWeapon = 1.0f;
            }
            if (ammoInfo != null)
            {
                if (!ammoInfo.PrefabModifiers.TryGetValue(prefabName, out prefabModAmmo) && !ammoInfo.PrefabModifiers.TryGetValue(gradeName, out prefabModAmmo)) prefabModAmmo = 1.0f;
                if (!ammoInfo.IndividualParts.TryGetValue(bodypart, out individualModAmmo)) individualModAmmo = 1.0f;
            }
            if (skinInfo != null)
            {
                if (skinInfo != null && !skinInfo.PrefabModifiers.TryGetValue(prefabName, out prefabModSkin) && !skinInfo.PrefabModifiers.TryGetValue(gradeName, out prefabModSkin)) prefabModSkin = 1.0f;
                if (!skinInfo.IndividualParts.TryGetValue(bodypart, out individualModSkin)) individualModSkin = 1.0f;
            }

            var prefabMod = (prefabModWeapon + prefabModAmmo + prefabModSkin) - 2;

            var globalMod = weaponInfo?.GlobalModifier ?? 1.0f;

            var individualMod = (individualModWeapon + individualModSkin + individualModAmmo) - 2;

            var totalMod = (globalMod + individualMod + ammoMod + prefabMod + skinMod) - 4;

            if (totalMod != 1.0f) hitInfo?.damageTypes?.ScaleAll(totalMod);
        }

        //Borrowed RemoveTags from BetterChat//
        //Modified quite a bit
        private string RemoveTags(string phrase)
        {
            if (string.IsNullOrEmpty(phrase)) return phrase;


            //	Replace Color Tags
            phrase = _colorRegex.Replace(phrase, string.Empty);
            //	Replace Size Tags
            phrase = _sizeRegex.Replace(phrase, string.Empty);

            var phraseSB = Facepunch.Pool.Get<StringBuilder>();
            try
            {
                phraseSB.Clear().Append(phrase);

                for (int i = 0; i < _forbiddenTags.Count; i++) phraseSB.Replace(_forbiddenTags[i], string.Empty);

                return phraseSB.ToString();
            }
            finally { Facepunch.Pool.Free(ref phraseSB); }
        }

        private void RegisterPerm(string perm) => permission.RegisterPermission(perm, this);

        private bool HasPermID(string userID, string perm) => permission.UserHasPermission(userID, perm);

        private bool HasPerm(IPlayer player, string perm) => player?.HasPermission(perm) ?? false;

        private void SendReply(IPlayer player, string message)
        {
            if (player == null || string.IsNullOrEmpty(message)) return;
            if (player.IsServer || player?.Object == null) message = RemoveTags(message); //remove tags for console (may no longer be needed? - needs to be checked)
            player.Message(message);
        }

        private bool PrefabExists(string prefabName)
        {
            if (string.IsNullOrEmpty(prefabName)) return false;
            return prefabNames.Any(p => p.EndsWith(prefabName, StringComparison.OrdinalIgnoreCase) || p.EndsWith(prefabName + ".prefab", StringComparison.OrdinalIgnoreCase));
        }

        private bool GradeExists(string gradeName)
        {
            if (string.IsNullOrEmpty(gradeName)) return false;
            foreach (var grade in buildingGrades) if (grade.ToString().Equals(gradeName, StringComparison.OrdinalIgnoreCase)) return true;
            return false;
        }

        private string GetEnglishName(string shortName) { return ItemManager.FindItemDefinition(shortName)?.displayName?.english ?? shortName; }

        private string FirstUpper(string original)
        {
            if (string.IsNullOrEmpty(original)) return string.Empty;
            var charArray = original.ToCharArray();
            charArray[0] = char.ToUpper(charArray[0]);
            return new string(charArray);
        }
        #endregion
    }
}


// --- End of file: WeaponDamageScaler.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/wipe-info ---
// --- Original File Path: W/WipeInfo/WipeInfo.cs ---

﻿using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using Newtonsoft.Json;
using System.Text.RegularExpressions;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("Wipe Info", "dFxPhoeniX", "1.2.8")]
    [Description("Adds the ablity to see wipe cycles")]
    public class WipeInfo : RustPlugin
    {
        private string LastWipe;
        private string NextWipe;

        Timer announceTimer;

        ////////////////////////////////////////////////////////////
        // Oxide Hooks
        ////////////////////////////////////////////////////////////

        private void Init()
        {
            InitConfig();
        }

        void OnServerInitialized()
        {
            LoadVariables();

            if (AnnounceOnTimer)
            {
                announceTimer = timer.Repeat((AnnounceTimer * 60) * 60, 0, ()=> BroadcastWipe()); 
            }
        }

        void OnPlayerConnected(BasePlayer player)
        {
            if (AnnounceOnJoin)
            {
                cmdNextWipe(player, "", new string[0]);
            }
        }

        ////////////////////////////////////////////////////////////
        // General Methods
        ////////////////////////////////////////////////////////////

        private DateTime ParseTime(string time) => DateTime.ParseExact(time, DateFormat, CultureInfo.InvariantCulture);

        private string NextWipeDays(string WipeDate)
        {
            DateTime wipeDateTime;

            if (DateTime.TryParseExact(WipeDate, DateFormat, CultureInfo.InvariantCulture, DateTimeStyles.None, out wipeDateTime))
            {
                TimeSpan t = wipeDateTime.Subtract(DateTime.Today);
                if (wipeDateTime.Date == DateTime.Today)
                {
                    return "Today";
                }
                else
                {
                    return string.Format("{0:D2}D ({1:D2})", t.Days, WipeDate);
                }
            }

            return "NoDateFound";
        }

        private void LoadVariables()
        {
            DateTime dateTime = DateTime.Today;
            DateTime firstDayMonth = new DateTime(dateTime.Year, dateTime.Month, 1);
            DateTime firstDayNextMonth = firstDayMonth.AddMonths(1);
            DateTime lastDayMonth = firstDayMonth.AddMonths(1).AddDays(-1);
            DateTime lastDayNextMonth = firstDayMonth.AddMonths(2).AddDays(-1);

            List<DateTime> datesList = new List<DateTime>();

            for (DateTime day = firstDayMonth.Date; day.Date <= lastDayMonth.Date; day = day.AddDays(1))
            {
                datesList.Add(day);
            }

            for (DateTime day = firstDayNextMonth.Date; day.Date <= lastDayNextMonth.Date; day = day.AddDays(1))
            {
                datesList.Add(day);
            }

            var firstThursdays = datesList.Where(d => d.DayOfWeek == DayOfWeek.Thursday)
                                           .GroupBy(d => d.Month)
                                           .Select(e => e.First());

            DateTime? lastThursday = firstThursdays.FirstOrDefault();
            if (lastThursday != null)
            {
                LastWipe = lastThursday.Value.ToString(DateFormat);
            }
            else
            {
                LastWipe = "NoDateFound";
            }

            DateTime? nextThursday = firstThursdays.Skip(1).FirstOrDefault();
            if (nextThursday != null)
            {
                NextWipe = nextThursday.Value.ToString(DateFormat);
            }
            else
            {
                NextWipe = "NoDateFound";
            }
        }

        private void BroadcastWipe()
        {
            foreach (var p in BasePlayer.activePlayerList)
            {
                if (NextWipeDays(NextWipe) == "Today")
                {
                    SendReply(p, string.Format(msg("MapWipeToday", p.UserIDString), LastWipe, NextWipeDays(NextWipe)));
                }
                else
                {
                    SendReply(p, string.Format(msg("MapWipe", p.UserIDString), LastWipe, NextWipeDays(NextWipe)));
                }
            }                
        }

        private string msg(string key, string id = null, params object[] args)
        {
            string message = id == null ? RemoveFormatting(lang.GetMessage(key, this, id)) : lang.GetMessage(key, this, id);

            return args.Length > 0 ? string.Format(message, args) : message;
        }

        private string RemoveFormatting(string source)
        {
            return source.Contains(">") ? Regex.Replace(source, "<.*?>", string.Empty) : source;
        }

        ////////////////////////////////////////////////////////////
        // Commands
        ////////////////////////////////////////////////////////////

        [ChatCommand("wipe")]
        private void cmdNextWipe(BasePlayer player, string command, string[] args)
        {
            if (NextWipeDays(NextWipe) == "Today")
            {
                SendReply(player, string.Format(msg("MapWipeToday", player.UserIDString), LastWipe, NextWipeDays(NextWipe)));
            }
            else
            {
                SendReply(player, string.Format(msg("MapWipe", player.UserIDString), LastWipe, NextWipeDays(NextWipe)));
            }                
        }

        [ConsoleCommand("wipe")]
        private void cmdGetWipe(ConsoleSystem.Arg arg)
        {
            if (NextWipeDays(NextWipe) == "Today")
            {
                SendReply(arg, string.Format(msg("MapWipeToday"), LastWipe, NextWipeDays(NextWipe)));
            }
            else
            {
                SendReply(arg, string.Format(msg("MapWipe"), LastWipe, NextWipeDays(NextWipe)));
            }
        }

        ////////////////////////////////////////////////////////////
        // Configs
        ////////////////////////////////////////////////////////////

        private bool ConfigChanged;
        private string DateFormat;
        private bool AnnounceOnJoin;
        private bool AnnounceOnTimer;
        private int AnnounceTimer;

        protected override void LoadDefaultConfig() => PrintWarning("Generating default configuration file...");

        private void InitConfig()
        {
            DateFormat = GetConfig("MM/dd/yyyy", "Date format");
            AnnounceOnJoin = GetConfig(false, "Announce on join");
            AnnounceOnTimer = GetConfig(false, "Announce on timer");
            AnnounceTimer = GetConfig(3, "Announce timer");

            if (ConfigChanged)
            {
                PrintWarning("Updated configuration file with new/changed values.");
                SaveConfig();
            }
        }

        private T GetConfig<T>(T defaultVal, params string[] path)
        {
            var data = Config.Get(path);
            if (data != null)
            {
                return Config.ConvertValue<T>(data);
            }

            Config.Set(path.Concat(new object[] { defaultVal }).ToArray());
            ConfigChanged = true;
            return defaultVal;
        }

        protected override void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {            
                {"MapWipe", "Last Map Wipe: <color=#ffae1a>{0}</color>\nTime Until Next Map Wipe: <color=#ffae1a>{1}</color>" },
                {"MapWipeToday", "Last Map Wipe: <color=#ffae1a>{0}</color>\nTime Until Next Map Wipe: <color=#ffae1a>today (19:00 UTC)</color>" }
            }, this);
            lang.RegisterMessages(new Dictionary<string, string>
            {            
                {"MapWipe", "Ultimul Wipe de Mapă: <color=#ffae1a>{0}</color>\nTimpul până la urmâtorul Wipe de Mapă: <color=#ffae1a>{1}</color>" },
                {"TMapWipeoday", "Ultimul Wipe de Mapă: <color=#ffae1a>{0}</color>\nTimpul până la urmâtorul Wipe de Mapă: <color=#ffae1a>astăzi (19:00 UTC)</color>" }
            }, this, "ro");
        }
    }
}

// --- End of file: WipeInfo.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/water-limits ---
// --- Original File Path: W/WaterLimits/WaterLimits.cs ---

using Newtonsoft.Json;
using Oxide.Core;
using Rust;
using System.Collections.Generic;
using System.IO;

namespace Oxide.Plugins
{
    [Info("Water Limits", "Wulf/lukespragg", "3.1.0")]
    [Description("Hurts or kills players that are in water under conditions")]
    public class WaterLimits : CovalencePlugin
    {
        #region Configuration

        private Configuration config;

        public class Configuration
        {
            [JsonProperty(PropertyName = "Hurt player on contact (true/false)")]
            public bool HurtOnContact { get; set; } = false;

            [JsonProperty(PropertyName = "Hurt player on disconnect (true/false)")]
            public bool HurtOnDisconnect { get; set; } = true;

            [JsonProperty(PropertyName = "Hurt player over time (true/false)")]
            public bool HurtOverTime { get; set; } = true;

            [JsonProperty(PropertyName = "Kill player on contact (true/false)")]
            public bool KillOnContact { get; set; } = false;

            [JsonProperty(PropertyName = "Kill player on disconnect (true/false)")]
            public bool KillOnDisconnect { get; set; } = false;

            [JsonProperty(PropertyName = "Damage player amount (1 - 500)")]
            public int DamageAmount { get; set; } = 1;

            [JsonProperty(PropertyName = "Damage player every (seconds)")]
            public int DamageEvery { get; set; } = 10;
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                config = Config.ReadObject<Configuration>();
                if (config == null)
                {
                    LoadDefaultConfig();
                }
            }
            catch
            {
                LoadDefaultConfig();
            }
            SaveConfig();
        }

        protected override void LoadDefaultConfig()
        {
            string configPath = $"{Interface.Oxide.ConfigDirectory}{Path.DirectorySeparatorChar}{Name}.json";
            LogWarning($"Could not load a valid configuration file, creating a new configuration file at {configPath}");
            config = new Configuration();
        }

        protected override void SaveConfig() => Config.WriteObject(config);

        #endregion Configuration

        #region Initialization

        private readonly Dictionary<ulong, Timer> timers = new Dictionary<ulong, Timer>();

        private const string permExclude = "waterlimits.exclude";

        private void Init()
        {
            permission.RegisterPermission(permExclude, this);

            if (!config.HurtOnContact && !config.KillOnContact)
            {
                Unsubscribe(nameof(OnRunPlayerMetabolism));
            }
        }

        #endregion Initialization

        #region Water Checking

        private bool IsInWater(BasePlayer player)
        {
            ModelState modelState = player.modelState;
#if DEBUG
            LogWarning($"{player.displayName} is {System.Math.Ceiling(modelState.waterLevel)}% underwater");
#endif
            return modelState != null && modelState.waterLevel > 0f && player.metabolism.wetness.value > 0f;
        }

        private void WaterCheck(BasePlayer player)
        {
            if (permission.UserHasPermission(player.UserIDString, permExclude) || !IsInWater(player))
            {
                return;
            }

#if DEBUG
            LogWarning($"{player.displayName} is in water: {IsInWater(player)}");
            LogWarning($"{player.displayName} is {System.Math.Ceiling(player.metabolism.wetness.value)}% wet");
#endif

            if (config.KillOnContact || config.KillOnDisconnect)
            {
                player.Hurt(1000f, DamageType.Drowned, null, false);
            }
            else if (config.HurtOnContact || config.HurtOnDisconnect)
            {
                if (config.HurtOverTime)
                {
                    if (!timers.ContainsKey(player.userID))
                    {
                        timers[player.userID] = timer.Every(config.DamageEvery, () =>
                        {
                            if (player.IsDead() && timers.ContainsKey(player.userID))
                            {
                                timers[player.userID].Destroy();
                            }
                            else
                            {
                                player.Hurt(config.DamageAmount, DamageType.Drowned, null, false);
                            }
                        });
                    }
                }
                else
                {
                    player.Hurt(config.DamageAmount, DamageType.Drowned, null, false);
                }
            }
        }

        #endregion Water Checking

        #region Player Handling

        private void OnServerInitialized()
        {
            foreach (BasePlayer sleeper in BasePlayer.sleepingPlayerList)
            {
                WaterCheck(sleeper);
            }
        }

        private void OnPlayerConnected(Network.Message packet)
        {
            if (timers.ContainsKey(packet.connection.userid))
            {
                timers[packet.connection.userid].Destroy();
            }
        }

        private void OnPlayerDisconnected(BasePlayer player)
        {
            WaterCheck(player);
        }

        private void OnRunPlayerMetabolism(PlayerMetabolism metabolism, BaseCombatEntity entity)
        {
            BasePlayer player = entity.ToPlayer();
            if (player != null)
            {
                WaterCheck(player);
            }
        }

        private void OnPlayerSleepEnded(BasePlayer player)
        {
            if (timers.ContainsKey(player.userID))
            {
                timers[player.userID].Destroy();
            }
        }

        #endregion Player Handling
    }
}


// --- End of file: WaterLimits.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/wipe-timer ---
// --- Original File Path: W/WipeTimer/WipeTimer.cs ---

﻿using System;
using System.Collections.Generic;
using Oxide.Core.Libraries.Covalence;

namespace Oxide.Plugins
{
    [Info("Wipe Timer", "Rick", "1.1.0")]
    [Description("Allows players to check when the next wipe is")]
    class WipeTimer : CovalencePlugin
    {
        #region Configuration

        DefaultConfig config;

        class DefaultConfig
        {
            public int year = 2023;
            public int month = 1;
            public int day = 13;
            public int hour = 16;
            public int min = 30;
            public int sec = 0;
            public bool AutoRespond = true;
            public bool AnnouceOnConnect = true;
        }

        protected override void LoadDefaultConfig()
        {
            PrintWarning("Creating a new configuration file");
            Config.Clear();
            config = new DefaultConfig();
            Config.WriteObject(config, true);
            SaveConfig();
        }

        private new void LoadDefaultMessages()
        {
            //English
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["CommandWipe"] = "Time until next wipe: {0}"
            }, this);
        }

        #endregion

        void Init()
        {
            try
            {
                config = Config.ReadObject<DefaultConfig>();
            }
            catch
            {
                PrintWarning("Could not read config, creating new default config");
                LoadDefaultConfig();
            }
        }

        [Command("wipe")]
        void cmdWipe(IPlayer p, string command, string[] args)
        {
            DateTime date1 = new DateTime(config.year, config.month, config.day, config.hour, config.min, config.sec);
            System.TimeSpan diff1 = date1.Subtract(DateTime.Now);

            string time = string.Format("{0}d:{1}h:{2}m", diff1.Days, diff1.Hours, diff1.Minutes);
            p.Reply("<color=#aaff55>" + Lang("CommandWipe", p.Id, time) + "</color>");
        }

        object OnUserChat(IPlayer p, string message)
        {
            DateTime date1 = new DateTime(config.year, config.month, config.day, config.hour, config.min, config.sec);
            System.TimeSpan diff1 = date1.Subtract(DateTime.Now);

            string time = string.Format("{0}d:{1}h:{2}m", diff1.Days, diff1.Hours, diff1.Minutes);
            if (message.Contains("wipe") && config.AutoRespond)
            {
                p.Reply("<color=#aaff55>" + Lang("CommandWipe", p.Id, time + "</color>"));
            }
            return null;
        }

        void OnUserConnected(IPlayer p)
        {
            DateTime date1 = new DateTime(config.year, config.month, config.day, config.hour, config.min, config.sec);
            System.TimeSpan diff1 = date1.Subtract(DateTime.Now);

            string time = string.Format("{0}d:{1}h:{2}m", diff1.Days, diff1.Hours, diff1.Minutes);
            if (config.AnnouceOnConnect)
            {
                p.Reply("<color=#aaff55>" + Lang("CommandWipe", p.Id, time + "</color>"));
            }
        }

        T GetConfig<T>(string name, T value) => Config[name] == null ? value : (T)Convert.ChangeType(Config[name], typeof(T));

        string Lang(string key, string id = null, params object[] args) => string.Format(lang.GetMessage(key, this, id), args);
    }
}

// --- End of file: WipeTimer.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/wheres-my-corpse ---
// --- Original File Path: W/WheresMyCorpse/WheresMyCorpse.cs ---

using System;
using System.Text;
using System.Collections.Generic;
using Oxide.Core;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("Where's My Corpse", "Fuji/LeoCurtss", "0.6.2", ResourceId = 1777)]
    [Description("Points a player to their corpse when they type a command.")]

    class WheresMyCorpse : RustPlugin
    {
		
        void Loaded()
        {
            LoadData();
			
			permission.RegisterPermission("wheresmycorpse.canuse", this);
			
			//Lang API dictionary
			lang.RegisterMessages(new Dictionary<string,string>{
				["WMC_NoData"] = "No data was found on your last death.  The WheresMyCorpse plugin may have been reloaded or you have not died yet.",
				["WMC_LastSeen"] = "Your corpse was last seen {0} meters from here.",
				["WMC_LastSeenDirection"] = "Your corpse was last seen <color=yellow>{0}m</color> away in direction <color=yellow>{1}</color>.",
				["WMC_Dir_North"] = "North",
				["WMC_Dir_NorthEast"] = "NorthEast",
				["WMC_Dir_East"] = "East",
				["WMC_Dir_SouthEast"] = "SouthEast",
				["WMC_Dir_South"] = "South",
				["WMC_Dir_SouthWest"] = "SouthWest",
				["WMC_Dir_West"] = "West",
				["WMC_Dir_NorthWest"] = "NorthWest"
				
			}, this);
        }
		
		private string GetMessage(string name, string sid = null) {
			return lang.GetMessage(name, this, sid);
		}
		
		Dictionary<string, string> deathInfo = new Dictionary<string, string>();

		void LoadData()
		{
			deathInfo = Interface.GetMod().DataFileSystem.ReadObject<Dictionary<string, string>>("WheresMyCorpse");
		}

		void SaveData()
		{
			Interface.GetMod().DataFileSystem.WriteObject("WheresMyCorpse", deathInfo);
		}

		void OnEntityDeath(BaseCombatEntity entity, HitInfo info)
		{
			
			if (entity.name.Contains("player.prefab"))
			{
				var player = entity as BasePlayer;
				string UserID = player.UserIDString;
				if (!IsSteamId(Convert.ToUInt64(UserID)))
					return;
				string DeathPosition = entity.transform.position.ToString("0");
				
				Puts("Player death info: " + UserID + " at " + DeathPosition);
				
				LoadData();
				
				string value;
				
				if (deathInfo.TryGetValue(UserID, out value))
				{
					deathInfo[UserID] = DeathPosition;
					SaveData();
				}
				else
				{
					deathInfo.Add(UserID,DeathPosition);
					SaveData();
				}
			}
		}
		
		string GetDirectionAngle(float angle, string UserIDString)
		{
			if (angle > 337.5 || angle < 22.5)
				return lang.GetMessage("WMC_Dir_North", this, UserIDString);
			else if (angle > 22.5 && angle < 67.5)
				return lang.GetMessage("WMC_Dir_NorthEast", this, UserIDString);
			else if (angle > 67.5 && angle < 112.5)
				return lang.GetMessage("WMC_Dir_East", this, UserIDString);
			else if (angle > 112.5 && angle < 157.5)
				return lang.GetMessage("WMC_Dir_SouthEast", this, UserIDString);
			else if (angle > 157.5 && angle < 202.5)
				return lang.GetMessage("WMC_Dir_South", this, UserIDString);
			else if (angle > 202.5 && angle < 247.5)
				return lang.GetMessage("WMC_Dir_SouthWest", this, UserIDString);
			else if (angle > 247.5 && angle < 292.5)
				return lang.GetMessage("WMC_Dir_West", this, UserIDString);
			else if (angle > 292.5 && angle < 337.5)
				return lang.GetMessage("WMC_Dir_NorthWest", this, UserIDString);
			return "";
		}
		
		void OnPlayerRespawned(BasePlayer player)
		{
            if (permission.UserHasPermission(player.userID.ToString(), "wheresmycorpse.canuse"))
			{
				if (deathInfo.ContainsKey(player.UserIDString))
				{
					Vector3 lastDeathPosition = getVector3(deathInfo[player.UserIDString]);
					Vector3 currentPosition = player.transform.position;
					SendReply(player,string.Format(GetMessage("WMC_LastSeenDirection",player.UserIDString),(int)Vector3.Distance(player.transform.position, lastDeathPosition), GetDirectionAngle(Quaternion.LookRotation((lastDeathPosition - player.eyes.position).normalized).eulerAngles.y, player.UserIDString)  ));
				}
				else
					SendReply(player,GetMessage("WMC_DirNoData",player.UserIDString));
			}
		}
		
		[ChatCommand("where")]
        void TestCommand(BasePlayer player, string command, string[] args)
        {
            if (permission.UserHasPermission(player.userID.ToString(), "wheresmycorpse.canuse"))
			{
				if (deathInfo.ContainsKey(player.UserIDString))
				{
					Vector3 lastDeathPosition = getVector3(deathInfo[player.UserIDString]);
					Vector3 currentPosition = player.transform.position;
					SendReply(player,string.Format(GetMessage("WMC_LastSeenDirection",player.UserIDString),(int)Vector3.Distance(player.transform.position, lastDeathPosition), GetDirectionAngle(Quaternion.LookRotation((lastDeathPosition - player.eyes.position).normalized).eulerAngles.y, player.UserIDString)  ));
				}
				else
					SendReply(player,GetMessage("WMC_NoData",player.UserIDString));
			}
			else
				SendReply(player,GetMessage("WMC_NoPermission",player.UserIDString));
        }
		
		bool IsSteamId(ulong id)
		{
			return id > 70000000000000000uL;
		}
		
		public Vector3 getVector3(string rString){
			string[] temp = rString.Substring(1,rString.Length-2).Split(',');
			float x = float.Parse(temp[0]);
			float y = float.Parse(temp[1]);
			float z = float.Parse(temp[2]);
			Vector3 rValue = new Vector3(x,y,z);
			return rValue;
		}
    }
}

// --- End of file: WheresMyCorpse.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/weather-events ---
// --- Original File Path: W/WeatherEvents/WeatherEvents.cs ---

using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("Weather Events", "OuTSMoKE, Rick", "1.4.0")]
    [Description("Calls weather events with console commands.")]
    class WeatherEvents : RustPlugin
    {
        public Timer StormTimer;
        public int time = 0;
		public List<string> cmds = new List<string>
        {
            "we rain",
            "we lightrain",
            "we heavyrain",
			"we storm",
			"we heavystorm",
			"we lightfog",
			"we fog",
			"we dust",
			"we heavyfog",
			"we overcast",
			"we partlycloudy",
			"we spottyshowers",
			"we quickfront",
			"we sunandclouds",
			"we clear",
			"we volcanicsky",
			"we smokeysky",
			"we windy"
        };

        void Unload()
        {
            if (StormTimer != null)
                StormTimer.Destroy();
            time = 0;
        }

		void OnServerInitialized ()
		{
			ConsoleSystem.Run(ConsoleSystem.Option.Server.Quiet(), $"weather.rain 0");
			ConsoleSystem.Run(ConsoleSystem.Option.Server.Quiet(), $"weather.fog 0");
			ConsoleSystem.Run(ConsoleSystem.Option.Server.Quiet(), $"weather.wind 0");
		}

        [ConsoleCommand("we")]
        void cmdSpecial(ConsoleSystem.Arg arg)
        {
            if (!arg.IsServerside) return;
            if (arg.Args == null || arg.Args.Count() == 0) return;
            var stormType = arg.Args[0];
            if (stormType.Equals("random"))
            {
                stormType = Storms.Keys.ToList().GetRandom();
                arg.ReplyWith($"Running random weather event: {stormType}");
            }
            if (!Storms.ContainsKey(stormType)) return;
            NewStormTimer(stormType);
        }

        void NewStormTimer(string TypeOfStorm)
        {
            if (StormTimer != null)
                StormTimer.Destroy();
            time = 0;
            StormTimer = timer.Every(1, () => ProcessStorm(Storms[TypeOfStorm]));
        }

        void ProcessStorm(Dictionary<int, List<string>> StormData)
        {
            time++;
            if (StormData.ContainsKey(time))
                foreach (var entry in StormData[time])
                {
                    if (entry == "STOP") { StormTimer.Destroy(); time = 0; return; }
                    ConsoleSystem.Run(ConsoleSystem.Option.Server.Quiet(), entry);
                }
        }

        public Dictionary<string, Dictionary<int, List<string>>> Storms = new Dictionary<string, Dictionary<int, List<string>>>
                {
                    {"storm", new Dictionary<int, List<string>>
                    {
                        {1, new List<string> {"weather.cloud_coverage 0.02", "weather.cloud_sharpness 0.1", "weather.atmosphere_contrast 1.38" } },
						{10, new List<string> {"weather.cloud_coverage 0.04" } },
						{20, new List<string> {"weather.cloud_coverage 0.06", "weather.cloud_size 1.25" } },
						{30, new List<string> {"weather.cloud_coverage 0.08" } },
						{40, new List<string> {"weather.cloud_coverage 0.1", "weather.cloud_size 1.5" } },
						{50, new List<string> {"weather.cloud_coverage 0.12" } },
						{60, new List<string> {"weather.cloud_coverage 0.14", "weather.cloud_size 1.75" } },
						{70, new List<string> {"weather.cloud_coverage 0.16" } },
						{80, new List<string> {"weather.cloud_coverage 0.18" } },
						{90, new List<string> {"weather.cloud_coverage 0.2", "weather.cloud_size 2.0" } },
						{100, new List<string> {"weather.cloud_coverage 0.22", "weather.cloud_sharpness 0.2", "weather.atmosphere_contrast 1.75" } },
						{110, new List<string> {"weather.cloud_coverage 0.24" } },
						{120, new List<string> {"weather.cloud_coverage 0.26", "weather.cloud_size 2.25" } },
						{130, new List<string> {"weather.cloud_coverage 0.28" } },
						{140, new List<string> {"weather.cloud_coverage 0.3", "weather.cloud_size 2.5" } },
						{150, new List<string> {"weather.cloud_coverage 0.32" } },
						{160, new List<string> {"weather.cloud_coverage 0.34" } },
						{170, new List<string> {"weather.cloud_coverage 0.36", "weather.cloud_sharpness 0.3" } },
						{180, new List<string> {"weather.cloud_coverage 0.38" } },
						{190, new List<string> {"weather.cloud_coverage 0.4" } },
						{200, new List<string> {"weather.cloud_coverage 0.42" } },
						{210, new List<string> {"weather.cloud_coverage 0.44" } },
						{220, new List<string> {"weather.cloud_coverage 0.46" } },
						{230, new List<string> {"weather.cloud_coverage 0.48", "weather.cloud_sharpness 0.4" } },
						{240, new List<string> {"weather.cloud_coverage 0.5" } },
						{245, new List<string> {"weather.rain 0.01" } },
						{250, new List<string> {"weather.fog 0.02" } },
						{260, new List<string> {"weather.cloud_coverage 0.52", "weather.cloud_sharpness 0.5" } },
						{270, new List<string> {"weather.fog 0.04" } },
						{280, new List<string> {"weather.cloud_coverage 0.54" } },
						{290, new List<string> {"weather.fog 0.06" } },
						{300, new List<string> {"weather.cloud_coverage 0.56" } },
						{305, new List<string> {"weather.rain 0.02" } },
						{310, new List<string> {"weather.fog 0.08" } },
						{320, new List<string> {"weather.cloud_coverage 0.58" } },
						{330, new List<string> {"weather.fog 0.1" } },
						{340, new List<string> {"weather.cloud_coverage 0.6" } },
						{350, new List<string> {"weather.fog 0.12" } },
						{360, new List<string> {"weather.cloud_coverage 0.62" } },
						{365, new List<string> {"weather.rain 0.05" } },
						{370, new List<string> {"weather.fog 0.14" } },
						{380, new List<string> {"weather.cloud_coverage 0.64" } },
						{390, new List<string> {"weather.fog 0.16" } },
						{400, new List<string> {"weather.cloud_coverage 0.66", "weather.cloud_attenuation 0.1" } },
						{410, new List<string> {"weather.fog 0.18" } },
						{420, new List<string> {"weather.cloud_coverage 0.68" } },
						{425, new List<string> {"weather.rain 0.1" } },
						{430, new List<string> {"weather.fog 0.20" } },
						{440, new List<string> {"weather.cloud_coverage 0.7", "weather.cloud_attenuation 0.2" } },
						{450, new List<string> {"weather.fog 0.22" } },
						{460, new List<string> {"weather.cloud_coverage 0.72" } },
						{470, new List<string> {"weather.fog 0.24" } },
						{480, new List<string> {"weather.cloud_coverage 0.74", "weather.cloud_attenuation 0.3" } },
						{485, new List<string> {"weather.rain 0.2" } },
						{490, new List<string> {"weather.fog 0.26" } },
						{500, new List<string> {"weather.cloud_coverage 0.76", "weather.cloud_attenuation 0.4" } },
						{520, new List<string> {"weather.cloud_coverage 0.78" } },
						{540, new List<string> {"weather.cloud_coverage 0.8", "weather.cloud_attenuation 0.5" } },
						{545, new List<string> {"weather.rain 0.3" } },
						{560, new List<string> {"weather.cloud_coverage 0.82", "weather.cloud_attenuation 0.6" } },
						{580, new List<string> {"weather.cloud_coverage 0.84", "weather.cloud_attenuation 0.7" } },
						{600, new List<string> {"weather.cloud_coverage 0.86", "weather.cloud_attenuation 0.8" } },
						{605, new List<string> {"weather.rain 0.4", "weather.wind 0.2", "weather.thunder 1" } },
						{620, new List<string> {"weather.cloud_coverage 0.88" } },
						{640, new List<string> {"weather.cloud_coverage 0.9" } },
						{660, new List<string> {"weather.cloud_coverage 0.92" } },
						{665, new List<string> {"weather.rain 0.5" } },
						{680, new List<string> {"weather.cloud_coverage 0.94" } },
						{700, new List<string> {"weather.cloud_coverage 0.96" } },
						{720, new List<string> {"weather.cloud_coverage 0.98" } },
						{725, new List<string> {"weather.rain 0.6", "weather.wind 0.4" } },
						{740, new List<string> {"weather.cloud_coverage 1" } },
						{785, new List<string> {"weather.rain 0.7" } },
						{845, new List<string> {"weather.rain 0.8" } },
						{850, new List<string> {"weather.wind 0.6" } },
						{905, new List<string> {"weather.rain 0.9", "weather.wind 0.8" } },
						{965, new List<string> {"weather.rain 1", "weather.wind 1", "weather.cloud_size 2.0" } },
						{1035, new List<string> {"weather.rain 0.8" } },
						{1065, new List<string> {"weather.rain 0.7", "weather.wind 0.8" } },
						{1095, new List<string> {"weather.rain 0.6", "weather.wind 0.6", "weather.cloud_attenuation 0.7" } },
						{1160, new List<string> {"weather.wind 0.4", "weather.cloud_size 1.75" } },
						{1185, new List<string> {"weather.rain 0.4", "weather.rainbow 1" } },
						{1240, new List<string> {"weather.wind 0.2", "weather.cloud_attenuation 0.6" } },
						{1245, new List<string> {"weather.rain 0.3", "weather.cloud_size 1.5" } },
						{1250, new List<string> {"weather.cloud_coverage 0.98" } },
						{1270, new List<string> {"weather.cloud_coverage 0.96" } },
						{1285, new List<string> {"weather.rain 0.2", "weather.cloud_size 1.25" } },
						{1290, new List<string> {"weather.cloud_coverage 0.94" } },
						{1310, new List<string> {"weather.cloud_coverage 0.92", "weather.cloud_attenuation 0.5" } },
						{1330, new List<string> {"weather.cloud_coverage 0.9", "weather.cloud_size 1.0" } },
						{1335, new List<string> {"weather.rain 0.15", "weather.wind 0", "weather.thunder 0" } },
						{1340, new List<string> {"weather.cloud_attenuation 0.4" } },
						{1350, new List<string> {"weather.cloud_coverage 0.88" } },
						{1370, new List<string> {"weather.cloud_coverage 0.86" } },
						{1375, new List<string> {"weather.rain 0.1", "weather.cloud_size 0.88" } },
						{1390, new List<string> {"weather.cloud_coverage 0.84" } },
						{1405, new List<string> {"weather.rain 0.06" } },
						{1410, new List<string> {"weather.cloud_coverage 0.82" } },
						{1430, new List<string> {"weather.cloud_coverage 0.8", "weather.cloud_attenuation 0.3", "weather.cloud_size 0.75" } },
						{1450, new List<string> {"weather.cloud_coverage 0.78" } },
						{1455, new List<string> {"weather.rain 0.05" } },
						{1470, new List<string> {"weather.cloud_coverage 0.76" } },
						{1490, new List<string> {"weather.cloud_coverage 0.74" } },
						{1495, new List<string> {"weather.rain 0.04" } },
						{1500, new List<string> {"weather.fog 0.24" } },
						{1510, new List<string> {"weather.cloud_coverage 0.72" } },
						{1520, new List<string> {"weather.fog 0.22" } },
						{1530, new List<string> {"weather.cloud_coverage 0.7" } },
						{1535, new List<string> {"weather.rain 0.03" } },
						{1540, new List<string> {"weather.fog 0.2" } },
						{1550, new List<string> {"weather.cloud_coverage 0.68" } },
						{1560, new List<string> {"weather.fog 0.18" } },
						{1570, new List<string> {"weather.cloud_coverage 0.66", "weather.cloud_attenuation 0.2" } },
						{1575, new List<string> {"weather.rain 0.02" } },
						{1580, new List<string> {"weather.fog 0.16", } },
						{1590, new List<string> {"weather.cloud_coverage 0.64" } },
						{1600, new List<string> {"weather.fog 0.14" } },
						{1610, new List<string> {"weather.cloud_coverage 0.62" } },
						{1615, new List<string> {"weather.rain 0.01" } },
						{1620, new List<string> {"weather.fog 0.12" } },
						{1630, new List<string> {"weather.cloud_coverage 0.6" } },
						{1640, new List<string> {"weather.fog 0.1" } },
						{1650, new List<string> {"weather.cloud_coverage 0.58" } },
						{1660, new List<string> {"weather.fog 0.08" } },
						{1670, new List<string> {"weather.cloud_coverage 0.56" } },
						{1680, new List<string> {"weather.fog 0.06" } },
						{1690, new List<string> {"weather.cloud_coverage 0.54" } },
						{1700, new List<string> {"weather.fog 0.04" } },
						{1710, new List<string> {"weather.cloud_coverage 0.52" } },
						{1720, new List<string> {"weather.fog 0.02" } },
						{1730, new List<string> {"weather.cloud_coverage 0.5", "weather.cloud_attenuation 0.1" } },
						{1735, new List<string> {"weather.rain 0" } },
						{1740, new List<string> {"weather.fog 0" } },
						{1750, new List<string> {"weather.cloud_coverage 0.48", "weather.cloud_sharpness 0.4" } },
						{1760, new List<string> {"weather.cloud_coverage 0.46" } },
						{1770, new List<string> {"weather.cloud_coverage 0.44" } },
						{1780, new List<string> {"weather.cloud_coverage 0.42" } },
						{1790, new List<string> {"weather.cloud_coverage 0.4" } },
						{1800, new List<string> {"weather.cloud_coverage 0.38" } },
						{1810, new List<string> {"weather.cloud_coverage 0.36", "weather.cloud_sharpness 0.3" } },
						{1820, new List<string> {"weather.cloud_coverage 0.34", "weather.cloud_size 0.88" } },
						{1830, new List<string> {"weather.cloud_coverage 0.32" } },
						{1840, new List<string> {"weather.cloud_coverage 0.3" } },
						{1850, new List<string> {"weather.cloud_coverage 0.28", "weather.cloud_sharpness 0.2" } },
						{1860, new List<string> {"weather.cloud_coverage 0.26" } },
						{1870, new List<string> {"weather.cloud_coverage 0.24" } },
						{1880, new List<string> {"weather.cloud_coverage 0.22" } },
						{1890, new List<string> {"weather.cloud_coverage 0.2", "weather.cloud_size 0.875" } },
						{1900, new List<string> {"weather.cloud_coverage 0.18", "weather.cloud_attenuation -1" } },
						{1910, new List<string> {"weather.cloud_coverage 0.16", "weather.cloud_sharpness 0.1", "weather.atmosphere_contrast 1.25" } },
						{1920, new List<string> {"weather.cloud_coverage 0.14" } },
						{1930, new List<string> {"weather.cloud_coverage 0.12" } },
						{1940, new List<string> {"weather.cloud_coverage 0.1", "weather.cloud_size -1" } },
						{1950, new List<string> {"weather.cloud_coverage 0.08", "weather.cloud_sharpness -1", "weather.atmosphere_contrast -1" } },
						{1960, new List<string> {"weather.cloud_coverage 0.06" } },
						{1970, new List<string> {"weather.cloud_coverage 0.04" } },
						{1980, new List<string> {"weather.cloud_coverage 0.02", "weather.rainbow -1" } },						
                        {1990, new List<string> {"weather.cloud_coverage 0", "weather.reset", "STOP" } },
                    }
                    },
                    {"heavystorm", new Dictionary<int, List<string>>
                    {
                        {1, new List<string> {"weather.cloud_coverage 0.02" } },
						{10, new List<string> {"weather.cloud_coverage 0.04" } },
						{20, new List<string> {"weather.cloud_coverage 0.06", "weather.cloud_size 1.38" } },
						{30, new List<string> {"weather.cloud_coverage 0.08", "weather.cloud_sharpness 0.1", "weather.atmosphere_contrast 1.5" } },
						{40, new List<string> {"weather.cloud_coverage 0.1", "weather.cloud_size 1.75" } },
						{50, new List<string> {"weather.cloud_coverage 0.12" } },
						{60, new List<string> {"weather.cloud_coverage 0.14", "weather.cloud_size 2.0" } },
						{70, new List<string> {"weather.cloud_coverage 0.16" } },
						{80, new List<string> {"weather.cloud_coverage 0.18", "weather.cloud_sharpness 0.2", "weather.atmosphere_contrast 2.0" } },
						{90, new List<string> {"weather.cloud_coverage 0.2", "weather.cloud_size 2.38" } },
						{100, new List<string> {"weather.cloud_coverage 0.22" } },
						{110, new List<string> {"weather.cloud_coverage 0.24", "weather.cloud_size 2.75" } },
						{120, new List<string> {"weather.cloud_coverage 0.26" } },
						{130, new List<string> {"weather.cloud_coverage 0.28", "weather.cloud_sharpness 0.3" } },
						{140, new List<string> {"weather.cloud_coverage 0.3", "weather.cloud_attenuation 0.1", "weather.cloud_size 3.0" } },
						{150, new List<string> {"weather.cloud_coverage 0.32", "weather.cloud_sharpness 0.4" } },
						{160, new List<string> {"weather.cloud_coverage 0.34" } },
						{170, new List<string> {"weather.cloud_coverage 0.36", "weather.cloud_sharpness 0.5" } },
						{180, new List<string> {"weather.cloud_coverage 0.38" } },
						{190, new List<string> {"weather.cloud_coverage 0.4", "weather.atmosphere_rayleigh 1.5" } },
						{200, new List<string> {"weather.cloud_coverage 0.42" } },
						{210, new List<string> {"weather.cloud_coverage 0.44", "weather.cloud_sharpness 0.6" } },
						{220, new List<string> {"weather.cloud_coverage 0.46", "weather.cloud_attenuation 0.2" } },
						{230, new List<string> {"weather.cloud_coverage 0.48" } },
						{240, new List<string> {"weather.cloud_coverage 0.5", "weather.cloud_sharpness 0.7" } },
						{245, new List<string> {"weather.rain 0.01" } },
						{250, new List<string> {"weather.fog 0.02" } },
						{260, new List<string> {"weather.cloud_coverage 0.52" } },
						{270, new List<string> {"weather.fog 0.04" } },
						{280, new List<string> {"weather.cloud_coverage 0.54", "weather.cloud_attenuation 0.3" } },
						{290, new List<string> {"weather.fog 0.06" } },
						{300, new List<string> {"weather.cloud_coverage 0.56" } },
						{305, new List<string> {"weather.rain 0.02" } },
						{310, new List<string> {"weather.fog 0.08" } },
						{320, new List<string> {"weather.cloud_coverage 0.58" } },
						{330, new List<string> {"weather.fog 0.1" } },
						{340, new List<string> {"weather.cloud_coverage 0.6", "weather.cloud_attenuation 0.4" } },
						{350, new List<string> {"weather.fog 0.12" } },
						{360, new List<string> {"weather.cloud_coverage 0.62" } },
						{365, new List<string> {"weather.rain 0.05" } },
						{370, new List<string> {"weather.fog 0.14" } },
						{380, new List<string> {"weather.cloud_coverage 0.64", "weather.cloud_attenuation 0.5" } },
						{390, new List<string> {"weather.fog 0.16" } },
						{400, new List<string> {"weather.cloud_coverage 0.66", "weather.cloud_attenuation 0.6" } },
						{410, new List<string> {"weather.fog 0.18" } },
						{420, new List<string> {"weather.cloud_coverage 0.68", "weather.thunder 1" } },
						{425, new List<string> {"weather.rain 0.1", "weather.cloud_attenuation 0.7" } },
						{430, new List<string> {"weather.fog 0.20" } },
						{440, new List<string> {"weather.cloud_coverage 0.7" } },
						{450, new List<string> {"weather.fog 0.22" } },
						{460, new List<string> {"weather.cloud_coverage 0.72", "weather.cloud_attenuation 0.8" } },
						{470, new List<string> {"weather.fog 0.24" } },
						{480, new List<string> {"weather.cloud_coverage 0.74" } },
						{485, new List<string> {"weather.rain 0.2" } },
						{490, new List<string> {"weather.fog 0.26" } },
						{500, new List<string> {"weather.cloud_coverage 0.76" } },
						{510, new List<string> {"weather.fog 0.28" } },
						{520, new List<string> {"weather.cloud_coverage 0.78", "weather.cloud_attenuation 0.9" } },
						{530, new List<string> {"weather.fog 0.3" } },
						{540, new List<string> {"weather.cloud_coverage 0.8", "weather.atmosphere_rayleigh -1" } },
						{545, new List<string> {"weather.rain 0.3" } },
						{550, new List<string> {"weather.fog 0.32" } },
						{560, new List<string> {"weather.cloud_coverage 0.82" } },
						{570, new List<string> {"weather.fog 0.34" } },
						{580, new List<string> {"weather.cloud_coverage 0.84" } },
						{590, new List<string> {"weather.fog 0.36" } },
						{600, new List<string> {"weather.cloud_coverage 0.86" } },
						{605, new List<string> {"weather.rain 0.4", "weather.wind 0.2" } },
						{610, new List<string> {"weather.fog 0.38" } },
						{620, new List<string> {"weather.cloud_coverage 0.88" } },
						{630, new List<string> {"weather.fog 0.4" } },
						{640, new List<string> {"weather.cloud_coverage 0.9", "weather.cloud_attenuation 1" } },
						{650, new List<string> {"weather.fog 0.42" } },
						{660, new List<string> {"weather.cloud_coverage 0.92" } },
						{665, new List<string> {"weather.rain 0.5" } },
						{670, new List<string> {"weather.fog 0.44" } },
						{680, new List<string> {"weather.cloud_coverage 0.94" } },
						{690, new List<string> {"weather.fog 0.46" } },
						{700, new List<string> {"weather.cloud_coverage 0.96" } },
						{710, new List<string> {"weather.fog 0.48" } },
						{720, new List<string> {"weather.cloud_coverage 0.98" } },
						{725, new List<string> {"weather.rain 0.6", "weather.wind 0.4" } },
						{730, new List<string> {"weather.fog 0.5" } },
						{740, new List<string> {"weather.cloud_coverage 1" } },
						{785, new List<string> {"weather.rain 0.7" } },
						{845, new List<string> {"weather.rain 0.8" } },
						{850, new List<string> {"weather.wind 0.6" } },
						{905, new List<string> {"weather.rain 0.9", "weather.wind 0.8" } },
						{965, new List<string> {"weather.rain 1", "weather.wind 1" } },
						{980, new List<string> {"weather.cloud_attenuation 0.9" } },
						{2095, new List<string> {"weather.rain 0.9", "weather.cloud_size 2.38" } },
						{2135, new List<string> {"weather.rain 0.8" } },
						{2165, new List<string> {"weather.rain 0.7", "weather.wind 0.8" } },
						{2170, new List<string> {"weather.cloud_attenuation 0.8", "weather.cloud_size 2.0" } },
						{2195, new List<string> {"weather.rain 0.6", "weather.wind 0.6" } },
						{2225, new List<string> {"weather.rain 0.5" } },
						{2260, new List<string> {"weather.wind 0.4", "weather.cloud_size 1.38" } },
						{2285, new List<string> {"weather.rain 0.4", "weather.cloud_attenuation 0.7" } },
						{2340, new List<string> {"weather.wind 0.2" } },
						{2345, new List<string> {"weather.rain 0.3" } },
						{2350, new List<string> {"weather.cloud_coverage 0.98", "weather.cloud_size 1.0" } },
						{2360, new List<string> {"weather.fog 0.48" } },
						{2370, new List<string> {"weather.cloud_coverage 0.96" } },
						{2380, new List<string> {"weather.fog 0.46" } },
						{2385, new List<string> {"weather.rain 0.2", "weather.cloud_size 0.88" } },
						{2390, new List<string> {"weather.cloud_coverage 0.94" } },
						{2400, new List<string> {"weather.fog 0.44" } },
						{2410, new List<string> {"weather.cloud_coverage 0.92" } },
						{2420, new List<string> {"weather.fog 0.42" } },
						{2430, new List<string> {"weather.cloud_coverage 0.9", "weather.cloud_size 0.75" } },
						{2435, new List<string> {"weather.rain 0.15", "weather.wind 0" } },
						{2440, new List<string> {"weather.fog 0.4", "weather.cloud_attenuation 0.6", "weather.rainbow 1" } },
						{2450, new List<string> {"weather.cloud_coverage 0.88" } },
						{2460, new List<string> {"weather.fog 0.38", "weather.cloud_size 0.63" } },
						{2470, new List<string> {"weather.cloud_coverage 0.86" } },
						{2475, new List<string> {"weather.rain 0.1", } },
						{2480, new List<string> {"weather.fog 0.36", "weather.cloud_size 0.5" } },
						{2490, new List<string> {"weather.cloud_coverage 0.84" } },
						{2500, new List<string> {"weather.fog 0.34" } },
						{2505, new List<string> {"weather.rain 0.06" } },
						{2510, new List<string> {"weather.cloud_coverage 0.82" } },
						{2520, new List<string> {"weather.fog 0.32" } },
						{2530, new List<string> {"weather.cloud_coverage 0.8", "weather.atmosphere_rayleigh 1.5", "weather.cloud_opacity 0.9" } },
						{2540, new List<string> {"weather.fog 0.3" } },
						{2550, new List<string> {"weather.cloud_coverage 0.78" } },
						{2555, new List<string> {"weather.rain 0.05" } },
						{2560, new List<string> {"weather.fog 0.28", "weather.cloud_size 0.63" } },
						{2570, new List<string> {"weather.cloud_coverage 0.76" } },
						{2580, new List<string> {"weather.fog 0.26" } },
						{2590, new List<string> {"weather.cloud_coverage 0.74" } },
						{2595, new List<string> {"weather.rain 0.04" } },
						{2600, new List<string> {"weather.fog 0.24", } },
						{2610, new List<string> {"weather.cloud_coverage 0.72" } },
						{2620, new List<string> {"weather.fog 0.22"} },
						{2630, new List<string> {"weather.cloud_coverage 0.7", "weather.cloud_attenuation 0.5", "weather.cloud_opacity 0.8" } },
						{2635, new List<string> {"weather.rain 0.03", "weather.cloud_size 0.75" } },
						{2640, new List<string> {"weather.fog 0.2" } },
						{2650, new List<string> {"weather.cloud_coverage 0.68" } },
						{2660, new List<string> {"weather.fog 0.18" } },
						{2670, new List<string> {"weather.cloud_coverage 0.66" } },
						{2675, new List<string> {"weather.rain 0.02", } },
						{2680, new List<string> {"weather.fog 0.16" } },
						{2690, new List<string> {"weather.cloud_coverage 0.64", "weather.cloud_attenuation 0.4" } },
						{2700, new List<string> {"weather.fog 0.14" } },
						{2710, new List<string> {"weather.cloud_coverage 0.62", "weather.thunder 0" } },
						{2715, new List<string> {"weather.rain 0.01" } },
						{2720, new List<string> {"weather.fog 0.12" } },
						{2730, new List<string> {"weather.cloud_coverage 0.6", "weather.cloud_opacity 0.7" } },
						{2740, new List<string> {"weather.fog 0.1", "weather.cloud_size 0.88" } },
						{2750, new List<string> {"weather.cloud_coverage 0.58" } },
						{2760, new List<string> {"weather.fog 0.08" } },
						{2770, new List<string> {"weather.cloud_coverage 0.56" } },
						{2780, new List<string> {"weather.fog 0.06" } },
						{2790, new List<string> {"weather.cloud_coverage 0.54" } },
						{2800, new List<string> {"weather.fog 0.04" } },
						{2810, new List<string> {"weather.cloud_coverage 0.52" } },
						{2820, new List<string> {"weather.fog 0.02" } },
						{2830, new List<string> {"weather.cloud_coverage 0.5", "weather.cloud_attenuation 0.3" } },
						{2835, new List<string> {"weather.rain 0" } },
						{3340, new List<string> {"weather.fog 0", "weather.cloud_size -1" } },
						{3350, new List<string> {"weather.cloud_coverage 0.48", "weather.cloud_sharpness 0.6" } },
						{3360, new List<string> {"weather.cloud_coverage 0.46", } },
						{3370, new List<string> {"weather.cloud_coverage 0.44" } },
						{3380, new List<string> {"weather.cloud_coverage 0.42" } },
						{3390, new List<string> {"weather.cloud_coverage 0.4", "weather.atmosphere_rayleigh -1" } },
						{3400, new List<string> {"weather.cloud_coverage 0.38", "weather.cloud_sharpness 0.5" } },
						{3410, new List<string> {"weather.cloud_coverage 0.36" } },
						{3420, new List<string> {"weather.cloud_coverage 0.34" } },
						{3430, new List<string> {"weather.cloud_coverage 0.32", "weather.cloud_attenuation 0.2" } },
						{3440, new List<string> {"weather.cloud_coverage 0.3", "weather.cloud_sharpness 0.4" } },
						{3450, new List<string> {"weather.cloud_coverage 0.28" } },
						{3460, new List<string> {"weather.cloud_coverage 0.26", "weather.cloud_opacity 0.8" } },
						{3470, new List<string> {"weather.cloud_coverage 0.24" } },
						{3480, new List<string> {"weather.cloud_coverage 0.22", "weather.cloud_sharpness 0.3" } },
						{3490, new List<string> {"weather.cloud_coverage 0.2" } },
						{3500, new List<string> {"weather.cloud_coverage 0.18" } },
						{3510, new List<string> {"weather.cloud_coverage 0.16", "weather.cloud_opacity 0.9" } },
						{3520, new List<string> {"weather.cloud_coverage 0.14", "weather.cloud_sharpness 0.2" } },
						{3530, new List<string> {"weather.cloud_coverage 0.12", "weather.cloud_attenuation 0.1" } },
						{3540, new List<string> {"weather.cloud_coverage 0.1" } },
						{3550, new List<string> {"weather.cloud_coverage 0.08", "weather.cloud_sharpness 0.1", "weather.atmosphere_contrast 1.5" } },
						{3560, new List<string> {"weather.cloud_coverage 0.06", "weather.cloud_attenuation -1" } },
						{3570, new List<string> {"weather.cloud_coverage 0.04", "weather.cloud_sharpness -1", "weather.atmosphere_contrast -1", "weather.cloud_opacity -1" } },
						{3580, new List<string> {"weather.cloud_coverage 0.02", "weather.rainbow -1" } },						
                        {3590, new List<string> {"weather.cloud_coverage 0", "weather.reset", "STOP" } },
                    }
                    },
					{"lightrain", new Dictionary<int, List<string>>
                    {
                        {1, new List<string> {"weather.cloud_coverage 0.01" } },
						{10, new List<string> {"weather.cloud_coverage 0.02" } },
						{20, new List<string> {"weather.cloud_coverage 0.04" } },
						{30, new List<string> {"weather.cloud_coverage 0.06" } },
						{40, new List<string> {"weather.cloud_coverage 0.08" } },
						{50, new List<string> {"weather.cloud_coverage 0.1" } },
						{60, new List<string> {"weather.cloud_coverage 0.12" } },
						{70, new List<string> {"weather.cloud_coverage 0.14" } },
						{80, new List<string> {"weather.cloud_coverage 0.16" } },
						{90, new List<string> {"weather.cloud_coverage 0.18" } },
						{100, new List<string> {"weather.cloud_coverage 0.2" } },
						{110, new List<string> {"weather.cloud_coverage 0.22" } },
						{120, new List<string> {"weather.cloud_coverage 0.24", "weather.cloud_size 1.25" } },
						{130, new List<string> {"weather.cloud_coverage 0.26" } },
						{140, new List<string> {"weather.cloud_coverage 0.28" } },
						{150, new List<string> {"weather.cloud_coverage 0.3" } },
						{160, new List<string> {"weather.cloud_coverage 0.32" } },
						{170, new List<string> {"weather.cloud_coverage 0.34" } },
						{180, new List<string> {"weather.cloud_coverage 0.36" } },
						{190, new List<string> {"weather.cloud_coverage 0.38" } },
						{200, new List<string> {"weather.cloud_coverage 0.4" } },
						{210, new List<string> {"weather.cloud_coverage 0.42" } },
						{220, new List<string> {"weather.cloud_coverage 0.44" } },
						{230, new List<string> {"weather.cloud_coverage 0.46" } },
						{240, new List<string> {"weather.cloud_coverage 0.48" } },
						{250, new List<string> {"weather.cloud_coverage 0.5", "weather.cloud_size 1.5" } },
						{260, new List<string> {"weather.cloud_coverage 0.52" } },
						{270, new List<string> {"weather.cloud_coverage 0.54" } },
						{280, new List<string> {"weather.cloud_coverage 0.56" } },
						{290, new List<string> {"weather.cloud_coverage 0.58" } },
						{300, new List<string> {"weather.cloud_coverage 0.6" } },
						{310, new List<string> {"weather.cloud_coverage 0.62" } },
						{320, new List<string> {"weather.cloud_coverage 0.64" } },
						{330, new List<string> {"weather.cloud_coverage 0.66" } },
						{340, new List<string> {"weather.cloud_coverage 0.68" } },
						{350, new List<string> {"weather.cloud_coverage 0.7" } },
						{360, new List<string> {"weather.cloud_coverage 0.72" } },
						{370, new List<string> {"weather.cloud_coverage 0.74" } },
						{380, new List<string> { "weather.cloud_coverage 0.75", "weather.cloud_attenuation 0.1" } },
						{390, new List<string> { "weather.fog 0.02" } },
						{400, new List<string> { "weather.cloud_coverage 0.76" } },
						{410, new List<string> { "weather.fog 0.04" } },
						{420, new List<string> { "weather.cloud_coverage 0.78" } },
						{430, new List<string> { "weather.fog 0.06" } },
						{440, new List<string> { "weather.cloud_coverage 0.8" } },
						{450, new List<string> { "weather.fog 0.08" } },
						{460, new List<string> { "weather.cloud_coverage 0.82" } },
						{470, new List<string> { "weather.fog 0.1" } },
                        {480, new List<string> { "weather.rain 0.01" } },
						{490, new List<string> { "weather.cloud_coverage 0.84" } },
						{500, new List<string> { "weather.fog 0.12" } },
                        {510, new List<string> { "weather.rain 0.02" } },
						{520, new List<string> { "weather.cloud_coverage 0.86" } },
						{540, new List<string> { "weather.cloud_coverage 0.88" } },
                        {560, new List<string> { "weather.rain 0.03" } },
						{570, new List<string> { "weather.cloud_coverage 0.9" } },
                        {590, new List<string> { "weather.rain 0.04" } },
						{600, new List<string> { "weather.cloud_coverage 0.92" } },
                        {620, new List<string> { "weather.rain 0.05" } },
						{630, new List<string> { "weather.cloud_coverage 0.94" } },
						{650, new List<string> { "weather.cloud_coverage 0.96" } },
						{670, new List<string> { "weather.cloud_coverage 0.98" } },
						{690, new List<string> { "weather.cloud_coverage 1", "weather.cloud_attenuation 0.2" } },
						{1040, new List<string> { "weather.cloud_coverage 0.98" } },
						{1050, new List<string> { "weather.cloud_coverage 0.96" } },
						{1060, new List<string> { "weather.cloud_coverage 0.94" } },
						{1070, new List<string> { "weather.cloud_coverage 0.92", "weather.cloud_attenuation 0.1" } },
						{1080, new List<string> { "weather.cloud_coverage 0.9" } },
                        {1090, new List<string> { "weather.rain 0.04" } },
						{1100, new List<string> { "weather.cloud_coverage 0.88" } },
						{1110, new List<string> { "weather.cloud_coverage 0.86" } },
						{1120, new List<string> { "weather.cloud_coverage 0.84" } },
						{1130, new List<string> { "weather.cloud_coverage 0.82" } },
						{1140, new List<string> { "weather.cloud_coverage 0.8" } },
                        {1150, new List<string> { "weather.rain 0.03" } },
						{1160, new List<string> { "weather.cloud_coverage 0.78" } },
						{1170, new List<string> { "weather.cloud_coverage 0.76" } },
						{1180, new List<string> { "weather.cloud_coverage 0.74", "weather.cloud_attenuation -1" } },
						{1190, new List<string> { "weather.cloud_coverage 0.72" } },
						{1200, new List<string> { "weather.cloud_coverage 0.7" } },
                        {1210, new List<string> { "weather.rain 0.02" } },
						{1220, new List<string> { "weather.cloud_coverage 0.68" } },
						{1230, new List<string> { "weather.cloud_coverage 0.66" } },
						{1240, new List<string> { "weather.cloud_coverage 0.64" } },
						{1250, new List<string> { "weather.cloud_coverage 0.62" } },
                        {1260, new List<string> { "weather.rain 0.01" } },
						{1270, new List<string> { "weather.cloud_coverage 0.6" } },
						{1280, new List<string> { "weather.cloud_coverage 0.58" } },
						{1290, new List<string> { "weather.cloud_coverage 0.56" } },
						{1300, new List<string> { "weather.cloud_coverage 0.54" } },
						{1310, new List<string> { "weather.cloud_coverage 0.52" } },
						{1320, new List<string> { "weather.cloud_coverage 0.5" } },
                        {1330, new List<string> { "weather.rain 0", "weather.cloud_size 1.25" } },
						{1350, new List<string> { "weather.cloud_coverage 0.48" } },
						{1370, new List<string> { "weather.cloud_coverage 0.46" } },
						{1390, new List<string> { "weather.cloud_coverage 0.44" } },
						{1410, new List<string> { "weather.cloud_coverage 0.42" } },
						{1430, new List<string> { "weather.cloud_coverage 0.4" } },
						{1450, new List<string> { "weather.cloud_coverage 0.38" } },
						{1470, new List<string> { "weather.cloud_coverage 0.36" } },
						{1490, new List<string> { "weather.cloud_coverage 0.34" } },
						{1510, new List<string> { "weather.cloud_coverage 0.32" } },
						{1530, new List<string> { "weather.cloud_coverage 0.3" } },
						{1550, new List<string> { "weather.cloud_coverage 0.28" } },
						{1570, new List<string> { "weather.cloud_coverage 0.26", "weather.cloud_size -1" } },
						{1580, new List<string> { "weather.fog 0.1" } },
						{1590, new List<string> { "weather.cloud_coverage 0.24" } },
						{1600, new List<string> { "weather.fog 0.08" } },
						{1610, new List<string> { "weather.cloud_coverage 0.22" } },
						{1620, new List<string> { "weather.fog 0.06" } },
						{1630, new List<string> { "weather.cloud_coverage 0.2" } },
						{1640, new List<string> { "weather.fog 0.04" } },
						{1650, new List<string> { "weather.cloud_coverage 0.18" } },
						{1660, new List<string> { "weather.fog 0.02" } },
						{1670, new List<string> { "weather.cloud_coverage 0.16" } },
						{1680, new List<string> { "weather.fog 0.01" } },
						{1690, new List<string> { "weather.cloud_coverage 0.14" } },
						{1700, new List<string> { "weather.fog 0" } },
						{1710, new List<string> { "weather.cloud_coverage 0.12" } },
						{1720, new List<string> { "weather.cloud_coverage 0.1" } },
						{1730, new List<string> { "weather.cloud_coverage 0.08" } },
						{1740, new List<string> { "weather.cloud_coverage 0.06" } },
						{1750, new List<string> { "weather.cloud_coverage 0.04" } },
						{1760, new List<string> { "weather.cloud_coverage 0.02" } },
                        {1770, new List<string> {"weather.cloud_coverage 0", "weather.reset", "STOP" } },
                    }
                    },
                    {"rain", new Dictionary<int, List<string>>
                    {
                        {1, new List<string> { "weather.cloud_coverage 0.05" } },
                        {30, new List<string> { "weather.cloud_coverage 0.1", "weather.cloud_size 1.25" } },
                        {60, new List<string> { "weather.cloud_coverage 0.15" } },
                        {90, new List<string> { "weather.cloud_coverage 0.2", "weather.cloud_size 1.5" } },
                        {120, new List<string> { "weather.cloud_coverage 0.25" } },
                        {150, new List<string> { "weather.cloud_coverage 0.3" } },
                        {180, new List<string> { "weather.cloud_coverage 0.35" } },
                        {210, new List<string> { "weather.cloud_coverage 0.4" } },
                        {240, new List<string> { "weather.cloud_coverage 0.45" } },
                        {270, new List<string> { "weather.cloud_coverage 0.5" } },
                        {300, new List<string> { "weather.cloud_coverage 0.55" } },
                        {330, new List<string> { "weather.cloud_coverage 0.6", "weather.cloud_attenuation 0.1" } },
                        {340, new List<string> { "weather.rain 0.02" } },
						{360, new List<string> { "weather.cloud_coverage 0.85" } },
						{370, new List<string> { "weather.rain 0.2" } },
                        {390, new List<string> { "weather.fog 0.05" } },
                        {400, new List<string> { "weather.rain 0.3" } },
                        {410, new List<string> { "weather.cloud_coverage 0.9", "weather.cloud_attenuation 0.2" } },
                        {420, new List<string> { "weather.fog 0.1" } },
                        {430, new List<string> { "weather.rain 0.4" } },
                        {450, new List<string> { "weather.fog 0.15" } },
                        {440, new List<string> { "weather.cloud_coverage 0.95", "weather.cloud_sharpness 0.1", "weather.atmosphere_contrast 1.25" } },
                        {460, new List<string> { "weather.rain 0.5" } },
                        {470, new List<string> { "weather.cloud_coverage 1", "weather.cloud_attenuation 0.3" } },
                        {480, new List<string> { "weather.fog 0.2" } },
						{500, new List<string> { "weather.fog 0.25" } },
						{520, new List<string> { "weather.cloud_sharpness 0.2", "weather.atmosphere_contrast 1.5" } },
						{600, new List<string> { "weather.cloud_attenuation 0.4" } },
						{2200, new List<string> { "weather.rain 0.4" } },
						{2230, new List<string> { "weather.rain 0.3" } },
						{2260, new List<string> { "weather.rain 0.2" } },
						{2280, new List<string> { "weather.cloud_coverage 0.95" } },
						{2290, new List<string> { "weather.rain 0.1" } },
						{2295, new List<string> { "weather.cloud_coverage 0.9" } },
						{2310, new List<string> { "weather.cloud_coverage 0.85", "weather.cloud_attenuation 0.3" } },
						{2320, new List<string> { "weather.rain 0.05" } },
						{2340, new List<string> { "weather.cloud_coverage 0.80" } },
						{2350, new List<string> { "weather.rain 0.02" } },
						{2370, new List<string> { "weather.cloud_coverage 0.75" } },
						{2380, new List<string> { "weather.rain 0", "weather.cloud_size 1.25" } },
						{2400, new List<string> { "weather.cloud_coverage 0.7", "weather.cloud_attenuation 0.2" } },
						{2410, new List<string> { "weather.fog 0.2" } },
						{2420, new List<string> { "weather.cloud_coverage 0.65" } },
						{2430, new List<string> { "weather.fog 0.15" } },
						{2440, new List<string> { "weather.cloud_coverage 0.6", "weather.cloud_attenuation 0.1" } },
						{2450, new List<string> { "weather.fog 0.1" } },
						{2460, new List<string> { "weather.cloud_coverage 0.55" } },
						{2470, new List<string> { "weather.fog 0.05" } },
						{2480, new List<string> { "weather.cloud_coverage 0.5" } },
						{2500, new List<string> { "weather.fog 0" } },
						{2510, new List<string> { "weather.cloud_coverage 0.45", "weather.cloud_sharpness 0.1", "weather.atmosphere_contrast 1.25" } },
						{2530, new List<string> { "weather.cloud_coverage 0.4" } },
						{2550, new List<string> { "weather.cloud_coverage 0.35" } },
						{2570, new List<string> { "weather.cloud_coverage 0.3", "weather.cloud_attenuation -1" } },
						{2590, new List<string> { "weather.cloud_coverage 0.25" } },
						{2610, new List<string> { "weather.cloud_coverage 0.20", "weather.cloud_size -1" } },
						{2630, new List<string> { "weather.cloud_coverage 0.15", "weather.cloud_sharpness -1", "weather.atmosphere_contrast -1" } },
						{2650, new List<string> { "weather.cloud_coverage 0.1" } },
						{2670, new List<string> { "weather.cloud_coverage 0.05" } },
                        {2690, new List<string> {"weather.cloud_coverage 0", "weather.reset", "STOP" } },
                    }
                    },
                    {"heavyrain", new Dictionary<int, List<string>>
                    {
                        {1, new List<string> { "weather.cloud_coverage 0.05" } },
                        {30, new List<string> { "weather.cloud_coverage 0.1", "weather.cloud_size 1.25" } },
                        {60, new List<string> { "weather.cloud_coverage 0.15" } },
                        {90, new List<string> { "weather.cloud_coverage 0.2", "weather.cloud_size 1.5" } },
                        {120, new List<string> { "weather.cloud_coverage 0.25" } },
                        {150, new List<string> { "weather.cloud_coverage 0.3", "weather.cloud_size 1.75" } },
                        {180, new List<string> { "weather.cloud_coverage 0.35", "weather.cloud_sharpness 0.1", "weather.atmosphere_contrast 1.38" } },
                        {210, new List<string> { "weather.cloud_coverage 0.4", "weather.cloud_size 2.0" } },
                        {240, new List<string> { "weather.cloud_coverage 0.45" } },
                        {270, new List<string> { "weather.cloud_coverage 0.5", "weather.cloud_attenuation 0.15" } },
                        {300, new List<string> { "weather.cloud_coverage 0.55" } },
                        {330, new List<string> { "weather.cloud_coverage 0.6" } },
                        {340, new List<string> { "weather.rain 0.02", "weather.cloud_sharpness 0.2", "weather.atmosphere_contrast 1.75" } },
						{360, new List<string> { "weather.cloud_coverage 0.85", "weather.cloud_attenuation 0.3" } },
						{370, new List<string> { "weather.rain 0.2" } },
                        {390, new List<string> { "weather.fog 0.05", "weather.cloud_attenuation 0.4" } },
                        {400, new List<string> { "weather.rain 0.3" } },
                        {410, new List<string> { "weather.cloud_coverage 0.9" } },
                        {420, new List<string> { "weather.fog 0.1" } },
                        {430, new List<string> { "weather.rain 0.4" } },
                        {450, new List<string> { "weather.fog 0.15" } },
                        {440, new List<string> { "weather.cloud_coverage 0.95", "weather.cloud_attenuation 0.5" } },
                        {460, new List<string> { "weather.rain 0.5" } },
                        {470, new List<string> { "weather.cloud_coverage 1" } },
                        {480, new List<string> { "weather.fog 0.2", "weather.cloud_sharpness 0.3" } },
						{500, new List<string> { "weather.fog 0.25" } },
						{520, new List<string> { "weather.fog 0.3" } },
						{540, new List<string> { "weather.fog 0.35" } },
						{560, new List<string> { "weather.fog 0.4" } },
						{580, new List<string> { "weather.fog 0.45" } },
						{600, new List<string> { "weather.fog 0.5" } },
						{2800, new List<string> { "weather.rain 0.4", "weather.cloud_attenuation 0.4" } },
						{2830, new List<string> { "weather.rain 0.3" } },
						{2860, new List<string> { "weather.rain 0.2" } },
						{2880, new List<string> { "weather.cloud_coverage 0.95" } },
						{2890, new List<string> { "weather.rain 0.1", "weather.cloud_attenuation 0.3" } },
						{2895, new List<string> { "weather.cloud_coverage 0.9" } },
						{2900, new List<string> { "weather.fog 0.45" } },
						{2910, new List<string> { "weather.cloud_coverage 0.85" } },
						{2920, new List<string> { "weather.rain 0.05", "weather.cloud_attenuation 0.2" } },
						{2930, new List<string> { "weather.fog 0.4", "weather.cloud_sharpness 0.2" } },
						{2940, new List<string> { "weather.cloud_coverage 0.80", "weather.atmosphere_rayleigh 1.5" } },
						{2950, new List<string> { "weather.rain 0.02" } },
						{2960, new List<string> { "weather.fog 0.35" } },
						{2970, new List<string> { "weather.cloud_coverage 0.75", "weather.cloud_attenuation 0.1" } },
						{2980, new List<string> { "weather.rain 0" } },
						{2990, new List<string> { "weather.fog 0.25", "weather.rainbow 1" } },
						{3000, new List<string> { "weather.cloud_coverage 0.7" } },
						{3010, new List<string> { "weather.fog 0.2", "weather.cloud_size 1.75" } },
						{3020, new List<string> { "weather.cloud_coverage 0.65" } },
						{3030, new List<string> { "weather.fog 0.15" } },
						{3040, new List<string> { "weather.cloud_coverage 0.6", "weather.cloud_attenuation -1" } },
						{3050, new List<string> { "weather.fog 0.1" } },
						{3060, new List<string> { "weather.cloud_coverage 0.55" } },
						{3070, new List<string> { "weather.fog 0.05" } },
						{3080, new List<string> { "weather.cloud_coverage 0.5" } },
						{3100, new List<string> { "weather.fog 0" } },
						{3110, new List<string> { "weather.cloud_coverage 0.45" } },
						{3130, new List<string> { "weather.cloud_coverage 0.4", "weather.atmosphere_rayleigh -1", "weather.cloud_size 1.5" } },
						{3150, new List<string> { "weather.cloud_coverage 0.35" } },
						{3170, new List<string> { "weather.cloud_coverage 0.3", "weather.cloud_sharpness 0.1", "weather.atmosphere_contrast 1.38" } },
						{3190, new List<string> { "weather.cloud_coverage 0.25", "weather.cloud_size 1.25" } },
						{3210, new List<string> { "weather.cloud_coverage 0.20", "weather.cloud_size -1" } },
						{3230, new List<string> { "weather.cloud_coverage 0.15" } },
						{3250, new List<string> { "weather.cloud_coverage 0.1", "weather.cloud_sharpness -1", "weather.atmosphere_contrast -1" } },
						{3270, new List<string> { "weather.cloud_coverage 0.05", "weather.rainbow -1" } },
                        {3290, new List<string> {"weather.cloud_coverage 0", "weather.reset", "STOP" } },
                    }
                    },
					{"lightfog", new Dictionary<int, List<string>>
                    {
                        {1, new List<string> {"weather.cloud_coverage 0.02" } },
						{10, new List<string> {"weather.cloud_coverage 0.04" } },
						{20, new List<string> {"weather.cloud_coverage 0.06" } },
						{30, new List<string> {"weather.cloud_coverage 0.08" } },
						{40, new List<string> {"weather.cloud_coverage 0.1" } },
						{50, new List<string> {"weather.cloud_coverage 0.12" } },
						{60, new List<string> {"weather.cloud_coverage 0.14" } },
						{70, new List<string> {"weather.cloud_coverage 0.16" } },
						{80, new List<string> {"weather.cloud_coverage 0.18" } },
						{90, new List<string> {"weather.cloud_coverage 0.2" } },
						{100, new List<string> {"weather.cloud_coverage 0.22" } },
						{110, new List<string> {"weather.cloud_coverage 0.24" } },
						{120, new List<string> {"weather.cloud_coverage 0.26" } },
						{130, new List<string> {"weather.cloud_coverage 0.28" } },
						{140, new List<string> {"weather.cloud_coverage 0.3" } },
						{150, new List<string> {"weather.cloud_coverage 0.32" } },
						{160, new List<string> {"weather.cloud_coverage 0.34" } },
						{170, new List<string> {"weather.cloud_coverage 0.36" } },
						{180, new List<string> {"weather.cloud_coverage 0.38" } },
						{190, new List<string> {"weather.cloud_coverage 0.4" } },
						{200, new List<string> {"weather.cloud_coverage 0.42" } },
						{210, new List<string> {"weather.cloud_coverage 0.44" } },
						{220, new List<string> {"weather.cloud_coverage 0.46" } },
						{230, new List<string> {"weather.cloud_coverage 0.48" } },
						{240, new List<string> {"weather.cloud_coverage 0.5", "weather.cloud_attenuation 0.1", "weather.atmosphere_contrast 0.9", "weather.cloud_coloring 0.8" } },
						{250, new List<string> {"weather.fog 0.02" } },
						{270, new List<string> {"weather.fog 0.04" } },
						{290, new List<string> {"weather.fog 0.06" } },
						{310, new List<string> {"weather.fog 0.08" } },
						{330, new List<string> {"weather.fog 0.1" } },
						{350, new List<string> {"weather.fog 0.12" } },
						{370, new List<string> {"weather.fog 0.14" } },
						{390, new List<string> {"weather.fog 0.16" } },
						{410, new List<string> {"weather.fog 0.18" } },
						{430, new List<string> {"weather.fog 0.20" } },
						{450, new List<string> {"weather.fog 0.22" } },
						{470, new List<string> {"weather.fog 0.24" } },
						{490, new List<string> {"weather.fog 0.25" } },
						{1200, new List<string> {"weather.fog 0.24" } },
						{1220, new List<string> {"weather.fog 0.22" } },
						{1240, new List<string> {"weather.fog 0.2" } },
						{1260, new List<string> {"weather.fog 0.18" } },
						{1280, new List<string> {"weather.fog 0.16" } },
						{1300, new List<string> {"weather.fog 0.14" } },
						{1320, new List<string> {"weather.fog 0.12" } },
						{1340, new List<string> {"weather.fog 0.1" } },
						{1360, new List<string> {"weather.fog 0.08" } },
						{1380, new List<string> {"weather.fog 0.06" } },
						{1400, new List<string> {"weather.fog 0.04" } },
						{1420, new List<string> {"weather.fog 0.02" } },
						{1430, new List<string> {"weather.cloud_coverage 0.5", "weather.cloud_attenuation -1", "weather.atmosphere_contrast -1", "weather.cloud_coloring -1" } },
						{1440, new List<string> {"weather.fog 0" } },
						{1450, new List<string> {"weather.cloud_coverage 0.48" } },
						{1460, new List<string> {"weather.cloud_coverage 0.46" } },
						{1470, new List<string> {"weather.cloud_coverage 0.44" } },
						{1480, new List<string> {"weather.cloud_coverage 0.42" } },
						{1490, new List<string> {"weather.cloud_coverage 0.4" } },
						{1500, new List<string> {"weather.cloud_coverage 0.38" } },
						{1510, new List<string> {"weather.cloud_coverage 0.36" } },
						{1520, new List<string> {"weather.cloud_coverage 0.34" } },
						{1530, new List<string> {"weather.cloud_coverage 0.32" } },
						{1540, new List<string> {"weather.cloud_coverage 0.3" } },
						{1550, new List<string> {"weather.cloud_coverage 0.28" } },
						{1560, new List<string> {"weather.cloud_coverage 0.26" } },
						{1570, new List<string> {"weather.cloud_coverage 0.24" } },
						{1580, new List<string> {"weather.cloud_coverage 0.22" } },
						{1590, new List<string> {"weather.cloud_coverage 0.2" } },
						{1600, new List<string> {"weather.cloud_coverage 0.18" } },
						{1610, new List<string> {"weather.cloud_coverage 0.16" } },
						{1620, new List<string> {"weather.cloud_coverage 0.14" } },
						{1630, new List<string> {"weather.cloud_coverage 0.12" } },
						{1640, new List<string> {"weather.cloud_coverage 0.1" } },
						{1650, new List<string> {"weather.cloud_coverage 0.08" } },
						{1660, new List<string> {"weather.cloud_coverage 0.06" } },
						{1670, new List<string> {"weather.cloud_coverage 0.04" } },
						{1680, new List<string> {"weather.cloud_coverage 0.02" } },						
                        {1690, new List<string> {"weather.cloud_coverage 0", "weather.reset", "STOP" } },
                    }
                    },
					{"fog", new Dictionary<int, List<string>>
                    {
                        {1, new List<string> {"weather.cloud_coverage 0.02" } },
						{10, new List<string> {"weather.cloud_coverage 0.04" } },
						{20, new List<string> {"weather.cloud_coverage 0.06" } },
						{30, new List<string> {"weather.cloud_coverage 0.08" } },
						{40, new List<string> {"weather.cloud_coverage 0.1" } },
						{50, new List<string> {"weather.cloud_coverage 0.12" } },
						{60, new List<string> {"weather.cloud_coverage 0.14" } },
						{70, new List<string> {"weather.cloud_coverage 0.16" } },
						{80, new List<string> {"weather.cloud_coverage 0.18" } },
						{90, new List<string> {"weather.cloud_coverage 0.2" } },
						{100, new List<string> {"weather.cloud_coverage 0.22" } },
						{110, new List<string> {"weather.cloud_coverage 0.24" } },
						{120, new List<string> {"weather.cloud_coverage 0.26" } },
						{130, new List<string> {"weather.cloud_coverage 0.28" } },
						{140, new List<string> {"weather.cloud_coverage 0.3", "weather.cloud_attenuation 0.1", "weather.atmosphere_contrast 0.9", "weather.cloud_coloring 0.8" } },
						{150, new List<string> {"weather.cloud_coverage 0.32" } },
						{160, new List<string> {"weather.cloud_coverage 0.34" } },
						{170, new List<string> {"weather.cloud_coverage 0.36" } },
						{180, new List<string> {"weather.cloud_coverage 0.38" } },
						{190, new List<string> {"weather.cloud_coverage 0.4" } },
						{200, new List<string> {"weather.cloud_coverage 0.42" } },
						{210, new List<string> {"weather.cloud_coverage 0.44" } },
						{220, new List<string> {"weather.cloud_coverage 0.46" } },
						{230, new List<string> {"weather.cloud_coverage 0.48" } },
						{240, new List<string> {"weather.cloud_coverage 0.5" } },
						{250, new List<string> {"weather.fog 0.02" } },
						{260, new List<string> {"weather.cloud_coverage 0.52" } },
						{270, new List<string> {"weather.fog 0.04" } },
						{280, new List<string> {"weather.cloud_coverage 0.54" } },
						{290, new List<string> {"weather.fog 0.06" } },
						{300, new List<string> {"weather.cloud_coverage 0.56" } },
						{310, new List<string> {"weather.fog 0.08" } },
						{320, new List<string> {"weather.cloud_coverage 0.58" } },
						{330, new List<string> {"weather.fog 0.1" } },
						{340, new List<string> {"weather.cloud_coverage 0.6", "weather.cloud_attenuation 0.2", "weather.atmosphere_contrast 0.8", "weather.cloud_coloring 0.6" } },
						{350, new List<string> {"weather.fog 0.12" } },
						{360, new List<string> {"weather.cloud_coverage 0.62" } },
						{370, new List<string> {"weather.fog 0.14" } },
						{380, new List<string> {"weather.cloud_coverage 0.64" } },
						{390, new List<string> {"weather.fog 0.16" } },
						{400, new List<string> {"weather.cloud_coverage 0.66" } },
						{410, new List<string> {"weather.fog 0.18" } },
						{420, new List<string> {"weather.cloud_coverage 0.68" } },
						{430, new List<string> {"weather.fog 0.20" } },
						{440, new List<string> {"weather.cloud_coverage 0.7" } },
						{450, new List<string> {"weather.fog 0.22" } },
						{460, new List<string> {"weather.cloud_coverage 0.72" } },
						{470, new List<string> {"weather.fog 0.24" } },
						{480, new List<string> {"weather.cloud_coverage 0.74" } },
						{490, new List<string> {"weather.fog 0.26" } },
						{510, new List<string> {"weather.fog 0.28" } },
						{530, new List<string> {"weather.fog 0.3" } },
						{550, new List<string> {"weather.fog 0.32" } },
						{570, new List<string> {"weather.fog 0.34" } },
						{590, new List<string> {"weather.fog 0.36" } },
						{610, new List<string> {"weather.fog 0.38" } },
						{630, new List<string> {"weather.fog 0.4" } },
						{2440, new List<string> {"weather.fog 0.4" } },
						{2460, new List<string> {"weather.fog 0.38" } },
						{2480, new List<string> {"weather.fog 0.36" } },
						{2500, new List<string> {"weather.fog 0.34" } },
						{2520, new List<string> {"weather.fog 0.32" } },
						{2540, new List<string> {"weather.fog 0.3" } },
						{2560, new List<string> {"weather.fog 0.28" } },
						{2580, new List<string> {"weather.fog 0.26" } },
						{2590, new List<string> {"weather.cloud_coverage 0.74" } },
						{2600, new List<string> {"weather.fog 0.24" } },
						{2610, new List<string> {"weather.cloud_coverage 0.72" } },
						{2620, new List<string> {"weather.fog 0.22" } },
						{2630, new List<string> {"weather.cloud_coverage 0.7" } },
						{2640, new List<string> {"weather.fog 0.2" } },
						{2650, new List<string> {"weather.cloud_coverage 0.68" } },
						{2660, new List<string> {"weather.fog 0.18" } },
						{2670, new List<string> {"weather.cloud_coverage 0.66" } },
						{2680, new List<string> {"weather.fog 0.16" } },
						{2690, new List<string> {"weather.cloud_coverage 0.64" } },
						{2700, new List<string> {"weather.fog 0.14" } },
						{2710, new List<string> {"weather.cloud_coverage 0.62" } },
						{2720, new List<string> {"weather.fog 0.12" } },
						{2730, new List<string> {"weather.cloud_coverage 0.6", "weather.cloud_attenuation 0.1", "weather.atmosphere_contrast 0.9", "weather.cloud_coloring 0.8" } },
						{2740, new List<string> {"weather.fog 0.1" } },
						{2750, new List<string> {"weather.cloud_coverage 0.58" } },
						{2760, new List<string> {"weather.fog 0.08" } },
						{2770, new List<string> {"weather.cloud_coverage 0.56" } },
						{2780, new List<string> {"weather.fog 0.06" } },
						{2790, new List<string> {"weather.cloud_coverage 0.54" } },
						{2800, new List<string> {"weather.fog 0.04" } },
						{2810, new List<string> {"weather.cloud_coverage 0.52" } },
						{2820, new List<string> {"weather.fog 0.02" } },
						{2830, new List<string> {"weather.cloud_coverage 0.5" } },
						{2840, new List<string> {"weather.fog 0" } },
						{2850, new List<string> {"weather.cloud_coverage 0.48" } },
						{2860, new List<string> {"weather.cloud_coverage 0.46" } },
						{2870, new List<string> {"weather.cloud_coverage 0.44" } },
						{2880, new List<string> {"weather.cloud_coverage 0.42" } },
						{2890, new List<string> {"weather.cloud_coverage 0.4" } },
						{2900, new List<string> {"weather.cloud_coverage 0.38" } },
						{2910, new List<string> {"weather.cloud_coverage 0.36" } },
						{2920, new List<string> {"weather.cloud_coverage 0.34" } },
						{2930, new List<string> {"weather.cloud_coverage 0.32" } },
						{2940, new List<string> {"weather.cloud_coverage 0.3", "weather.cloud_attenuation -1", "weather.atmosphere_contrast -1", "weather.cloud_coloring -1" } },
						{2950, new List<string> {"weather.cloud_coverage 0.28" } },
						{2960, new List<string> {"weather.cloud_coverage 0.26" } },
						{2970, new List<string> {"weather.cloud_coverage 0.24" } },
						{2980, new List<string> {"weather.cloud_coverage 0.22" } },
						{2990, new List<string> {"weather.cloud_coverage 0.2" } },
						{3000, new List<string> {"weather.cloud_coverage 0.18" } },
						{3010, new List<string> {"weather.cloud_coverage 0.16" } },
						{3020, new List<string> {"weather.cloud_coverage 0.14" } },
						{3030, new List<string> {"weather.cloud_coverage 0.12" } },
						{3040, new List<string> {"weather.cloud_coverage 0.1" } },
						{3050, new List<string> {"weather.cloud_coverage 0.08" } },
						{3060, new List<string> {"weather.cloud_coverage 0.06" } },
						{3070, new List<string> {"weather.cloud_coverage 0.04" } },
						{3080, new List<string> {"weather.cloud_coverage 0.02" } },						
                        {3090, new List<string> {"weather.cloud_coverage 0", "weather.reset", "STOP" } },
                    }
                    },
					{"dust", new Dictionary<int, List<string>>
                    {
                        {1, new List<string> {"weather.cloud_coverage 0.02" } },
						{10, new List<string> {"weather.cloud_coverage 0.04" } },
						{20, new List<string> {"weather.cloud_coverage 0.06" } },
						{30, new List<string> {"weather.cloud_coverage 0.08" } },
						{40, new List<string> {"weather.cloud_coverage 0.1", "weather.cloud_size 0.9" } },
						{50, new List<string> {"weather.cloud_coverage 0.12" } },
						{60, new List<string> {"weather.cloud_coverage 0.14" } },
						{70, new List<string> {"weather.cloud_coverage 0.16" } },
						{80, new List<string> {"weather.cloud_coverage 0.18" } },
						{90, new List<string> {"weather.cloud_coverage 0.2", "weather.cloud_size 0.8" } },
						{100, new List<string> {"weather.cloud_coverage 0.22" } },
						{110, new List<string> {"weather.cloud_coverage 0.24" } },
						{120, new List<string> {"weather.cloud_coverage 0.26" } },
						{130, new List<string> {"weather.cloud_coverage 0.28" } },
						{140, new List<string> {"weather.cloud_coverage 0.3", "weather.atmosphere_rayleigh 1.5", "weather.atmosphere_contrast 1.5", "weather.cloud_size 0.7" } },
						{150, new List<string> {"weather.cloud_coverage 0.32" } },
						{160, new List<string> {"weather.cloud_coverage 0.34" } },
						{170, new List<string> {"weather.cloud_coverage 0.36" } },
						{180, new List<string> {"weather.cloud_coverage 0.38" } },
						{190, new List<string> {"weather.cloud_coverage 0.4" } },
						{200, new List<string> {"weather.cloud_coverage 0.42" } },
						{210, new List<string> {"weather.cloud_coverage 0.44" } },
						{220, new List<string> {"weather.cloud_coverage 0.46" } },
						{230, new List<string> {"weather.cloud_coverage 0.48" } },
						{240, new List<string> {"weather.cloud_coverage 0.5", "weather.atmosphere_rayleigh 2.0", "weather.atmosphere_contrast 2.0" } },
						{250, new List<string> {"weather.fog 0.02" } },
						{270, new List<string> {"weather.fog 0.04" } },
						{290, new List<string> {"weather.fog 0.06" } },
						{310, new List<string> {"weather.fog 0.08" } },
						{330, new List<string> {"weather.fog 0.1" } },
						{350, new List<string> {"weather.fog 0.12" } },
						{370, new List<string> {"weather.fog 0.14" } },
						{390, new List<string> {"weather.fog 0.16" } },
						{410, new List<string> {"weather.fog 0.18", "weather.atmosphere_rayleigh 3.0" } },
						{430, new List<string> {"weather.fog 0.20" } },
						{450, new List<string> {"weather.fog 0.22" } },
						{470, new List<string> {"weather.fog 0.24" } },
						{490, new List<string> {"weather.fog 0.26" } },
						{510, new List<string> {"weather.fog 0.28" } },
						{530, new List<string> {"weather.fog 0.3", "weather.atmosphere_rayleigh 4.0" } },
						{2560, new List<string> {"weather.fog 0.28" } },
						{2580, new List<string> {"weather.fog 0.26" } },
						{2600, new List<string> {"weather.fog 0.24" } },
						{2620, new List<string> {"weather.fog 0.22" } },
						{2640, new List<string> {"weather.fog 0.2" } },
						{2660, new List<string> {"weather.fog 0.18", "weather.atmosphere_rayleigh 3.0" } },
						{2680, new List<string> {"weather.fog 0.16" } },
						{2700, new List<string> {"weather.fog 0.14" } },
						{2720, new List<string> {"weather.fog 0.12" } },
						{2740, new List<string> {"weather.fog 0.1" } },
						{2760, new List<string> {"weather.fog 0.08" } },
						{2780, new List<string> {"weather.fog 0.06" } },
						{2800, new List<string> {"weather.fog 0.04", "weather.atmosphere_rayleigh 2.0" } },
						{2820, new List<string> {"weather.fog 0.02" } },
						{2830, new List<string> {"weather.cloud_coverage 0.5" } },
						{2840, new List<string> {"weather.fog 0" } },
						{2850, new List<string> {"weather.cloud_coverage 0.48" } },
						{2860, new List<string> {"weather.cloud_coverage 0.46" } },
						{2870, new List<string> {"weather.cloud_coverage 0.44" } },
						{2880, new List<string> {"weather.cloud_coverage 0.42" } },
						{2890, new List<string> {"weather.cloud_coverage 0.4", "weather.atmosphere_rayleigh 1.5", "weather.atmosphere_contrast 1.5" } },
						{2900, new List<string> {"weather.cloud_coverage 0.38" } },
						{2910, new List<string> {"weather.cloud_coverage 0.36" } },
						{2920, new List<string> {"weather.cloud_coverage 0.34" } },
						{2930, new List<string> {"weather.cloud_coverage 0.32" } },
						{2940, new List<string> {"weather.cloud_coverage 0.3", "weather.atmosphere_rayleigh -1", "weather.atmosphere_contrast -1", "weather.cloud_size 0.8" } },
						{2950, new List<string> {"weather.cloud_coverage 0.28" } },
						{2960, new List<string> {"weather.cloud_coverage 0.26" } },
						{2970, new List<string> {"weather.cloud_coverage 0.24" } },
						{2980, new List<string> {"weather.cloud_coverage 0.22" } },
						{2990, new List<string> {"weather.cloud_coverage 0.2", "weather.cloud_size 0.9" } },
						{3000, new List<string> {"weather.cloud_coverage 0.18" } },
						{3010, new List<string> {"weather.cloud_coverage 0.16" } },
						{3020, new List<string> {"weather.cloud_coverage 0.14" } },
						{3030, new List<string> {"weather.cloud_coverage 0.12" } },
						{3040, new List<string> {"weather.cloud_coverage 0.1", "weather.cloud_size -1" } },
						{3050, new List<string> {"weather.cloud_coverage 0.08" } },
						{3060, new List<string> {"weather.cloud_coverage 0.06" } },
						{3070, new List<string> {"weather.cloud_coverage 0.04" } },
						{3080, new List<string> {"weather.cloud_coverage 0.02" } },						
                        {3090, new List<string> {"weather.cloud_coverage 0", "weather.reset", "STOP" } },
                    }
                    },
					{"heavyfog", new Dictionary<int, List<string>>
                    {
                        {1, new List<string> {"weather.cloud_coverage 0.02" } },
						{10, new List<string> {"weather.cloud_coverage 0.04" } },
						{20, new List<string> {"weather.cloud_coverage 0.06" } },
						{30, new List<string> {"weather.cloud_coverage 0.08" } },
						{40, new List<string> {"weather.cloud_coverage 0.1" } },
						{50, new List<string> {"weather.cloud_coverage 0.12" } },
						{60, new List<string> {"weather.cloud_coverage 0.14" } },
						{70, new List<string> {"weather.cloud_coverage 0.16" } },
						{80, new List<string> {"weather.cloud_coverage 0.18" } },
						{90, new List<string> {"weather.cloud_coverage 0.2" } },
						{100, new List<string> {"weather.cloud_coverage 0.22" } },
						{110, new List<string> {"weather.cloud_coverage 0.24" } },
						{120, new List<string> {"weather.cloud_coverage 0.26" } },
						{130, new List<string> {"weather.cloud_coverage 0.28" } },
						{140, new List<string> {"weather.cloud_coverage 0.3", "weather.cloud_attenuation 1.125", "weather.atmosphere_contrast 0.9", "weather.cloud_coloring 0.8" } },
						{150, new List<string> {"weather.cloud_coverage 0.32" } },
						{160, new List<string> {"weather.cloud_coverage 0.34" } },
						{170, new List<string> {"weather.cloud_coverage 0.36" } },
						{180, new List<string> {"weather.cloud_coverage 0.38" } },
						{190, new List<string> {"weather.cloud_coverage 0.4" } },
						{200, new List<string> {"weather.cloud_coverage 0.42" } },
						{210, new List<string> {"weather.cloud_coverage 0.44" } },
						{220, new List<string> {"weather.cloud_coverage 0.46" } },
						{230, new List<string> {"weather.cloud_coverage 0.48" } },
						{240, new List<string> {"weather.cloud_coverage 0.5", "weather.cloud_attenuation 1.25", "weather.atmosphere_contrast 0.8", "weather.cloud_coloring 0.6" } },
						{250, new List<string> {"weather.fog 0.02" } },
						{260, new List<string> {"weather.cloud_coverage 0.52" } },
						{270, new List<string> {"weather.fog 0.04" } },
						{280, new List<string> {"weather.cloud_coverage 0.54" } },
						{290, new List<string> {"weather.fog 0.06" } },
						{300, new List<string> {"weather.cloud_coverage 0.56" } },
						{310, new List<string> {"weather.fog 0.08" } },
						{320, new List<string> {"weather.cloud_coverage 0.58" } },
						{330, new List<string> {"weather.fog 0.1" } },
						{340, new List<string> {"weather.cloud_coverage 0.6" } },
						{350, new List<string> {"weather.fog 0.12" } },
						{360, new List<string> {"weather.cloud_coverage 0.62" } },
						{370, new List<string> {"weather.fog 0.14" } },
						{380, new List<string> {"weather.cloud_coverage 0.64" } },
						{390, new List<string> {"weather.fog 0.16" } },
						{400, new List<string> {"weather.cloud_coverage 0.66" } },
						{410, new List<string> {"weather.fog 0.18" } },
						{420, new List<string> {"weather.cloud_coverage 0.68" } },
						{430, new List<string> {"weather.fog 0.20" } },
						{440, new List<string> {"weather.cloud_coverage 0.7" } },
						{450, new List<string> {"weather.fog 0.22" } },
						{460, new List<string> {"weather.cloud_coverage 0.72" } },
						{470, new List<string> {"weather.fog 0.24" } },
						{480, new List<string> {"weather.cloud_coverage 0.74", "weather.cloud_attenuation 1.5", "weather.atmosphere_contrast 0.4", "weather.cloud_coloring 0.4" } },
						{490, new List<string> {"weather.fog 0.26" } },
						{500, new List<string> {"weather.cloud_coverage 0.76" } },
						{510, new List<string> {"weather.fog 0.28" } },
						{520, new List<string> {"weather.cloud_coverage 0.78" } },
						{530, new List<string> {"weather.fog 0.3" } },
						{540, new List<string> {"weather.cloud_coverage 0.8" } },
						{550, new List<string> {"weather.fog 0.32" } },
						{560, new List<string> {"weather.cloud_coverage 0.82" } },
						{570, new List<string> {"weather.fog 0.34" } },
						{580, new List<string> {"weather.cloud_coverage 0.84" } },
						{590, new List<string> {"weather.fog 0.36" } },
						{600, new List<string> {"weather.cloud_coverage 0.86" } },
						{610, new List<string> {"weather.fog 0.38" } },
						{620, new List<string> {"weather.cloud_coverage 0.88" } },
						{630, new List<string> {"weather.fog 0.4" } },
						{640, new List<string> {"weather.cloud_coverage 0.9" } },
						{650, new List<string> {"weather.fog 0.42" } },
						{660, new List<string> {"weather.cloud_coverage 0.92" } },
						{670, new List<string> {"weather.fog 0.44" } },
						{680, new List<string> {"weather.cloud_coverage 0.94" } },
						{690, new List<string> {"weather.fog 0.46" } },
						{700, new List<string> {"weather.cloud_coverage 0.96" } },
						{710, new List<string> {"weather.fog 0.48" } },
						{720, new List<string> {"weather.cloud_coverage 0.98" } },
						{730, new List<string> {"weather.fog 0.5" } },
						{740, new List<string> {"weather.cloud_coverage 1" } },
						{750, new List<string> {"weather.fog 0.52" } },
						{760, new List<string> {"weather.fog 0.54" } },
						{780, new List<string> {"weather.fog 0.56" } },
						{790, new List<string> {"weather.fog 0.58" } },
						{800, new List<string> {"weather.fog 0.6" } },
						{810, new List<string> {"weather.fog 0.62" } },
						{820, new List<string> {"weather.fog 0.64" } },
						{830, new List<string> {"weather.fog 0.66" } },
						{840, new List<string> {"weather.fog 0.68" } },
						{850, new List<string> {"weather.fog 0.7" } },
						{860, new List<string> {"weather.fog 0.72" } },
						{870, new List<string> {"weather.fog 0.74" } },
						{880, new List<string> {"weather.fog 0.76" } },
						{2410, new List<string> {"weather.fog 0.76" } },
						{2420, new List<string> {"weather.fog 0.74" } },
						{2430, new List<string> {"weather.fog 0.72" } },
						{2440, new List<string> {"weather.fog 0.7" } },
						{2450, new List<string> {"weather.fog 0.68" } },
						{2460, new List<string> {"weather.fog 0.66" } },
						{2470, new List<string> {"weather.fog 0.64" } },
						{2480, new List<string> {"weather.fog 0.62" } },
						{2490, new List<string> {"weather.fog 0.6" } },
						{2500, new List<string> {"weather.fog 0.58" } },
						{2510, new List<string> {"weather.fog 0.56" } },
						{2520, new List<string> {"weather.fog 0.54" } },
						{2530, new List<string> {"weather.fog 0.52" } },
						{2540, new List<string> {"weather.fog 0.5" } },
						{2550, new List<string> {"weather.cloud_coverage 0.98" } },
						{2560, new List<string> {"weather.fog 0.48" } },
						{2570, new List<string> {"weather.cloud_coverage 0.96" } },
						{2580, new List<string> {"weather.fog 0.46" } },
						{2590, new List<string> {"weather.cloud_coverage 0.94" } },
						{2600, new List<string> {"weather.fog 0.44" } },
						{2610, new List<string> {"weather.cloud_coverage 0.92" } },
						{2620, new List<string> {"weather.fog 0.42" } },
						{2630, new List<string> {"weather.cloud_coverage 0.9" } },
						{2640, new List<string> {"weather.fog 0.4" } },
						{2650, new List<string> {"weather.cloud_coverage 0.88" } },
						{2660, new List<string> {"weather.fog 0.38" } },
						{2670, new List<string> {"weather.cloud_coverage 0.86" } },
						{2680, new List<string> {"weather.fog 0.36" } },
						{2690, new List<string> {"weather.cloud_coverage 0.84" } },
						{2700, new List<string> {"weather.fog 0.34" } },
						{2710, new List<string> {"weather.cloud_coverage 0.82" } },
						{2720, new List<string> {"weather.fog 0.32" } },
						{2730, new List<string> {"weather.cloud_coverage 0.8" } },
						{2740, new List<string> {"weather.fog 0.3" } },
						{2750, new List<string> {"weather.cloud_coverage 0.78" } },
						{2760, new List<string> {"weather.fog 0.28" } },
						{2770, new List<string> {"weather.cloud_coverage 0.76", "weather.cloud_attenuation 1.25", "weather.atmosphere_contrast 0.8", "weather.cloud_coloring 0.6" } },
						{2780, new List<string> {"weather.fog 0.26" } },
						{2790, new List<string> {"weather.cloud_coverage 0.74" } },
						{2800, new List<string> {"weather.fog 0.24" } },
						{2810, new List<string> {"weather.cloud_coverage 0.72" } },
						{2820, new List<string> {"weather.fog 0.22" } },
						{2830, new List<string> {"weather.cloud_coverage 0.7" } },
						{2840, new List<string> {"weather.fog 0.2" } },
						{2850, new List<string> {"weather.cloud_coverage 0.68" } },
						{2860, new List<string> {"weather.fog 0.18" } },
						{2870, new List<string> {"weather.cloud_coverage 0.66" } },
						{2880, new List<string> {"weather.fog 0.16" } },
						{2890, new List<string> {"weather.cloud_coverage 0.64" } },
						{2900, new List<string> {"weather.fog 0.14" } },
						{2910, new List<string> {"weather.cloud_coverage 0.62" } },
						{2920, new List<string> {"weather.fog 0.12" } },
						{2930, new List<string> {"weather.cloud_coverage 0.6" } },
						{2940, new List<string> {"weather.fog 0.1" } },
						{2950, new List<string> {"weather.cloud_coverage 0.58" } },
						{2960, new List<string> {"weather.fog 0.08" } },
						{2970, new List<string> {"weather.cloud_coverage 0.56" } },
						{2980, new List<string> {"weather.fog 0.06" } },
						{2990, new List<string> {"weather.cloud_coverage 0.54" } },
						{3000, new List<string> {"weather.fog 0.04" } },
						{3010, new List<string> {"weather.cloud_coverage 0.52" } },
						{3020, new List<string> {"weather.fog 0.02" } },
						{3030, new List<string> {"weather.cloud_coverage 0.5" } },
						{3040, new List<string> {"weather.fog 0" } },
						{3050, new List<string> {"weather.cloud_coverage 0.48" } },
						{3060, new List<string> {"weather.cloud_coverage 0.46" } },
						{3070, new List<string> {"weather.cloud_coverage 0.44" } },
						{3080, new List<string> {"weather.cloud_coverage 0.42" } },
						{3090, new List<string> {"weather.cloud_coverage 0.4" } },
						{3100, new List<string> {"weather.cloud_coverage 0.38" } },
						{3110, new List<string> {"weather.cloud_coverage 0.36" } },
						{3120, new List<string> {"weather.cloud_coverage 0.34", "weather.cloud_attenuation 0.125", "weather.atmosphere_contrast 0.9", "weather.cloud_coloring 0.8" } },
						{3130, new List<string> {"weather.cloud_coverage 0.32" } },
						{3140, new List<string> {"weather.cloud_coverage 0.3" } },
						{3150, new List<string> {"weather.cloud_coverage 0.28" } },
						{3160, new List<string> {"weather.cloud_coverage 0.26" } },
						{3170, new List<string> {"weather.cloud_coverage 0.24" } },
						{3180, new List<string> {"weather.cloud_coverage 0.22" } },
						{3190, new List<string> {"weather.cloud_coverage 0.2", "weather.cloud_attenuation -1", "weather.atmosphere_contrast -1", "weather.cloud_coloring -1" } },
						{3200, new List<string> {"weather.cloud_coverage 0.18" } },
						{3210, new List<string> {"weather.cloud_coverage 0.16" } },
						{3220, new List<string> {"weather.cloud_coverage 0.14" } },
						{3230, new List<string> {"weather.cloud_coverage 0.12" } },
						{3240, new List<string> {"weather.cloud_coverage 0.1" } },
						{3250, new List<string> {"weather.cloud_coverage 0.08" } },
						{3260, new List<string> {"weather.cloud_coverage 0.06" } },
						{3270, new List<string> {"weather.cloud_coverage 0.04" } },
						{3280, new List<string> {"weather.cloud_coverage 0.02" } },						
                        {3290, new List<string> {"weather.cloud_coverage 0", "weather.reset", "STOP" } },
                    }
                    },
					{"overcast", new Dictionary<int, List<string>>
                    {
                        {1, new List<string> {"weather.cloud_coverage 0.01" } },
						{10, new List<string> {"weather.cloud_coverage 0.02" } },
						{20, new List<string> {"weather.cloud_coverage 0.04" } },
						{30, new List<string> {"weather.cloud_coverage 0.06" } },
						{40, new List<string> {"weather.cloud_coverage 0.08" } },
						{50, new List<string> {"weather.cloud_coverage 0.1" } },
						{60, new List<string> {"weather.cloud_coverage 0.12" } },
						{70, new List<string> {"weather.cloud_coverage 0.14" } },
						{80, new List<string> {"weather.cloud_coverage 0.16" } },
						{90, new List<string> {"weather.cloud_coverage 0.18" } },
						{100, new List<string> {"weather.cloud_coverage 0.2" } },
						{110, new List<string> {"weather.cloud_coverage 0.22" } },
						{120, new List<string> {"weather.cloud_coverage 0.24" } },
						{130, new List<string> {"weather.cloud_coverage 0.26" } },
						{140, new List<string> {"weather.cloud_coverage 0.28" } },
						{150, new List<string> {"weather.cloud_coverage 0.3" } },
						{160, new List<string> {"weather.cloud_coverage 0.32", "weather.cloud_attenuation 0.1", "weather.atmosphere_contrast 0.9" } },
						{170, new List<string> {"weather.cloud_coverage 0.34" } },
						{180, new List<string> {"weather.cloud_coverage 0.36" } },
						{190, new List<string> {"weather.cloud_coverage 0.38" } },
						{200, new List<string> {"weather.cloud_coverage 0.4" } },
						{210, new List<string> {"weather.cloud_coverage 0.42" } },
						{220, new List<string> {"weather.cloud_coverage 0.44" } },
						{230, new List<string> {"weather.cloud_coverage 0.46" } },
						{240, new List<string> {"weather.cloud_coverage 0.48" } },
						{250, new List<string> {"weather.cloud_coverage 0.5" } },
						{260, new List<string> {"weather.cloud_coverage 0.52" } },
						{270, new List<string> {"weather.cloud_coverage 0.54" } },
						{280, new List<string> {"weather.cloud_coverage 0.56" } },
						{290, new List<string> {"weather.cloud_coverage 0.58" } },
						{300, new List<string> {"weather.cloud_coverage 0.6" } },
						{310, new List<string> {"weather.cloud_coverage 0.62" } },
						{320, new List<string> {"weather.cloud_coverage 0.64" } },
						{330, new List<string> {"weather.cloud_coverage 0.66", "weather.cloud_attenuation 0.2", "weather.atmosphere_contrast 0.8" } },
						{340, new List<string> {"weather.cloud_coverage 0.68" } },
						{350, new List<string> {"weather.cloud_coverage 0.7" } },
						{360, new List<string> {"weather.cloud_coverage 0.72" } },
						{370, new List<string> {"weather.cloud_coverage 0.74" } },
						{380, new List<string> {"weather.cloud_coverage 0.76" } },
						{390, new List<string> {"weather.cloud_coverage 0.78" } },
						{400, new List<string> {"weather.cloud_coverage 0.8" } },
						{410, new List<string> {"weather.cloud_coverage 0.82" } },
						{420, new List<string> {"weather.cloud_coverage 0.84" } },
						{430, new List<string> {"weather.cloud_coverage 0.86" } },
						{440, new List<string> {"weather.cloud_coverage 0.88" } },
						{450, new List<string> {"weather.cloud_coverage 0.9" } },
						{460, new List<string> {"weather.cloud_coverage 0.92" } },
						{470, new List<string> {"weather.cloud_coverage 0.94" } },
						{480, new List<string> {"weather.cloud_coverage 0.96" } },
						{490, new List<string> {"weather.cloud_coverage 0.98" } },
						{500, new List<string> {"weather.cloud_coverage 1" } },
						{2500, new List<string> {"weather.cloud_coverage 0.98" } },
						{2510, new List<string> {"weather.cloud_coverage 0.96" } },
						{2520, new List<string> {"weather.cloud_coverage 0.94" } },
						{2530, new List<string> {"weather.cloud_coverage 0.92" } },
						{2640, new List<string> {"weather.cloud_coverage 0.9" } },
						{2650, new List<string> {"weather.cloud_coverage 0.88" } },
						{2660, new List<string> {"weather.cloud_coverage 0.86" } },
						{2670, new List<string> {"weather.cloud_coverage 0.84" } },
						{2780, new List<string> {"weather.cloud_coverage 0.82" } },
						{2790, new List<string> {"weather.cloud_coverage 0.8" } },
						{2700, new List<string> {"weather.cloud_coverage 0.78" } },
						{2710, new List<string> {"weather.cloud_coverage 0.76" } },
						{2820, new List<string> {"weather.cloud_coverage 0.74" } },
						{2830, new List<string> {"weather.cloud_coverage 0.72" } },
						{2840, new List<string> {"weather.cloud_coverage 0.7" } },
						{2850, new List<string> {"weather.cloud_coverage 0.68" } },
						{2960, new List<string> {"weather.cloud_coverage 0.66", "weather.cloud_attenuation 0.1", "weather.atmosphere_contrast 0.9" } },
						{2970, new List<string> {"weather.cloud_coverage 0.64" } },
						{2980, new List<string> {"weather.cloud_coverage 0.62" } },
						{2990, new List<string> {"weather.cloud_coverage 0.6" } },
						{3300, new List<string> {"weather.cloud_coverage 0.58" } },
						{3310, new List<string> {"weather.cloud_coverage 0.56" } },
						{3320, new List<string> {"weather.cloud_coverage 0.54" } },
						{3330, new List<string> {"weather.cloud_coverage 0.52" } },
						{3340, new List<string> {"weather.cloud_coverage 0.5" } },
						{3350, new List<string> {"weather.cloud_coverage 0.48" } },
						{3360, new List<string> {"weather.cloud_coverage 0.46" } },
						{3370, new List<string> {"weather.cloud_coverage 0.44" } },
						{3380, new List<string> {"weather.cloud_coverage 0.42" } },
						{3390, new List<string> {"weather.cloud_coverage 0.4" } },
						{3400, new List<string> {"weather.cloud_coverage 0.38" } },
						{3410, new List<string> {"weather.cloud_coverage 0.36" } },
						{3420, new List<string> {"weather.cloud_coverage 0.34" } },
						{3430, new List<string> {"weather.cloud_coverage 0.32", "weather.cloud_attenuation -1", "weather.atmosphere_contrast -1" } },
						{3440, new List<string> {"weather.cloud_coverage 0.3" } },
						{3450, new List<string> {"weather.cloud_coverage 0.28" } },
						{3460, new List<string> {"weather.cloud_coverage 0.26" } },
						{3470, new List<string> {"weather.cloud_coverage 0.24" } },
						{3480, new List<string> {"weather.cloud_coverage 0.22" } },
						{3490, new List<string> {"weather.cloud_coverage 0.2" } },
						{3500, new List<string> {"weather.cloud_coverage 0.18" } },
						{3510, new List<string> {"weather.cloud_coverage 0.16" } },
						{3520, new List<string> {"weather.cloud_coverage 0.14" } },
						{3530, new List<string> {"weather.cloud_coverage 0.12" } },
						{3540, new List<string> {"weather.cloud_coverage 0.1" } },
						{3550, new List<string> {"weather.cloud_coverage 0.08" } },
						{3560, new List<string> {"weather.cloud_coverage 0.06" } },
						{3570, new List<string> {"weather.cloud_coverage 0.04" } },
						{3580, new List<string> {"weather.cloud_coverage 0.02" } },
                        {3590, new List<string> {"weather.cloud_coverage 0", "weather.reset", "STOP" } },
                    }
                    },
					{"partlycloudy", new Dictionary<int, List<string>>
                    {
                        {1, new List<string> {"weather.cloud_coverage 0.02" } },
						{10, new List<string> {"weather.cloud_coverage 0.04" } },
						{20, new List<string> {"weather.cloud_coverage 0.06" } },
						{30, new List<string> {"weather.cloud_coverage 0.08" } },
						{40, new List<string> {"weather.cloud_coverage 0.1", "weather.cloud_opacity 0.9", "weather.cloud_size 0.9" } },
						{50, new List<string> {"weather.cloud_coverage 0.12" } },
						{60, new List<string> {"weather.cloud_coverage 0.14" } },
						{70, new List<string> {"weather.cloud_coverage 0.16" } },
						{80, new List<string> {"weather.cloud_coverage 0.18" } },
						{90, new List<string> {"weather.cloud_coverage 0.2", "weather.cloud_opacity 0.8" } },
						{100, new List<string> {"weather.cloud_coverage 0.22" } },
						{110, new List<string> {"weather.cloud_coverage 0.24" } },
						{120, new List<string> {"weather.cloud_coverage 0.26" } },
						{130, new List<string> {"weather.cloud_coverage 0.28" } },
						{140, new List<string> {"weather.cloud_coverage 0.3", "weather.cloud_opacity 0.7" } },
						{150, new List<string> {"weather.cloud_coverage 0.32" } },
						{160, new List<string> {"weather.cloud_coverage 0.34" } },
						{170, new List<string> {"weather.cloud_coverage 0.36" } },
						{180, new List<string> {"weather.cloud_coverage 0.38" } },
						{190, new List<string> {"weather.cloud_coverage 0.4" } },
						{300, new List<string> {"weather.cloud_coverage 0.42" } },
						{310, new List<string> {"weather.cloud_coverage 0.44" } },
						{320, new List<string> {"weather.cloud_coverage 0.46" } },
						{330, new List<string> {"weather.cloud_coverage 0.48" } },
						{340, new List<string> {"weather.cloud_coverage 0.5", "weather.cloud_attenuation 0.1" } },
						{360, new List<string> {"weather.cloud_coverage 0.52" } },
						{380, new List<string> {"weather.cloud_coverage 0.54" } },
						{500, new List<string> {"weather.cloud_coverage 0.56" } },
						{520, new List<string> {"weather.cloud_coverage 0.58" } },
						{540, new List<string> {"weather.cloud_coverage 0.6" } },
						{560, new List<string> {"weather.cloud_coverage 0.62" } },
						{580, new List<string> {"weather.cloud_coverage 0.64" } },
						{700, new List<string> {"weather.cloud_coverage 0.66" } },
						{720, new List<string> {"weather.cloud_coverage 0.68" } },
						{740, new List<string> {"weather.cloud_coverage 0.7" } },
						{760, new List<string> {"weather.cloud_coverage 0.72" } },
						{780, new List<string> {"weather.cloud_coverage 0.74" } },
						{900, new List<string> {"weather.cloud_coverage 0.75" } },
						{2290, new List<string> {"weather.cloud_coverage 0.74" } },
						{2310, new List<string> {"weather.cloud_coverage 0.72" } },
						{2330, new List<string> {"weather.cloud_coverage 0.7" } },
						{2350, new List<string> {"weather.cloud_coverage 0.68" } },
						{2370, new List<string> {"weather.cloud_coverage 0.66" } },
						{2390, new List<string> {"weather.cloud_coverage 0.64" } },
						{2510, new List<string> {"weather.cloud_coverage 0.62" } },
						{2530, new List<string> {"weather.cloud_coverage 0.6" } },
						{2550, new List<string> {"weather.cloud_coverage 0.58" } },
						{2570, new List<string> {"weather.cloud_coverage 0.56" } },
						{2590, new List<string> {"weather.cloud_coverage 0.54" } },
						{2710, new List<string> {"weather.cloud_coverage 0.52" } },
						{2730, new List<string> {"weather.cloud_coverage 0.5", "weather.cloud_attenuation -1" } },
						{2750, new List<string> {"weather.cloud_coverage 0.48" } },
						{2760, new List<string> {"weather.cloud_coverage 0.46" } },
						{2770, new List<string> {"weather.cloud_coverage 0.44" } },
						{2780, new List<string> {"weather.cloud_coverage 0.42" } },
						{2790, new List<string> {"weather.cloud_coverage 0.4" } },
						{2900, new List<string> {"weather.cloud_coverage 0.38" } },
						{2910, new List<string> {"weather.cloud_coverage 0.36" } },
						{2920, new List<string> {"weather.cloud_coverage 0.34" } },
						{2930, new List<string> {"weather.cloud_coverage 0.32" } },
						{2940, new List<string> {"weather.cloud_coverage 0.3", "weather.cloud_opacity 0.8" } },
						{2950, new List<string> {"weather.cloud_coverage 0.28" } },
						{2960, new List<string> {"weather.cloud_coverage 0.26" } },
						{2970, new List<string> {"weather.cloud_coverage 0.24" } },
						{2980, new List<string> {"weather.cloud_coverage 0.22" } },
						{2990, new List<string> {"weather.cloud_coverage 0.2", "weather.cloud_opacity 0.9" } },
						{3100, new List<string> {"weather.cloud_coverage 0.18" } },
						{3110, new List<string> {"weather.cloud_coverage 0.16" } },
						{3120, new List<string> {"weather.cloud_coverage 0.14" } },
						{3130, new List<string> {"weather.cloud_coverage 0.12" } },
						{3140, new List<string> {"weather.cloud_coverage 0.1", "weather.cloud_opacity -1" } },
						{3150, new List<string> {"weather.cloud_coverage 0.08" } },
						{3160, new List<string> {"weather.cloud_coverage 0.06" } },
						{3170, new List<string> {"weather.cloud_coverage 0.04" } },
						{3180, new List<string> {"weather.cloud_coverage 0.02" } },						
                        {3190, new List<string> {"weather.cloud_coverage 0", "weather.reset", "STOP" } },
                    }
                    },
					{"spottyshowers", new Dictionary<int, List<string>>
                    {
                        {1, new List<string> {"weather.cloud_coverage 0.01" } },
						{10, new List<string> {"weather.cloud_coverage 0.02" } },
						{20, new List<string> {"weather.cloud_coverage 0.04", "weather.cloud_size 1.25" } },
						{30, new List<string> {"weather.cloud_coverage 0.06" } },
						{40, new List<string> {"weather.cloud_coverage 0.08" } },
						{50, new List<string> {"weather.cloud_coverage 0.1", "weather.cloud_size 1.5" } },
						{60, new List<string> {"weather.cloud_coverage 0.12" } },
						{70, new List<string> {"weather.cloud_coverage 0.14" } },
						{80, new List<string> {"weather.cloud_coverage 0.16" } },
						{90, new List<string> {"weather.cloud_coverage 0.18" } },
						{100, new List<string> {"weather.cloud_coverage 0.2" } },
						{110, new List<string> {"weather.cloud_coverage 0.22" } },
						{120, new List<string> {"weather.cloud_coverage 0.24" } },
						{130, new List<string> {"weather.cloud_coverage 0.26" } },
						{140, new List<string> {"weather.cloud_coverage 0.28" } },
						{150, new List<string> {"weather.cloud_coverage 0.3" } },
						{160, new List<string> {"weather.cloud_coverage 0.32" } },
						{170, new List<string> {"weather.cloud_coverage 0.34" } },
						{180, new List<string> {"weather.cloud_coverage 0.36" } },
						{190, new List<string> {"weather.cloud_coverage 0.38" } },
						{200, new List<string> {"weather.cloud_coverage 0.4", "weather.atmosphere_rayleigh 1.5" } },
						{210, new List<string> {"weather.cloud_coverage 0.42" } },
						{220, new List<string> {"weather.cloud_coverage 0.44" } },
						{230, new List<string> {"weather.cloud_coverage 0.46" } },
						{240, new List<string> {"weather.cloud_coverage 0.48" } },
						{250, new List<string> {"weather.cloud_coverage 0.5" } },
						{260, new List<string> {"weather.cloud_coverage 0.52" } },
						{270, new List<string> {"weather.cloud_coverage 0.54" } },
						{280, new List<string> {"weather.cloud_coverage 0.56" } },
						{290, new List<string> {"weather.cloud_coverage 0.58" } },
						{300, new List<string> {"weather.cloud_coverage 0.6" } },
						{310, new List<string> {"weather.cloud_coverage 0.62" } },
						{320, new List<string> {"weather.cloud_coverage 0.64" } },
						{330, new List<string> {"weather.cloud_coverage 0.66" } },
						{340, new List<string> {"weather.cloud_coverage 0.68" } },
						{350, new List<string> {"weather.cloud_coverage 0.7" } },
						{360, new List<string> {"weather.cloud_coverage 0.72" } },
						{370, new List<string> {"weather.cloud_coverage 0.74" } },
						{380, new List<string> { "weather.cloud_coverage 0.75", "weather.cloud_attenuation 0.1" } },
                        {480, new List<string> { "weather.rain 0.03", "weather.rainbow 1" } },
                        {510, new List<string> { "weather.rain 0.06" } },
                        {560, new List<string> { "weather.rain 0.09" } },
                        {590, new List<string> { "weather.rain 0.12" } },
                        {620, new List<string> { "weather.rain 0.15" } },
                        {1090, new List<string> { "weather.rain 0.18" } },
                        {1150, new List<string> { "weather.rain 0.21" } },
						{1180, new List<string> { "weather.cloud_coverage 0.74", "weather.cloud_attenuation -1" } },
						{1190, new List<string> { "weather.cloud_coverage 0.72" } },
						{1200, new List<string> { "weather.cloud_coverage 0.7" } },
                        {1210, new List<string> { "weather.rain 0.15" } },
						{1220, new List<string> { "weather.cloud_coverage 0.68" } },
						{1230, new List<string> { "weather.cloud_coverage 0.66" } },
						{1240, new List<string> { "weather.cloud_coverage 0.64" } },
						{1250, new List<string> { "weather.cloud_coverage 0.62" } },
                        {1260, new List<string> { "weather.rain 0.08" } },
						{1270, new List<string> { "weather.cloud_coverage 0.6" } },
						{1280, new List<string> { "weather.cloud_coverage 0.58" } },
						{1290, new List<string> { "weather.cloud_coverage 0.56" } },
						{1300, new List<string> { "weather.cloud_coverage 0.54" } },
						{1310, new List<string> { "weather.cloud_coverage 0.52" } },
						{1320, new List<string> { "weather.cloud_coverage 0.5" } },
                        {1330, new List<string> { "weather.rain 0" } },
						{1350, new List<string> { "weather.cloud_coverage 0.48" } },
						{1370, new List<string> { "weather.cloud_coverage 0.46" } },
						{1390, new List<string> { "weather.cloud_coverage 0.44" } },
						{1410, new List<string> { "weather.cloud_coverage 0.42" } },
						{1430, new List<string> { "weather.cloud_coverage 0.4", "weather.atmosphere_rayleigh -1" } },
						{1450, new List<string> { "weather.cloud_coverage 0.38" } },
						{1470, new List<string> { "weather.cloud_coverage 0.36" } },
						{1490, new List<string> { "weather.cloud_coverage 0.34" } },
						{1510, new List<string> { "weather.cloud_coverage 0.32" } },
						{2500, new List<string> {"weather.cloud_coverage 0.3" } },
						{2510, new List<string> {"weather.cloud_coverage 0.32" } },
						{2520, new List<string> {"weather.cloud_coverage 0.34" } },
						{2530, new List<string> {"weather.cloud_coverage 0.36" } },
						{2540, new List<string> {"weather.cloud_coverage 0.38" } },
						{2550, new List<string> {"weather.cloud_coverage 0.4", "weather.atmosphere_rayleigh 1.5" } },
						{2560, new List<string> {"weather.cloud_coverage 0.42" } },
						{2570, new List<string> {"weather.cloud_coverage 0.44" } },
						{2580, new List<string> {"weather.cloud_coverage 0.46" } },
						{2590, new List<string> {"weather.cloud_coverage 0.48" } },
						{3000, new List<string> {"weather.cloud_coverage 0.5" } },
						{3010, new List<string> {"weather.cloud_coverage 0.52" } },
						{3020, new List<string> {"weather.cloud_coverage 0.54" } },
						{3030, new List<string> {"weather.cloud_coverage 0.56" } },
						{3040, new List<string> {"weather.cloud_coverage 0.58" } },
						{3050, new List<string> {"weather.cloud_coverage 0.6" } },
						{3060, new List<string> {"weather.cloud_coverage 0.64" } },
						{3070, new List<string> {"weather.cloud_coverage 0.66" } },
						{3080, new List<string> {"weather.cloud_coverage 0.68" } },
						{3090, new List<string> {"weather.cloud_coverage 0.7" } },
						{3100, new List<string> {"weather.cloud_coverage 0.72" } },
						{3110, new List<string> {"weather.cloud_coverage 0.74" } },
						{3120, new List<string> { "weather.cloud_coverage 0.75", "weather.cloud_attenuation 0.1" } },
                        {3130, new List<string> { "weather.rain 0.03" } },
                        {3140, new List<string> { "weather.rain 0.06" } },
                        {3150, new List<string> { "weather.rain 0.09" } },
                        {3160, new List<string> { "weather.rain 0.12" } },
                        {3170, new List<string> { "weather.rain 0.15" } },
                        {3180, new List<string> { "weather.rain 0.18" } },
                        {3190, new List<string> { "weather.rain 0.21" } },
						{3200, new List<string> { "weather.cloud_coverage 0.74", "weather.cloud_attenuation -1" } },
						{3205, new List<string> { "weather.cloud_coverage 0.72" } },
						{3210, new List<string> { "weather.cloud_coverage 0.7" } },
                        {3215, new List<string> { "weather.rain 0.15" } },
						{3220, new List<string> { "weather.cloud_coverage 0.68" } },
						{3225, new List<string> { "weather.cloud_coverage 0.66" } },
						{3230, new List<string> { "weather.cloud_coverage 0.64" } },
						{3235, new List<string> { "weather.cloud_coverage 0.62" } },
                        {3240, new List<string> { "weather.rain 0.08" } },
						{3245, new List<string> { "weather.cloud_coverage 0.6" } },
						{3250, new List<string> { "weather.cloud_coverage 0.58" } },
						{3255, new List<string> { "weather.cloud_coverage 0.56" } },
						{3260, new List<string> { "weather.cloud_coverage 0.54" } },
						{3265, new List<string> { "weather.cloud_coverage 0.52" } },
						{3270, new List<string> { "weather.cloud_coverage 0.5" } },
                        {3280, new List<string> { "weather.rain 0" } },
						{3285, new List<string> { "weather.cloud_coverage 0.48" } },
						{3290, new List<string> { "weather.cloud_coverage 0.46" } },
						{3295, new List<string> { "weather.cloud_coverage 0.44" } },
						{3300, new List<string> { "weather.cloud_coverage 0.42" } },
						{3305, new List<string> { "weather.cloud_coverage 0.4", "weather.atmosphere_rayleigh -1" } },
						{3310, new List<string> { "weather.cloud_coverage 0.38" } },
						{3315, new List<string> { "weather.cloud_coverage 0.36" } },
						{3320, new List<string> { "weather.cloud_coverage 0.34" } },
						{3325, new List<string> { "weather.cloud_coverage 0.32", "weather.cloud_size 1.25" } },
						{3330, new List<string> { "weather.cloud_coverage 0.3" } },
						{3335, new List<string> { "weather.cloud_coverage 0.28" } },
						{3340, new List<string> { "weather.cloud_coverage 0.26" } },
						{3345, new List<string> { "weather.cloud_coverage 0.24" } },
						{3350, new List<string> { "weather.cloud_coverage 0.22" } },
						{3355, new List<string> { "weather.cloud_coverage 0.2" } },
						{3360, new List<string> { "weather.cloud_coverage 0.18" } },
						{3365, new List<string> { "weather.cloud_coverage 0.16" } },
						{3370, new List<string> { "weather.cloud_coverage 0.14" } },
						{3375, new List<string> { "weather.cloud_coverage 0.12" } },
						{3380, new List<string> { "weather.cloud_coverage 0.1", "weather.cloud_size -1" } },
						{3385, new List<string> { "weather.cloud_coverage 0.08" } },
						{3390, new List<string> { "weather.cloud_coverage 0.00", "weather.rainbow -1" } },
                        {3395, new List<string> {"weather.cloud_coverage 0", "weather.reset", "STOP" } },
                    }
                    },
					{"sunandclouds", new Dictionary<int, List<string>>
                    {
                        {1, new List<string> {"weather.cloud_coverage 0.02" } },
						{10, new List<string> {"weather.cloud_coverage 0.04" } },
						{20, new List<string> {"weather.cloud_coverage 0.06" } },
						{30, new List<string> {"weather.cloud_coverage 0.08" } },
						{40, new List<string> {"weather.cloud_coverage 0.1", "weather.cloud_opacity 0.9", "weather.cloud_size 0.9" } },
						{50, new List<string> {"weather.cloud_coverage 0.12" } },
						{60, new List<string> {"weather.cloud_coverage 0.14" } },
						{70, new List<string> {"weather.cloud_coverage 0.16" } },
						{80, new List<string> {"weather.cloud_coverage 0.18" } },
						{90, new List<string> {"weather.cloud_coverage 0.2", "weather.cloud_opacity 0.8", "weather.cloud_size 0.8" } },
						{100, new List<string> {"weather.cloud_coverage 0.22" } },
						{110, new List<string> {"weather.cloud_coverage 0.24" } },
						{120, new List<string> {"weather.cloud_coverage 0.26" } },
						{130, new List<string> {"weather.cloud_coverage 0.28" } },
						{140, new List<string> {"weather.cloud_coverage 0.3" } },
						{150, new List<string> {"weather.cloud_coverage 0.32" } },
						{160, new List<string> {"weather.cloud_coverage 0.34" } },
						{170, new List<string> {"weather.cloud_coverage 0.36" } },
						{180, new List<string> {"weather.cloud_coverage 0.38" } },
						{190, new List<string> {"weather.cloud_coverage 0.4" } },
						{300, new List<string> {"weather.cloud_coverage 0.42" } },
						{310, new List<string> {"weather.cloud_coverage 0.44" } },
						{320, new List<string> {"weather.cloud_coverage 0.46" } },
						{330, new List<string> {"weather.cloud_coverage 0.48" } },
						{340, new List<string> {"weather.cloud_coverage 0.5", "weather.cloud_attenuation 0.1" } },
						{1730, new List<string> {"weather.cloud_coverage 0.5", "weather.cloud_attenuation -1" } },
						{1750, new List<string> {"weather.cloud_coverage 0.48" } },
						{1760, new List<string> {"weather.cloud_coverage 0.46" } },
						{1770, new List<string> {"weather.cloud_coverage 0.44" } },
						{1780, new List<string> {"weather.cloud_coverage 0.42" } },
						{1790, new List<string> {"weather.cloud_coverage 0.4" } },
						{1900, new List<string> {"weather.cloud_coverage 0.38" } },
						{1910, new List<string> {"weather.cloud_coverage 0.36" } },
						{1920, new List<string> {"weather.cloud_coverage 0.34" } },
						{1930, new List<string> {"weather.cloud_coverage 0.32" } },
						{1940, new List<string> {"weather.cloud_coverage 0.3" } },
						{1950, new List<string> {"weather.cloud_coverage 0.28" } },
						{1960, new List<string> {"weather.cloud_coverage 0.26" } },
						{2320, new List<string> {"weather.cloud_coverage 0.28" } },
						{2330, new List<string> {"weather.cloud_coverage 0.3" } },
						{2340, new List<string> {"weather.cloud_coverage 0.32" } },
						{2350, new List<string> {"weather.cloud_coverage 0.34" } },
						{2360, new List<string> {"weather.cloud_coverage 0.36" } },
						{2370, new List<string> {"weather.cloud_coverage 0.38" } },
						{2380, new List<string> {"weather.cloud_coverage 0.4", "weather.atmosphere_rayleigh 1.25" } },
						{2390, new List<string> {"weather.cloud_coverage 0.42" } },
						{2400, new List<string> {"weather.cloud_coverage 0.44" } },
						{2410, new List<string> {"weather.cloud_coverage 0.46" } },
						{2420, new List<string> {"weather.cloud_coverage 0.48" } },
						{2430, new List<string> {"weather.cloud_coverage 0.5", "weather.cloud_attenuation 0.1" } },
						{2440, new List<string> {"weather.cloud_coverage 0.52" } },
						{2450, new List<string> {"weather.cloud_coverage 0.54" } },
						{2460, new List<string> {"weather.cloud_coverage 0.56" } },
						{2470, new List<string> {"weather.cloud_coverage 0.58" } },
						{2480, new List<string> {"weather.cloud_coverage 0.6" } },
						{2650, new List<string> {"weather.cloud_coverage 0.58" } },
						{2660, new List<string> {"weather.cloud_coverage 0.56" } },
						{2670, new List<string> {"weather.cloud_coverage 0.54" } },
						{2680, new List<string> {"weather.cloud_coverage 0.52" } },
						{2690, new List<string> {"weather.cloud_coverage 0.5", "weather.cloud_attenuation -1" } },
						{2700, new List<string> {"weather.cloud_coverage 0.48" } },
						{2710, new List<string> {"weather.cloud_coverage 0.46" } },
						{2720, new List<string> {"weather.cloud_coverage 0.44" } },
						{2730, new List<string> {"weather.cloud_coverage 0.42" } },
						{2740, new List<string> {"weather.cloud_coverage 0.4", "weather.atmosphere_rayleigh -1" } },
						{2750, new List<string> {"weather.cloud_coverage 0.38" } },
						{2760, new List<string> {"weather.cloud_coverage 0.36" } },
						{2770, new List<string> {"weather.cloud_coverage 0.34" } },
						{2930, new List<string> {"weather.cloud_coverage 0.32" } },
						{2940, new List<string> {"weather.cloud_coverage 0.3" } },
						{2950, new List<string> {"weather.cloud_coverage 0.28" } },
						{2960, new List<string> {"weather.cloud_coverage 0.26" } },
						{2970, new List<string> {"weather.cloud_coverage 0.24" } },
						{2980, new List<string> {"weather.cloud_coverage 0.22" } },
						{2990, new List<string> {"weather.cloud_coverage 0.2", "weather.cloud_opacity 0.9", "weather.cloud_size 0.9" } },
						{3100, new List<string> {"weather.cloud_coverage 0.18" } },
						{3110, new List<string> {"weather.cloud_coverage 0.16" } },
						{3120, new List<string> {"weather.cloud_coverage 0.14" } },
						{3130, new List<string> {"weather.cloud_coverage 0.12" } },
						{3140, new List<string> {"weather.cloud_coverage 0.1", "weather.cloud_opacity -1", "weather.cloud_size -1" } },
						{3150, new List<string> {"weather.cloud_coverage 0.08" } },
						{3160, new List<string> {"weather.cloud_coverage 0.06" } },
						{3170, new List<string> {"weather.cloud_coverage 0.04" } },
						{3180, new List<string> {"weather.cloud_coverage 0.02" } },								
                        {3190, new List<string> {"weather.cloud_coverage 0", "weather.reset", "STOP" } },
                    }
                    },
					{"quickfront", new Dictionary<int, List<string>>
                    {
                        {1, new List<string> {"weather.cloud_coverage 0.02" } },
						{10, new List<string> {"weather.cloud_coverage 0.04" } },
						{20, new List<string> {"weather.cloud_coverage 0.06" } },
						{30, new List<string> {"weather.cloud_coverage 0.08" } },
						{40, new List<string> {"weather.cloud_coverage 0.1", "weather.cloud_opacity 0.9", "weather.cloud_size 0.9" } },
						{50, new List<string> {"weather.cloud_coverage 0.12", "weather.wind 0.1" } },
						{60, new List<string> {"weather.cloud_coverage 0.14", "weather.wind 0.2" } },
						{70, new List<string> {"weather.cloud_coverage 0.16", "weather.wind 0.3" } },
						{80, new List<string> {"weather.cloud_coverage 0.18", "weather.wind 0.4" } },
						{90, new List<string> {"weather.cloud_coverage 0.2", "weather.cloud_opacity 0.8", "weather.cloud_size 0.8" } },
						{100, new List<string> {"weather.cloud_coverage 0.22" } },
						{110, new List<string> {"weather.cloud_coverage 0.24" } },
						{120, new List<string> {"weather.cloud_coverage 0.26" } },
						{130, new List<string> {"weather.cloud_coverage 0.28" } },
						{140, new List<string> {"weather.cloud_coverage 0.3", "weather.wind 0.5" } },
						{150, new List<string> {"weather.cloud_coverage 0.32" } },
						{160, new List<string> {"weather.cloud_coverage 0.34" } },
						{170, new List<string> {"weather.cloud_coverage 0.36", "weather.cloud_size 1.25" } },
						{180, new List<string> {"weather.cloud_coverage 0.38" } },
						{190, new List<string> {"weather.cloud_coverage 0.4", "weather.wind 0.6" } },
						{300, new List<string> {"weather.cloud_coverage 0.42" } },
						{310, new List<string> {"weather.cloud_coverage 0.44" } },
						{320, new List<string> {"weather.cloud_coverage 0.46" } },
						{330, new List<string> {"weather.cloud_coverage 0.48" } },
						{340, new List<string> {"weather.cloud_coverage 0.5", "weather.cloud_attenuation 0.1" } },
						{350, new List<string> {"weather.cloud_coverage 0.5", "weather.cloud_attenuation -1" } },
						{360, new List<string> {"weather.cloud_coverage 0.48" } },
						{370, new List<string> {"weather.cloud_coverage 0.5", "weather.cloud_size 1.5" } },
						{380, new List<string> {"weather.cloud_coverage 0.52" } },
						{390, new List<string> {"weather.cloud_coverage 0.54" } },
						{400, new List<string> {"weather.cloud_coverage 0.56" } },
						{410, new List<string> {"weather.cloud_coverage 0.58" } },
						{420, new List<string> {"weather.cloud_coverage 0.6" } },
						{430, new List<string> {"weather.cloud_coverage 0.62" } },
						{440, new List<string> {"weather.cloud_coverage 0.64" } },
						{450, new List<string> {"weather.cloud_coverage 0.66" } },
						{460, new List<string> {"weather.cloud_coverage 0.68" } },
						{470, new List<string> {"weather.cloud_coverage 0.7" } },
						{480, new List<string> {"weather.cloud_coverage 0.72" } },
						{490, new List<string> {"weather.cloud_coverage 0.74" } },
						{500, new List<string> { "weather.cloud_coverage 0.75", "weather.cloud_attenuation 0.2" } },
						{510, new List<string> { "weather.fog 0.1" } },
						{520, new List<string> { "weather.cloud_coverage 0.76" } },
						{530, new List<string> { "weather.fog 0.04" } },
						{540, new List<string> { "weather.cloud_coverage 0.78" } },
						{550, new List<string> { "weather.fog 0.06" } },
						{560, new List<string> { "weather.cloud_coverage 0.8" } },
						{570, new List<string> { "weather.fog 0.08" } },
						{580, new List<string> { "weather.cloud_coverage 0.82" } },
						{590, new List<string> { "weather.fog 0.1" } },
                        {600, new List<string> { "weather.rain 0.01" } },
						{610, new List<string> { "weather.cloud_coverage 0.84" } },
						{620, new List<string> { "weather.fog 0.12" } },
                        {630, new List<string> { "weather.rain 0.02" } },
						{640, new List<string> { "weather.cloud_coverage 0.86" } },
						{650, new List<string> { "weather.cloud_coverage 0.88" } },
                        {660, new List<string> { "weather.rain 0.03" } },
						{670, new List<string> { "weather.cloud_coverage 0.9" } },
                        {680, new List<string> { "weather.rain 0.04" } },
						{690, new List<string> { "weather.cloud_coverage 0.92" } },
                        {700, new List<string> { "weather.rain 0.15", "weather.wind 0.4" } },
						{710, new List<string> { "weather.cloud_coverage 0.94" } },
						{720, new List<string> { "weather.cloud_coverage 0.96" } },
						{730, new List<string> { "weather.cloud_coverage 0.98" } },
						{740, new List<string> { "weather.cloud_coverage 1", "weather.cloud_attenuation 0.3" } },
						{1040, new List<string> { "weather.cloud_coverage 0.98" } },
						{1050, new List<string> { "weather.cloud_coverage 0.96" } },
						{1060, new List<string> { "weather.cloud_coverage 0.94" } },
						{1070, new List<string> { "weather.cloud_coverage 0.92", "weather.cloud_attenuation 0.2" } },
						{1080, new List<string> { "weather.cloud_coverage 0.9" } },
                        {1090, new List<string> { "weather.rain 0.24" } },
						{1100, new List<string> { "weather.cloud_coverage 0.88" } },
						{1110, new List<string> { "weather.cloud_coverage 0.86" } },
						{1120, new List<string> { "weather.cloud_coverage 0.84" } },
						{1130, new List<string> { "weather.cloud_coverage 0.82" } },
						{1140, new List<string> { "weather.cloud_coverage 0.8" } },
                        {1150, new List<string> { "weather.rain 0.23", "weather.wind 0.2" } },
						{1160, new List<string> { "weather.cloud_coverage 0.78" } },
						{1170, new List<string> { "weather.cloud_coverage 0.76" } },
						{1180, new List<string> { "weather.cloud_coverage 0.74", "weather.cloud_attenuation -1" } },
						{1190, new List<string> { "weather.cloud_coverage 0.72" } },
						{1200, new List<string> { "weather.cloud_coverage 0.7" } },
                        {1210, new List<string> { "weather.rain 0.12" } },
						{1220, new List<string> { "weather.cloud_coverage 0.68" } },
						{1230, new List<string> { "weather.cloud_coverage 0.66" } },
						{1240, new List<string> { "weather.cloud_coverage 0.64" } },
						{1250, new List<string> { "weather.cloud_coverage 0.62" } },
                        {1260, new List<string> { "weather.rain 0.07" } },
						{1270, new List<string> { "weather.cloud_coverage 0.6" } },
						{1280, new List<string> { "weather.cloud_coverage 0.58" } },
						{1290, new List<string> { "weather.cloud_coverage 0.56" } },
						{1300, new List<string> { "weather.cloud_coverage 0.54" } },
						{1310, new List<string> { "weather.cloud_coverage 0.52" } },
						{1320, new List<string> { "weather.cloud_coverage 0.5" } },
                        {1330, new List<string> { "weather.rain 0" } },
						{1350, new List<string> { "weather.cloud_coverage 0.48" } },
						{1750, new List<string> {"weather.cloud_coverage 0.48" } },
						{1760, new List<string> {"weather.cloud_coverage 0.46" } },
						{1770, new List<string> {"weather.cloud_coverage 0.44" } },
						{1780, new List<string> {"weather.cloud_coverage 0.42" } },
						{1790, new List<string> {"weather.cloud_coverage 0.4" } },
						{1900, new List<string> {"weather.cloud_coverage 0.38" } },
						{1910, new List<string> {"weather.cloud_coverage 0.36" } },
						{1920, new List<string> {"weather.cloud_coverage 0.34" } },
						{1930, new List<string> {"weather.cloud_coverage 0.32" } },
						{1940, new List<string> {"weather.cloud_coverage 0.3", "weather.wind 0.1" } },
						{1950, new List<string> {"weather.cloud_coverage 0.28" } },
						{1960, new List<string> {"weather.cloud_coverage 0.26" } },
						{2320, new List<string> {"weather.cloud_coverage 0.28" } },
						{2330, new List<string> {"weather.cloud_coverage 0.3" } },
						{2340, new List<string> {"weather.cloud_coverage 0.32" } },
						{2350, new List<string> {"weather.cloud_coverage 0.34" } },
						{2360, new List<string> {"weather.cloud_coverage 0.36" } },
						{2370, new List<string> {"weather.cloud_coverage 0.38", "weather.wind -1" } },
						{2380, new List<string> {"weather.cloud_coverage 0.4", "weather.atmosphere_rayleigh 1.25" } },
						{2390, new List<string> {"weather.cloud_coverage 0.42" } },
						{2400, new List<string> {"weather.cloud_coverage 0.44" } },
						{2410, new List<string> {"weather.cloud_coverage 0.46" } },
						{2420, new List<string> {"weather.cloud_coverage 0.48" } },
						{2430, new List<string> {"weather.cloud_coverage 0.5", "weather.cloud_attenuation 0.1" } },
						{2440, new List<string> {"weather.cloud_coverage 0.52" } },
						{2450, new List<string> {"weather.cloud_coverage 0.54" } },
						{2460, new List<string> {"weather.cloud_coverage 0.56" } },
						{2470, new List<string> {"weather.cloud_coverage 0.58" } },
						{2480, new List<string> {"weather.cloud_coverage 0.6" } },
						{2650, new List<string> {"weather.cloud_coverage 0.58" } },
						{2660, new List<string> {"weather.cloud_coverage 0.56" } },
						{2670, new List<string> {"weather.cloud_coverage 0.54" } },
						{2680, new List<string> {"weather.cloud_coverage 0.52" } },
						{2690, new List<string> {"weather.cloud_coverage 0.5", "weather.cloud_attenuation -1" } },
						{2700, new List<string> {"weather.cloud_coverage 0.48" } },
						{2710, new List<string> {"weather.cloud_coverage 0.46" } },
						{2720, new List<string> {"weather.cloud_coverage 0.44" } },
						{2730, new List<string> {"weather.cloud_coverage 0.42" } },
						{2740, new List<string> {"weather.cloud_coverage 0.4", "weather.atmosphere_rayleigh -1" } },
						{2750, new List<string> {"weather.cloud_coverage 0.38" } },
						{2760, new List<string> {"weather.cloud_coverage 0.36" } },
						{2770, new List<string> {"weather.cloud_coverage 0.34" } },
						{2930, new List<string> {"weather.cloud_coverage 0.32" } },
						{2940, new List<string> {"weather.cloud_coverage 0.3" } },
						{2950, new List<string> {"weather.cloud_coverage 0.28" } },
						{2960, new List<string> {"weather.cloud_coverage 0.26" } },
						{2970, new List<string> {"weather.cloud_coverage 0.24" } },
						{2980, new List<string> {"weather.cloud_coverage 0.22" } },
						{2990, new List<string> {"weather.cloud_coverage 0.2", "weather.cloud_opacity 0.9", "weather.cloud_size 0.9" } },
						{3100, new List<string> {"weather.cloud_coverage 0.18", "weather.cloud_size 1.25" } },
						{3110, new List<string> {"weather.cloud_coverage 0.16" } },
						{3120, new List<string> {"weather.cloud_coverage 0.14" } },
						{3130, new List<string> {"weather.cloud_coverage 0.12" } },
						{3140, new List<string> {"weather.cloud_coverage 0.1", "weather.cloud_opacity -1", "weather.cloud_size -1" } },
						{3150, new List<string> {"weather.cloud_coverage 0.08" } },
						{3160, new List<string> {"weather.cloud_coverage 0.06" } },
						{3170, new List<string> {"weather.cloud_coverage 0.04" } },
						{3180, new List<string> {"weather.cloud_coverage 0.02" } },								
                        {3190, new List<string> {"weather.cloud_coverage 0", "weather.reset", "STOP" } },
                    }
                    },
					{"clear", new Dictionary<int, List<string>>
                    {
                        {5, new List<string> {"weather.cloud_opacity 0.99" } },
                        {10, new List<string> {"weather.cloud_opacity 0.98" } },
                        {15, new List<string> {"weather.cloud_opacity 0.97" } },
                        {20, new List<string> {"weather.cloud_opacity 0.96" } },
                        {25, new List<string> {"weather.cloud_opacity 0.95" } },
                        {30, new List<string> {"weather.cloud_opacity 0.94" } },
                        {35, new List<string> {"weather.cloud_opacity 0.93" } },
                        {40, new List<string> {"weather.cloud_opacity 0.92" } },
                        {45, new List<string> {"weather.cloud_opacity 0.91" } },
                        {50, new List<string> {"weather.cloud_opacity 0.9" } },
                        {55, new List<string> {"weather.cloud_opacity 0.89" } },
                        {60, new List<string> {"weather.cloud_opacity 0.88" } },
                        {65, new List<string> {"weather.cloud_opacity 0.87" } },
                        {70, new List<string> {"weather.cloud_opacity 0.86" } },
                        {75, new List<string> {"weather.cloud_opacity 0.85" } },
                        {80, new List<string> {"weather.cloud_opacity 0.84" } },
                        {85, new List<string> {"weather.cloud_opacity 0.83" } },
                        {90, new List<string> {"weather.cloud_opacity 0.82" } },
                        {95, new List<string> {"weather.cloud_opacity 0.81" } },
                        {200, new List<string> {"weather.cloud_opacity 0.8", "weather.atmosphere_contrast 1.5" } },
                        {205, new List<string> {"weather.cloud_opacity 0.79" } },
                        {210, new List<string> {"weather.cloud_opacity 0.78" } },
                        {215, new List<string> {"weather.cloud_opacity 0.77" } },
                        {220, new List<string> {"weather.cloud_opacity 0.76" } },
                        {225, new List<string> {"weather.cloud_opacity 0.75" } },
                        {230, new List<string> {"weather.cloud_opacity 0.74" } },
                        {235, new List<string> {"weather.cloud_opacity 0.73" } },
                        {240, new List<string> {"weather.cloud_opacity 0.72" } },
                        {245, new List<string> {"weather.cloud_opacity 0.71" } },
                        {250, new List<string> {"weather.cloud_opacity 0.70" } },
                        {255, new List<string> {"weather.cloud_opacity 0.69" } },
                        {260, new List<string> {"weather.cloud_opacity 0.68" } },
                        {265, new List<string> {"weather.cloud_opacity 0.67" } },
                        {270, new List<string> {"weather.cloud_opacity 0.66" } },
                        {275, new List<string> {"weather.cloud_opacity 0.65" } },
                        {280, new List<string> {"weather.cloud_opacity 0.64" } },
                        {285, new List<string> {"weather.cloud_opacity 0.63" } },
                        {290, new List<string> {"weather.cloud_opacity 0.62" } },
                        {295, new List<string> {"weather.cloud_opacity 0.61" } },
                        {400, new List<string> {"weather.cloud_opacity 0.6", "weather.atmosphere_contrast 2.0" } },
                        {405, new List<string> {"weather.cloud_opacity 0.59" } },
                        {410, new List<string> {"weather.cloud_opacity 0.58" } },
                        {415, new List<string> {"weather.cloud_opacity 0.57" } },
                        {420, new List<string> {"weather.cloud_opacity 0.56" } },
                        {425, new List<string> {"weather.cloud_opacity 0.55" } },
                        {430, new List<string> {"weather.cloud_opacity 0.54" } },
                        {435, new List<string> {"weather.cloud_opacity 0.53" } },
                        {440, new List<string> {"weather.cloud_opacity 0.52" } },
                        {445, new List<string> {"weather.cloud_opacity 0.51" } },
                        {450, new List<string> {"weather.cloud_opacity 0.5" } },
                        {455, new List<string> {"weather.cloud_opacity 0.49" } },
                        {460, new List<string> {"weather.cloud_opacity 0.48" } },
                        {465, new List<string> {"weather.cloud_opacity 0.47" } },
                        {470, new List<string> {"weather.cloud_opacity 0.46" } },
                        {475, new List<string> {"weather.cloud_opacity 0.45" } },
                        {480, new List<string> {"weather.cloud_opacity 0.44" } },
                        {485, new List<string> {"weather.cloud_opacity 0.43" } },
                        {490, new List<string> {"weather.cloud_opacity 0.42" } },
                        {495, new List<string> {"weather.cloud_opacity 0.41" } },
                        {600, new List<string> {"weather.cloud_opacity 0.4" } },
                        {605, new List<string> {"weather.cloud_opacity 0.39" } },
                        {610, new List<string> {"weather.cloud_opacity 0.38" } },
                        {615, new List<string> {"weather.cloud_opacity 0.37" } },
                        {620, new List<string> {"weather.cloud_opacity 0.36" } },
                        {625, new List<string> {"weather.cloud_opacity 0.35" } },
                        {630, new List<string> {"weather.cloud_opacity 0.34" } },
                        {635, new List<string> {"weather.cloud_opacity 0.33", } },
                        {640, new List<string> {"weather.cloud_opacity 0.32" } },
                        {645, new List<string> {"weather.cloud_opacity 0.31" } },
                        {650, new List<string> {"weather.cloud_opacity 0.3" } },
                        {655, new List<string> {"weather.cloud_opacity 0.29" } },
                        {660, new List<string> {"weather.cloud_opacity 0.28" } },
                        {665, new List<string> {"weather.cloud_opacity 0.27" } },
                        {670, new List<string> {"weather.cloud_opacity 0.26" } },
                        {675, new List<string> {"weather.cloud_opacity 0.25" } },
                        {680, new List<string> {"weather.cloud_opacity 0.24" } },
                        {685, new List<string> {"weather.cloud_opacity 0.23" } },
                        {690, new List<string> {"weather.cloud_opacity 0.22" } },
                        {695, new List<string> {"weather.cloud_opacity 0.21" } },
                        {900, new List<string> {"weather.cloud_opacity 0.2" } },
                        {905, new List<string> {"weather.cloud_opacity 0.19" } },
                        {910, new List<string> {"weather.cloud_opacity 0.18" } },
                        {915, new List<string> {"weather.cloud_opacity 0.17" } },
                        {920, new List<string> {"weather.cloud_opacity 0.16" } },
                        {925, new List<string> {"weather.cloud_opacity 0.15" } },
                        {930, new List<string> {"weather.cloud_opacity 0.14" } },
                        {935, new List<string> {"weather.cloud_opacity 0.13" } },
                        {940, new List<string> {"weather.cloud_opacity 0.12" } },
                        {945, new List<string> {"weather.cloud_opacity 0.11" } },
                        {950, new List<string> {"weather.cloud_opacity 0.1" } },
                        {955, new List<string> {"weather.cloud_opacity 0.09" } },
                        {960, new List<string> {"weather.cloud_opacity 0.08" } },
                        {965, new List<string> {"weather.cloud_opacity 0.07" } },
                        {970, new List<string> {"weather.cloud_opacity 0.06" } },
                        {975, new List<string> {"weather.cloud_opacity 0.05" } },
                        {980, new List<string> {"weather.cloud_opacity 0.04" } },
                        {985, new List<string> {"weather.cloud_opacity 0.03" } },
                        {990, new List<string> {"weather.cloud_opacity 0.02" } },
                        {995, new List<string> {"weather.cloud_opacity 0.01" } },
                        {2100, new List<string> {"weather.cloud_opacity 0" } },
                        {2300, new List<string> {"weather.cloud_opacity 0.01" } },
                        {2305, new List<string> {"weather.cloud_opacity 0.02" } },
                        {2310, new List<string> {"weather.cloud_opacity 0.03" } },
                        {2315, new List<string> {"weather.cloud_opacity 0.04" } },
                        {2320, new List<string> {"weather.cloud_opacity 0.05" } },
                        {2325, new List<string> {"weather.cloud_opacity 0.06" } },
                        {2330, new List<string> {"weather.cloud_opacity 0.07" } },
                        {2335, new List<string> {"weather.cloud_opacity 0.08" } },
                        {2340, new List<string> {"weather.cloud_opacity 0.09" } },
                        {2345, new List<string> {"weather.cloud_opacity 0.1" } },
                        {2350, new List<string> {"weather.cloud_opacity 0.11" } },
                        {2355, new List<string> {"weather.cloud_opacity 0.12" } },
                        {2360, new List<string> {"weather.cloud_opacity 0.13" } },
                        {2365, new List<string> {"weather.cloud_opacity 0.14" } },
                        {2370, new List<string> {"weather.cloud_opacity 0.15" } },
                        {2375, new List<string> {"weather.cloud_opacity 0.16" } },
                        {2380, new List<string> {"weather.cloud_opacity 0.17" } },
                        {2385, new List<string> {"weather.cloud_opacity 0.18" } },
                        {2390, new List<string> {"weather.cloud_opacity 0.19" } },
                        {2395, new List<string> {"weather.cloud_opacity 0.2" } },
                        {2600, new List<string> {"weather.cloud_opacity 0.21" } },
                        {2605, new List<string> {"weather.cloud_opacity 0.22" } },
                        {2610, new List<string> {"weather.cloud_opacity 0.23" } },
                        {2615, new List<string> {"weather.cloud_opacity 0.24" } },
                        {2620, new List<string> {"weather.cloud_opacity 0.25" } },
                        {2625, new List<string> {"weather.cloud_opacity 0.26" } },
                        {2630, new List<string> {"weather.cloud_opacity 0.27" } },
                        {2635, new List<string> {"weather.cloud_opacity 0.28" } },
                        {2640, new List<string> {"weather.cloud_opacity 0.29" } },
                        {2645, new List<string> {"weather.cloud_opacity 0.3" } },
                        {2650, new List<string> {"weather.cloud_opacity 0.31" } },
                        {2655, new List<string> {"weather.cloud_opacity 0.32" } },
                        {2660, new List<string> {"weather.cloud_opacity 0.33" } },
                        {2665, new List<string> {"weather.cloud_opacity 0.34" } },
                        {2670, new List<string> {"weather.cloud_opacity 0.35" } },
                        {2675, new List<string> {"weather.cloud_opacity 0.36" } },
                        {2680, new List<string> {"weather.cloud_opacity 0.37" } },
                        {2685, new List<string> {"weather.cloud_opacity 0.38" } },
                        {2690, new List<string> {"weather.cloud_opacity 0.39" } },
                        {2695, new List<string> {"weather.cloud_opacity 0.4" } },
                        {2900, new List<string> {"weather.cloud_opacity 0.41" } },
                        {2905, new List<string> {"weather.cloud_opacity 0.42" } },
                        {2910, new List<string> {"weather.cloud_opacity 0.43" } },
                        {2915, new List<string> {"weather.cloud_opacity 0.44" } },
                        {2920, new List<string> {"weather.cloud_opacity 0.45" } },
                        {2925, new List<string> {"weather.cloud_opacity 0.46" } },
                        {2930, new List<string> {"weather.cloud_opacity 0.47" } },
                        {2935, new List<string> {"weather.cloud_opacity 0.48" } },
                        {2940, new List<string> {"weather.cloud_opacity 0.49" } },
                        {2945, new List<string> {"weather.cloud_opacity 0.5" } },
                        {2950, new List<string> {"weather.cloud_opacity 0.51" } },
                        {2955, new List<string> {"weather.cloud_opacity 0.52" } },
                        {2960, new List<string> {"weather.cloud_opacity 0.53" } },
                        {2965, new List<string> {"weather.cloud_opacity 0.54" } },
                        {2970, new List<string> {"weather.cloud_opacity 0.55" } },
                        {2975, new List<string> {"weather.cloud_opacity 0.56" } },
                        {2980, new List<string> {"weather.cloud_opacity 0.57" } },
                        {2985, new List<string> {"weather.cloud_opacity 0.58" } },
                        {2990, new List<string> {"weather.cloud_opacity 0.59" } },
                        {2995, new List<string> {"weather.cloud_opacity 0.6", "weather.atmosphere_contrast 1.5" } },
                        {3200, new List<string> {"weather.cloud_opacity 0.61" } },
                        {3205, new List<string> {"weather.cloud_opacity 0.62" } },
                        {3210, new List<string> {"weather.cloud_opacity 0.63" } },
                        {3215, new List<string> {"weather.cloud_opacity 0.64" } },
                        {3220, new List<string> {"weather.cloud_opacity 0.65" } },
                        {3225, new List<string> {"weather.cloud_opacity 0.66" } },
                        {3230, new List<string> {"weather.cloud_opacity 0.67" } },
                        {3235, new List<string> {"weather.cloud_opacity 0.68" } },
                        {3240, new List<string> {"weather.cloud_opacity 0.69" } },
                        {3245, new List<string> {"weather.cloud_opacity 0.7" } },
                        {3250, new List<string> {"weather.cloud_opacity 0.71" } },
                        {3255, new List<string> {"weather.cloud_opacity 0.72" } },
                        {3260, new List<string> {"weather.cloud_opacity 0.73" } },
                        {3265, new List<string> {"weather.cloud_opacity 0.74" } },
                        {3270, new List<string> {"weather.cloud_opacity 0.75" } },
                        {3275, new List<string> {"weather.cloud_opacity 0.76" } },
                        {3280, new List<string> {"weather.cloud_opacity 0.77" } },
                        {3285, new List<string> {"weather.cloud_opacity 0.78" } },
                        {3290, new List<string> {"weather.cloud_opacity 0.79" } },
                        {3295, new List<string> {"weather.cloud_opacity 0.80" } },
                        {3500, new List<string> {"weather.cloud_opacity 0.81" } },
                        {3505, new List<string> {"weather.cloud_opacity 0.82" } },
                        {3510, new List<string> {"weather.cloud_opacity 0.83" } },
                        {3515, new List<string> {"weather.cloud_opacity 0.84" } },
                        {3520, new List<string> {"weather.cloud_opacity 0.85" } },
                        {3525, new List<string> {"weather.cloud_opacity 0.86" } },
                        {3530, new List<string> {"weather.cloud_opacity 0.87" } },
                        {3535, new List<string> {"weather.cloud_opacity 0.88" } },
                        {3540, new List<string> {"weather.cloud_opacity 0.89" } },
                        {3545, new List<string> {"weather.cloud_opacity 0.9" } },
                        {3550, new List<string> {"weather.cloud_opacity 0.91" } },
                        {3555, new List<string> {"weather.cloud_opacity 0.92" } },
                        {3560, new List<string> {"weather.cloud_opacity 0.93" } },
                        {3565, new List<string> {"weather.cloud_opacity 0.94" } },
                        {3570, new List<string> {"weather.cloud_opacity 0.95" } },
                        {3575, new List<string> {"weather.cloud_opacity 0.96" } },
                        {3580, new List<string> {"weather.cloud_opacity 0.97" } },
                        {3585, new List<string> {"weather.cloud_opacity 0.98" } },
                        {3590, new List<string> {"weather.cloud_opacity 0.99", "weather.atmosphere_contrast -1" } },
                        {3595, new List<string> {"weather.cloud_opacity 1", "weather.reset", "STOP" } },
                    }
                    },
					{"volcanicsky", new Dictionary<int, List<string>>
                    {
                        {5, new List<string> {"weather.atmosphere_rayleigh 1.5" } },
                        {230, new List<string> {"weather.atmosphere_rayleigh 2" } },
                        {330, new List<string> {"weather.atmosphere_rayleigh 2.5" } },
                        {460, new List<string> {"weather.atmosphere_rayleigh 3" } },
                        {560, new List<string> {"weather.atmosphere_rayleigh 3.5" } },
                        {690, new List<string> {"weather.atmosphere_rayleigh 4" } },
                        {790, new List<string> {"weather.atmosphere_rayleigh 4.5", "weather.fog 0.1" } },
                        {1020, new List<string> {"weather.atmosphere_rayleigh 5" } },
                        {1120, new List<string> {"weather.atmosphere_rayleigh 5.5" } },
                        {1250, new List<string> {"weather.atmosphere_rayleigh 6" } },
                        {1350, new List<string> {"weather.atmosphere_rayleigh 6.5" } },
                        {1450, new List<string> {"weather.atmosphere_rayleigh 7" } },
                        {1490, new List<string> {"weather.atmosphere_rayleigh 7.5" } },
                        {1510, new List<string> {"weather.atmosphere_rayleigh 8", "weather.fog 0.2" } },
                        {1520, new List<string> {"weather.atmosphere_rayleigh 8.5" } },
                        {1540, new List<string> {"weather.atmosphere_rayleigh 9" } },
                        {1640, new List<string> {"weather.atmosphere_rayleigh 9.5" } },
                        {1770, new List<string> {"weather.atmosphere_rayleigh 10" } },
                        {2100, new List<string> {"weather.atmosphere_rayleigh 9.5" } },
                        {2200, new List<string> {"weather.atmosphere_rayleigh 9" } },
                        {2270, new List<string> {"weather.atmosphere_rayleigh 8.5", "weather.fog 0.3" } },
                        {2330, new List<string> {"weather.atmosphere_rayleigh 8" } },
                        {2380, new List<string> {"weather.atmosphere_rayleigh 7.5" } },
                        {2460, new List<string> {"weather.atmosphere_rayleigh 7" } },
                        {2530, new List<string> {"weather.atmosphere_rayleigh 6.5" } },
                        {2590, new List<string> {"weather.atmosphere_rayleigh 6" } },
                        {2990, new List<string> {"weather.atmosphere_rayleigh 5.5" } },
                        {3020, new List<string> {"weather.atmosphere_rayleigh 5" } },
                        {3080, new List<string> {"weather.atmosphere_rayleigh 4.5" } },
                        {3150, new List<string> {"weather.atmosphere_rayleigh 4" } },
                        {3190, new List<string> {"weather.atmosphere_rayleigh 3.5", "weather.fog 0.1" } },
                        {3280, new List<string> {"weather.atmosphere_rayleigh 3" } },
                        {3290, new List<string> {"weather.atmosphere_rayleigh 2.5" } },
                        {3310, new List<string> {"weather.atmosphere_rayleigh 2" } },
                        {3440, new List<string> {"weather.atmosphere_rayleigh 1.5" } },
                        {3570, new List<string> {"weather.atmosphere_rayleigh -1" } },
                        {3600, new List<string> {"weather.cloud_opacity 1", "weather.reset", "STOP" } },
                    }
                    },
					{"smokeysky", new Dictionary<int, List<string>>
                    {
                        {5, new List<string> {"weather.atmosphere_rayleigh 1" } },
						{10, new List<string> {"weather.cloud_coverage 0.1", "weather.cloud_opacity 0.75", "weather.cloud_size 1.5" } },
                        {230, new List<string> {"weather.atmosphere_rayleigh 2", "sv weather.atmosphere_mie 0.5", "atmosphere_directionality 0.5" } },
						{235, new List<string> {"weather.cloud_coverage 0.2", "weather.cloud_opacity 0.5", "weather.cloud_size 2.0" } },
                        {460, new List<string> {"weather.atmosphere_rayleigh 3", "sv weather.atmosphere_mie 0.25", "atmosphere_directionality 0.25" } },
                        {690, new List<string> {"weather.atmosphere_rayleigh 4" } },
                        {1020, new List<string> {"weather.atmosphere_rayleigh 5", "sv weather.atmosphere_mie 0.1", "atmosphere_directionality 0.1" } },
                        {1150, new List<string> {"weather.atmosphere_rayleigh 5.5" } },
                        {3020, new List<string> {"weather.atmosphere_rayleigh 5" } },
                        {3150, new List<string> {"weather.atmosphere_rayleigh 4" } },
                        {3280, new List<string> {"weather.atmosphere_rayleigh 3", "sv weather.atmosphere_mie 0.25", "atmosphere_directionality 0.25" } },
                        {3310, new List<string> {"weather.atmosphere_rayleigh 2", "sv weather.atmosphere_mie 0.5", "atmosphere_directionality 0.5" } },
						{3315, new List<string> {"weather.cloud_coverage 0.1", "weather.cloud_opacity 0.75", "weather.cloud_size 1.5" } },
                        {3440, new List<string> {"weather.atmosphere_rayleigh 1", "sv weather.atmosphere_mie -1", "atmosphere_directionality -1" } },
						{3510, new List<string> {"weather.cloud_coverage 0", "weather.cloud_opacity -1", "weather.cloud_size -1" } },
                        {3570, new List<string> {"weather.atmosphere_rayleigh -1" } },
                        {3600, new List<string> {"weather.cloud_opacity 1", "weather.reset", "STOP" } },
                    }
                    },
					{"windy", new Dictionary<int, List<string>>
                    {
                        {5, new List<string> {"weather.wind 0.01" } },
                        {10, new List<string> {"weather.wind 0.02" } },
                        {15, new List<string> {"weather.wind 0.03" } },
                        {20, new List<string> {"weather.wind 0.04" } },
                        {25, new List<string> {"weather.wind 0.05" } },
                        {30, new List<string> {"weather.wind 0.06" } },
                        {35, new List<string> {"weather.wind 0.07" } },
                        {40, new List<string> {"weather.wind 0.08" } },
                        {45, new List<string> {"weather.wind 0.09" } },
                        {50, new List<string> {"weather.wind 0.10" } },
                        {55, new List<string> {"weather.wind 0.11" } },
                        {60, new List<string> {"weather.wind 0.12" } },
                        {65, new List<string> {"weather.wind 0.13" } },
                        {70, new List<string> {"weather.wind 0.14" } },
                        {75, new List<string> {"weather.wind 0.15" } },
                        {80, new List<string> {"weather.wind 0.16" } },
                        {85, new List<string> {"weather.wind 0.17" } },
                        {90, new List<string> {"weather.wind 0.18" } },
                        {95, new List<string> {"weather.wind 0.19" } },
                        {100, new List<string> {"weather.wind 0.20" } },
                        {105, new List<string> {"weather.wind 0.21" } },
                        {110, new List<string> {"weather.wind 0.22" } },
                        {115, new List<string> {"weather.wind 0.23" } },
                        {120, new List<string> {"weather.wind 0.24" } },
                        {125, new List<string> {"weather.wind 0.25" } },
                        {130, new List<string> {"weather.wind 0.26" } },
                        {135, new List<string> {"weather.wind 0.27" } },
                        {140, new List<string> {"weather.wind 0.28" } },
                        {145, new List<string> {"weather.wind 0.29" } },
                        {150, new List<string> {"weather.wind 0.30" } },
                        {155, new List<string> {"weather.wind 0.31" } },
                        {160, new List<string> {"weather.wind 0.32" } },
                        {165, new List<string> {"weather.wind 0.33" } },
                        {170, new List<string> {"weather.wind 0.34" } },
                        {175, new List<string> {"weather.wind 0.35" } },
                        {180, new List<string> {"weather.wind 0.36" } },
                        {185, new List<string> {"weather.wind 0.39" } },
                        {190, new List<string> {"weather.wind 0.42" } },
                        {195, new List<string> {"weather.wind 0.47", "weather.fog 0.1" } },
                        {200, new List<string> {"weather.wind 0.54" } },
                        {205, new List<string> {"weather.wind 0.58" } },
                        {210, new List<string> {"weather.wind 0.59" } },
                        {215, new List<string> {"weather.wind 0.60" } },
                        {220, new List<string> {"weather.wind 0.61" } },
                        {225, new List<string> {"weather.wind 0.62" } },
                        {230, new List<string> {"weather.wind 0.63" } },
                        {235, new List<string> {"weather.wind 0.64" } },
                        {240, new List<string> {"weather.wind 0.65" } },
                        {245, new List<string> {"weather.wind 0.66" } },
                        {250, new List<string> {"weather.wind 0.67" } },
                        {255, new List<string> {"weather.wind 0.68" } },
                        {260, new List<string> {"weather.wind 0.69" } },
                        {265, new List<string> {"weather.wind 0.70" } },
                        {270, new List<string> {"weather.wind 0.71" } },
                        {275, new List<string> {"weather.wind 0.72" } },
                        {280, new List<string> {"weather.wind 0.73" } },
                        {285, new List<string> {"weather.wind 0.74" } },
                        {290, new List<string> {"weather.wind 0.75" } },
                        {295, new List<string> {"weather.wind 0.76" } },
                        {300, new List<string> {"weather.wind 0.77" } },
                        {305, new List<string> {"weather.wind 0.78" } },
                        {310, new List<string> {"weather.wind 0.79" } },
                        {315, new List<string> {"weather.wind 0.80" } },
                        {320, new List<string> {"weather.wind 0.82" } },
                        {325, new List<string> {"weather.wind 0.84" } },
                        {330, new List<string> {"weather.wind 0.86" } },
                        {335, new List<string> {"weather.wind 0.88", "weather.fog 0.1" } },
                        {340, new List<string> {"weather.wind 0.90" } },
                        {345, new List<string> {"weather.wind 0.92" } },
                        {350, new List<string> {"weather.wind 0.93" } },
                        {355, new List<string> {"weather.wind 0.94" } },
                        {360, new List<string> {"weather.wind 0.95" } },
                        {365, new List<string> {"weather.wind 0.96" } },
                        {370, new List<string> {"weather.wind 0.97" } },
                        {375, new List<string> {"weather.wind 0.98" } },
                        {380, new List<string> {"weather.wind 0.99" } },
                        {385, new List<string> {"weather.wind 1" } },
                        {420, new List<string> {"weather.wind 0.99" } },
                        {425, new List<string> {"weather.wind 0.98" } },
                        {430, new List<string> {"weather.wind 0.97" } },
                        {435, new List<string> {"weather.wind 0.96" } },
                        {440, new List<string> {"weather.wind 0.95" } },
                        {445, new List<string> {"weather.wind 0.94" } },
                        {450, new List<string> {"weather.wind 0.93" } },
                        {455, new List<string> {"weather.wind 0.92" } },
                        {460, new List<string> {"weather.wind 0.91" } },
                        {470, new List<string> {"weather.wind 0.9" } },
                        {480, new List<string> {"weather.wind 0.89" } },
                        {490, new List<string> {"weather.wind 0.88" } },
                        {2000, new List<string> {"weather.wind 0.87" } },
                        {2005, new List<string> {"weather.wind 0.86" } },
                        {2010, new List<string> {"weather.wind 0.85" } },
                        {2015, new List<string> {"weather.wind 0.84" } },
                        {2020, new List<string> {"weather.wind 0.83" } },
                        {2025, new List<string> {"weather.wind 0.82" } },
                        {2030, new List<string> {"weather.wind 0.81" } },
                        {2035, new List<string> {"weather.wind 0.80" } },
                        {2040, new List<string> {"weather.wind 0.79" } },
                        {2045, new List<string> {"weather.wind 0.78" } },
                        {2050, new List<string> {"weather.wind 0.77" } },
                        {2055, new List<string> {"weather.wind 0.76" } },
                        {2060, new List<string> {"weather.wind 0.75" } },
                        {2065, new List<string> {"weather.wind 0.74" } },
                        {2070, new List<string> {"weather.wind 0.73" } },
                        {2075, new List<string> {"weather.wind 0.72" } },
                        {2080, new List<string> {"weather.wind 0.71" } },
                        {2085, new List<string> {"weather.wind 0.7" } },
                        {2090, new List<string> {"weather.wind 0.69" } },
                        {2095, new List<string> {"weather.wind 0.68" } },
                        {2100, new List<string> {"weather.wind 0.67" } },
                        {2105, new List<string> {"weather.wind 0.66" } },
                        {2110, new List<string> {"weather.wind 0.65" } },
                        {2115, new List<string> {"weather.wind 0.64" } },
                        {2120, new List<string> {"weather.wind 0.63" } },
                        {2125, new List<string> {"weather.wind 0.62" } },
                        {2130, new List<string> {"weather.wind 0.61" } },
                        {2135, new List<string> {"weather.wind 0.6" } },
                        {2140, new List<string> {"weather.wind 0.59" } },
                        {2145, new List<string> {"weather.wind 0.58" } },
                        {2150, new List<string> {"weather.wind 0.57" } },
                        {2155, new List<string> {"weather.wind 0.56" } },
                        {2160, new List<string> {"weather.wind 0.55" } },
                        {2165, new List<string> {"weather.wind 0.54" } },
                        {2170, new List<string> {"weather.wind 0.53" } },
                        {2175, new List<string> {"weather.wind 0.52" } },
                        {2180, new List<string> {"weather.wind 0.51" } },
                        {2185, new List<string> {"weather.wind 0.5", "weather.fog 0.1" } },
                        {2190, new List<string> {"weather.wind 0.49" } },
                        {2195, new List<string> {"weather.wind 0.48" } },
                        {2200, new List<string> {"weather.wind 0.47" } },
                        {2205, new List<string> {"weather.wind 0.46" } },
                        {2210, new List<string> {"weather.wind 0.45" } },
                        {2215, new List<string> {"weather.wind 0.44" } },
                        {2220, new List<string> {"weather.wind 0.43" } },
                        {2225, new List<string> {"weather.wind 0.42" } },
                        {2230, new List<string> {"weather.wind 0.41" } },
                        {2235, new List<string> {"weather.wind 0.4" } },
                        {2240, new List<string> {"weather.wind 0.39" } },
                        {2245, new List<string> {"weather.wind 0.38" } },
                        {2250, new List<string> {"weather.wind 0.37" } },
                        {2280, new List<string> {"weather.wind 0.36" } },
                        {2310, new List<string> {"weather.wind 0.35" } },
                        {2320, new List<string> {"weather.wind 0.34" } },
                        {2330, new List<string> {"weather.wind 0.33" } },
                        {2335, new List<string> {"weather.wind 0.32" } },
                        {2340, new List<string> {"weather.wind 0.31" } },
                        {2345, new List<string> {"weather.wind 0.3" } },
                        {2350, new List<string> {"weather.wind 0.29" } },
                        {2355, new List<string> {"weather.wind 0.28" } },
                        {2360, new List<string> {"weather.wind 0.27" } },
                        {2365, new List<string> {"weather.wind 0.26" } },
                        {2370, new List<string> {"weather.wind 0.25" } },
                        {2375, new List<string> {"weather.wind 0.24" } },
                        {2380, new List<string> {"weather.wind 0.23" } },
                        {2385, new List<string> {"weather.wind 0.22" } },
                        {2390, new List<string> {"weather.wind 0.21" } },
                        {2395, new List<string> {"weather.wind 0.2" } },
                        {2400, new List<string> {"weather.wind 0.19" } },
                        {2405, new List<string> {"weather.wind 0.18" } },
                        {2410, new List<string> {"weather.wind 0.17" } },
                        {2415, new List<string> {"weather.wind 0.16" } },
                        {2420, new List<string> {"weather.wind 0.15" } },
                        {2425, new List<string> {"weather.wind 0.14" } },
                        {2430, new List<string> {"weather.wind 0.13" } },
                        {2435, new List<string> {"weather.wind 0.12" } },
                        {2440, new List<string> {"weather.wind 0.11" } },
                        {2445, new List<string> {"weather.wind 0.1" } },
                        {2450, new List<string> {"weather.wind 0.09" } },
                        {2455, new List<string> {"weather.wind 0.08" } },
                        {2460, new List<string> {"weather.wind 0.07" } },
                        {2465, new List<string> {"weather.wind 0.06" } },
                        {2470, new List<string> {"weather.wind 0.05" } },
                        {2475, new List<string> {"weather.wind 0.04" } },
                        {2480, new List<string> {"weather.wind 0.03" } },
                        {2485, new List<string> {"weather.wind 0.02" } },
                        {2490, new List<string> {"weather.wind 0.01", "weather.fog 0" } },
                        {2495, new List<string> {"weather.wind 0", "weather.reset", "STOP" } },
                    }
                    }
            };
    }
}

// --- End of file: WeatherEvents.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/wipe-prize ---
// --- Original File Path: W/WipePrize/WipePrize.cs ---

using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Oxide.Core;
using Oxide.Core.Libraries.Covalence;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using UnityEngine;
using Random = UnityEngine.Random;

namespace Oxide.Plugins
{
    [Info("Wipe Prize", "Mevent", "1.0.9")]
    [Description("Rewards the first N players after Wipe")]
    public class WipePrize : RustPlugin
    {
        #region Fields

        [PluginReference] private Plugin ImageLibrary = null;

        private const string Layer = "UI.WipePrize";

        private static WipePrize _instance;

        private List<ulong> _connectedPlayers = new List<ulong>();

        private List<ulong> _wasGive = new List<ulong>();

        private enum ItemType
        {
            Item,
            Command,
            Plugin
        }

        #endregion

        #region Config

        private Configuration _config;

        private class Configuration
        {
            [JsonProperty(PropertyName = "Auto-wipe Settings")]
            public WipeSettings Wipe = new WipeSettings()
            {
                Players = true,
                Awards = false
            };

            [JsonProperty(PropertyName = "Amount of Players")]
            public int MaxCount = 100;

            [JsonProperty(PropertyName = "Command")]
            public string Command = "giveaward";

            [JsonProperty(PropertyName = "Enable logging to the console?")]
            public bool LogToConsole = true;

            [JsonProperty(PropertyName = "Enable logging to the file?")]
            public bool LogToFile = true;

            [JsonProperty(PropertyName = "Awards", ObjectCreationHandling = ObjectCreationHandling.Replace)]
            public List<ItemCase> Awards = new List<ItemCase>
            {
                new ItemCase
                {
                    Type = ItemType.Item,
                    DisplayName = string.Empty,
                    Shortname = "wood",
                    Skin = 0,
                    Amount = 2000,
                    Command = string.Empty,
                    PluginAward = new PluginAward()
                },
                new ItemCase
                {
                    Type = ItemType.Item,
                    DisplayName = string.Empty,
                    Shortname = "stones",
                    Skin = 0,
                    Amount = 3000,
                    Command = string.Empty,
                    PluginAward = new PluginAward()
                },
                new ItemCase
                {
                    Type = ItemType.Plugin,
                    DisplayName = string.Empty,
                    Shortname = string.Empty,
                    Skin = 0,
                    Amount = 1,
                    Command = string.Empty,
                    PluginAward = new PluginAward()
                },
                new ItemCase
                {
                    Type = ItemType.Command,
                    DisplayName = string.Empty,
                    Shortname = string.Empty,
                    Skin = 0,
                    Amount = 1,
                    Command = "addgroup %steamid% vip 7d",
                    PluginAward = new PluginAward()
                }
            };

            [JsonProperty(PropertyName = "Background")]
            public IPanel Background = new IPanel
            {
                AnchorMin = "1 0.5",
                AnchorMax = "1 0.5",
                OffsetMin = "-205 -30",
                OffsetMax = "-2 30",
                Color = "1 1 1 0.2",
                Image = string.Empty,
                IsRaw = false
            };

            [JsonProperty(PropertyName = "Text")] public IText Text = new IText
            {
                AnchorMin = "0 0",
                AnchorMax = "1 1",
                OffsetMin = "0 0",
                OffsetMax = "0 25",
                Align = TextAnchor.MiddleCenter,
                FontSize = 14,
                Font = "robotocondensed-regular.ttf",
                Color = "1 1 1 1"
            };

            [JsonProperty(PropertyName = "Button")]
            public IButton Button = new IButton
            {
                AnchorMin = "0.5 0",
                AnchorMax = "0.5 0",
                OffsetMin = "-85 2.5",
                OffsetMax = "85 22.5",
                Align = TextAnchor.MiddleCenter,
                FontSize = 14,
                Font = "robotocondensed-regular.ttf",
                TextColor = "1 1 1 1",
                Color = "0.63 0.93 0.63 0.5"
            };
        }

        private class WipeSettings
        {
            [JsonProperty(PropertyName = "Connected")]
            public bool Players;

            [JsonProperty(PropertyName = "Awards received players")]
            public bool Awards;
        }
        
        private class ItemCase
        {
            [JsonProperty(PropertyName = "Item type")] [JsonConverter(typeof(StringEnumConverter))]
            public ItemType Type;

            [JsonProperty(PropertyName =
                "Display name (for the item) (if empty - standard)")]
            public string DisplayName;

            [JsonProperty(PropertyName = "Shortname")]
            public string Shortname;

            [JsonProperty(PropertyName = "Skin")] public ulong Skin;

            [JsonProperty(PropertyName = "Amount (for item)")]
            public int Amount;

            [JsonProperty(PropertyName = "Command")]
            public string Command;

            [JsonProperty(PropertyName = "Plugin")]
            public PluginAward PluginAward;

            private void ToItem(BasePlayer player)
            {
                var newItem = ItemManager.CreateByName(Shortname, Amount, Skin);

                if (newItem == null)
                {
                    _instance?.PrintError($"Error creating item with shortname '{Shortname}'");
                    return;
                }

                if (!string.IsNullOrEmpty(DisplayName)) newItem.name = DisplayName;

                player.GiveItem(newItem, BaseEntity.GiveItemReason.PickedUp);
            }

            private void ToCommand(BasePlayer player)
            {
                var command = Command.Replace("\n", "|")
                    .Replace("%steamid%", player.UserIDString, StringComparison.OrdinalIgnoreCase).Replace("%username%",
                        player.displayName, StringComparison.OrdinalIgnoreCase);

                foreach (var check in command.Split('|')) _instance?.Server.Command(check);
            }

            public void GetItem(BasePlayer player)
            {
                if (player == null) return;

                switch (Type)
                {
                    case ItemType.Command:
                    {
                        ToCommand(player);
                        break;
                    }
                    case ItemType.Plugin:
                    {
                        PluginAward?.ToPluginAward(player);
                        break;
                    }
                    case ItemType.Item:
                    {
                        ToItem(player);
                        break;
                    }
                }
            }
        }

        private class PluginAward
        {
            [JsonProperty(PropertyName = "Hook to call")]
            public string Hook = "Withdraw";

            [JsonProperty(PropertyName = "Plugin name")]
            public string Plugin = "Economics";

            [JsonProperty(PropertyName = "Amount")]
            public int Amount;

            [JsonProperty(PropertyName = "(GameStores) Store ID in the service")]
            public string ShopID = "UNDEFINED";

            [JsonProperty(PropertyName = "(GameStores) Server ID in the service")]
            public string ServerID = "UNDEFINED";

            [JsonProperty(PropertyName = "(GameStores) Secret key")]
            public string SecretKey = "UNDEFINED";

            public void ToPluginAward(BasePlayer player)
            {
                var plug = _instance?.plugins.Find(Plugin);
                if (plug == null)
                {
                    _instance?.PrintError($"Economy plugin '{Plugin}' not found !!! ");
                    return;
                }

                switch (Plugin)
                {
                    case "RustStore":
                    {
                        plug.Call(Hook, player.userID, Amount, new Action<string>(result =>
                        {
                            if (result == "SUCCESS")
                            {
                                _instance?.Log(GiveMoney, GiveMoney, player.displayName, player.UserIDString,
                                    Amount, plug);
                                return;
                            }

                            Interface.Oxide.LogDebug($"The balance was not changed, error: {result}");
                        }));
                        break;
                    }
                    case "GameStoresRUST":
                    {
                        _instance?.webrequest.Enqueue(
                            $"https://gamestores.ru/api/?shop_id={ShopID}&secret={SecretKey}&server={ServerID}&action=moneys&type=plus&steam_id={player.UserIDString}&amount={Amount}",
                            "", (code, response) =>
                            {
                                switch (code)
                                {
                                    case 0:
                                    {
                                        _instance?.PrintError("Api does not responded to a request");
                                        break;
                                    }
                                    case 200:
                                    {
                                        _instance?.Log(GiveMoney, GiveMoney, player.displayName,
                                            player.UserIDString, Amount, plug);
                                        break;
                                    }
                                    case 404:
                                    {
                                        _instance?.PrintError("Please check your configuration! [404]");
                                        break;
                                    }
                                }
                            }, _instance);
                        break;
                    }
                    case "Economics":
                    {
                        plug.Call(Hook, player.userID, (double)Amount);
                        break;
                    }
                    default:
                    {
                        plug.Call(Hook, player.userID, Amount);
                        break;
                    }
                }
            }
        }

        private abstract class InterfacePosition
        {
            public string AnchorMin;

            public string AnchorMax;

            public string OffsetMin;

            public string OffsetMax;
        }

        private class IText : InterfacePosition
        {
            [JsonProperty(PropertyName = "Font Size")]
            public int FontSize;

            [JsonProperty(PropertyName = "Font")] public string Font;

            [JsonProperty(PropertyName = "Align")] [JsonConverter(typeof(StringEnumConverter))]
            public TextAnchor Align;

            [JsonProperty(PropertyName = "Text Color")]
            public string Color;

            public void Get(ref CuiElementContainer container, string parent = "Hud", string name = null,
                string text = "")
            {
                if (string.IsNullOrEmpty(name))
                    name = CuiHelper.GetGuid();

                container.Add(new CuiLabel
                {
                    RectTransform =
                        { AnchorMin = AnchorMin, AnchorMax = AnchorMax, OffsetMin = OffsetMin, OffsetMax = OffsetMax },
                    Text =
                    {
                        Text = text, Align = Align, FontSize = FontSize, Color = Color,
                        Font = Font
                    }
                }, parent, name);
            }
        }

        private class IButton : InterfacePosition
        {
            [JsonProperty(PropertyName = "Color")] public string Color;

            [JsonProperty(PropertyName = "Text Color")]
            public string TextColor;

            [JsonProperty(PropertyName = "Font Size")]
            public int FontSize;

            [JsonProperty(PropertyName = "Font")] public string Font;

            [JsonProperty(PropertyName = "Align")] [JsonConverter(typeof(StringEnumConverter))]
            public TextAnchor Align;

            public void Get(ref CuiElementContainer container, string parent = "Hud", string name = null,
                string close = "", string cmd = "", string text = "")
            {
                if (string.IsNullOrEmpty(name))
                    name = CuiHelper.GetGuid();

                container.Add(new CuiButton
                {
                    RectTransform =
                        { AnchorMin = AnchorMin, AnchorMax = AnchorMax, OffsetMin = OffsetMin, OffsetMax = OffsetMax },
                    Text =
                    {
                        Text = text,
                        Align = Align,
                        FontSize = FontSize,
                        Color = TextColor,
                        Font = Font
                    },
                    Button = { Command = cmd, Color = Color, Close = close }
                }, parent, name + ".BTN");
            }
        }

        private class IPanel : InterfacePosition
        {
            [JsonProperty(PropertyName = "Image")] public string Image;

            [JsonProperty(PropertyName = "Color")] public string Color;

            [JsonProperty(PropertyName = "Preserving the color of the image?")]
            public bool IsRaw;

            public void Get(ref CuiElementContainer container, string parent = "Hud", string name = null)
            {
                if (string.IsNullOrEmpty(name))
                    name = CuiHelper.GetGuid();

                if (IsRaw)
                    container.Add(new CuiElement
                    {
                        Name = name,
                        Parent = parent,
                        Components =
                        {
                            new CuiRawImageComponent
                            {
                                Png = !string.IsNullOrEmpty(Image)
                                    ? _instance.ImageLibrary.Call<string>("GetImage", Image)
                                    : null,
                                Color = Color
                            },
                            new CuiRectTransformComponent
                            {
                                AnchorMin = AnchorMin, AnchorMax = AnchorMax, OffsetMin = OffsetMin,
                                OffsetMax = OffsetMax
                            }
                        }
                    });
                else
                    container.Add(new CuiPanel
                    {
                        RectTransform =
                        {
                            AnchorMin = AnchorMin, AnchorMax = AnchorMax, OffsetMin = OffsetMin, OffsetMax = OffsetMax
                        },
                        Image =
                        {
                            Png = !string.IsNullOrEmpty(Image)
                                ? _instance.ImageLibrary.Call<string>("GetImage", Image)
                                : null,
                            Color = Color
                        }
                    }, parent, name);
            }
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                _config = Config.ReadObject<Configuration>();
                if (_config == null) throw new Exception();
                SaveConfig();
            }
            catch
            {
                PrintError("Your configuration file contains an error. Using default configuration values.");
                LoadDefaultConfig();
            }
        }

        protected override void SaveConfig()
        {
            Config.WriteObject(_config);
        }

        protected override void LoadDefaultConfig()
        {
            _config = new Configuration();
        }

        #endregion

        #region Data

        private void SaveData()
        {
            Interface.Oxide.DataFileSystem.WriteObject(Name, _connectedPlayers);
            Interface.Oxide.DataFileSystem.WriteObject(Name + "_Give", _wasGive);
        }

        private void LoadData()
        {
            try
            {
                _connectedPlayers = Interface.Oxide.DataFileSystem.ReadObject<List<ulong>>(Name);
                _wasGive = Interface.Oxide.DataFileSystem.ReadObject<List<ulong>>(Name + "_Give");
            }
            catch (Exception e)
            {
                PrintError(e.ToString());
            }

            if (_connectedPlayers == null) _connectedPlayers = new List<ulong>();
            if (_wasGive == null) _wasGive = new List<ulong>();
        }

        #endregion

        #region Hooks

        private void Init()
        {
            _instance = this;

            LoadData();
        }

        private void OnServerInitialized()
        {
            AddCovalenceCommand(_config.Command, nameof(GiveAwardCmd));

            foreach (var player in BasePlayer.activePlayerList)
                OnPlayerConnected(player);
        }

        private void OnServerSave()
        {
            timer.In(Random.Range(3, 7), SaveData);
        }

        private void Unload()
        {
            _instance = null;

            SaveData();

            foreach (var player in BasePlayer.activePlayerList)
                CuiHelper.DestroyUi(player, Layer);
        }

        private void OnPlayerConnected(BasePlayer player)
        {
            if (player == null || _wasGive.Contains(player.userID) ||
                _connectedPlayers.Count >= _config.MaxCount) return;

            if (!_connectedPlayers.Contains(player.userID))
                _connectedPlayers.Add(player.userID);

            MainUi(player);
        }

        private void OnNewSave()
        {
            var any = false;
            
            if (_config.Wipe.Players)
            {
                _connectedPlayers?.Clear();
                any = true;
            }

            if (_config.Wipe.Awards)
            {
                _wasGive?.Clear();
                any = true;
            }
            
            if (any) 
                SaveData();
        }

        #endregion

        #region Commands

        private void GiveAwardCmd(IPlayer cov, string command, string[] args)
        {
            var player = cov?.Object as BasePlayer;
            if (player == null) return;

            if (_wasGive.Contains(player.userID))
            {
                SendReply(player, Msg(ReceiveAward, player.UserIDString));
                return;
            }

            _config?.Awards?.ForEach(award => award?.GetItem(player));
            SendReply(player, Msg(GiveAward, player.UserIDString));
            _wasGive.Add(player.userID);
            SaveData();
        }

        #endregion

        #region Interface

        private void MainUi(BasePlayer player)
        {
            if (!_connectedPlayers.Contains(player.userID)) return;

            var container = new CuiElementContainer();

            _config.Background.Get(ref container, "Overlay", Layer);

            _config.Text.Get(ref container, Layer,
                text: Msg(UITitle, player.UserIDString, _connectedPlayers.IndexOf(player.userID) + 1,
                    _config.MaxCount));

            _config.Button.Get(ref container, Layer, text: Msg(UiButton, player.UserIDString),
                cmd: $"{_config.Command}", close: Layer);

            CuiHelper.DestroyUi(player, Layer);
            CuiHelper.AddUi(player, container);
        }

        #endregion

        #region Lang

        private const string
            GiveMoney = "givemoney",
            UITitle = "UITitle",
            UiButton = "UIBTN",
            GiveAward = "GiveAward",
            ReceiveAward = "RecieveAward";

        protected override void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                [GiveMoney] = "Player {0} ({1}) received {2} to the balance in {3}",
                [UITitle] = "You are {0} from {1}\nSo you get the reward.",
                [UiButton] = "Give award",
                [GiveAward] = "Congratulations! You received an award!",
                [ReceiveAward] = "You've already received your reward!"
            }, this);
        }

        private string Msg(string key, string userid = null, params object[] obj)
        {
            return string.Format(lang.GetMessage(key, this, userid), obj);
        }

        #endregion

        #region Log

        private void Log(string filename, string key, params object[] obj)
        {
            var text = Msg(key, null, obj);
            if (_config.LogToConsole) Puts(text);

            if (_config.LogToFile) LogToFile(filename, $"[{DateTime.Now}] {text}", this);
        }

        #endregion
    }
}

// --- End of file: WipePrize.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/whitelist ---
// --- Original File Path: W/Whitelist/Whitelist.cs ---

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using Oxide.Core.Libraries.Covalence;

namespace Oxide.Plugins
{
    [Info("Whitelist", "Wulf/lukespragg", "3.3.0")]
    [Description("Restricts server access to whitelisted players only")]

    class Whitelist : CovalencePlugin
    {
        #region Initialization

        //const string permAdmin = "whitelist.admin";
        const string permAllow = "whitelist.allow";

        bool adminExcluded;
        bool resetOnRestart;

        protected override void LoadDefaultConfig()
        {
            // Options
            Config["Admin Excluded (true/false)"] = adminExcluded = GetConfig("Admin Excluded (true/false)", true);
            Config["Reset On Restart (true/false)"] = resetOnRestart = GetConfig("Reset On Restart (true/false)", false);

            // Cleanup
            Config.Remove("AdminExcluded");
            Config.Remove("ResetOnRestart");

            SaveConfig();
        }

        void OnServerInitialized()
        {
            LoadDefaultConfig();
            LoadDefaultMessages();

            //permission.RegisterPermission(permAdmin, this);
            permission.RegisterPermission(permAllow, this);

            foreach (var player in players.All)
            {
                if (!player.HasPermission("whitelist.allowed")) continue;
                permission.GrantUserPermission(player.Id, permAllow, null);
                permission.RevokeUserPermission(player.Id, "whitelist.allowed");
            }

            foreach (var group in permission.GetGroups())
            {
                if (!permission.GroupHasPermission(group, "whitelist.allowed")) continue;
                permission.GrantGroupPermission(group, permAllow, null);
                permission.RevokeGroupPermission(group, "whitelist.allowed");
            }

            if (!resetOnRestart) return;
            foreach (var group in permission.GetGroups())
                if (permission.GroupHasPermission(group, permAllow)) permission.RevokeGroupPermission(group, permAllow);
            foreach (var user in permission.GetPermissionUsers(permAllow))
                permission.RevokeUserPermission(Regex.Replace(user, "[^0-9]", ""), permAllow);
        }

        #endregion

        #region Localization

        void LoadDefaultMessages()
        {
            // English
            lang.RegisterMessages(new Dictionary<string, string>
            {
                //["CommandUsage"] = "Usage: {0} <name or id> <permission>",
                //["NoPlayersFound"] = "No players were found using '{0}'",
                //["NotAllowed"] = "You are not allowed to use the '{0}' command",
                ["NotWhitelisted"] = "You are not whitelisted",
                //["WhitelistAdd"] = "'{0}' has been added to the whitelist",
                //["WhitelistRemove"] = "'{0}' has been removed from the whitelist"
            }, this);

            // French
            lang.RegisterMessages(new Dictionary<string, string>
            {
                //["CommandUsage"] = "Utilisation : {0} <nom ou id> <permission>",
                //["NoPlayersFound"] = "Pas de joueurs ont été trouvés à l’aide de « {0} »",
                //["NotAllowed"] = "Vous n’êtes pas autorisé à utiliser la commande « {0} »",
                ["NotWhitelisted"] = "Vous n’êtes pas dans la liste blanche",
                //["Whitelisted"] = ""
            }, this, "fr");

            // German
            lang.RegisterMessages(new Dictionary<string, string>
            {
                //["CommandUsage"] = "Verbrauch: {0} < Name oder Id> <erlaubnis>",
                //["NoPlayersFound"] = "Keine Spieler wurden durch '{0}' gefunden",
                //["NotAllowed"] = "Sie sind nicht berechtigt, verwenden Sie den Befehl '{0}'",
                ["NotWhitelisted"] = "Du bist nicht zugelassenen",
                //["Whitelisted"] = ""
            }, this, "de");

            // Russian
            lang.RegisterMessages(new Dictionary<string, string>
            {
                //["CommandUsage"] = "Использование: {0} <имя или идентификатор> <разрешение>",
                //["NoPlayersFound"] = "Игроки не были найдены с помощью {0}",
                //["NotAllowed"] = "Нельзя использовать команду «{0}»",
                ["NotWhitelisted"] = "Вы не можете",
                //["Whitelisted"] = ""
            }, this, "ru");

            // Spanish
            lang.RegisterMessages(new Dictionary<string, string>
            {
                //["CommandUsage"] = "Uso: {0} <nombre o id> <permiso>",
                //["NoPlayersFound"] = "No hay jugadores se encontraron con '{0}'",
                //["NotAllowed"] = "No se permite utilizar el comando '{0}'",
                ["NotWhitelisted"] = "No estás en lista blanca",
                //["Whitelisted"] = ""
            }, this, "es");
        }

        #endregion

        #region Whitelisting

        bool IsWhitelisted(string id)
        {
            var player = players.FindPlayerById(id);
            return player != null && adminExcluded && player.IsAdmin || permission.UserHasPermission(id, permAllow);
        }

        object CanUserLogin(string name, string id) => !IsWhitelisted(id) ? Lang("NotWhitelisted", id) : null;

        /*[Command("whitelist", "wl")]
        void Command(IPlayer player, string command, string[] args)
        {
            if (!player.HasPermission(permAdmin))
            {
                player.Reply(Lang("NotAllowed", player.Id, command));
                return;
            }

            if (args.Length == 0)
            {
                player.Reply(Lang("CommandUsage", player.Id, command));
                return;
            }

            var target = players.FindPlayer(string.Join(" ", args.ToArray()));
            if (target == null)
            {
                player.Reply(Lang("NoPlayersFound", player.Id, args[0]));
                return;
            }

            if (args[0] == "remove")
            {
                permission.RevokeUserPermission(target.Id, permAllow, this);
                player.Reply(Lang("Whitelisted", player.Id, args[0]));
            }
            else
            {
                permission.GrantUserPermission(target.Id, permAllow, this);
                player.Reply(Lang("Whitelisted", player.Id, args[0]));
            }
        }*/

        #endregion

        #region Helpers

        T GetConfig<T>(string name, T value) => Config[name] == null ? value : (T)Convert.ChangeType(Config[name], typeof(T));

        string Lang(string key, string id = null, params object[] args) => string.Format(lang.GetMessage(key, this, id), args);

        #endregion
    }
}

// --- End of file: Whitelist.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/workshop-skin-viewer ---
// --- Original File Path: W/WorkshopSkinViewer/WorkshopSkinViewer.cs ---

using System.Collections.Generic;
using Newtonsoft.Json;
using Oxide.Core;

namespace Oxide.Plugins
{
    [Info("Workshop Skin Viewer", "Orange", "1.0.0")]
    [Description("Allows you to check item skins from workshop")]
    public class WorkshopSkinViewer : RustPlugin
    {
        #region Vars

        private const string permUse = "workshopskinviewer.use";

        #endregion

        #region Oxide Hooks

        private void Init()
        {
            cmd.AddChatCommand(config.command, this, nameof(cmdGiveSkinnedItem));
            permission.RegisterPermission(permUse, this);
        }

        #endregion

        #region Commands

        private void cmdGiveSkinnedItem(BasePlayer player, string command, string[] args)
        {
            if (permission.UserHasPermission(player.UserIDString, permUse) == false)
            {
                Message(player, "Permission");
                return;
            }

            if (args == null || args?.Length < 2)
            {
                Message(player, "Usage");
                return;
            }

            GiveItem(player, args[0], args[1]);
        }

        #endregion

        #region Core

        private void GiveItem(BasePlayer player, string shortname, string skinIDString)
        {
            try
            {
                var skinID = 0UL;
                if (ulong.TryParse(skinIDString, out skinID) == false)
                {
                    Message(player, "Error");
                    return;
                }
                
                var item = ItemManager.CreateByName(shortname, 1, skinID);
                if (item == null)
                {
                    Message(player, "Error");
                    return;
                }

                var held = item.GetHeldEntity();
                if (held != null)
                {
                    held.skinID = skinID;
                    held.SendNetworkUpdate();
                }

                player.GiveItem(item);
                Message(player, "Received", item.info.displayName.english, skinID);
            }
            catch
            {
                Message(player, "Error");
            }
        }

        #endregion

        #region Configuration 1.1.0

        private static ConfigData config;

        private class ConfigData
        {
            [JsonProperty(PropertyName = "Command")]
            public string command;
        }

        private ConfigData GetDefaultConfig()
        {
            return new ConfigData
            {
                command = "wskin",
            };
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();

            try
            {
                config = Config.ReadObject<ConfigData>();

                if (config == null)
                {
                    LoadDefaultConfig();
                }
            }
            catch
            {
                PrintError("Configuration file is corrupt! Unloading plugin...");
                Interface.Oxide.RootPluginManager.RemovePlugin(this);
                return;
            }

            SaveConfig();
        }

        protected override void LoadDefaultConfig()
        {
            config = GetDefaultConfig();
        }

        protected override void SaveConfig()
        {
            Config.WriteObject(config);
        }

        #endregion
        
        #region Localization 1.1.1
        
        protected override void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                {"Usage", "Usage:\n/wskin shortname skinID"},
                {"Permission", "You don't have permission to use that!"},
                {"Received", "You received {0} with skin #{1}"},
                {"Error", "Looks as you made something wrong! SkinID or item shortname!"}
            }, this);
        }
        
        private void Message(BasePlayer player, string messageKey, params object[] args)
        {
            if (player == null)
            {
                return;
            }

            var message = GetMessage(messageKey, player.UserIDString, args);
            player.SendConsoleCommand("chat.add", (object) 0, (object) message);
        }

        private string GetMessage(string messageKey, string playerID, params object[] args)
        {
            return string.Format(lang.GetMessage(messageKey, this, playerID), args);
        }

        #endregion
    }
}


// --- End of file: WorkshopSkinViewer.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/whisper ---
// --- Original File Path: W/Whisper/Whisper.cs ---

﻿using System.Collections.Generic;
using Oxide.Core;
using System.Linq;
using Oxide.Core.Libraries.Covalence;

namespace Oxide.Plugins
{
    [Info("Whisper", "Ryan/mTrX", "1.1.1")]
    class Whisper : CovalencePlugin
    {
        #region Declaration

        private const string UsePerm = "whisper.use";
        private const string ReplyPerm = "whisper.reply";
        private string Command;
        private string ReplyCmd;

        #endregion

        #region Configuration

        private void LoadDefaultConfig()
        {
            Puts("Generating default configuration file");
            Config["Command"] = Command = "whisper";
            Config["Reply Command"] = ReplyCmd = "wr";
            Config.Save();
        }

        #endregion

        #region Lang

        private struct Msg
        {
            public const string Prefix = "Prefix";
            public const string Message = "Message";
            public const string NoPermission = "NoPermission";
            public const string Whispered = "Whispered";
            public const string InvalidArgs = "InvalidArgs";
            public const string NotId = "NotId";
            public const string NoPlayer = "NoPlayer";
            public const string InvalidArgsReply = "InvalidArgsReply";
            public const string Replied = "Replied";
            public const string Reply = "Reply;";
        }

        private void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                [Msg.Prefix] = "[#ff6666][WHISPER][/#] ",
                [Msg.Message] = "[#c0c0c0ff]{0}[/#]",
                [Msg.NoPermission] = "You don't have permission to use that commannd",
                [Msg.Whispered] = "Whispered {0} ({1}) with message '{2}'",
                [Msg.InvalidArgs] = "Invalid arguments. Usage: '{0} <id> <message>'",
                [Msg.InvalidArgsReply] = "Invalid arguments. Usage '{0} <message>'",
                [Msg.NotId] = "The ID you entered doesn't seem to be a valid Steam ID",
                [Msg.NoPlayer] = "No online player found with that Steam ID",
                [Msg.Replied] = "You have sent your reply",
                [Msg.Reply] = "[REPLY] {0} replied with message '{1}'"
            }, this);
        }

        #endregion

        #region Methods

        private string Lang(string key, string id = null, params object[] args) => string.Format(lang.GetMessage(key, this, id), args);

        #endregion

        #region Hooks

        private void Init()
        {
            permission.RegisterPermission(UsePerm, this);
            permission.RegisterPermission(ReplyPerm, this);
            Command = (string) Config["Command"];
            ReplyCmd = (string) Config["Reply Command"];
            if (string.IsNullOrEmpty(Command) || string.IsNullOrEmpty(ReplyCmd))
            {
                LogWarning("Configuration file not valid");
                LoadDefaultConfig();
            }
            AddCovalenceCommand(Command, "WhisperCommand");
            AddCovalenceCommand(ReplyCmd, "ReplyCommand");
        }

        #endregion

        #region Commands

        private void WhisperCommand(IPlayer player, string command, string[] args)
        {
            if (!player.IsAdmin && !player.HasPermission(UsePerm))
            {
                player.Reply(Lang(Msg.NoPermission, player.Id));
                return;
            }
            if (args.Length < 2)
            {
                player.Reply(Lang(Msg.InvalidArgs, player.Id, Command));
                return;
            }
            var userId = args[0];
            if (!userId.IsSteamId())
            {
                player.Reply(Lang(Msg.NotId, player.Id));
                return;
            }
            var foundPlayer = players.FindPlayerById(userId);
            if (foundPlayer == null || !foundPlayer.IsConnected)
            {
                player.Reply(Lang(Msg.NoPlayer, player.Id));
                return;
            }
            var fullArgs = string.Join(" ", args.ToList().Skip(1).ToArray());
            player.Reply(Lang(Msg.Whispered, player.Id, foundPlayer.Name, foundPlayer.Id, fullArgs));
            foundPlayer.Reply(covalence.FormatText(Lang(Msg.Prefix, player.Id) + Lang(Msg.Message, player.Id, fullArgs)));
        }

        private void ReplyCommand(IPlayer player, string command, string[] args)
        {
            if (!player.IsAdmin && !player.HasPermission(ReplyPerm))
            {
                player.Reply(Lang(Msg.NoPermission, player.Id));
                return;
            }
            if (args.Length < 1)
            {
                player.Reply(Lang(Msg.InvalidArgsReply, player.Id, ReplyCmd));
                return;
            }
            var fullArgs = string.Join(" ", args);
            Puts(Lang(Msg.Reply, null, player.Name, fullArgs));
            player.Reply(Lang(Msg.Replied, player.Id));
        }

        #endregion
    }
}

// --- End of file: Whisper.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/wounded-screams ---
// --- Original File Path: W/WoundedScreams/WoundedScreams.cs ---

using System.Collections.Generic;

namespace Oxide.Plugins
{
    [Info("Wounded Screams", "Death", "2.2.3")]
    [Description("Restored scream when a player is wounded")]

    class WoundedScreams : RustPlugin
    {
        #region Declarations
        Dictionary<ulong, Timer> Collection = new Dictionary<ulong, Timer>();
        const string exclude = "woundedscreams.exclude";
        const string nocooldown = "woundedscreams.nocooldown";
        const string ondemand = "woundedscreams.ondemand";
        bool Sub;
        Timer Get;
        #endregion

        #region Hooks
        void Init()
        {
            LoadConfigVariables();
            Unsub();
            permission.RegisterPermission(exclude, this);
            permission.RegisterPermission(ondemand, this);
            permission.RegisterPermission(nocooldown, this);
        }

        void Unload()
        {
            foreach (var entry in Collection)
            {
                Collection[entry.Key].Destroy();
            }
        }

        object OnPlayerWound(BasePlayer p)
        {
            if (permission.UserHasPermission(p.UserIDString, exclude))
            {
                return null;
            }

            PlayFX(p);

            if (!Sub)
            {
                Subscribe("OnEntityDeath");
                Subscribe("OnPlayerDisconnected");
                Sub = true;
            }
            return null;
        }

        void OnEntityDeath(BaseCombatEntity e) => Destroy(e as BasePlayer);
        void OnPlayerDisconnected(BasePlayer p) => Destroy(p);
        #endregion

        #region Functions
        void PlayFX(BasePlayer p)
        {
            Effect.server.Run(configData.Options.FX_Sound, p.transform.position);

            if (!Collection.ContainsKey(p.userID))
            {
                Collection.Add(p.userID, timer.Every(configData.Options.Interval, () =>
                {
                    if (p.IsWounded())
                    {
                        PlayFX(p);
                    }
                    else
                    {
                        Destroy(p);
                    }
                }
                ));
            }
        }

        void Destroy(BasePlayer p)
        {
            if (p != null && Collection.TryGetValue(p.userID, out Get))
            {
                Get.Destroy();
                Collection.Remove(p.userID);
            }

            if (Collection.Count == 0)
            {
                Unsub();
            }
        }

        void Unsub()
        {
            Unsubscribe("OnEntityDeath");
            Unsubscribe("OnPlayerDisconnected");
            Sub = false;
        }

        #region Commands
        [ConsoleCommand("scream")]
        void ConsoleCommand(ConsoleSystem.Arg arg) => ChatCommand(arg.Connection?.player as BasePlayer);

        [ChatCommand("scream")]
        void ChatCommand(BasePlayer p)
        {
            if (p == null)
            {
                return;
            }

            if (configData.Options.Enable_Scream_Ondemand && permission.UserHasPermission(p.UserIDString, ondemand))
            {
                if (Collection.ContainsKey(p.userID))
                {
                    SendReply(p, lang.GetMessage("cooldown", this, p.UserIDString).Replace("{0}", configData.Options.Scream_Cooldown.ToString()));
                }
                else
                {
                    Collection.Add(p.userID, timer.Once((permission.UserHasPermission(p.UserIDString, nocooldown)) ? 0 : configData.Options.Scream_Cooldown, () =>
                    {
                        if (Collection.ContainsKey(p.userID))
                        {
                            Collection.Remove(p.userID);
                        }
                    }
                    ));
                    PlayFX(p);
                }
            }
            else
            {
                SendReply(p, lang.GetMessage("noperm", this, p.UserIDString));
            }
        }
        #endregion

        #endregion

        #region Config
        private ConfigData configData;

        class ConfigData
        {
            public Options Options = new Options();
        }

        class Options
        {
            public bool Enable_Scream_Ondemand = false;
            public string FX_Sound = "assets/bundled/prefabs/fx/player/beartrap_scream.prefab";
            public float Interval = 6;
            public float Scream_Cooldown = 30;
        }

        private void LoadConfigVariables()
        {
            configData = Config.ReadObject<ConfigData>();
            SaveConfig(configData);
        }

        protected override void LoadDefaultConfig()
        {
            var config = new ConfigData();
            SaveConfig(config);
        }

        void SaveConfig(ConfigData config) => Config.WriteObject(config, true);
        #endregion

        #region Localization
        protected override void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>()
            {
                {"cooldown", "Please wait {0} seconds before trying to scream again." },
                {"noperm", "You do not have permission or this command is disabled." }
            }, this, "en");
        }
        private string msg(string key, string id = null) => lang.GetMessage(key, this, id);
        #endregion
    }
}

// --- End of file: WoundedScreams.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/wipe-data-cleaner ---
// --- Original File Path: W/WipeDataCleaner/WipeDataCleaner.cs ---

using System;
using System.Collections.Generic;
using System.Linq;

#if RUST
using Facepunch;
#endif

using Newtonsoft.Json;

using Oxide.Core;
using Oxide.Core.Configuration;
using Oxide.Core.Libraries.Covalence;

namespace Oxide.Plugins
{
    [Info("Wipe Data Cleaner", "2CHEVSKII", "1.4.2")]
    [Description("Cleans specified data files on new wipe.")]
    class WipeDataCleaner : CovalencePlugin
    {
        const string PERMISSIONUSE = "wipedatacleaner.wipe";

        OxideMod       Oxide = Interface.Oxide;
        PluginSettings settings;

        #region Oxide hooks

        void Init()
        {
            permission.RegisterPermission(PERMISSIONUSE, this);

            AddCovalenceCommand(settings.Command ?? "wipe", "Wipe", PERMISSIONUSE);
        }

        void OnNewSave(string filename) => Wipe(null);

        #endregion

        #region Configuration

        protected override void LoadDefaultConfig()
        {
            settings = new PluginSettings {
                FileNames = new List<string> {
                    "somefile",
                    "AnotherFile"
                },
                Command = "wipe"
            };
            SaveConfig();
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();

            try
            {
                settings = Config.ReadObject<PluginSettings>();

                if (settings == null || settings.FileNames == null)
                    throw new Exception("Configuration contains null value");

                SaveConfig();
            }
            catch (Exception e)
            {
                LogError("Failed to load configuration: {0}", e.Message);
                LoadDefaultConfig();
            }
        }

        protected override void SaveConfig()
        {
            Config.WriteObject(settings);
        }

        #endregion

        #region Core

        void Wipe(IPlayer executer)
        {
            if (settings.EnableLogs)
            {
                if (executer != null && !executer.IsServer)
                {
                    Log("Wipe started by {0}", executer.Name);
                }
                else
                {
                    Log("Wipe started");
                }

                LogWarning("Be careful, wipe will reload all the plugins!");
            }

            HashSet<string> filesToWipe = DetermineFilesToWipe();

            if (settings.EnableLogs)
            {
                Log("Data files ready to wipe:\n{0}", JsonConvert.SerializeObject(filesToWipe, Formatting.Indented));
            }

            List<string> ignoreList;

#if RUST
            ignoreList = Pool.GetList<string>();
#else
            ignoreList = new List<string>();
#endif

            ignoreList.Add(nameof(WipeDataCleaner));

            Oxide.UnloadAllPlugins(ignoreList);

#if RUST
            Pool.FreeList(ref ignoreList);
#endif

            foreach (string file in filesToWipe)
            {
                var message = WipeFile(file);

                if (settings.EnableLogs)
                {
                    Log(message);
                } else if (executer != null && !executer.IsServer)
                {
                    executer.Message(message);
                }
            }

            Oxide.LoadAllPlugins(false);

            if (settings.EnableLogs)
            {
                Log("Wipe completed");
            }
        }

        HashSet<string> DetermineFilesToWipe()
        {
            HashSet<string> files = new HashSet<string>();

            for (int i = 0; i < settings.FileNames.Count; i++)
            {
                string fileName = settings.FileNames[i];

                if (IsNullOrWhiteSpace(fileName))
                {
                    LogWarning("Configuration contains invalid filename!");
                    continue;
                }

                if (fileName.EndsWith("/"))
                {
                    string[] matchingFiles = SearchDirectory(fileName.Remove(fileName.Length - 1));

                    for (int j = 0; j < matchingFiles.Length; j++)
                    {
                        files.Add(SanitizeFileName(matchingFiles[j]));
                    }
                }
                else if (fileName.EndsWith("/*"))
                {
                    string[] matchingFiles = SearchDirectory(fileName.Remove(fileName.Length - 2));

                    for (int j = 0; j < matchingFiles.Length; j++)
                    {
                        files.Add(SanitizeFileName(matchingFiles[j]));
                    }
                }
                else
                {
                    string fn = fileName.EndsWith(".json") ? fileName : fileName + ".json";

                    string matchingFile = SearchFile(fn);

                    if (matchingFile != null)
                    {
                        files.Add(SanitizeFileName(matchingFile));
                    }
                }
            }

            return files;
        }

        string SanitizeFileName(string fileName)
        {
            return fileName.Substring(Oxide.DataDirectory.Length + 1).Replace("\\", "/");
        }

        string SearchFile(string name)
        {
            return Oxide.DataFileSystem.GetFiles(searchPattern: name).FirstOrDefault();
        }

        string[] SearchDirectory(string name)
        {
            return Oxide.DataFileSystem.GetFiles(name, "*");
        }

        string WipeFile(string file)
        {
            if (file.EndsWith(".json"))
            {
                file = file.Substring(0, file.Length - 5);
            }

            if (Interface.Oxide.DataFileSystem.ExistsDatafile(file))
            {
                DynamicConfigFile dataFile = Interface.Oxide.DataFileSystem.GetFile(file);

                dataFile.Clear();
                dataFile.Save();

                return $"Wiped '{file}.json'";
            }

            return $"Could not find '{file}.json'";
        }

        #endregion

        #region Helper methods

        bool IsNullOrWhiteSpace(string str)
        {
#if HURTWORLD || BLOCKSTORM || REIGNOFKINGS || THEFOREST || FORTRESSCRAFT || HOLDFAST || HUMANFALLFLAT || HEAT || HIDEHOLDOUT
            return str == null || str.Length == 0 || str.All(c => char.IsWhiteSpace(c));
#else
            return string.IsNullOrWhiteSpace(str);
#endif
        }

        #endregion

        #region Configuration class

        class PluginSettings
        {
            [JsonProperty("Filenames, without .json")]
            public List<string> FileNames { get; set; }

            [JsonProperty("Command (default: 'wipe')")]
            public string Command { get; set; }

            [JsonProperty("Enable logs", DefaultValueHandling = DefaultValueHandling.Populate)]
            public bool EnableLogs { get; set; }
        }

        #endregion
    }
}


// --- End of file: WipeDataCleaner.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/waypoints ---
// --- Original File Path: W/Waypoints/Waypoints.cs ---

using System;
using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using UnityEngine;
using Oxide.Core;
using Oxide.Core.Configuration;
using Oxide.Core.Plugins;
using Oxide.Core.Libraries.Covalence;

namespace Oxide.Plugins
{
    [Info("Waypoints", "RFC1920", "1.1.4", ResourceId = 982)]
    class Waypoints : RustPlugin
    {
        void Loaded()
        {
            LoadData();
        }

        private DynamicConfigFile data;
        private Dictionary<string, Waypoint> waypoints;

        void SaveData()
        {
            data.WriteObject(waypoints);
        }

        void LoadData()
        {
            try
            {
                data = Interface.Oxide.DataFileSystem.GetFile(nameof(Waypoints));
                data.Settings.Converters = new JsonConverter[] {new UnityVector3Converter()};
                waypoints = data.ReadObject<Dictionary<string, Waypoint>>();
                waypoints = waypoints.ToDictionary(w => w.Key.ToLower(), w => w.Value);
            }
            catch
            {
                waypoints = new Dictionary<string, Waypoint>();
            }
        }

        class WaypointInfo
        {
            [JsonProperty("p")]
            public Vector3 Position;
            [JsonProperty("s")]
            public float Speed;

            public WaypointInfo(Vector3 position, float speed)
            {
                Position = position;
                Speed = speed;
            }
        }

        #region Message
        private string _(string msgId, BasePlayer player, params object[] args)
        {
            var msg = lang.GetMessage(msgId, this, player?.UserIDString);
            return args.Length > 0 ? string.Format(msg, args) : msg;
        }

        private void PrintMsgL(BasePlayer player, string msgId, params object[] args)
        {
            if(player == null) return;
            PrintMsg(player, _(msgId, player, args));
        }

        private void PrintMsg(BasePlayer player, string msg)
        {
            if(player == null) return;
            SendReply(player, $"{msg}");
        }
        #endregion

        void Init()
        {
            AddCovalenceCommand("waypoints_new", "cmdWaypointsNew");
            AddCovalenceCommand("waypoints_add", "cmdWaypointsAdd");
            AddCovalenceCommand("waypoints_list", "cmdWaypointsList");
            AddCovalenceCommand("waypoints_remove", "cmdWaypointsRemove");
            AddCovalenceCommand("waypoints_save", "cmdWaypointsSave");
            AddCovalenceCommand("waypoints_close", "cmdWaypointsClose");

            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["notauthorized"] = "You don't have access to this command",
                ["wpediting"] = "You are already editing {0}",
                ["notediting"] = "You are not editing any waypoints, say /waypoints_new or /waypoints_edit NAME",
                ["listcreated"] = "Waypoints: New WaypointList created, you may now add waypoints.",
                ["wpadded"] = "Waypoint Added: {0} {1} {2} - Speed: {3}",
                ["nowp"] = "No waypoints created yet",
                ["wpheader"] = "==== Waypoints ====",
                ["wplist"] = "/waypoints_list to get the list of waypoints",
                ["wpnotexist"] = "Waypoint {0} doesn't exist",
                ["wpremoved"] = "Waypoints: {0} was removed",
                ["wpsave"] = "Waypoints: /waypoints_save NAMEOFWAYPOINT",
                ["wperror"] = "Waypoints: Something went wrong while getting your WaypointList",
                ["wpsaved"] = "Waypoints: New waypoint saved with: {0} with {1} waypoints stored",
                ["wpclose"] = "Waypoints: Closed without saving"
            }, this);
        }

        class Waypoint
        {
            public string Name;
            public List<WaypointInfo> Waypoints;

            public Waypoint()
            {
                Waypoints = new List<WaypointInfo>();
            }
            public void AddWaypoint(Vector3 position, float speed)
            {
                Waypoints.Add(new WaypointInfo(position, speed));
            }
        }

        class WaypointEditor : MonoBehaviour
        {
            public Waypoint targetWaypoint;

            void Awake()
            {
            }
        }

        [HookMethod("GetWaypointsList")]
        object GetWaypointsList(string name)
        {
            if (string.IsNullOrEmpty(name)) return null;
            Waypoint waypoint;
            if (!waypoints.TryGetValue(name.ToLower(), out waypoint)) return null;
            var returndic = new List<object>();

            foreach(var wp in waypoint.Waypoints)
            {
                returndic.Add(new Dictionary<Vector3, float> { { wp.Position, wp.Speed } });
            }
            return returndic;
        }

        bool hasAccess(BasePlayer player)
        {
            if (player.net.connection.authLevel < 1)
            {
                PrintMsgL(player, "notauthorized");
                return false;
            }
            return true;
        }

        bool isEditingWP(BasePlayer player, int ttype)
        {
            if (player.GetComponent<WaypointEditor>() != null)
            {
                if (ttype == 0) PrintMsgL(player, "wpediting", player.GetComponent<WaypointEditor>().targetWaypoint.Name);
                return true;
            }
            else
            {
                if (ttype == 1) PrintMsgL(player, "notediting");
                return false;
            }
        }

        #region commands
        [Command("waypoints_new")]
        void cmdWaypointsNew(IPlayer iplayer, string command, string[] args)
        {
            var player = iplayer.Object as BasePlayer;
            if (!hasAccess(player)) return;
            if (isEditingWP(player, 0)) return;

            var newWaypointEditor = player.gameObject.AddComponent<WaypointEditor>();
            newWaypointEditor.targetWaypoint = new Waypoint();
            PrintMsgL(player, "listcreated");
        }

        [Command("waypoints_add")]
        void cmdWaypointsAdd(IPlayer iplayer, string command, string[] args)
        {
            var player = iplayer.Object as BasePlayer;
            if (!hasAccess(player)) return;
            if (!isEditingWP(player, 1)) return;
            var WaypointEditor = player.GetComponent<WaypointEditor>();
            if (WaypointEditor.targetWaypoint == null)
            {
                PrintMsgL(player, "wperror");
                return;
            }
            float speed = 3f;
            if (args.Length > 0) float.TryParse(args[0], out speed);
            WaypointEditor.targetWaypoint.AddWaypoint(player.transform.position, speed);

            PrintMsgL(player, "wpadded",  player.transform.position.x, player.transform.position.y, player.transform.position.z, speed);
        }

        [Command("waypoints_list")]
        void cmdWaypointsList(IPlayer iplayer, string command, string[] args)
        {
            var player = iplayer.Object as BasePlayer;
            if (!hasAccess(player)) return;
            if (waypoints.Count == 0)
            {
                PrintMsgL(player, "nowp");
                return;
            }
            PrintMsgL(player, "wpheader");
            foreach (var pair in waypoints)
            {
                SendReply(player, pair.Key);
            }
        }

        [Command("waypoints_remove")]
        void cmdWaypointsRemove(IPlayer iplayer, string command, string[] args)
        {
            var player = iplayer.Object as BasePlayer;
            if (!hasAccess(player)) return;
            if (waypoints.Count == 0)
            {
                PrintMsgL(player, "nowp");
                return;
            }
            if(args.Length == 0)
            {
                PrintMsgL(player, "wplist");
                return;
            }
            if (!waypoints.Remove(args[0]))
            {
                PrintMsgL(player, "wpnotexist", args[0]);
                return;
            }
            SaveData();
            PrintMsgL(player, "wpremoved", args[0]);
        }

        [Command("waypoints_save")]
        void cmdWaypointsSave(IPlayer iplayer, string command, string[] args)
        {
            var player = iplayer.Object as BasePlayer;
            if (!hasAccess(player)) return;
            if (!isEditingWP(player, 1)) return;
            if (args.Length == 0)
            {
                PrintMsgL(player, "wpsave");
                return;
            }
            var WaypointEditor = player.GetComponent<WaypointEditor>();
            if (WaypointEditor.targetWaypoint == null)
            {
                PrintMsgL(player, "wperror");
                return;
            }

            var name = args[0];
            WaypointEditor.targetWaypoint.Name = name;
            waypoints[name.ToLower()] = WaypointEditor.targetWaypoint;
            PrintMsgL(player, "wpsaved", WaypointEditor.targetWaypoint.Name, WaypointEditor.targetWaypoint.Waypoints.Count);
            UnityEngine.Object.Destroy(player.GetComponent<WaypointEditor>());
            SaveData();
        }

        [Command("waypoints_close")]
        void cmdWaypointsClose(IPlayer iplayer, string command, string[] args)
        {
            var player = iplayer.Object as BasePlayer;
            if (!hasAccess(player)) return;
            if (!isEditingWP(player, 1)) return;
            PrintMsgL(player, "wpclosed");
            UnityEngine.Object.Destroy(player.GetComponent<WaypointEditor>());
        }
        #endregion

        private class UnityVector3Converter : JsonConverter
        {
            public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
            {
                var vector = (Vector3)value;
                writer.WriteValue($"{vector.x} {vector.y} {vector.z}");
            }

            public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
            {
                if (reader.TokenType == JsonToken.String)
                {
                    var values = reader.Value.ToString().Trim().Split(' ');
                    return new Vector3(Convert.ToSingle(values[0]), Convert.ToSingle(values[1]), Convert.ToSingle(values[2]));
                }
                var o = JObject.Load(reader);
                return new Vector3(Convert.ToSingle(o["x"]), Convert.ToSingle(o["y"]), Convert.ToSingle(o["z"]));
            }

            public override bool CanConvert(Type objectType)
            {
                return objectType == typeof(Vector3);
            }
        }
    }
}


// --- End of file: Waypoints.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/working-man ---
// --- Original File Path: W/WorkingMan/WorkingMan.cs ---

using System;
using System.Globalization;
using System.Linq;
using System.Collections.Generic;
using Oxide.Core;
using Oxide.Core.Configuration;
using Oxide.Core.Libraries.Covalence;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;

namespace Oxide.Plugins
{
    [Info("Working Man", "pilate/mothball187", "0.1")]
    [Description("Limit playtime per user")]

    class WorkingMan : CovalencePlugin
    {
        [PluginReference]
        private Plugin GUIAnnouncements, TimeOfDay;

        private DynamicConfigFile timeData;
        private PluginConfig config;
        private int dayWarningThreshold1 = 0;
        private int dayWarningThreshold2 = 0;
        private int weekWarningThreshold1 = 0;
        private int weekWarningThreshold2 = 0;
        private int WARNING1_INTERVAL = 5;
        private int WARNING2_INTERVAL = 1;
        private bool countTime = true;

        protected override void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["Reset"] = "Your timer has been reset for {0} and week {1}",
                ["ResetError"] = "Error handling reset command",
                ["SetDayTimer"] = "{0} day timer has been set to {1}",
                ["SetDayTimerError"] = "Could not find player with name {0}",
                ["SetDayTimerError2"] = "Error handling setdaytimer command",
                ["SetWeekTimer"] = "{0} week timer has been set to {1} minutes for the week of {2}",
                ["SetWeekTimerError"] = "Could not find player with name {0}",
                ["SetWeekTimerError2"] = "Error handling setweektimer command",
                ["SetDayLimit"] = "Time limit has been set to {0} minutes per day",
                ["SetDayLimitError"] = "Error handling setdaylimit command",
                ["SetWeekLimit"] = "Time limit has been set to {0} minutes per week",
                ["SetWeekLimitError"] = "Error handling setweeklimit command",
                ["SetWeekStartDay"] = "Week start day has been updated to {0}",
                ["SetWeekStartDayError"] = "Error handling setweekstartday command",
                ["SetTimeNights"] = "Time nights option set to {0}",
                ["SetTimeNightsError"] = "Error handling settimenights command",
                ["ResetDefaults"] = "Default config reloaded",
                ["SetWarn1"] = "Warning threshold 1 has been set to {0} minutes",
                ["SetWarn1Error"] = "Error handling setwarn1 command",
                ["SetWarn2"] = "Warning threshold 2 has been set to {0} minutes",
                ["SetWarn2Error"] = "Error handling setwarn2 command",
                ["GiveTimeDay"] = "{0} has been given {1} minutes for {2}",
                ["GiveTimeDayError"] = "Could not find player with name {0}",
                ["GiveTimeDayError2"] = "Error handling givetimeday command",
                ["GiveTimeWeek"] = "{0} has been given {1} minutes for week {2}",
                ["GiveTimeWeekError"] = "Could not find player with name {0}",
                ["GiveTimeWeekError2"] = "Error handling givetimeweek command",
                ["CheckTimer1"] = "You have been playing for {0} in this 24-hour period ({1}), you have {2} left.",
                ["CheckTimer2"] = "There is {0} remaining until the next day cycle begins.",
                ["CheckTimer3"] = "You have been playing for {0} this week ({1}), you have {2} left.",
                ["CheckTimer4"] = "There is {0} remaining until the next week cycle begins.",
                ["CheckTimerError"] = "Error handling checktimer command",
                ["PlayerDayWarning"] = "WARNING: You have been playing for {0} in this 24-hour period ({1}), you have {2} left!",
                ["PlayerWeekWarning"] = "WARNING: You have been playing for {0} this week ({1}), you have {2} left!",
                ["Kick"] = "Played time exceeds limit",
                ["LoginDay"] = "There is {0} remaining until the next day cycle begins.",
                ["LoginWeek"] = "There is {0} remaining until the next week cycle begins.",
                ["NotAdmin"] = "You must be an admin to use this command."
            }, this);
        }

        [Command("workingman.reset")]
        private void ResetTimer(IPlayer player, string command, string[] args)
        {
            if(!player.IsAdmin)
            {
                player.Reply(lang.GetMessage("NotAdmin", this, player.Id));
                return;
            }

            string today = DateTime.Now.ToString("MM/dd/yyyy");
            string week = WeekOfYear();
            timeData[player.Id, today] = 0;
            timeData[player.Id, week] = 0;
            player.Reply(string.Format(lang.GetMessage("Reset", this, player.Id), today, week));
           
        }

        [Command("workingman.setdaytimer")]
        private void SetDayTimer(IPlayer player, string command, string[] args)
        {
            if(!player.IsAdmin)
            {
                player.Reply(lang.GetMessage("NotAdmin", this, player.Id));
                return;
            }

            string playerId = players.FindPlayer(args[0]).Id;
            string today = DateTime.Now.ToString("MM/dd/yyyy");

            if(playerId != null){
                Int32 time;
                if(!Int32.TryParse(args[1], out time))
                {
                    player.Reply(lang.GetMessage("SetDayTimerError2", this, player.Id));
                    return;
                }

                timeData[playerId, today] = time;
                player.Reply(string.Format(lang.GetMessage("SetDayTimer", this, player.Id), args[0], args[1]));
            }
            else
                player.Reply(string.Format(lang.GetMessage("SetDayTimerError", this, player.Id), args[0]));

        }

        [Command("workingman.setweektimer")]
        private void SetWeekTimer(IPlayer player, string command, string[] args)
        {
            if(!player.IsAdmin)
            {
                player.Reply(lang.GetMessage("NotAdmin", this, player.Id));
                return;
            }

            string playerId = players.FindPlayer(args[0]).Id;
            string week = WeekOfYear();

            if(playerId != null){
                Int32 time;
                if(!Int32.TryParse(args[1], out time))
                {
                    player.Reply(lang.GetMessage("SetWeekTimerError2", this, player.Id));
                    return;
                }

                timeData[playerId, week] = time;
                player.Reply(string.Format(lang.GetMessage("SetWeekTimer", this, player.Id), args[0], args[1], week));
            }
            else
                player.Reply(string.Format(lang.GetMessage("SetWeekTimerError", this, player.Id), args[0]));
        }

        [Command("workingman.setdaylimit")]
        private void SetDayLimit(IPlayer player, string command, string[] args)
        {
            if(!player.IsAdmin)
            {
                player.Reply(lang.GetMessage("NotAdmin", this, player.Id));
                return;
            }

            Int32 limit;
            if(!Int32.TryParse(args[0], out limit))
            {
                player.Reply(lang.GetMessage("SetDayLimitError", this, player.Id));
                return;
            }

            config.minutesPerDay = limit;
            SaveConfig();
            ResetWarningThresholds();
            player.Reply(string.Format(lang.GetMessage("SetDayLimit", this, player.Id), args[0]));
        }

        [Command("workingman.setweeklimit")]
        private void SetWeekLimit(IPlayer player, string command, string[] args)
        {
            if(!player.IsAdmin)
            {
                player.Reply(lang.GetMessage("NotAdmin", this, player.Id));
                return;
            }

            Int32 limit;
            if(!Int32.TryParse(args[0], out limit))
            {
                player.Reply(lang.GetMessage("SetWeekLimitError", this, player.Id));
                return;
            }

            config.minutesPerWeek = limit;
            SaveConfig();
            ResetWarningThresholds();
            player.Reply(string.Format(lang.GetMessage("SetWeekLimit", this, player.Id), args[0]));
        }

        [Command("workingman.setweekstartday")]
        private void SetWeekStartDay(IPlayer player, string command, string[] args)
        {
            if(!player.IsAdmin)
            {
                player.Reply(lang.GetMessage("NotAdmin", this, player.Id));
                return;
            }

            Int32 weekday;
            if(!Int32.TryParse(args[0], out weekday))
            {
                player.Reply(lang.GetMessage("SetWeekStartDayError", this, player.Id));
                return;
            }

            config.dayOfWeek = weekday;
            SaveConfig();
            player.Reply(string.Format(lang.GetMessage("SetWeekStartDay", this, player.Id), args[0]));
        }

        [Command("workingman.settimenights")]
        private void SetTimeNights(IPlayer player, string command, string[] args)
        {
            if(!player.IsAdmin)
            {
                player.Reply(lang.GetMessage("NotAdmin", this, player.Id));
                return;
            }

            bool timeNights;
            if(!Boolean.TryParse(args[0], out timeNights))
            {
                player.Reply(lang.GetMessage("SetTimeNightsError", this, player.Id));
                return;
            }

            config.timeNights = timeNights;
            SaveConfig();
            player.Reply(string.Format(lang.GetMessage("SetTimeNights", this, player.Id), timeNights));    
        }

        [Command("workingman.resetdefaults")]
        private void ResetDefaults(IPlayer player, string command, string[] args)
        {
            if(!player.IsAdmin)
            {
                player.Reply(lang.GetMessage("NotAdmin", this, player.Id));
                return;
            }

            LoadDefaultConfig();
            player.Reply(lang.GetMessage("ResetDefaults", this, player.Id));
        }

        [Command("workingman.setwarn1")]
        private void SetWarningThreshold1(IPlayer player, string command, string[] args)
        {
            if(!player.IsAdmin)
            {
                player.Reply(lang.GetMessage("NotAdmin", this, player.Id));
                return;
            }

            Int32 warn;
            if(!Int32.TryParse(args[0], out warn))
            {
                player.Reply(lang.GetMessage("SetWarn1Error", this, player.Id));
                return;
            }

            config.warningThreshold1 = warn;
            SaveConfig();
            ResetWarningThresholds();
            player.Reply(string.Format(lang.GetMessage("SetWarn1", this, player.Id), args[0]));
        }

        [Command("workingman.setwarn2")]
        private void SetWarningThreshold2(IPlayer player, string command, string[] args)
        {
            if(!player.IsAdmin)
            {
                player.Reply(lang.GetMessage("NotAdmin", this, player.Id));
                return;
            }

            Int32 threshold;
            if(!Int32.TryParse(args[0], out threshold))
            {
                player.Reply(lang.GetMessage("SetWarn2Error", this, player.Id));
                return;
            }

            config.warningThreshold2 = threshold;
            SaveConfig();
            ResetWarningThresholds();
            player.Reply(string.Format(lang.GetMessage("SetWarn2", this, player.Id), args[0]));
        }

        [Command("workingman.givetimeday")]
        private void GiveTimeDay(IPlayer player, string command, string[] args)
        {
            if(!player.IsAdmin)
            {
                player.Reply(lang.GetMessage("NotAdmin", this, player.Id));
                return;
            }

            string today = DateTime.Now.ToString("MM/dd/yyyy");
            string playerId = players.FindPlayer(args[0]).Id;
            if(playerId == null)
            {
                player.Reply(string.Format(lang.GetMessage("GiveTimeDayError", this, player.Id), args[0]));
                return;
            }

            Int32 time;
            if(!Int32.TryParse(args[1], out time))
            {
                player.Reply(lang.GetMessage("GiveTimeDayError2", this, player.Id));
                return;
            }

            timeData[playerId, today] = (int)timeData[playerId, today] - time;
            player.Reply(string.Format(lang.GetMessage("GiveTimeDay", this, player.Id), args[0], args[1], today));
        }

        [Command("workingman.givetimeweek")]
        private void GiveTimeWeek(IPlayer player, string command, string[] args)
        {
            if(!player.IsAdmin)
            {
                player.Reply(lang.GetMessage("NotAdmin", this, player.Id));
                return;
            }

            string week = WeekOfYear();
            string playerId = players.FindPlayer(args[0]).Id;
            if(playerId == null)
            {
                player.Reply(string.Format(lang.GetMessage("GiveTimeWeekError", this, player.Id), args[0]));
                return;
            }

            Int32 time;
            if(!Int32.TryParse(args[1], out time))
            {
                player.Reply(lang.GetMessage("GiveTimeWeekError2", this, player.Id));
                return;
            }

            timeData[playerId, week] = (int)timeData[playerId, week] - time;
            player.Reply(string.Format(lang.GetMessage("GiveTimeWeek", this, player.Id), args[0], args[1], week));
        }

        [Command("checktimer")]
        private void CheckTimer(IPlayer player, string command, string[] args)
        {
            string today = DateTime.Now.ToString("MM/dd/yyyy");
            string week = WeekOfYear();

            if(config.minutesPerDay > 0){
                player.Reply(string.Format(lang.GetMessage("CheckTimer1", this, player.Id), 
                    FormatTimeSpan((int)timeData[player.Id, today]), today, FormatTimeSpan(config.minutesPerDay - (int)timeData[player.Id, today])));
                player.Reply(string.Format(lang.GetMessage("CheckTimer2", this, player.Id), FormatTimeSpan((long)TimeTilNextDayCycle().TotalMinutes)));
            }

            if(config.minutesPerWeek > 0){
                player.Reply(string.Format(lang.GetMessage("CheckTimer3", this, player.Id), 
                    FormatTimeSpan((int)timeData[player.Id, week]), week, FormatTimeSpan(config.minutesPerWeek - (int)timeData[player.Id, week])));
                player.Reply(string.Format(lang.GetMessage("CheckTimer4", this, player.Id), FormatTimeSpan2((long)TimeTilNextWeekCycle().TotalMinutes)));
            }
        }

        private void OnTimeSunset()
        {
            if(!(bool)config.timeNights)
                countTime = false;
        }

        private void OnTimeSunrise()
        {
            countTime = true;
        }

        private void Unload()
        {
            timeData.Save();
        }

        private void OnServerSave()
        {
            timeData.Save();
        }

        private string WeekOfYear()
        {
            CultureInfo cul = CultureInfo.CurrentCulture;    

            int firstDayWeek = cul.Calendar.GetWeekOfYear(    
                 DateTime.Now,    
                 CalendarWeekRule.FirstDay,    
                 (System.DayOfWeek)config.dayOfWeek);

            return DateTime.Now.ToString("yyyy") + "-" + firstDayWeek.ToString();
        }

        public static DateTime GetNextWeekday(DateTime start, DayOfWeek day)
        {
            int daysToAdd = ((int) day - (int) start.DayOfWeek + 7) % 7;
            return start.AddDays(daysToAdd);
        }

        private TimeSpan TimeTilNextWeekCycle()
        {
            TimeSpan untilMidnight = GetNextWeekday(DateTime.Today, (System.DayOfWeek)config.dayOfWeek) - DateTime.Now;
            return untilMidnight;
        }

        private TimeSpan TimeTilNextDayCycle()
        {
            TimeSpan untilMidnight = DateTime.Today.AddDays(1.0) - DateTime.Now;
            return untilMidnight;
        }

        private string FormatTimeSpan(long minutes)
        {
            TimeSpan t = TimeSpan.FromMinutes( minutes );
            string answer = string.Format("{0:D2}h:{1:D2}m", 
                t.Hours, 
                t.Minutes);
            return answer;
        }

        private string FormatTimeSpan2(long minutes)
        {
            TimeSpan t = TimeSpan.FromMinutes( minutes );
            string answer = string.Format("{0:D2}d:{1:D2}h:{2:D2}m",
                t.Days, 
                t.Hours, 
                t.Minutes);
            return answer;
        }

        class PluginConfig
        {
            public long minutesPerDay { get; set; }
            public long minutesPerWeek { get; set; }
            public long warningThreshold1 { get; set; }
            public long warningThreshold2 { get; set; }
            public int  dayOfWeek { get; set; }
            public bool timeNights { get; set; }
        }

        private void Init()
        {
            TimeZoneInfo.ClearCachedData();
            timeData = Interface.Oxide.DataFileSystem.GetDatafile("WorkingMan/timeData");
            config = Config.ReadObject<PluginConfig>();
            dayWarningThreshold1 = (int)config.minutesPerDay - (int)config.warningThreshold1;
            dayWarningThreshold2 = (int)config.minutesPerDay - (int)config.warningThreshold2;
            weekWarningThreshold1 = (int)config.minutesPerWeek - (int)config.warningThreshold1;
            weekWarningThreshold2 = (int)config.minutesPerWeek - (int)config.warningThreshold2;

            timer.Every(60f, UpdateLoop);
        }

        private void MsgPlayer(BasePlayer player, string msg)
        {
            player.ChatMessage(msg);
            if(GUIAnnouncements != null)
                GUIAnnouncements?.Call("CreateAnnouncement", msg, "Purple", "Yellow", player);
        }

        private void UpdateLoop()
        {
            if(!countTime)
                return;

            int dayTime, weekTime;
            string today = DateTime.Now.ToString("MM/dd/yyyy");
            string week = WeekOfYear();
            List<string> kick = new List<string>();

            foreach (var player in BasePlayer.activePlayerList)
            {
                if (timeData[player.UserIDString, today] == null)
                    timeData[player.UserIDString, today] = 0;

                if (timeData[player.UserIDString, week] == null)
                    timeData[player.UserIDString, week] = 0;

                dayTime = (int)timeData[player.UserIDString, today] + 1;
                timeData[player.UserIDString, today] = dayTime;

                weekTime = (int)timeData[player.UserIDString, week] + 1;
                timeData[player.UserIDString, week] = weekTime;

                if(config.minutesPerDay > 0)
                {
                    string msg = string.Format(lang.GetMessage("PlayerDayWarning", this, player.UserIDString), 
                            FormatTimeSpan(dayTime), today, FormatTimeSpan(config.minutesPerDay - dayTime));
                    if(dayTime >= dayWarningThreshold2)
                    {
                        if(dayTime % WARNING2_INTERVAL == 0)
                            MsgPlayer(player, msg);

                    }
                    else if(dayTime >= dayWarningThreshold1)
                    {
                        if(dayTime % WARNING1_INTERVAL == 0)
                            MsgPlayer(player, msg);
                    }
                }

                if(config.minutesPerWeek > 0)
                {
                    string msg = string.Format(lang.GetMessage("PlayerWeekWarning", this, player.UserIDString), 
                            FormatTimeSpan(weekTime), week, FormatTimeSpan(config.minutesPerWeek - weekTime));
                    if(weekTime >= weekWarningThreshold2)
                    {
                        if(weekTime % WARNING2_INTERVAL == 0)
                            MsgPlayer(player, msg);

                    }
                    else if(weekTime >= weekWarningThreshold1)
                    {
                        if(weekTime % WARNING1_INTERVAL == 0)
                            MsgPlayer(player, msg);
                    }
                }

                if ((config.minutesPerDay > 0 && dayTime >= config.minutesPerDay) || (config.minutesPerWeek > 0 && weekTime >= config.minutesPerWeek)) {
                    kick.Add(player.UserIDString);
                }

            }

            foreach(string playerId in kick)
            {
                var player = players.FindPlayerById(playerId);
                player.Kick(lang.GetMessage("Kick", this, playerId));
            }
        }

        protected override void LoadDefaultConfig()
        {
            LogWarning("Creating a new configuration file");
            config = new PluginConfig();
            config.minutesPerDay = 6 * 60; //6 hours
            config.minutesPerWeek = 0;
            config.warningThreshold1 = 30;
            config.warningThreshold2 = 10;
            config.dayOfWeek = 4; // Thursday
            config.timeNights = true;
            ResetWarningThresholds();
            SaveConfig();
        }

        private object CanUserLogin(Network.Connection connection)
        {
            int dayCount, weekCount;
            string today = DateTime.Now.ToString("MM/dd/yyyy");
            string week = WeekOfYear();
            string id = connection.userid.ToString();

            if (timeData[id, today] == null)
                timeData[id, today] = 0;

            if (timeData[id, week] == null)
                timeData[id, week] = 0;

            dayCount = (int)timeData[id, today];
            weekCount = (int)timeData[id, week];
            if (config.minutesPerDay > 0 && dayCount != null && dayCount >= config.minutesPerDay)
            {
                string error = string.Format(lang.GetMessage("LoginDay", this, id), FormatTimeSpan((long)TimeTilNextDayCycle().TotalMinutes));
                return error;
            }
            else if(config.minutesPerWeek > 0 && weekCount != null && weekCount >= config.minutesPerWeek)
            {
                string error = string.Format(lang.GetMessage("LoginWeek", this, id), FormatTimeSpan2((long)TimeTilNextWeekCycle().TotalMinutes));
                return error;
            }

			return null;
        }

        private void SaveConfig()
        {
            Config.WriteObject(config, true);
        }

        private void ResetWarningThresholds()
        {
            if((int)config.minutesPerDay > 0){
                dayWarningThreshold1 = (int)config.minutesPerDay - (int)config.warningThreshold1;
                dayWarningThreshold2 = (int)config.minutesPerDay - (int)config.warningThreshold2;
            }

            if((int)config.minutesPerWeek > 0){
                weekWarningThreshold1 = (int)config.minutesPerWeek - (int)config.warningThreshold1;
                weekWarningThreshold2 = (int)config.minutesPerWeek - (int)config.warningThreshold2;
            }
        }

    }
}

// --- End of file: WorkingMan.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/welcomer ---
// --- Original File Path: W/Welcomer/Welcomer.cs ---

using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Core.Configuration;
using Oxide.Core.Libraries;
using Oxide.Core.Libraries.Covalence;
using Oxide.Plugins;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("Welcomer", "Dana", "2.1.0")]
    [Description("Welcomes players and announces when they join or leave.")]
    public class Welcomer : RustPlugin
    {
        #region Fields

        private const string permissionBypass = "welcomer.bypass";

        private static Configuration config;

        private Data data;
        private DynamicConfigFile dataFile;

        private const string apiUrl = "http://ip-api.com/json/";

        private List<ulong> playersToWelcome { get; set; } = new List<ulong>();

        #endregion

        #region Configuration
        
        private class Configuration
        {
            [JsonProperty(PropertyName = "Chat Avatar")]
            public ulong ChatAvatar { get; set; }

            [JsonProperty(PropertyName = "Show Player Avatar")]
            public bool ShowPlayerAvatar { get; set; }

            [JsonProperty(PropertyName = "Enable Chat Welcome Message")]
            public bool EnableChatWelcomeMessage { get; set; }

            [JsonProperty(PropertyName = "Enable Console Welcome Message")]
            public bool EnableConsoleWelcomeMessage { get; set; }

            [JsonProperty(PropertyName = "Enable Join Message")]
            public bool EnableJoinMessage { get; set; }

            [JsonProperty(PropertyName = "Enable Newcomer Join Message")]
            public bool EnableNewcomerJoinMessage { get; set; }

            [JsonProperty(PropertyName = "Enable Leave Message")]
            public bool EnableLeaveMessage { get; set; }

            [JsonProperty(PropertyName = "Enable Rage Quit Message")]
            public bool EnableRageQuitMessage { get; set; }

            [JsonProperty(PropertyName = "Clear Data On Wipe")]
            public bool ClearDataOnWipe { get; set; }

            [JsonProperty(PropertyName = "Log To Console")]
            public bool LogToConsole { get; set; }
        }

        private Configuration GetDefaultConfig()
        {
            return new Configuration
            {
                ChatAvatar = 0,
                ShowPlayerAvatar = false,
                EnableChatWelcomeMessage = true,
                EnableConsoleWelcomeMessage = true,
                EnableJoinMessage = true,
                EnableNewcomerJoinMessage = true,
                EnableLeaveMessage = true,
                EnableRageQuitMessage = false,
                ClearDataOnWipe = true,
                LogToConsole = true,
            };
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            config = Config.ReadObject<Configuration>();

            SaveConfig();
        }

        protected override void LoadDefaultConfig()
        {
            config = GetDefaultConfig();
        }

        protected override void SaveConfig()
        {
            Config.WriteObject(config, true);
        }

        #endregion

        #region Data

        private class Data
        {
            [JsonProperty(PropertyName = "Players Data")]
            public Dictionary<ulong, PlayerData> Players { get; set; } = new Dictionary<ulong, PlayerData>();
        }

        private class PlayerData
        {
            [JsonProperty("Country")]
            public string Country { get; set; }
        }
        
        private void CreatePlayerData(ulong playerId, string country)
        {
            data.Players[playerId] = new PlayerData
            {
                Country = country,
            };

            SaveData();
        }
        
        private PlayerData GetPlayerData(ulong playerId)
        {
            PlayerData playerData;
            return data.Players.TryGetValue(playerId, out playerData) ? playerData : null;
        }

        private void LoadData()
        {
            dataFile = Interface.Oxide.DataFileSystem.GetFile(Name);
            data = dataFile.ReadObject<Data>();

            if (data == null)
                data = new Data();
        }

        private void SaveData()
        {
            dataFile.WriteObject(data);
        }

        private void ClearData()
        {
            data = new Data();
            SaveData();
        }

        #endregion

        #region Hooks

        #region Initialization and Quitting Hooks

        private void Init()
        {
            permission.RegisterPermission(permissionBypass, this);
            LoadData();
        }

        private void Unload()
        {
            config = null;
            SaveData();
        }

        #endregion

        #region Server Hooks

        private void OnServerSave()
        {
            SaveData();
        }

        private void OnNewSave(string fileName)
        {
            if (config.ClearDataOnWipe)
                ClearData();
        }

        #endregion

        #region Player Hooks

        private void OnPlayerConnected(BasePlayer player)
        {
            if (config.EnableChatWelcomeMessage || config.EnableConsoleWelcomeMessage)
                playersToWelcome.Add(player.userID);
            
            if (HasPermission(player, permissionBypass))
                return;
            
            string ipAddress = ProcessAddress(player);

            TryExtractCountry(player, apiUrl, ipAddress,
                requestCallback: country =>
                {
                    if (!data.Players.ContainsKey(player.userID) && config.EnableNewcomerJoinMessage)
                    {
                        SendMessageToAll(player, GetMessage(MessageKey.JoinNewcomer, player.UserIDString, player.displayName, country));
                        CreatePlayerData(player.userID, country);

                        if (config.LogToConsole)
                            Puts(StripRichText(GetMessage(MessageKey.JoinNewcomer, player.UserIDString, player.displayName, country)));
                    }
                    else
                    {
                        if (config.EnableJoinMessage)
                            SendMessageToAll(player, GetMessage(MessageKey.Join, player.UserIDString, player.displayName, country));

                        if (config.LogToConsole)
                            Puts(StripRichText(GetMessage(MessageKey.JoinNewcomer, player.UserIDString, player.displayName, country)));
                    }
                }
            );
        }

        private void OnPlayerSleepEnded(BasePlayer player)
        {
            if (!playersToWelcome.Contains(player.userID))
                return;

            int activePlayers = BasePlayer.activePlayerList.Count;
            int sleepingPlayers = BasePlayer.sleepingPlayerList.Count;
            int queuedPlayers = ServerMgr.Instance.connectionQueue.queue.Count;
            int joiningPlayers = ServerMgr.Instance.connectionQueue.joining.Count;

            if (config.EnableChatWelcomeMessage)
                SendChatMessage(player, GetMessage(MessageKey.WelcomeChat, player.UserIDString, activePlayers, joiningPlayers, sleepingPlayers, queuedPlayers));

            if (config.EnableConsoleWelcomeMessage)
                SendConsoleMessage(player, GetMessage(MessageKey.WelcomeConsole, player.UserIDString, activePlayers, joiningPlayers, sleepingPlayers, queuedPlayers));

            playersToWelcome.Remove(player.userID);
        }

        private void OnPlayerDisconnected(BasePlayer player, string reason)
        {
            if (HasPermission(player, permissionBypass))
                return;

            if (config.EnableLeaveMessage)
                SendMessageToAll(player, GetMessage(MessageKey.Leave, player.UserIDString, player.displayName, reason));

            if (config.EnableRageQuitMessage && player.IsDead())
                SendMessageToAll(player, GetMessage(MessageKey.LeaveRageQuit, player.UserIDString, player.displayName));
        }

        #endregion

        #endregion

        #region Functions
        
        private void TryExtractCountry(BasePlayer player, string url, string ipAddress, Action<string> requestCallback)
        {
            string country = "Unknown";

            PlayerData playerData = GetPlayerData(player.userID);
            if (playerData != null && playerData.Country != null && playerData.Country != "Unknown")
            {
                country = playerData.Country;
                requestCallback(country);
                return;
            }

            webrequest.Enqueue(url + ipAddress, null, (statusCode, response) =>
            {
                if (statusCode != 200 || string.IsNullOrWhiteSpace(response))
                {
                    PrintError($"Request to {apiUrl} for {player.userID} was unsuccessful. Status code: {statusCode}");
                    requestCallback(country);
                    return;
                }

                try
                {
                    country = JsonConvert.DeserializeObject<PlayerData>(response).Country;
                }
                catch (Exception exception)
                {
                    PrintError($"Error parsing country from {apiUrl}\n{exception.Message}");
                    requestCallback(country);
                    return;
                }

                requestCallback(country);

            }, this, RequestMethod.GET);
        }

        private string ProcessAddress(BasePlayer player)
        {
            string[] ipAddress = player.net?.connection?.ipaddress?.Split(':');

            if (ipAddress == null || ipAddress.Length == 0)
                return null;

            string result = ipAddress[0];
            return result;
        }

        #endregion

        #region Helper Functions

        private bool HasPermission(BasePlayer player, string permissionName)
        {
            return permission.UserHasPermission(player.UserIDString, permissionName);
        }

        private void SendConsoleMessage(BasePlayer player, string message)
        {
            player.ConsoleMessage(message);
        }

        private void SendChatMessage(BasePlayer player, string message)
        {
            Player.Message(player, message, config.ChatAvatar);
        }

        private void SendMessageToAll(BasePlayer player, string message)
        {
            Server.Broadcast(message, config.ShowPlayerAvatar ? player.userID : config.ChatAvatar);
        }

        private string StripRichText(string message)
        {
            if (message == null)
                message = string.Empty;

            string[] stringReplacements = new string[]
            {
                "<b>", "</b>",
                "<i>", "</i>",
                "</size>",
                "</color>"
            };

            Regex[] regexReplacements = new Regex[]
            {
                new Regex(@"<color=.+?>"),
                new Regex(@"<size=.+?>"),
            };

            foreach (var replacement in stringReplacements)
                message = message.Replace(replacement, string.Empty);

            foreach (var replacement in regexReplacements)
                message = replacement.Replace(message, string.Empty);

            return Formatter.ToPlaintext(message);
        }

        #endregion

        #region Commands

        private static class Command
        {
            public const string Clear = "welcomer.clear";
            public const string Test = "welcomer.test";
        }

        [ConsoleCommand(Command.Clear)]
        private void cmdClear(ConsoleSystem.Arg conArgs)
        {
            if (conArgs.IsClientside)
                return;

            ClearData();
            Puts("Players data cleared");
        }

        [ChatCommand(Command.Test)]
        private void cmdTest(BasePlayer player, string cmd, string[] args)
        {
            if (player == null || !player.IsAdmin)
                return;

            SendChatMessage(player, GetMessage(MessageKey.Test, player.UserIDString));
        }

        #endregion

        #region Localization

        private class MessageKey
        {
            public const string WelcomeChat = "Welcome.Chat";
            public const string WelcomeConsole = "Welcome.Console";
            public const string Join = "Join";
            public const string JoinNewcomer = "Join.Newcomer ";
            public const string Leave = "Leave";
            public const string LeaveRageQuit = "Leave.RageQuit";
            public const string Test = "Test";
        }

        protected override void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                [MessageKey.WelcomeChat] = "There are currently {0} active players, {1} joining, {2} sleepers, and {3} in the queue",
                [MessageKey.WelcomeConsole] = "There are currently {0} active players, {1} joining, {2} sleepers, and {3} in the queue",

                [MessageKey.Join] = "{0} joined from {1}",
                [MessageKey.JoinNewcomer] = "{0} joined for the very first time from {1}",

                [MessageKey.Leave] = "{0} left the server for the reason {1}",
                [MessageKey.LeaveRageQuit] = "{0} rage quitted",

                [MessageKey.Test] = "Test message",
            }, this, "en");
        }

        private string GetMessage(string messageKey, string playerId = null, params object[] args)
        {
            try
            {
                return string.Format(lang.GetMessage(messageKey, this, playerId), args);
            }
            catch (Exception exception)
            {
                PrintError(exception.ToString());
                throw;
            }
        }

        #endregion
    }
}

// --- End of file: Welcomer.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/wipe-info-api ---
// --- Original File Path: W/WipeInfoApi/WipeInfoApi.cs ---

﻿using System;
using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json;
using Oxide.Core;
using Rust;

namespace Oxide.Plugins
{
    [Info("Wipe Info Api", "MJSU", "1.1.0")]
    [Description("Api for when the server is wiping")]
    public class WipeInfoApi : RustPlugin
    {
        #region Class Fields

        private StoredData _storedData; //Plugin Data
        private PluginConfig _pluginConfig;

        private DateTime _currentDate;
        private DateTime _nextWipe;
        private int _daysTillNextWipe;
        private int _currentDaysBetweenWipes;
        private bool _isForcedWipeDay;
        private bool _newSaveVersion;

        #endregion

        #region Setup & Loading

        private void Init()
        {
            _storedData = Interface.Oxide.DataFileSystem.ReadObject<StoredData>(Name);

            if (_storedData.SaveVersion != Protocol.save)
            {
                _storedData.SaveVersion = Protocol.save;
                _newSaveVersion = true;
                Interface.Call("OnSaveVersionChanged");
                NextTick(SaveData);
            }

            CalculateWipe();
        }

        protected override void LoadDefaultConfig()
        {
            PrintWarning("Loading Default Config");
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            Config.Settings.DefaultValueHandling = DefaultValueHandling.Populate;
            _pluginConfig = AdditionalConfig(Config.ReadObject<PluginConfig>());
            Config.WriteObject(_pluginConfig);
        }

        private PluginConfig AdditionalConfig(PluginConfig config)
        {
            config.ScheduleWeek4 = config.ScheduleWeek4 ?? new List<int> {0};
            config.ScheduleWeek5 = config.ScheduleWeek5 ?? new List<int> {0};
            return config;
        }

        private void OnServerSave()
        {
            if (DateTime.Now.Date != _currentDate)
            {
                CalculateWipe();
            }
        }

        private void OnNewSave(string name)
        {
            CalculateWipe();
        }

        private void OnServerInitialized()
        {
            CalculateWipe();
        }

        #endregion

        #region Wipe Calculations

        private void CalculateWipe()
        {
            _currentDate = DateTime.Now.Date;
            if (SaveRestore.SaveCreatedTime > _storedData.PreviousWipe)
            {
                _storedData.PreviousWipe = SaveRestore.SaveCreatedTime.Date;
                NextTick(SaveData);
            }

            DateTime lastForcedWipe = GetForcedWipe(_storedData.PreviousWipe);
            DateTime nextForcedWipe = GetForcedWipe(_storedData.PreviousWipe.AddMonths(1));
            DateTime nextNextForcedWipe = GetForcedWipe(_storedData.PreviousWipe.AddMonths(2));

            _isForcedWipeDay = nextForcedWipe.Date == DateTime.Now.Date && !_newSaveVersion;
            _currentDaysBetweenWipes = (int) (nextForcedWipe - lastForcedWipe).TotalDays;
            int nextDaysBetweenWipes = (int) (nextNextForcedWipe - nextForcedWipe).TotalDays;

            List<int> currentSchedule = _currentDaysBetweenWipes == 28 ? _pluginConfig.ScheduleWeek4 : _pluginConfig.ScheduleWeek5;
            List<int> nextSchedule = nextDaysBetweenWipes == 28 ? _pluginConfig.ScheduleWeek4 : _pluginConfig.ScheduleWeek5;

            List<DateTime> wipes = currentSchedule.Select(schedule => lastForcedWipe + TimeSpan.FromDays(schedule))
                .Concat(nextSchedule.Select(schedule => nextForcedWipe + TimeSpan.FromDays(schedule)))
                .ToList();

            _nextWipe = wipes.OrderBy(w => w).FirstOrDefault(w => w > _storedData.PreviousWipe);
            _daysTillNextWipe = (_nextWipe - DateTime.Today).Days;
            Puts($"Next Wipe: {_nextWipe} Days Until: {_daysTillNextWipe}");
            Interface.Call("OnWipeCalculated", _nextWipe, _daysTillNextWipe, _isForcedWipeDay);
        }

        private DateTime GetForcedWipe(DateTime date)
        {
            return new DateTime(date.Year, date.Month, FindWipeDay(date.Year, date.Month, DayOfWeek.Thursday));
        }

        private int FindWipeDay(int year, int month, DayOfWeek day)
        {
            int wipeDay = (int) day - (int) new DateTime(year, month, 1).DayOfWeek;
            if (wipeDay < 0) wipeDay += 7;
            return wipeDay + 1;
        }

        #endregion

        #region API Hooks

        private int GetDaysTillWipe()
        {
            return _daysTillNextWipe;
        }

        private DateTime GetNextWipe()
        {
            return _nextWipe;
        }

        private int GetDaysBetweenWipe()
        {
            return _currentDaysBetweenWipes;
        }

        private bool IsForcedWipeDay()
        {
            return _isForcedWipeDay;
        }

        private bool IsNewSaveVersion()
        {
            return _newSaveVersion;
        }

        #endregion

        #region Helper Methods

        private void SaveData() => Interface.Oxide.DataFileSystem.WriteObject(Name, _storedData);

        #endregion

        #region Classes

        private class PluginConfig
        {
            [JsonProperty("4 week schedule (Days since forced wipe)")]
            public List<int> ScheduleWeek4 { get; set; }

            [JsonProperty("5 week schedule (Days since forced wipe)")]
            public List<int> ScheduleWeek5 { get; set; }
        }

        private class StoredData
        {
            public int SaveVersion { get; set; }
            public DateTime PreviousWipe { get; set; } = DateTime.MinValue;
        }

        #endregion
    }
}

// --- End of file: WipeInfoApi.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/warp-system ---
// --- Original File Path: W/WarpSystem/WarpSystem.cs ---

/*
Warp System

Copyright (c) 2015-2016 <talk@juliocesar.me>, <http://steamcommunity.com/profiles/76561197983103320/>
Copyright (c) 2016-2018 <pain45dev@gmail.com>, <http://steamcommunity.com/id/pain45/>

-------------------------------------------------------------------------------------------------------------------
This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US
-----------------------------------------------------------------------------------------------------------------

$Id$
Version 1.9.13 by PaiN 2017-10-09 21:36 (UTC +03:00)
*/

using System;
using System.Collections.Generic;
using Oxide.Core;
using Oxide.Core.Plugins;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("Warp System", "PaiN", "1.9.14", ResourceId = 760)]
    [Description("Original Developer: Dathus BR || Create warp points for players.")]
    class WarpSystem : RustPlugin
    {
        [PluginReference]
        Plugin Jail;

        private bool Changed;
        private int cooldown;
        private int warpbacktimer;
        private bool enablecooldown;
        private int backcmdauthlevel;
        private bool WarpIfRunning;
        private bool WarpIfWounded;
        private bool WarpIfSwimming;
        private bool WarpIfBuildingBlocked;
        private bool WarpIfDucking;
        private string backtolastloc;
        private string warplist;
        private string therealreadyis;
        private string warpadded;
        private string youhavetowait;
        private string cantwarpwhilerunning;
        private string cantwarpwhilewounded;
        private string cantwarpwhilebuildingblocked;
        private string cantwarpwhileducking;
        private string cantwarpwhileswimming;
        private string youhaveteleportedto;
        private string teleportingto;
        private string youhaveremoved;

        object GetConfig(string menu, string datavalue, object defaultValue)
        {
            var data = Config[menu] as Dictionary<string, object>;
            if (data == null)
            {
                data = new Dictionary<string, object>();
                Config[menu] = data;
                Changed = true;
            }
            object value;
            if (!data.TryGetValue(datavalue, out value))
            {
                value = defaultValue;
                data[datavalue] = value;
                Changed = true;
            }
            return value;
        }

        double GetTimeStamp()
        {
            return (DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1))).TotalSeconds;
        }

        void LoadVariables()
        {
            warpbacktimer = Convert.ToInt32(GetConfig("Settings", "WarpBackTimer", 5));
            cooldown = Convert.ToInt32(GetConfig("Settings", "Cooldown", 120));
            enablecooldown = Convert.ToBoolean(GetConfig("Settings", "EnableCooldown", true));
            backcmdauthlevel = Convert.ToInt32(GetConfig("Settings", "Warp_Back_Atleast_Required_Authlevel", 1));
            WarpIfWounded = Convert.ToBoolean(GetConfig("Settings", "WarpIfWounded", true));
            WarpIfSwimming = Convert.ToBoolean(GetConfig("Settings", "WarpIfSwimming", true));
            WarpIfRunning = Convert.ToBoolean(GetConfig("Settings", "WarpIfRunning", true));
            WarpIfBuildingBlocked = Convert.ToBoolean(GetConfig("Settings", "WarpIfBuildingBlocked", true));
            WarpIfDucking = Convert.ToBoolean(GetConfig("Settings", "WarpIfDucking", true));
            backtolastloc = Convert.ToString(GetConfig("Messages", "TELEPORTED_TO_LAST_LOCATION", "You have teleported back to your last location!"));
            warplist = Convert.ToString(GetConfig("Messages", "WARP_LIST", "Warp ID: <color=#91FFB5>{2}</color>\nWarp Name: <color=cyan>{0}</color> \nPermission:<color=orange> {1} </color> \nMaxUses Remaining: <color=lime>{3}</color>"));
            therealreadyis = Convert.ToString(GetConfig("Messages", "WARP_EXISTS", "This warp already exists!"));
            warpadded = Convert.ToString(GetConfig("Messages", "WARP_ADDED", "Warp added with Warp Name: <color=#91FFB5>{0}</color>"));
            youhavetowait = Convert.ToString(GetConfig("Messages", "COOLDOWN_MESSAGE", "You have to wait <color=#91FFB5>{0}</color> second(s) before you can teleport again."));
            cantwarpwhilerunning = Convert.ToString(GetConfig("Messages", "CANT_WARP_WHILE_RUNNING", "You can not warp while running!"));
            cantwarpwhilewounded = Convert.ToString(GetConfig("Messages", "CANT_WARP_WHILE_WOUNDED", "You can not warp while you are wounded!"));
            cantwarpwhilebuildingblocked = Convert.ToString(GetConfig("Messages", "CANT_WARP_WHILE_BUILDING_BLOCKED", "You can not warp while you are in a building blocked area!"));
            cantwarpwhileducking = Convert.ToString(GetConfig("Messages", "CANT_WARP_WHILE_DUCKING", "You can not warp while you are ducking!"));
            cantwarpwhileswimming = Convert.ToString(GetConfig("Messages", "CANT_WARP_WHILE_SWIMMING", "You can not warp while you are swimming!"));
            youhaveteleportedto = Convert.ToString(GetConfig("Messages", "TELEPORTED_TO", "You have teleported to <color=#91FFB5>{0}</color>"));
            teleportingto = Convert.ToString(GetConfig("Messages", "TELEPORTING_IN_TO", "Teleporting in <color=orange>{0}</color> second(s) to <color=#91FFB5>{1}</color>"));
            youhaveremoved = Convert.ToString(GetConfig("Messages", "WARP_REMOVED", "You have removed the warp <color=#91FFB5>{0}</color>"));

            if (Changed)
            {
                SaveConfig();
                Changed = false;

            }
        }

        protected override void LoadDefaultConfig()
        {
            Puts("Creating a new configuration file!");
            Config.Clear();
            LoadVariables();
        }

        class StoredData
        {
            public List<WarpInfo> WarpInfo = new List<WarpInfo> { };
            public Dictionary<ulong, double> cantele = new Dictionary<ulong, double>();
            public Dictionary<ulong, OldPosInfo> lastposition = new Dictionary<ulong, OldPosInfo>();
            public Dictionary<ulong, Dictionary<string, int>> maxuses = new Dictionary<ulong, Dictionary<string, int>>();

        }

        class OldPosInfo
        {
            public float OldX;
            public float OldY;
            public float OldZ;

            public OldPosInfo(float x, float y, float z)
            {
                OldX = x;
                OldY = y;
                OldZ = z;
            }

            public OldPosInfo()
            {
            }
        }
        class WarpInfo
        {
            public string WarpName;
            public int WarpId;
            public float WarpX;
            public float WarpY;
            public float WarpZ;
            public string WarpPermissionGroup;
            public int WarpTimer;
            public int WarpMaxUses;
            public string WarpCreatorName;
            public int RandomRange;

            public WarpInfo(string name, BasePlayer player, int timerp, string permissionp, int warpnum, int randomr, int maxusess)
            {
                WarpName = name;
                WarpId = warpnum;
                WarpX = player.transform.position.x;
                WarpMaxUses = maxusess;
                WarpY = player.transform.position.y;
                WarpZ = player.transform.position.z;
                WarpCreatorName = player.displayName;
                WarpTimer = timerp;
                WarpPermissionGroup = permissionp;
                RandomRange = randomr;
            }

            public WarpInfo()
            {
            }
        }

        StoredData storedData;

        void Loaded()
        {
            storedData = Interface.GetMod().DataFileSystem.ReadObject<StoredData>("WarpSystem");
            if (!permission.PermissionExists("warpsystem.admin")) permission.RegisterPermission("warpsystem.admin", this);
            LoadVariables();
            foreach (WarpInfo info in storedData.WarpInfo)
            {
                if (!permission.GroupExists(info.WarpPermissionGroup)) permission.CreateGroup(info.WarpPermissionGroup, "", 0);
                cmd.AddChatCommand(info.WarpId.ToString(), this, "");
                cmd.AddChatCommand(info.WarpName, this, "");
            }
        }
        [ConsoleCommand("warp.wipemaxuses")]
        void cmdWarpMaxUses(ConsoleSystem.Arg arg)
        {
            if (arg.Connection != null && arg.Connection.authLevel < 1)
            {
                arg.ReplyWith("You cant use that command!");
                return;
            }
            storedData.maxuses.Clear();
            Interface.GetMod().DataFileSystem.WriteObject("WarpSystem", storedData);
        }
        [ConsoleCommand("warp.playerto")]
        void cmdWarpPlayerr(ConsoleSystem.Arg arg)
        {
            BasePlayer target = BasePlayer.Find(arg.Args[0]);
            if ((arg.Args == null) || (arg.Args != null && arg.Args.Length == 0))
            {
                arg.ReplyWith("warp.playerto <PlayerName> <WarpName>");
                return;
            }
            if (arg.Connection != null && arg.Connection.authLevel < 1)
            {
                arg.ReplyWith("You cant use that command!");
                return;
            }
            if (target == null)
            {
                arg.ReplyWith("Player not found!");
                return;
            }

            ulong steamID = target.userID;
            double nextteletime;


            if (enablecooldown == true)
            {
                if (storedData.cantele.TryGetValue(steamID, out nextteletime))
                {
                    if (GetTimeStamp() >= nextteletime)
                    {
                        storedData.cantele[steamID] = GetTimeStamp() + cooldown;
                        Interface.GetMod().DataFileSystem.WriteObject("WarpSystem", storedData);
                        goto Finish;
                    }
                    else
                    {
                        int nexttele = Convert.ToInt32(nextteletime - GetTimeStamp());
                        SendReply(target, youhavetowait, nexttele.ToString().Replace("-", ""));
                        return;
                    }
                }
                else
                {
                    storedData.cantele.Add(steamID, GetTimeStamp() + cooldown);
                    Interface.GetMod().DataFileSystem.WriteObject("WarpSystem", storedData);
                    goto Finish;
                }
            }

            Finish:
            foreach (WarpInfo info in storedData.WarpInfo)
            {
                if (info.WarpName.ToLower() == arg.Args[1].ToLower() || info.WarpId.ToString().ToLower() == arg.Args[1].ToLower())
                {
                    SendReply(target, teleportingto, info.WarpTimer, info.WarpName);
                    arg.ReplyWith($"Teleporting {target.displayName} to {info.WarpName} in {info.WarpTimer}");
                    timer.Once(info.WarpTimer, () =>
                    {
                        if (WarpIfRunning == false && target.IsRunning())
                        {
                            SendReply(target, cantwarpwhilerunning);
                            return;
                        }
                        if (WarpIfWounded == false && target.IsWounded())
                        {
                            SendReply(target, cantwarpwhilewounded);
                            return;
                        }
                        if (WarpIfSwimming == false && target.IsSwimming())
                        {
                            SendReply(target, cantwarpwhileswimming);
                            return;
                        }
                        if (WarpIfBuildingBlocked == false & !target.CanBuild())
                        {
                            SendReply(target, cantwarpwhilebuildingblocked);
                            return;
                        }
                        if (WarpIfDucking == false && target.IsDucked())
                        {
                            SendReply(target, cantwarpwhileducking);
                            return;
                        }
                        ForcePlayerPos(target, new Vector3(info.WarpX, info.WarpY, info.WarpZ));
                        SendReply(target, youhaveteleportedto, info.WarpName);

                    });
                }
            }
        }


        /*[ConsoleCommand("test.it")]
        void cmdTestIT(ConsoleSystem.Arg arg)
        {
            arg.ReplyWith(new Random.Next(1,5).ToString());
        }*/
        int GetNewId()
        {

            int id = 0;
            foreach (WarpInfo info in storedData.WarpInfo)
            {
                id = Math.Max(0, info.WarpId);
            }
            return id + 1;
        }
        int GetRandomId(BasePlayer player)
        {
            int randomid = 0;
            foreach (WarpInfo info in storedData.WarpInfo)
            {
                if (permission.UserHasGroup(player.userID.ToString(), info.WarpPermissionGroup) || info.WarpPermissionGroup == "all")
                {
                    randomid = UnityEngine.Random.Range(0, Math.Max(0, info.WarpId));
                }
            }
            return randomid + 1;
        }
        [ChatCommand("warp")]
        void cmdWarp(BasePlayer player, string cmdd, string[] args)
        {
            if (args.Length == 0)
            {
                player.SendConsoleCommand("chat.say \"/warp help\" ");
                return;
            }

            bool isprisoner = Convert.ToBoolean(Jail?.Call("IsPrisoner", player));


            ulong steamId = player.userID;
            double nextteletime;
            switch (args[0])
            {
                case "limit":
                    SendReply(player, "<color=#91FFB5>Current Warp Limits</color>");

                    if (storedData.cantele.TryGetValue(steamId, out nextteletime))
                    {
                        int nexttele = Convert.ToInt32(nextteletime - GetTimeStamp());
                        if (nexttele <= 0)
                        {
                            nexttele = 0;
                        }
                        SendReply(player, $"You will be able to warp again in {nexttele} seconds");
                    }
                    SendReply(player, $"Warp Cooldown: <color=orage>{cooldown}</color>");
                    SendReply(player, $"Warp Cooldown Enabled: <color=orage>{enablecooldown}</color>");
                    SendReply(player, "<color=#91FFB5>*************</color>");
                    break;
                case "back":
                    if (isprisoner)
                    {
                        SendReply(player, "You cant teleport out of the jail!");
                        return;
                    }
                    if (player.net.connection.authLevel >= backcmdauthlevel)
                    {
                        SendReply(player, "Teleporting to you last saved locations in {0} seconds.", warpbacktimer.ToString());
                        timer.Once(warpbacktimer, () =>
                        {
                            if (WarpIfRunning == false && player.IsRunning())
                            {
                                SendReply(player, cantwarpwhilerunning);
                                return;
                            }
                            if (WarpIfWounded == false && player.IsWounded())
                            {
                                SendReply(player, cantwarpwhilewounded);
                                return;
                            }
                            if (WarpIfSwimming == false && player.IsSwimming())
                            {
                                SendReply(player, cantwarpwhileswimming);
                                return;
                            }
                            if (WarpIfBuildingBlocked == false & !player.CanBuild())
                            {
                                SendReply(player, cantwarpwhilebuildingblocked);
                                return;
                            }
                            if (WarpIfDucking == false && player.IsDucked())
                            {
                                SendReply(player, cantwarpwhileducking);
                                return;
                            }
                            ForcePlayerPos(player, new Vector3(storedData.lastposition[steamId].OldX, storedData.lastposition[steamId].OldY, storedData.lastposition[steamId].OldZ));
                            SendReply(player, backtolastloc);
                            storedData.lastposition.Remove(steamId);
                            Interface.GetMod().DataFileSystem.WriteObject("WarpSystem", storedData);
                        });
                    }
                    break;

                case "random":
                    if (isprisoner)
                    {
                        SendReply(player, "You cant teleport out of the jail!");
                        return;
                    }
                    player.SendConsoleCommand($"chat.say \"/warp to {GetRandomId(player)}\" ");
                    break;

                case "all":
                    if (!permission.UserHasPermission(player.userID.ToString(), "warpsystem.admin"))
                    {
                        SendReply(player, "You do not have permission to use this command!");
                        return;
                    }
                    if (args.Length == 2)
                    {
                        foreach (BasePlayer current in BasePlayer.activePlayerList)
                        {
                            foreach (WarpInfo info in storedData.WarpInfo)
                            {
                                if (info.WarpName.ToLower() == args[1].ToLower() || info.WarpId.ToString() == args[1])
                                {
                                    ForcePlayerPos(current, new Vector3(info.WarpX, info.WarpY, info.WarpZ));
                                    SendReply(current, "You got teleported to <color=#91FFB5>" + info.WarpName + "</color> by <color=orange>" + player.displayName + "</color>");

                                }
                            }
                        }
                    }
                    else if (args.Length == 3 && args[1] == "sleepers")
                    {
                        foreach (BasePlayer sleepers in BasePlayer.sleepingPlayerList)
                        {
                            foreach (WarpInfo info in storedData.WarpInfo)
                            {
                                if (info.WarpName.ToLower() == args[2].ToLower() || info.WarpId.ToString() == args[2])
                                {
                                    ForcePlayerPos(sleepers, new Vector3(info.WarpX, info.WarpY, info.WarpZ));
                                    //SendReply(player, "You got teleported to <color=#91FFB5>" + info.WarpName + "</color> by <color=orange>" + player.displayName + "</color>");

                                }
                            }
                        }
                    }
                    else
                    {
                        SendReply(player, "<color=#91FFB5>Teleport all online players</color>: \n /warp all <WarpName>");
                        SendReply(player, "<color=#91FFB5>Teleport all sleepers</color>: \n /warp all sleepers <WarpName>");
                        return;
                    }
                    break;
                case "wipe":
                    if (!permission.UserHasPermission(player.userID.ToString(), "warpsystem.admin"))
                    {
                        SendReply(player, "You do not have permission to use this command!");
                        return;
                    }
                    storedData.WarpInfo.Clear();
                    storedData.cantele.Clear();
                    Interface.GetMod().DataFileSystem.WriteObject("WarpSystem", storedData);
                    SendReply(player, "You have wiped all the teleports!");
                    break;

                case "list":
                    SendReply(player, "<color=#91FFB5>Current Warps</color>");
                    string maxusesrem;
                    foreach (WarpInfo info in storedData.WarpInfo)
                    {
                        if (permission.UserHasGroup(steamId.ToString(), info.WarpPermissionGroup) || info.WarpPermissionGroup == "all")
                        {

                            if (info.WarpMaxUses == 0)
                            {
                                maxusesrem = "<color=red>UNLIMITED</color>";
                            }
                            else if (!storedData.maxuses.ContainsKey(steamId))
                            {
                                maxusesrem = info.WarpMaxUses.ToString();
                            }
                            else
                                maxusesrem = storedData.maxuses[steamId][info.WarpName].ToString();

                            SendReply(player, warplist, info.WarpName, info.WarpPermissionGroup, info.WarpId, maxusesrem);
                            SendReply(player, "<color=#91FFB5>*************</color>");
                        }

                    }
                    SendReply(player, "<color=#91FFB5>*************</color>");
                    break;

                case "add":

                    if (!permission.UserHasPermission(player.userID.ToString(), "warpsystem.admin"))
                    {
                        SendReply(player, "You do not have permission to use this command!");
                        return;
                    }
                    if (args.Length != 6)
                    {
                        SendReply(player, "/warp <add> <WarpName> <WarpTimer> <WarpRange> <WarpMaxUses> <WarpPermissionGroup>");
                        return;
                    }
                    foreach (WarpInfo info in storedData.WarpInfo)
                    {
                        if (args[1].ToLower() == info.WarpName.ToLower())
                        {
                            SendReply(player, therealreadyis);
                            return;
                        }
                    }
                    string permissionp = args[5];
                    string name = args[1];
                    int warpnum;
                    int timerp = Convert.ToInt32(args[2]);
                    int randomr = Convert.ToInt32(args[3]);
                    int maxusess = Convert.ToInt32(args[4]);
                    if (storedData.WarpInfo == null)
                    {
                        warpnum = 1;
                    }
                    else
                    {
                        warpnum = GetNewId();
                    }
                    var data = new WarpInfo(name, player, timerp, permissionp, warpnum, randomr, maxusess);
                    storedData.WarpInfo.Add(data);
                    SendReply(player, warpadded, name);
                    Interface.GetMod().DataFileSystem.WriteObject("WarpSystem", storedData);
                    if (!permission.GroupExists(args[5])) permission.CreateGroup(args[5], "", 0);
                    cmd.AddChatCommand(name, this, "");
                    cmd.AddChatCommand(warpnum.ToString(), this, "");
                    break;

                case "to":
                    if (args.Length != 2)
                    {
                        SendReply(player, "/warp to <WarpName> || /warplist");
                        return;
                    }
                    if (isprisoner)
                    {
                        SendReply(player, "You cant teleport out of the jail!");
                        return;
                    }
                    foreach (WarpInfo info in storedData.WarpInfo)
                    {
                        if (info.WarpName.ToLower() == args[1].ToLower() || info.WarpId.ToString() == args[1])
                        {
                            if (info.WarpPermissionGroup == "all" || permission.UserHasGroup(steamId.ToString(), info.WarpPermissionGroup))
                            {
                                if (info.WarpMaxUses > 0)
                                {
                                    if (!storedData.maxuses.ContainsKey(steamId))
                                    {
                                        storedData.maxuses.Add(
                                        steamId,
                                        new Dictionary<string, int>{
                                            {info.WarpName, 1}
                                        }
                                    );
                                    }
                                    if (storedData.maxuses[steamId][info.WarpName] == 5)
                                    {
                                        SendReply(player, "You have reached the max uses for this Warp!");
                                        return;
                                    }
                                    if (storedData.maxuses.ContainsKey(steamId))
                                    {
                                        storedData.maxuses[steamId][info.WarpName] = storedData.maxuses[steamId][info.WarpName] + 1;
                                    }
                                }

                                if (enablecooldown == true)
                                {
                                    if (storedData.cantele.TryGetValue(steamId, out nextteletime))
                                    {
                                        if (GetTimeStamp() >= nextteletime)
                                        {

                                            storedData.cantele[steamId] = GetTimeStamp() + cooldown;
                                            Interface.GetMod().DataFileSystem.WriteObject("WarpSystem", storedData);
                                            goto Finish;
                                        }
                                        else
                                        {
                                            int nexttele = Convert.ToInt32(GetTimeStamp() - nextteletime);
                                            SendReply(player, youhavetowait, nexttele.ToString().Replace("-", ""));
                                            return;
                                        }
                                    }
                                    else
                                    {
                                        storedData.cantele.Add(steamId, GetTimeStamp() + cooldown);
                                        Interface.GetMod().DataFileSystem.WriteObject("WarpSystem", storedData);
                                        goto Finish;
                                    }
                                }
                                Finish:
                                if (storedData.lastposition.ContainsKey(steamId) | !storedData.lastposition.ContainsKey(steamId))
                                {
                                    storedData.lastposition.Remove(steamId);
                                    Interface.GetMod().DataFileSystem.WriteObject("WarpSystem", storedData);
                                    float x = player.transform.position.x;
                                    float y = player.transform.position.y;
                                    float z = player.transform.position.z;
                                    var oldinfo = new OldPosInfo(x, y, z);
                                    storedData.lastposition.Add(steamId, oldinfo);
                                    Interface.GetMod().DataFileSystem.WriteObject("WarpSystem", storedData);

                                }

                                SendReply(player, teleportingto, info.WarpTimer, info.WarpName);
                                timer.Once(info.WarpTimer, () =>
                                {
                                    if (WarpIfRunning == false && player.IsRunning())
                                    {
                                        SendReply(player, cantwarpwhilerunning);
                                        return;
                                    }
                                    if (WarpIfWounded == false && player.IsWounded())
                                    {
                                        SendReply(player, cantwarpwhilewounded);
                                        return;
                                    }
                                    if (WarpIfSwimming == false && player.IsSwimming())
                                    {
                                        SendReply(player, cantwarpwhileswimming);
                                        return;
                                    }
                                    if (WarpIfBuildingBlocked == false & !player.CanBuild())
                                    {
                                        SendReply(player, cantwarpwhilebuildingblocked);
                                        return;
                                    }
                                    if (WarpIfDucking == false && player.IsDucked())
                                    {
                                        SendReply(player, cantwarpwhileducking);
                                        return;
                                    }
                                    int posx = UnityEngine.Random.Range(Convert.ToInt32(info.WarpX), info.RandomRange);
                                    int posz = UnityEngine.Random.Range(Convert.ToInt32(info.WarpZ), info.RandomRange);
                                    if (info.RandomRange == 0)
                                    {
                                        ForcePlayerPos(player, new Vector3(info.WarpX, info.WarpY, info.WarpZ));
                                    }
                                    else
                                        ForcePlayerPos(player, new Vector3(posx, info.WarpY, posz));
                                    SendReply(player, youhaveteleportedto, info.WarpName);
                                });
                            }
                            else
                            {
                                SendReply(player, "You are not allowed to use this warp!");
                                return;
                            }
                        }
                    }
                    break;
                case "help":
                    if (permission.UserHasPermission(player.userID.ToString(), "warpsystem.admin"))
                    {
                        SendReply(player, "<color=#91FFB5>Available Commands</color>");
                        SendReply(player, "<color=#91FFB5>-</color> /warp <add> <WarpName> <WarpTimer> <WarpRange> <WarpMaxUses> <WarpPermissionGroup>");
                        SendReply(player, "<color=#91FFB5>-</color> /warp limit");
                        SendReply(player, "<color=#91FFB5>-</color> /warp random");
                        SendReply(player, "<color=#91FFB5>-</color> /warp remove <WarpName>");
                        SendReply(player, "<color=#91FFB5>-</color> /warp wipe");
                        SendReply(player, "<color=#91FFB5>-</color> /warp list");
                        SendReply(player, "<color=#91FFB5>-</color> /warp to <WarpName> || /warp list");
                        SendReply(player, "<color=#91FFB5>-</color> /<WarpName> => A shorter version of /warp to <WarpName> || /warp list");
                        SendReply(player, "<color=#91FFB5>Teleport all online players</color>: \n<color=#91FFB5>-</color> /warp all <WarpName>");
                        SendReply(player, "<color=#91FFB5>Teleport all sleepers</color>: \n<color=#91FFB5>-</color> /warp all sleepers <WarpName>");
                    }
                    else
                    {
                        SendReply(player, "<color=#91FFB5>Available Commands</color>");
                        SendReply(player, "<color=#91FFB5>-</color> /warp list");
                        SendReply(player, "<color=#91FFB5>-</color> /warp limit");
                        SendReply(player, "<color=#91FFB5>-</color> /warp random");
                        SendReply(player, "<color=#91FFB5>-</color> /warp to <WarpName> || /warp list");
                        SendReply(player, "<color=#91FFB5>-</color> /<WarpName> => A shorter version of /warp to <WarpName> || /warp list");
                    }
                    break;
                case "remove":
                    if (!permission.UserHasPermission(player.userID.ToString(), "warpsystem.admin"))
                    {
                        SendReply(player, "You do not have permission to use this command!");
                        return;
                    }
                    if (args.Length != 2)
                    {
                        SendReply(player, "/warp remove <WarpName>");
                        return;
                    }
                    foreach (WarpInfo info in storedData.WarpInfo)
                    {
                        if (info.WarpName == args[1])
                        {
                            storedData.WarpInfo.Remove(info);
                            SendReply(player, youhaveremoved, info.WarpName);
                            Interface.GetMod().DataFileSystem.WriteObject("WarpSystem", storedData);
                            break;
                        }
                    }
                    break;

            }
        }

        /*void Unloaded()
        {
            storedData.cantele.Clear();
            Interface.GetMod().DataFileSystem.WriteObject("WarpSystem", storedData);
        }*/
        void OnServerCommand(ConsoleSystem.Arg arg)
        {
            if (arg == null) return;
            if (arg.Connection == null) return;
            if (arg.Connection.player == null) return;
            if (arg.cmd == null) return;
            if (arg.cmd.Name == null) return;
            BasePlayer player = (BasePlayer)arg.Connection.player;
            ulong steamId = player.userID;
            double nextteletime;
            string cmd = arg.cmd.FullName;
            string text = arg.GetString(0, "text");


            if (cmd == "chat.say" && text.StartsWith("/"))
            {
                foreach (WarpInfo info in storedData.WarpInfo)
                {
                    if (text == "/" + info.WarpName || text == "/" + info.WarpId)
                    {
                        if (info.WarpPermissionGroup == "all" || permission.UserHasGroup(steamId.ToString(), info.WarpPermissionGroup))
                        {

                            if (enablecooldown == true)
                            {
                                if (storedData.cantele.TryGetValue(steamId, out nextteletime))
                                {
                                    if (GetTimeStamp() > nextteletime)
                                    {

                                        storedData.cantele[steamId] = GetTimeStamp() + cooldown;
                                        Interface.GetMod().DataFileSystem.WriteObject("WarpSystem", storedData);
                                        goto Finish;
                                    }
                                    else
                                    {
                                        int nexttele = Convert.ToInt32(GetTimeStamp() - nextteletime);
                                        SendReply(player, youhavetowait, nexttele.ToString().Replace("-", ""));
                                        return;
                                    }
                                }
                                else
                                {
                                    storedData.cantele.Add(steamId, GetTimeStamp() + cooldown);
                                    Interface.GetMod().DataFileSystem.WriteObject("WarpSystem", storedData);
                                    goto Finish;
                                }
                            }
                            Finish:
                            if (storedData.lastposition.ContainsKey(steamId) | !storedData.lastposition.ContainsKey(steamId))
                            {
                                storedData.lastposition.Remove(steamId);
                                Interface.GetMod().DataFileSystem.WriteObject("WarpSystem", storedData);
                                float x = player.transform.position.x;
                                float y = player.transform.position.y;
                                float z = player.transform.position.z;
                                var oldinfo = new OldPosInfo(x, y, z);
                                storedData.lastposition.Add(steamId, oldinfo);
                                Interface.GetMod().DataFileSystem.WriteObject("WarpSystem", storedData);

                            }

                            SendReply(player, teleportingto, info.WarpTimer, info.WarpName);
                            timer.Once(info.WarpTimer, () =>
                            {
                                if (WarpIfRunning == false && player.IsRunning())
                                {
                                    SendReply(player, cantwarpwhilerunning);
                                    return;
                                }
                                if (WarpIfWounded == false && player.IsWounded())
                                {
                                    SendReply(player, cantwarpwhilewounded);
                                    return;
                                }
                                if (WarpIfSwimming == false && player.IsSwimming())
                                {
                                    SendReply(player, cantwarpwhileswimming);
                                    return;
                                }
                                if (WarpIfBuildingBlocked == false & !player.CanBuild())
                                {
                                    SendReply(player, cantwarpwhilebuildingblocked);
                                    return;
                                }
                                if (WarpIfDucking == false && player.IsDucked())
                                {
                                    SendReply(player, cantwarpwhileducking);
                                    return;
                                }
                                ForcePlayerPos(player, new Vector3(info.WarpX, info.WarpY, info.WarpZ));
                                SendReply(player, youhaveteleportedto, info.WarpName);
                            });
                        }
                        else
                        {
                            SendReply(player, "You are not allowed to use this warp!");
                            return;
                        }
                    }
                }
            }

        }
        void ForcePlayerPos(BasePlayer player, Vector3 xyz)
        {
            player.SetPlayerFlag(BasePlayer.PlayerFlags.Sleeping, true);
            if (!BasePlayer.sleepingPlayerList.Contains(player)) BasePlayer.sleepingPlayerList.Add(player);

            player.CancelInvoke("InventoryUpdate");
            player.inventory.crafting.CancelAll(true);

            player.MovePosition(xyz);
            player.ClientRPCPlayer(null, player, "ForcePositionTo", xyz);
            player.SetPlayerFlag(BasePlayer.PlayerFlags.ReceivingSnapshot, true);
            player.UpdateNetworkGroup();

            player.SendNetworkUpdateImmediate(false);
            player.ClientRPCPlayer(null, player, "StartLoading");
            player.SendFullSnapshot();
        }
    }
}

// --- End of file: WarpSystem.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/wake-info ---
// --- Original File Path: W/WakeInfo/WakeInfo.cs ---

﻿using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Oxide.Core;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("Wake Info", "Mevent", "1.2.0")]
    [Description("Gives a note with information about the server after connecting")]
    public class WakeInfo : RustPlugin
    {
        #region Config

        private static Configuration _config;

        private class Configuration
        {
            [JsonProperty(PropertyName = "Notes", ObjectCreationHandling = ObjectCreationHandling.Replace)]
            public List<NoteConf> Notes = new List<NoteConf>
            {
                new NoteConf
                {
                    Title = "New Player Info",
                    Enabled = true,
                    Permission = string.Empty,
                    Text = new List<string>
                    {
                        "Hello {name}!",
                        "Now online: {online}"
                    }
                },
                new NoteConf
                {
                    Title = "New Player Info 2",
                    Enabled = true,
                    Permission = string.Empty,
                    Text = new List<string>
                    {
                        "Last Wipe: {lastwipe}!",
                        "Max online: {maxonline}"
                    }
                }
            };

            [JsonProperty(PropertyName = "Only Introduce?")]
            public bool Introduce = true;

            [JsonProperty(PropertyName = "Note Item")]
            public ItemConf Item = new ItemConf
            {
                ShortName = "note",
                Skin = 0
            };
        }

        private class NoteConf
        {
            [JsonProperty(PropertyName = "Title")] public string Title;

            [JsonProperty(PropertyName = "Enabled?")]
            public bool Enabled;

            [JsonProperty(PropertyName = "Permission (ex: wakeinfo.vip)")]
            public string Permission;

            [JsonProperty(PropertyName = "Text", ObjectCreationHandling = ObjectCreationHandling.Replace)]
            public List<string> Text = new List<string>();

            public void Get(BasePlayer player)
            {
                var item = _config.Item.ToItem(Title);
                if (item == null) return;

                var convertText = ConvertText(player);
                if (!string.IsNullOrEmpty(convertText))
                    item.text = convertText;

                item.MarkDirty();
                GiveItem(player, item);
            }

            private void GiveItem(BasePlayer player, Item item)
            {
                if (!item.MoveToContainer(player.inventory.containerBelt))
                    player.GiveItem(item, BaseEntity.GiveItemReason.PickedUp);
            }

            private string ConvertText(BasePlayer player)
            {
                return string.Join("\n", Text)
                    .Replace("{lastwipe}", SaveRestore.SaveCreatedTime.ToUniversalTime().ToShortDateString())
                    .Replace("{name}", player.displayName)
                    .Replace("{steamid}", player.UserIDString)
                    .Replace("{maxonline}", ConVar.Server.maxplayers.ToString())
                    .Replace("{online}", BasePlayer.activePlayerList.Count.ToString());
            }
        }

        private class ItemConf
        {
            [JsonProperty(PropertyName = "Short Name")]
            public string ShortName;

            [JsonProperty(PropertyName = "Skin")] public ulong Skin;

            public Item ToItem(string title)
            {
                var item = ItemManager.CreateByName(ShortName, 1, Skin);
                if (item == null)
                {
                    Debug.LogError($"Error creating item with shortName '{ShortName}'");
                    return null;
                }

                if (!string.IsNullOrEmpty(title))
                    item.name = title;

                return item;
            }
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                _config = Config.ReadObject<Configuration>();
                if (_config == null) throw new Exception();
                SaveConfig();
            }
            catch
            {
                PrintError("Your configuration file contains an error. Using default configuration values.");
                LoadDefaultConfig();
            }
        }

        protected override void SaveConfig()
        {
            Config.WriteObject(_config);
        }

        protected override void LoadDefaultConfig()
        {
            _config = new Configuration();
        }

        #endregion

        #region Data

        private PluginData _data;

        private void SaveData()
        {
            Interface.Oxide.DataFileSystem.WriteObject(Name, _data);
        }

        private void LoadData()
        {
            try
            {
                _data = Interface.Oxide.DataFileSystem.ReadObject<PluginData>(Name);
            }
            catch (Exception e)
            {
                PrintError(e.ToString());
            }

            if (_data == null) _data = new PluginData();
        }

        private class PluginData
        {
            [JsonProperty(PropertyName = "Players", ObjectCreationHandling = ObjectCreationHandling.Replace)]
            public List<ulong> Players = new List<ulong>();
        }

        #endregion

        #region Hooks

        private void Init()
        {
            LoadData();
        }

        private void Unload()
        {
            SaveData();

            _config = null;
        }

        private void OnNewSave()
        {
            _data.Players.Clear();
        }

        private void OnPlayerConnected(BasePlayer player)
        {
            if (player == null || _config.Introduce && _data.Players.Contains(player.userID)) return;

            _config.Notes
                .FindAll(note => note.Enabled && (string.IsNullOrEmpty(note.Permission) ||
                                                  permission.UserHasPermission(player.UserIDString, note.Permission)))
                .ForEach(note => note.Get(player));

            if (!_data.Players.Contains(player.userID))
                _data.Players.Add(player.userID);
        }

        #endregion
    }
}

// --- End of file: WakeInfo.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/world-shops ---
// --- Original File Path: W/WorldShops/WorldShops.cs ---

﻿//todo: lessen lambda use a bit to optimize performance
using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Game.Rust.Cui;
using UnityEngine;
// ReSharper disable UnusedMember.Local
// ReSharper disable SuggestBaseTypeForParameter
// ReSharper disable CheckNamespace
// ReSharper disable UnusedParameter.Local

namespace Oxide.Plugins
{
    [Info("WorldShops", "4aiur", "1.1.1", ResourceId = 2820)]
    [Description("Allows for automated vending machines.")]
    public class WorldShops : RustPlugin
    {
        private static PluginTimers _timer;

        private Dictionary<BasePlayer, WorldShopsSettings.Shop> queuedShops;
        private List<BasePlayer> queuedWipes;
        private Dictionary<BasePlayer, WorldShopsSettings.Shop> queuedSaves;
        private List<BasePlayer> queuedDisables;
        private List<BasePlayer> queuedSpawns;

        private static Dictionary<VendingMachine, WorldShopsSettings.Shop> _activeShops;

        private void Init()
        {
            _timer = this.timer;
            JsonConvert.DefaultSettings = () => new JsonSerializerSettings
            {
                Formatting = Formatting.Indented
            };

            WorldShopsSettings.Loaded = this.Config.ReadObject<WorldShopsSettings.General>();

            WorldShopsData.Loaded = Interface.Oxide.DataFileSystem.ReadObject<WorldShopsData.General>(nameof(WorldShops));
            if (WorldShopsData.Loaded.Shops == null)
                WorldShopsData.Loaded.Shops = new Dictionary<string, string>();

            for (int i = 0; i < WorldShopsSettings.Loaded.Shops.Count; i++)
            {
                WorldShopsSettings.Shop shop = WorldShopsSettings.Loaded.Shops[i];

                if (shop.CommandName == null)
                {
                    this.PrintError($"Unable to load WorldShops. The {nameof(WorldShopsSettings.Shop.CommandName)} of {nameof(WorldShopsSettings.Shop)} #{i + 1} is null. Please set a value.");
                    this.Manager.RemovePlugin(this);
                    return;
                }

                if (shop.SellOrders == null)
                {
                    shop.SellOrders = new WorldShopsSettings.SellOrder[0];
                    this.PrintWarning($"The {nameof(WorldShopsSettings.Shop.SellOrders)} of {nameof(WorldShopsSettings.Shop)} \"{shop.CommandName}\" is null. The value has been set to an empty array.");
                }

                if (shop.WorldName == null)
                {
                    shop.WorldName = "A Shop";
                    this.PrintWarning($"The {nameof(WorldShopsSettings.Shop.WorldName)} of {nameof(WorldShopsSettings.Shop)} \"{shop.CommandName}\" is null. The value has been set \"A Shop\".");
                }

                for (int j = 0; j < shop.SellOrders.Length; j++)
                {
                    if (shop.SellOrders[j].BuyItem.Definition == null)
                    {
                        this.RaiseError($"Unable to load WorldShops. The {nameof(WorldShopsSettings.SellOrder.BuyItem)} of {nameof(WorldShopsSettings.SellOrder)} #{j + 1} in {nameof(WorldShopsSettings.Shop)} \"{shop.CommandName}\" has an invalid item shortname.");
                        this.Manager.RemovePlugin(this);
                        return;
                    }
                    if (shop.SellOrders[j].SellItem.Definition == null)
                    {
                        this.RaiseError($"Unable to load WorldShops. The {nameof(WorldShopsSettings.SellOrder.SellItem)} of {nameof(WorldShopsSettings.SellOrder)} #{j + 1} in {nameof(WorldShopsSettings.Shop)} \"{shop.CommandName}\" has an invalid item shortname.");
                        this.Manager.RemovePlugin(this);
                        return;
                    }
                }
            }

            string[] names = WorldShopsSettings.Loaded.Shops.Select(x => x.CommandName).ToArray();
            string conflictingName = names.FirstOrDefault(x => names.Length - names.Except(new string[] {x}).Count() > 1);
            if (conflictingName != null)
            {
                this.RaiseError($"Unable to load WorldShops. Two or more shops have a conflicting command name: {conflictingName}");
                this.Manager.RemovePlugin(this);
                return;
            }

            this.queuedShops = new Dictionary<BasePlayer, WorldShopsSettings.Shop>();
            this.queuedWipes = new List<BasePlayer>();
            this.queuedSaves = new Dictionary<BasePlayer, WorldShopsSettings.Shop>();
            this.queuedDisables = new List<BasePlayer>();
            this.queuedSpawns = new List<BasePlayer>();

            _activeShops = new Dictionary<VendingMachine, WorldShopsSettings.Shop>();
            
            this.permission.RegisterPermission("worldshops.build", this);
            this.permission.RegisterPermission("worldshops.spawn", this);
            this.permission.RegisterPermission("worldshops.apply", this);
            this.permission.RegisterPermission("worldshops.disable", this);
            this.permission.RegisterPermission("worldshops.wipe", this);
            this.permission.RegisterPermission("worldshops.save", this);
            this.permission.RegisterPermission("worldshops.delete", this);
            foreach (string name in names)
                this.permission.RegisterPermission($"worldshops.remote.{name}", this);

            this.Config.WriteObject(WorldShopsSettings.Loaded);

            if (WorldShopsSettings.Loaded.Notification.Enabled)
                BasePlayer.activePlayerList.ForEach(x => x.gameObject.AddComponent<ShopBlock>());
        }

        private void OnPlayerSleep(BasePlayer player)
        {
            ShopBlock shopBlock = player.gameObject.GetComponent<ShopBlock>();
            if (shopBlock == null)
                return;

            shopBlock.Dispose();
            UnityEngine.Object.Destroy(shopBlock);
        }

        private void OnPlayerSleepEnded(BasePlayer player)
        {
            if (!WorldShopsSettings.Loaded.Notification.Enabled)
                return;

            player.gameObject.AddComponent<ShopBlock>();
        }

        private void OnServerInitialized()
        {
            foreach (VendingMachine machine in UnityEngine.Object.FindObjectsOfType<VendingMachine>())
            {
                string machineId = machine.ServerPosition.ToString("f2");
                if (!WorldShopsData.Loaded.Shops.ContainsKey(machineId))
                    return;

                string shopName = WorldShopsData.Loaded.Shops[machineId];
                if (shopName == null)
                    return;

                WorldShopsSettings.Shop shop = WorldShopsSettings.Loaded.Shops.FirstOrDefault(x => x.CommandName == shopName);
                if (shop == null)
                    return;
                
                this.ApplyMachine(machine, shop);
                _activeShops.Add(machine, shop);
            }
        }

        protected override void LoadDefaultMessages()
        {
            this.lang.RegisterMessages(new Dictionary<string, string>
            {
                ["InsufficientPermission"] = "You do not have permission to use that command.",
                ["Help"] = "Use of /wshop:\n" +
                           "/wshop spawn - Spawns a vending machine, anywhere*\n" +
                           "/wshop apply [name] - Applies a specified shop to a vending machine*\n" +
                           "/wshop disable - No longer treats the vending machine as a shop*\n" +
                           "/wshop wipe - Resets a vending machine*\n" +
                           "/wshop save [name] - Creates a shop out of a customized vending machine*\n" +
                           "/wshop delete [name] - Deletes a shop*\n" +
						   "/wshop remote [name] - Remotes into a shop if accessable*\n" +
                           "/wshop list - Lists all shops\n" +
                           "/wshop help - Shows this\n" +
                           "* Special permissions needed to execute",
                ["InvalidShop"] = "No shop with the name \"{0}\" exists.",
                ["ShopNotPlaced"] = "The shop \"{0}\" is not on the map.",
                ["ShopExists"] = "The shop name \"{0}\" is already taken.",
                ["ApplyReady"] = "Selected shop \"{0}\"",
                ["ApplyTimeout"] = "Deselected shop \"{0}\"",
                ["ApplySuccess"] = "Applied shop \"{0}\"",
                ["SaveReady"] = "Ready to save shop \"{0}\"",
                ["SaveTimeout"] = "Saving shop \"{0}\" timed out",
                ["SaveSuccess"] = "Saved shop \"{0}\"",
                ["DeletedShop"] = "Deleted shop \"{0}\"",
                ["DeletedShopPlaced"] = "Warning: This shop was placed and all instances of this shop in the world were deleted.",
                ["WipeReady"] = "Ready to wipe shop",
                ["WipeTimeout"] = "Shop wipe has timed out",
                ["WipeSuccess"] = "Wiped shop",
                ["DisableReady"] = "Ready to disable shop",
                ["DisableTimeout"] = "Shop disable has timed out",
                ["DisableSuccess"] = "Disabled shop",
                ["SpawnReady"] = "Ready to spawn vending machine",
                ["SpawnTimeout"] = "Spawn has timed out",
                ["SpawnSuccess"] = "Spawned vending machine",
                ["ShopTooClose"] = "Too close to shop ({0})",
                ["ShopListElement"] = "{0} ({1}) - {2} instances on map"
            }, this);
        }

        [ChatCommand("wshop")]
        private void ShopCommand(BasePlayer player, string command, string[] args)
        {
            if (args.Length == 0)
            {
                player.ChatMessage(this.Lang("Help", player));
                return;
            }

            bool commandPlaced;
            string fullName;
            bool fullPlaced;
            WorldShopsSettings.Shop foundShop;
            switch (args[0])
            {
                case "spawn":
                    if (!player.IPlayer.HasPermission("worldshops.spawn"))
                    {
                        player.ChatMessage(this.Lang("InsufficientPermission", player));
                        return;
                    }

                    this.queuedSpawns.Add(player);
                    player.ChatMessage(this.Lang("SpawnReady", player));

                    _timer.Once(5f, () =>
                    {
                        if (!this.queuedSpawns.Contains(player))
                            return;

                        this.queuedSpawns.Remove(player);
                        player.ChatMessage(this.Lang("SpawnTimeout", player));
                    });
                    break;

                case "apply":
                    if (args.Length != 2)
                    {
                        player.ChatMessage(this.Lang("Help", player));
                        return;
                    }

                    if (!player.IPlayer.HasPermission("worldshops.apply"))
                    {
                        player.ChatMessage(this.Lang("InsufficientPermission", player));
                        return;
                    }

                    if (!WorldShopsSettings.Loaded.Shops.Select(x => x.CommandName).Contains(args[1]))
                    {
                        player.ChatMessage(this.Lang("InvalidShop", player, args[1]));
                        return;
                    }
                    WorldShopsSettings.Shop applyShop = WorldShopsSettings.Loaded.Shops.First(x => x.CommandName == args[1]);

                    this.queuedShops.Add(player, applyShop);
                    player.ChatMessage(this.Lang("ApplyReady", player, args[1]));

                    _timer.Once(5f, () =>
                    {
                        if (!this.queuedShops.ContainsKey(player))
                            return;

                        this.queuedShops.Remove(player);
                        player.ChatMessage(this.Lang("ApplyTimeout", player, args[1]));
                    });
                    break;

                case "save":
                    if (args.Length != 2)
                    {
                        player.ChatMessage(this.Lang("Help", player));
                        return;
                    }

                    if (!player.IPlayer.HasPermission("worldshops.save"))
                    {
                        player.ChatMessage(this.Lang("InsufficientPermission", player));
                        return;
                    }

                    if (WorldShopsSettings.Loaded.Shops.Select(x => x.CommandName).Contains(args[1]))
                    {
                        player.ChatMessage(this.Lang("ShopExists", player, args[1]));
                        return;
                    }

                    WorldShopsSettings.Shop newShop = new WorldShopsSettings.Shop
                    {
                        CommandName = args[1]
                    };

                    WorldShopsSettings.Loaded.Shops.Add(newShop);
                    this.queuedSaves.Add(player, newShop);
                    player.ChatMessage(this.Lang("SaveReady", player, args[1]));

                    _timer.Once(5f, () =>
                    {
                        if (!this.queuedSaves.ContainsKey(player))
                            return;

                        this.queuedSaves.Remove(player);
                        player.ChatMessage(this.Lang("SaveTimeout", player, args[1]));
                    });
                    break;

                case "delete":
                    if (args.Length < 2)
                    {
                        player.ChatMessage(this.Lang("Help", player));
                        return;
                    }

                    if (!player.IPlayer.HasPermission("worldshops.delete"))
                    {
                        player.ChatMessage(this.Lang("InsufficientPermission", player));
                        return;
                    }

                    if (!WorldShopsSettings.Loaded.Shops.Any(x => x.CommandName == args[1] || x.WorldName == string.Join(" ", args)))
                    {
                        player.ChatMessage(this.Lang("InvalidShop", player, args[1]));
                        return;
                    }

                    fullName = string.Join(" ", args);
                    foundShop = WorldShopsSettings.Loaded.Shops.First(x => x.CommandName == args[1] || x.WorldName == fullName);

                    commandPlaced = _activeShops.Any(x => x.Value.CommandName == args[1]);
                    fullPlaced = _activeShops.Any(x => x.Value.WorldName == fullName);

                    WorldShopsSettings.Loaded.Shops.RemoveAll(x => x.CommandName == args[1] || x.WorldName == string.Join(" ", args));
                    this.Config.WriteObject(WorldShopsSettings.Loaded);

                    player.ChatMessage(this.Lang("DeletedShop", player, args[1]));

                    if (!commandPlaced || !fullPlaced)
                    {
                        player.ChatMessage(this.Lang("DeletedShopPlaced", player, !commandPlaced ? args[1] : fullName));
                        foreach (VendingMachine vendingMachine in _activeShops.Where(x => x.Value == foundShop).Select(x => x.Key).ToArray())
                            vendingMachine.Kill();
                    }
                    break;

                case "wipe":
                    if (!player.IPlayer.HasPermission("worldshops.wipe"))
                    {
                        player.ChatMessage(this.Lang("InsufficientPermission", player));
                        return;
                    }

                    this.queuedWipes.Add(player);
                    player.ChatMessage(this.Lang("WipeReady", player));

                    _timer.Once(5f, () =>
                    {
                        if (!this.queuedWipes.Contains(player))
                            return;

                        this.queuedWipes.Remove(player);
                        player.ChatMessage(this.Lang("WipeTimeout", player));
                    });
                    break;

                case "disable":
                    if (!player.IPlayer.HasPermission("worldshops.disable"))
                    {
                        player.ChatMessage(this.Lang("InsufficientPermission", player));
                        return;
                    }

                    this.queuedDisables.Add(player);
                    player.ChatMessage(this.Lang("DisableReady", player));

                    _timer.Once(5f, () =>
                    {
                        if (!this.queuedDisables.Contains(player))
                            return;

                        this.queuedDisables.Remove(player);
                        player.ChatMessage(this.Lang("DisableTimeout", player));
                    });
                    break;

                case "list":
                    player.ChatMessage(string.Join("\n", WorldShopsSettings.Loaded.Shops.Select(x => this.Lang("ShopListElement", player, x.WorldName, x.CommandName, _activeShops.Count(y => y.Value == x))).ToArray()));
                    break;

                case "remote":
                    if (args.Length < 2)
                    {
                        player.ChatMessage(this.Lang("Help", player));
                        return;
                    }

                    commandPlaced = _activeShops.Any(x => x.Value.CommandName == args[1]);
                    fullName = string.Join(" ", args);
                    fullPlaced = _activeShops.Any(x => x.Value.WorldName == fullName);
                    if (!commandPlaced || !fullPlaced)
                    {
                        player.ChatMessage(this.Lang("ShopNotPlaced", player, !commandPlaced ? args[1] : fullName));
                        return;
                    }
                    
                    KeyValuePair<VendingMachine, WorldShopsSettings.Shop> remoteMachine = _activeShops.First(x => x.Value.CommandName == args[1] || x.Value.WorldName == fullName);

                    if (!player.IPlayer.HasPermission($"worldshops.remote.{remoteMachine.Value.CommandName}"))
                    {
                        player.ChatMessage(this.Lang("InsufficientPermission", player));
                        return;
                    }

                    _timer.Once(0.1f, () => PlayerLootContainer(player, remoteMachine.Key, remoteMachine.Key.customerPanel));
                    break;

                default:
                    player.ChatMessage(this.Lang("Help", player));
                    break;
            }
        }

        private static void PlayerLootContainer(BasePlayer player, StorageContainer container, string panelName = null)
        {
            container.SetFlag(BaseEntity.Flags.Open, true);
            player.inventory.loot.StartLootingEntity(container, false);
            player.inventory.loot.AddContainer(container.inventory);
            player.inventory.loot.SendImmediate();
            player.ClientRPCPlayer(null, player, "RPC_OpenLootPanel", panelName ?? container.panelName);
        }

        protected override void LoadDefaultConfig()
        {
            this.Config.WriteObject(new WorldShopsSettings.General
            {
                Notification = new WorldShopsSettings.ShopNotification
                {
                    Enabled = true,
                    FadeIn = 0.5f,
                    WaitTime = 2f,
                    FadeOut = 0.5f
                },
                Shops = new List<WorldShopsSettings.Shop>
                {
                    new WorldShopsSettings.Shop
                    {
                        WorldName = "Test Shop",
                        CommandName = "test",
                        SkinId = 0,
                        SellOrders = new WorldShopsSettings.SellOrder[]
                        {
                            new WorldShopsSettings.SellOrder
                            {
                                SellItem = new WorldShopsSettings.Item
                                {
                                    ShortName = "rifle.ak",
                                    Quantity = 1,
                                    Blueprint = true
                                },
                                BuyItem = new WorldShopsSettings.Item
                                {
                                    ShortName = "scrap",
                                    Quantity = 1500
                                }
                            }
                        },
                        BuildingBlockedDistance = 50f
                    }
                }
            }, true);
        }

        private void Unload()
        {
            if (WorldShopsData.Loaded != null)
            {
                WorldShopsData.Loaded.Shops.Clear();
                foreach (VendingMachine machine in _activeShops.Keys)
                    WorldShopsData.Loaded.Shops.Add(machine.ServerPosition.ToString("f2"), _activeShops[machine].CommandName);

                Interface.Oxide.DataFileSystem.WriteObject(nameof(WorldShops), WorldShopsData.Loaded);
            }

            foreach (ShopBlock shopBlock in UnityEngine.Object.FindObjectsOfType<ShopBlock>())
            {
                shopBlock.Dispose();
                UnityEngine.Object.Destroy(shopBlock);
            }
        }

        private void OnEntityTakeDamage(BaseCombatEntity entity, HitInfo info)
        {
            if (_activeShops?.Keys == null)
                return;

            if (this.queuedSpawns.Contains(info.InitiatorPlayer))
            {
                info.damageTypes.ScaleAll(0f);
                return;
            }

            DecayEntity deployable = entity as DecayEntity;
            if (deployable != null && _activeShops.Any(x => x.Key.GetNearbyBuildingBlock()?.buildingID == deployable.buildingID || Vector3.Distance(x.Key.CenterPoint(), deployable.CenterPoint()) < x.Value.BuildingBlockedDistance))
                info.damageTypes.ScaleAll(0f);
        }

        private object CanBuild(Planner planner, Construction prefab, Construction.Target target)
        {
            Vector3 position = target.position.y == 0 ? target.GetWorldPosition() : target.position; //differs if youre attaching the block to an existing building or creating a new building

            if (planner.GetOwnerPlayer().IPlayer.HasPermission("worldshops.build"))
                return null;

            KeyValuePair<WorldShopsSettings.Shop, float>[] distances = _activeShops.Select(x => new KeyValuePair<WorldShopsSettings.Shop, float>(x.Value, Vector3.Distance(x.Key.CenterPoint(), position))).ToArray();
            WorldShopsSettings.Shop[] closeShops = distances.Where(x => x.Value < x.Key.BuildingBlockedDistance).OrderBy(x => x.Value).Select(x => x.Key).ToArray();
            if (closeShops.Length > 0)
            {
                BasePlayer player = planner.GetOwnerPlayer();
                player.ChatMessage(this.Lang("ShopTooClose", player, string.Join(", ", closeShops.Select(x => x.WorldName).ToArray())));
                return false;
            }

            return null;
        }

        /*
        This area may come of use later once I do more advanced damage detection on shop buildings

        private BasePlayer Owner(BaseEntity entity) =>
            this.Player.Players.FirstOrDefault(x => x.userID == entity.OwnerID);
        */

        //this would normally be hammer only but since spawning on ground is a thing i made it for all weapons
        private void OnPlayerAttack(BasePlayer attacker, HitInfo info)
        {
            VendingMachine machine = info.HitEntity as VendingMachine;
            if (machine == null)
            {
                if (this.queuedSpawns.Contains(attacker))
                {
                    Vector3 spawn = info.HitPositionWorld;

                    Quaternion rotation = Quaternion.LookRotation(attacker.ServerPosition - spawn); //flipped so front faces player
                    rotation = Quaternion.Euler(0f, rotation.eulerAngles.y, rotation.eulerAngles.z); //lock X so it doesnt rotate up or down

                    VendingMachine entity = (VendingMachine)GameManager.server.CreateEntity("assets/prefabs/deployable/vendingmachine/vendingmachine.deployed.prefab", spawn, rotation);
                    entity.Spawn();

                    attacker.ChatMessage(this.Lang("SpawnSuccess", attacker));
                    this.NextFrame(() => this.queuedSpawns.Remove(attacker)); //remove next frame so the hit entity doesnt take damage
                }

                return;
            }

            if (this.queuedShops.ContainsKey(attacker))
            {
                this.ApplyMachine(machine, this.queuedShops[attacker]);

                if (_activeShops.ContainsKey(machine))
                    _activeShops[machine] = this.queuedShops[attacker];
                else
                    _activeShops.Add(machine, this.queuedShops[attacker]);

                attacker.ChatMessage(this.Lang("ApplySuccess", attacker, this.queuedShops[attacker].CommandName));
                this.queuedShops.Remove(attacker);

            }
            else if (this.queuedWipes.Contains(attacker))
            {
                if (_activeShops.ContainsKey(machine))
                {
                    this.WipeMachine(machine);
                    this.queuedWipes.Remove(attacker);
                    attacker.ChatMessage(this.Lang("WipeSuccess", attacker));
                }
            }
            else if (this.queuedDisables.Contains(attacker))
            {
                if (_activeShops.ContainsKey(machine))
                {
                    _activeShops.Remove(machine);
                    this.queuedDisables.Remove(attacker);
                    attacker.ChatMessage(this.Lang("DisableSuccess", attacker));
                }
            }
            else if (this.queuedSaves.ContainsKey(attacker))
            {
                this.SaveMachine(machine, this.queuedSaves[attacker]);
                this.Config.WriteObject(WorldShopsSettings.Loaded);

                attacker.ChatMessage(this.Lang("SaveSuccess", attacker, this.queuedSaves[attacker].CommandName));
                this.queuedSaves.Remove(attacker);
            }
        }

        private void OnHammerHit(BasePlayer player, HitInfo info) =>
            this.OnPlayerAttack(player, info); //reroute so people can use the traditional hammer too

        private void OnEntityKill(BaseNetworkable entity)
        {
            VendingMachine machine = entity as VendingMachine;
            if (machine == null)
                return;

            if (_activeShops.ContainsKey(machine))
                _activeShops.Remove(machine);
        }

        private void OnVendingTransaction(VendingMachine machine, BasePlayer buyer, int sellOrderId, int numberOfTransactions)
        {
            if (!_activeShops.ContainsKey(machine))
                return;

            this.NextFrame(() =>
            {
                WorldShopsSettings.SellOrder order = _activeShops[machine].SellOrders[sellOrderId];

                Item stack = machine.inventory.itemList.FirstOrDefault(x => x.info.itemid == machine.sellOrders.sellOrders[sellOrderId].itemToSellID);
                if (stack == null)
                {
                    if (order.SellItem.Blueprint)
                        this.GetBlueprint(order.SellItem.Definition, order.SellItem.Quantity).MoveToContainer(machine.inventory);
                    else 
                        ItemManager.Create(order.SellItem.Definition, order.SellItem.Quantity).MoveToContainer(machine.inventory); //restock
                }
                else
                    stack.amount += order.SellItem.Quantity;

                Item currencyStack = machine.inventory.itemList.First(x => x.info.itemid == machine.sellOrders.sellOrders[sellOrderId].currencyID);
                if (currencyStack.amount == machine.sellOrders.sellOrders[sellOrderId].currencyAmountPerItem)
                    currencyStack.Remove();
                else
                    currencyStack.amount -= machine.sellOrders.sellOrders[sellOrderId].currencyAmountPerItem;
            });
        }

        private void ApplyMachine(VendingMachine machine, WorldShopsSettings.Shop shop)
        {
            machine.sellOrders.sellOrders = shop.SellOrders.Select(x => x.ProtoBuf).ToList();
            machine.shopName = shop.WorldName;
            machine.skinID = shop.SkinId;
            machine.health = machine.MaxHealth();

            machine.inventory.Clear();
            foreach (WorldShopsSettings.SellOrder order in shop.SellOrders)
            {
                if (machine.inventory.itemList.Select(x => x.info).Contains(order.SellItem.Definition))
                    continue;

                if (order.SellItem.Blueprint)
                    this.GetBlueprint(order.SellItem.Definition, order.SellItem.Quantity).MoveToContainer(machine.inventory);
                else
                    ItemManager.Create(order.SellItem.Definition, order.SellItem.Quantity).MoveToContainer(machine.inventory); //restock
            }
        }

        private void WipeMachine(VendingMachine machine)
        {
            machine.sellOrders.sellOrders = new List<ProtoBuf.VendingMachine.SellOrder>();
            machine.inventory.Clear();
            machine.shopName = "A Shop";
            machine.skinID = 0UL;
            machine.health = machine.MaxHealth();

            _activeShops.Remove(machine);
        }

        private void SaveMachine(VendingMachine machine, WorldShopsSettings.Shop shop)
        {
            shop.SellOrders = machine.sellOrders.sellOrders.Select(x =>
                new WorldShopsSettings.SellOrder
                {
                    BuyItem = new WorldShopsSettings.Item
                    {
                        Definition = ItemManager.FindItemDefinition(x.currencyID),
                        Quantity = x.currencyAmountPerItem,
                        Blueprint = x.currencyIsBP
                    },
                    SellItem = new WorldShopsSettings.Item
                    {
                        Definition = ItemManager.FindItemDefinition(x.itemToSellID),
                        Quantity = x.itemToSellAmount,
                        Blueprint = x.itemToSellIsBP
                    }
                }).ToArray();

            shop.SkinId = machine.skinID;
            shop.WorldName = machine.shopName;
        }

        private Item GetBlueprint(ItemDefinition learnableItem, int amount = 1)
        {
            Item item = ItemManager.Create(ResearchTable.GetBlueprintTemplate(), amount);
            item.blueprintTarget = learnableItem.itemid;

            return item;
        }

        private object CanAdministerVending(VendingMachine machine, BasePlayer player)
        {
            if (_activeShops.ContainsKey(machine))
                return false;
            
            return null;
        }
        
        private object OnRotateVendingMachine(VendingMachine machine, BasePlayer player)
        {
            if (_activeShops.ContainsKey(machine))
            {
                if (player.IPlayer.HasPermission("worldshops.build"))
                    return null;

                return false;
            }

            return null;
        }

        private string Lang(string key, BasePlayer player, params object[] args) => string.Format(this.lang.GetMessage(key, this, player.UserIDString), args);

        private class ShopBlock : MonoBehaviour
        {
            private BasePlayer player;
            private bool notificaitonActive;
            private bool notificationShown;

            public void Start()
            {
                this.player = this.GetComponent<BasePlayer>();
                this.notificationShown = _activeShops.Any(x => Vector3.Distance(x.Key.CenterPoint(), this.player.CenterPoint()) < x.Value.BuildingBlockedDistance);
            }

            public void Update()
            {
                if (_activeShops.Any(x => Vector3.Distance(x.Key.CenterPoint(), this.player.CenterPoint()) < x.Value.BuildingBlockedDistance))
                {
                    if (!this.notificationShown && !this.notificaitonActive)
                    {
                        this.ShowGui(false);
                        this.notificationShown = true;
                    }
                }
                else if (this.notificationShown && !this.notificaitonActive)
                {
                    this.ShowGui(true);
                    this.notificationShown = false;
                }
            }

            private void ShowGui(bool exiting)
            {
                this.notificaitonActive = true;

                float[] position = { 0.3945f, 0.11f };
                float[] maxPosition = { position[0] + 0.1953125f, position[1] + 0.104166667f };
                CuiHelper.AddUi(this.player, new List<CuiElement>
                {
                    new CuiElement
                    {
                       Name = "ShopBlockedIcon",
                        Components =
                        {
                            new CuiRawImageComponent
                            {
                                Url = exiting ? "https://i.imgur.com/0BH83NH.png" : "https://i.imgur.com/MWY2a6x.png",
                                FadeIn = WorldShopsSettings.Loaded.Notification.FadeIn
                            },
                            new CuiRectTransformComponent
                            {
                                AnchorMin = $"{position[0]} {position[1]}",
                                AnchorMax = $"{maxPosition[0]} {maxPosition[1]}"
                            }
                        },
                        FadeOut = WorldShopsSettings.Loaded.Notification.FadeOut
                    }
                });

                _timer.Once(WorldShopsSettings.Loaded.Notification.WaitTime + WorldShopsSettings.Loaded.Notification.FadeIn, () => CuiHelper.DestroyUi(this.player, "ShopBlockedIcon"));
                _timer.Once(WorldShopsSettings.Loaded.Notification.WaitTime + WorldShopsSettings.Loaded.Notification.FadeIn + WorldShopsSettings.Loaded.Notification.FadeOut, () => this.notificaitonActive = false);
            }

            public void Dispose()
            {
                CuiHelper.DestroyUi(this.player, "ShopBlockedIcon");

                this.player = null;
                this.notificaitonActive = false;
                this.notificationShown = false;
            }
        }

        private class WorldShopsSettings
        {
            public class Item
            {
                [JsonIgnore]
                public ItemDefinition Definition { get; set; }
                
                public string ShortName
                {
                    get
                    {
                        return this.Definition.shortname;
                    }
                    set
                    {
                        this.Definition = ItemManager.FindItemDefinition(value);
                    }
                }
                
                public int Quantity { get; set; }
                public bool Blueprint { get; set; }
            }

            public class SellOrder
            {
                [JsonIgnore]
                public ProtoBuf.VendingMachine.SellOrder ProtoBuf
                {
                    get
                    {
                        return new ProtoBuf.VendingMachine.SellOrder
                        {
                            currencyID = this.BuyItem.Definition.itemid,
                            currencyAmountPerItem = this.BuyItem.Quantity,
                            currencyIsBP = this.BuyItem.Blueprint,
                            itemToSellID = this.SellItem.Definition.itemid,
                            itemToSellAmount = this.SellItem.Quantity,
                            itemToSellIsBP = this.SellItem.Blueprint
                        };
                    }
                }
                
                public Item SellItem { get; set; }
                public Item BuyItem { get; set; }
            }

            public class Shop
            {
                public SellOrder[] SellOrders { get; set; }
                public string WorldName { get; set; }
                public string CommandName { get; set; }
                public ulong SkinId { get; set; }
                public float BuildingBlockedDistance { get; set; }
            }

            public class ShopNotification
            {
                public bool Enabled { get; set; }
                public float FadeIn { get; set; }
                public float WaitTime { get; set; }
                public float FadeOut { get; set; }
            }

            public class General
            {
                public List<Shop> Shops { get; set; }
                public ShopNotification Notification { get; set; }
            }

            public static General Loaded;
        }

        private class WorldShopsData
        {
            public class General
            {
                public Dictionary<string, string> Shops { get; set; }
            }

            public static General Loaded;
        }
    }
}

// --- End of file: WorldShops.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/wipe-dates ---
// --- Original File Path: W/WipeDates/WipeDates.cs ---

﻿using System;
using System.Linq;
using System.Collections.Generic;

namespace Oxide.Plugins
{
    [Info("Wipe Dates", "Freakyy", "1.0.3")]
    [Description("Shows the last and next wipe dates on command.")]
    class WipeDates : RustPlugin
    {
        #region variables
        public DateTime Last_Config_Call;

        public string Last_Wipe;
        public string Next_Wipe;

        public List<string> All_Wipe_Dates = new List<string>();

        private Settings _Settings;

        protected override void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["WipeCommandMessage"] = "{Last_Wipe_Message} {Last_Wipe_Date} {Server_Timezone}\n{Next_Wipe_Message} {Next_Wipe_Date} {Server_Timezone}",
            }, this);
        }
        #endregion

        #region hooks

        void Init()
        {
            Last_Config_Call = DateTime.Now;
            save_config_settings();
            calculate_wipe_dates();
        }

        void OnPlayerSleepEnded(BasePlayer player)
        {
            if(_Settings.Send_Message_On_User_Wake_Up)
                send_player_wipe_message(player);
        }

        #endregion

        #region commands
        [ChatCommand("wipe")]
        void wipe(BasePlayer player)
        {
            send_player_wipe_message(player);
        }
        #endregion

        #region functions
        private void send_player_wipe_message(BasePlayer player)
        {
            //prevents load Config spamming
            if (DateTime.Now > Last_Config_Call.AddMinutes(5))
            {
                save_config_settings();
                calculate_wipe_dates();
            }

            SendReply(player,
                lang.GetMessage("WipeCommandMessage", this, player.UserIDString)
                .Replace("{Last_Wipe_Date}", Last_Wipe)
                .Replace("{Next_Wipe_Date}", Next_Wipe)
                .Replace("{Last_Wipe_Message}", _Settings.Last_Wipe_Message)
                .Replace("{Next_Wipe_Message}", _Settings.Next_Wipe_Message)
                .Replace("{Server_Timezone}", _Settings.Server_Timezone)
            );
        }

        private void calculate_wipe_dates()
        {
            if(All_Wipe_Dates.Count == 0)
            {
                PrintError("Missing entries in config file. (All_Wipe_Dates)");
                return;
            }

            List<string> Past_Dates = All_Wipe_Dates.Where(x => Convert.ToDateTime(x) < DateTime.Now).OrderByDescending(x => x).ToList();

            List<string> Future_Dates = All_Wipe_Dates.Where(x => Convert.ToDateTime(x) > DateTime.Now).ToList();

            if(Past_Dates != null)
            {
                Last_Wipe = Convert.ToDateTime(Past_Dates.First()).ToString(_Settings.Date_Format);
            }

            if (Future_Dates != null)
            {
                Future_Dates.Sort();
                Next_Wipe = Convert.ToDateTime(Future_Dates.First()).ToString(_Settings.Date_Format);
            }
        }

        private void save_config_settings()
        {
            _Settings = Config.ReadObject<Settings>();

            Last_Config_Call = DateTime.Now;
            All_Wipe_Dates = _Settings.All_Wipe_Dates;
        }
        #endregion

        #region config
        private class Settings
        {
            public string Last_Wipe_Message { get; set; }
            public string Next_Wipe_Message { get; set; }
            public string Date_Format { get; set; }

            public List<string> All_Wipe_Dates;

            public bool Send_Message_On_User_Wake_Up { get; set; }

            public string Server_Timezone { get; set; }
        }

        private Settings GetDefaultSettings()
        {
            return new Settings
            {
                Last_Wipe_Message = "Last wipe was:",
                Next_Wipe_Message = "Next wipe will happen:",
                Date_Format = "MM/dd/yyyy HH:mm",
                All_Wipe_Dates = new List<string>() {
                    "02/09/2015 15:00:00",
                    "02/09/2099 15:00:00"
                },
                Send_Message_On_User_Wake_Up = false,
                Server_Timezone = "CET"
            };
        }

        protected override void LoadDefaultConfig()
        {
            PrintWarning("Attempting to create default config...");
            Config.WriteObject(GetDefaultSettings(), true);
            Config.Save();
        }
        #endregion
    }

}


// --- End of file: WipeDates.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/wipe-schedule ---
// --- Original File Path: W/WipeSchedule/WipeSchedule.cs ---

﻿using System;
using System.Collections.Generic;
using System.Globalization;

namespace Oxide.Plugins
{
    [Info("Wipe Schedule", "k1lly0u", "2.0.5")]
    [Description("Adds the ablity to report regular wipe cycles")]
    class WipeSchedule : RustPlugin
    {
        #region Fields
        DateTime NextWipeDate;
        Timer announceTimer;
        #endregion

        #region Oxide Hooks 
        void OnServerInitialized()
        {
            LoadVariables();

            if (!configData.UseManualNextWipe)
                UpdateWipeDates();
            else LoadWipeDates();

            if (configData.AnnounceOnTimer)
            {
                announceTimer = timer.Repeat((configData.AnnounceTimer * 60) * 60, 0, ()=> BroadcastWipe()); 
            }
        }
        void OnPlayerConnected(BasePlayer player)
        {
            if (configData.AnnounceOnJoin)
            {
                cmdNextWipe(player, "", new string[0]);
            }
        }
        void Unload()
        {
            if (announceTimer != null)
                announceTimer.Destroy();
        }
        #endregion

        #region Functions        
        private DateTime ParseTime(string time) => DateTime.ParseExact(time, configData.DateFormat, CultureInfo.InvariantCulture);
        private void UpdateWipeDates()
        {
            var lastWipe = ParseTime(configData.LastWipe);
            NextWipeDate = lastWipe.AddDays(configData.DaysBetweenWipes);            
        }
        private void LoadWipeDates()
        {
            NextWipeDate = ParseTime(configData.NextWipe);
        }
        private string NextWipeDays(DateTime WipeDate)
        {            
            TimeSpan t = WipeDate.Subtract(DateTime.Now);
            return string.Format(string.Format("{0:D2} Days",t.Days));
        }
        private void BroadcastWipe()
        {
            PrintToChat(string.Format(MSG("lastMapWipe", null), configData.LastWipe, NextWipeDays(NextWipeDate)));           
        }
        #endregion

        #region ChatCommands
        [ChatCommand("nextwipe")]
        private void cmdNextWipe(BasePlayer player, string command, string[] args)
        {
            SendReply(player, string.Format(MSG("lastMapWipe", player.UserIDString), configData.LastWipe, NextWipeDays(NextWipeDate)));            
        }
        [ChatCommand("setwipe")]
        private void cmdSetWipe(BasePlayer player, string command, string[] args)
        {
            if (!player.IsAdmin) return;
            if (args == null || args.Length == 0)
            {
                SendReply(player, $"<color=#ffae1a>/setwipe</color>{MSG("setWipeMap", player.UserIDString)}");
                SendReply(player, $"<color=#ffae1a>/setwipe <date></color>{MSG("setWipeMapManual", player.UserIDString)}");
                return;
            }
            if (args.Length == 1)
            {
                configData.LastWipe = DateTime.Now.Date.ToString(configData.DateFormat);
                SaveConfig(configData);
                UpdateWipeDates();
                SendReply(player, string.Format(MSG("savedWipeMap", player.UserIDString), configData.LastWipe));
            }
            if (args.Length == 2)
            {
                DateTime time;
                if (DateTime.TryParse(args[1], out time))
                {
                    configData.LastWipe = time.ToString(configData.DateFormat);
                    SaveConfig(configData);
                    UpdateWipeDates();
                    SendReply(player, string.Format(MSG("savedWipeMap", player.UserIDString), configData.LastWipe));
                }
            }
        }

        [ConsoleCommand("setwipe")]
        private void ccmdSetWipe(ConsoleSystem.Arg arg)
        {
            if (arg.Connection == null)
            {
                if (arg.Args == null || arg.Args.Length == 0)
                {
                    SendReply(arg, $"setwipe {MSG("setWipeMap", null)}");
                    
                    return;
                }
                if (arg.Args.Length == 1)
                {
                    configData.LastWipe = DateTime.Now.Date.ToString(configData.DateFormat);
                    SaveConfig(configData);
                    UpdateWipeDates();
                    SendReply(arg, string.Format(MSG("savedWipeMap", null), configData.LastWipe));
                }                
            }
        }
        [ConsoleCommand("getwipe")]
        private void ccmdGetWipe(ConsoleSystem.Arg arg)
        {
            SendReply(arg, string.Format(MSG("lastMapWipe"), configData.LastWipe, NextWipeDays(NextWipeDate)));
        }
        [ChatCommand("setnextwipe")]
        private void cmdSetNextWipe(BasePlayer player, string command, string[] args)
        {
            if (!player.IsAdmin) return;
            if (args == null || args.Length == 0)
            {                
                SendReply(player, $"<color=#ffae1a>/setnextwipe <date></color>{MSG("setNextWipeMapManual", player.UserIDString)}");
                return;
            }            
            if (args.Length == 2)
            {
                DateTime time;
                if (DateTime.TryParse(args[1], out time))
                {
                    configData.NextWipe = time.ToString(configData.DateFormat);
                    SaveConfig(configData);
                    LoadWipeDates();
                    SendReply(player, string.Format(MSG("savedNextWipeMap", player.UserIDString), configData.NextWipe));
                }
            }
        }

        [ConsoleCommand("setnextwipe")]
        private void ccmdSetNextWipe(ConsoleSystem.Arg arg)
        {
            if (arg.Connection == null)
            {
                if (arg.Args == null || arg.Args.Length == 0)
                {
                    SendReply(arg, $"setnextwipe <date>{MSG("setNextWipeMapManual", null)}");

                    return;
                }
                if (arg.Args.Length == 2)
                {
                    DateTime time;
                    if (DateTime.TryParse(arg.Args[1], out time))
                    {
                        configData.NextWipe = time.ToString(configData.DateFormat);
                        SaveConfig(configData);
                        LoadWipeDates();
                        SendReply(arg, string.Format(MSG("savedNextWipeMap"), configData.NextWipe));
                    }
                    return;
                }
            }
        }
        #endregion

        #region Config        
        private ConfigData configData;
        class ConfigData
        {
            public string DateFormat { get; set; }
            public int DaysBetweenWipes { get; set; }
            public string LastWipe { get; set; }
            public string NextWipe { get; set; }
            public bool AnnounceOnJoin { get; set; }
            public bool UseManualNextWipe { get; set; }
            public bool AnnounceOnTimer { get; set; }
            public int AnnounceTimer { get; set; }
        }
        private void LoadVariables()
        {
            LoadConfigVariables();
            if (string.IsNullOrEmpty(configData.LastWipe))
                configData.LastWipe = DateTime.Now.ToString(configData.DateFormat);           
            if (string.IsNullOrEmpty(configData.NextWipe))
                configData.NextWipe = DateTime.Now.ToString(configData.DateFormat);           
            SaveConfig();
        }
        protected override void LoadDefaultConfig()
        {
            var config = new ConfigData
            {
                AnnounceOnJoin = true,
                AnnounceOnTimer = true,
                AnnounceTimer = 3,
                DateFormat = "MM/dd/yyyy",
                DaysBetweenWipes = 14,
                LastWipe = "",
                UseManualNextWipe = false,
                NextWipe = ""               
            };            
            SaveConfig(config);
        }
        private void LoadConfigVariables() => configData = Config.ReadObject<ConfigData>();
        void SaveConfig(ConfigData config) => Config.WriteObject(config, true);
        #endregion

        #region Messaging
        private string MSG(string key, string playerid = null) => lang.GetMessage(key, this, playerid);

        protected override void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>()
            {            
                {"lastMapWipe", "<color=#b3b3b3>Last Map Wipe:</color> <color=#ffae1a>{0}</color> <color=#b3b3b3>Time Until Next Map Wipe:</color> <color=#ffae1a>{1}</color>" },
                {"setWipeMap", "<color=#b3b3b3> - Sets the current time as last map wipe</color>" },
                {"savedWipeMap", "<color=#b3b3b3>Successfully set last map wipe to:</color> <color=#ffae1a>{0}</color>" },
                {"setWipeMapManual", "<color=#b3b3b3> - Set the time of last map wipe. Format: MM/dd/yyyy</color>" },
                {"savedNextWipeMap", "<color=#b3b3b3>Successfully set next map wipe to:</color> <color=#ffae1a>{0}</color>" },
                {"setNextWipeMapManual", "<color=#b3b3b3> - Set the time of next map wipe. Format: MM/dd/yyyy</color>" }
            }, this);
        }
        #endregion
    }
}

// --- End of file: WipeSchedule.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/weapon-names ---
// --- Original File Path: W/WeaponNames/WeaponNames.cs ---

using System;
using System.IO;
using Oxide.Core;
using Newtonsoft.Json;
using System.Collections.Generic;
using Oxide.Core.Libraries.Covalence;

namespace Oxide.Plugins
{
    [Info("Weapon Names", "klauz24", "1.2.2"), Description("Allows to change your active weapon name.")]
    internal class WeaponNames : CovalencePlugin
    {
        private Configuration _config;

        private const string _perm = "weaponnames.use";

        private readonly Dictionary<string, DateTime> _cooldowns = new Dictionary<string, DateTime>();

        private class Configuration
        {
            [JsonProperty(PropertyName = "New tag digits limit")]
            public int NewTagDigitsLimit { get; set; } = 12;

            [JsonProperty(PropertyName = "Cooldown (in minutes)")]
            public double Cooldown { get; set; } = 1.0;
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                _config = Config.ReadObject<Configuration>();
                if (_config == null)
                {
                    throw new JsonException();
                }
            }
            catch
            {
                string configPath = $"{Interface.Oxide.ConfigDirectory}{Path.DirectorySeparatorChar}{Name}";
                PrintWarning($"Could not load a valid configuration file, creating a new configuration file at {configPath}.json");
                Config.WriteObject(_config, false, $"{configPath}_invalid.json");
                LoadDefaultConfig();
                SaveConfig();
            }
        }

        protected override void LoadDefaultConfig() => _config = new Configuration();

        protected override void SaveConfig() => Config.WriteObject(_config);

        protected override void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                {"NoPerm", "You got no permission to use this command."},
                {"Syntax",  "/ct <name tag>"},
                {"Cooldown", "You must wait <color=#cacbd3>{0}</color> before using this command again."},
                {"NoComponent", "This item does not have ItemComponentNameOverride component."},
                {"DigitsLimit", "New name tag can not have more than <color=#cacbd3>{0}</color> digits."},
                {"CanNot", "This item name cannot be changed."},
                {"Changed", "Weapon name tag has been changed to: <color=#cacbd3>{0}</color>."}
            }, this);
        }

        [Command("ct")]
        private void ChatCommand(IPlayer player, string command, string[] args)
        {
            if (player.IsAdmin || permission.UserHasPermission(player.Id, _perm))
            {
                if (args.Length != 0)
                {
                    if (_cooldowns.ContainsKey(player.Id))
                    {
                        var time = DateTime.Compare(_cooldowns[player.Id], DateTime.Now);
                        if (time > 0)
                        {
                            var timeSpan = _cooldowns[player.Id].Subtract(DateTime.Now);
                            player.Message(string.Format(lang.GetMessage("Cooldown", this, player.Id), string.Format("{0:00}:{1:00}:{2:00}", timeSpan.Hours, timeSpan.Minutes, timeSpan.Seconds)));
                            return;
                        }
                        _cooldowns.Remove(player.Id);
                    }
                    var newName = string.Join(" ", args);
                    if (newName.Length <= _config.NewTagDigitsLimit)
                    {
#if HURTWORLD
                        HandleHurtworld(player, newName);
#endif
#if RUST
						HandleRust(player, newName);
#endif
                    }
                    else
                    {
                        player.Message(string.Format(lang.GetMessage("DigitsLimit", this, player.Id), _config.NewTagDigitsLimit));
                    }
                }
                else
                {
                    player.Message(lang.GetMessage("Syntax", this, player.Id));
                }
            }
            else
            {
                player.Message(lang.GetMessage("NoPerm", this, player.Id));
            }
        }

        private void Init() => permission.RegisterPermission(_perm, this);

#if HURTWORLD
        private void HandleHurtworld(IPlayer player, string newName)
        {
            var item = (player.Object as PlayerSession)?.WorldPlayerEntity.GetComponent<EquippedHandlerBase>().GetEquippedItem();
            if (item != null)
            {
                var component = item.GetComponent<ItemComponentNameOverride>();
                if (component != null)
                {
                    component.NameKey = newName;
                    item.InvalidateBaseline();
                    player.Message(string.Format(lang.GetMessage("Changed", this, player.Id), newName));
                    _cooldowns.Add(player.Id, DateTime.Now.AddMinutes(_config.Cooldown));
                }
                else
                {
                    player.Message(lang.GetMessage("NoComponent", this, player.Id));
                }
            }
            else
            {
                player.Message(lang.GetMessage("CanNot", this, player.Id));
            }
        }
#elif RUST
        private void HandleRust(IPlayer player, string newName)
        {
            var item = (player.Object as BasePlayer)?.GetActiveItem();
            if (item != null)
            {
				item.name = newName;
				item.MarkDirty();
				player.Message(string.Format(lang.GetMessage("Changed", this, player.Id), newName));
				_cooldowns.Add(player.Id, DateTime.Now.AddMinutes(_config.Cooldown));
            }
            else
            {
                player.Message(lang.GetMessage("CanNot", this, player.Id));
            }
        }
#endif
    }
}

// --- End of file: WeaponNames.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/wordpress-bridge ---
// --- Original File Path: W/WPBridge/WPBridge.cs ---

﻿using Newtonsoft.Json;
using Oxide.Core.Libraries.Covalence;
using Rust;
using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("WordPress Bridge", "Murky", "1.2.12")]
    [Description("WordPress Bridge integrates Rust servers with Wordpress, making it possible to embed player and server statistics on your Wordpress site with shortcodes.")]
    internal class WPBridge : RustPlugin
    {
        #region Singleton
        // Singleton instance. Practical when using static methods when we need to refer to plugin 
        WPBridge GetInstance()
        {
            if (_instance == null) _instance = this;
            return _instance;
        }
        #endregion

        #region Variables
        // Only set true if validation and endpoint conditions in Init method is met.
        private bool _isConfiguredAndReady = false;
        // Plugin configuration
        private Configuration _config = new Configuration();
        // Singleton instance
        static WPBridge _instance;
        // Web Request wrapper
        public static WebRequester webRequester = new WebRequester();
        // The class holding the server information such as seed, level etc.
        WPBServer WPBServerData;
        // A list of all active players
        List<WPBPlayer> WPBPlayerData;
        // Group name permissions.
        string _reservedPlayerGroupName = "wpbridge_reserved_players";
        //WordPress request object to send to server;
        WordPressBridgeRequest wordPressRequest;
        Timer syncTimer;
        string endPointUriSecret;
        string endPointUriSync;
        static List<string> WPBPlayersLeftSteamIds = new List<string>();
        System.Diagnostics.Stopwatch stopWatch = new System.Diagnostics.Stopwatch();
        #endregion

        #region Configuration
        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                _config = Config.ReadObject<Configuration>();
                if (_config == null) throw new Exception();
            }
            catch
            {
                // Log and print errors if configuration fails to load
                LogToFile("ErrorLog", $"[{DateTime.Now}] [LoadConfig] Configuration file contains an error. Using default configuration values.", this);
                PrintError("ERROR: " + "Your configuration file contains an error. Using default configuration values.");

                LoadDefaultConfig();
            }
        }
        protected override void LoadDefaultConfig() => _config = new Configuration();
        protected override void SaveConfig() => Config.WriteObject(_config);
        private void InitConfig(Action<bool, string> p)
        {
            LoadConfig();
            // Try validate the external IP for the Rust server
            if (_config.External_IP == "" || _config.External_IP == "PASTE_EXTERNAL_IP_HERE" || !ValidIPv4(_config.External_IP))
            {
                // Using webRequester to request danlevi service for external ip
                webRequester.Post("https://danlevi.no/services/whatismyip/", null, (code, ip) => {
                    if(code != 0)
                    {
                        // Remove any occurences of line feed (LF) character / carriage return (CR) character
                        ip = ip.Replace("\n", "").Replace("\r", "");
                        if (code == 200 && ValidIPv4(ip))
                        {
                            _config.External_IP = ip;
                            SaveConfig();
                        }
                    }
                    p(false, "External IP needs to be set.");
                    return;
                });
            }
            if (_config.Wordpress_Site_URL == "" || _config.Wordpress_Site_URL == "PASTE_WORDPRESS_SITE_URL_HERE")
            {
                p(false, "Wordpress Site Url needs to be set.");
                return;
            }
            if (!ValidHttpURL(_config.Wordpress_Site_URL))
            {
                var errorMessage = $"Wordpress Site Url seems to be invalid!";
                errorMessage += $"\n\r\n\r> WordPress Bridge needs the fully qualified site url to where you have installed WordPress.";
                errorMessage += $"\n\r> In config: [{_config.Wordpress_Site_URL}]";
                errorMessage += $"\n\r> Example:   [http://www.your-wordpress-site.com/]";
                errorMessage += $"\n\r";
                p(false, errorMessage);
                return;
            }
            if (!_config.Wordpress_Site_URL.EndsWith("/"))
            {
                p(false, "Wordpress Site Url must end with a trailing slash. [http://www.your-wordpress-site.com/]");
                return;
            }
            if (_config.Wordpress_Secret == "" || _config.Wordpress_Secret == "PASTE_WPBRIDGE_UNIQUE_SECRET_HERE")
            {
                p(false, "Wordpress secret needs to be set.");
                return;
            }
            if (_config.UpdateInterval < 5)
            {
                p(false, "Update interval cannot be less than 5 seconds.");
                return;
            }
            p(true, "");
        }
        #endregion

        #region WordPress
        void WordPressSiteIsUp(Action<bool,string> returnMethod)
        {
            webRequester.Get($"{_config.Wordpress_Site_URL}index.php/wp-json", null, (code, json) => {
                returnMethod(code != 200, json);
                return;
            });
        }
        bool WordPressPluginInstalled(WordPressJson json)
        {
            return json.routes.Wpbridge != null;
        }
        private void TryValidateWordPressSecret(Action<bool> returnMethod)
        {
            wordPressRequest = new WordPressBridgeRequest(_config.Wordpress_Secret);
            webRequester.Post(endPointUriSecret, wordPressRequest, (code, json) =>
            {
                if (code != 200)
                {
                    returnMethod(true);
                    return;
                }
                var wordPressResponse = JsonConvert.DeserializeObject<WordPressBridgeResponse>(json);
                if (wordPressResponse.code != "success")
                {
                    returnMethod(true);
                    return;
                }
                returnMethod(false);                
            });
        }
        #endregion

        #region Main Logic

        #region Initialization
        private void WPBRidgeInit()
        {
            if(TryCreateReservedGroup())
            {
                UpdateWPBPlayers();

                TryValidateWordPressSecret((err) =>
                {
                    if(err)
                    {
                        PrintError($"[TryValidateWordPressSecret] Failed to validate secret. Secret missing or mismatch. Have you updated the WordPress plugin?");
                        timer.Once(5f,() => {
                            WPBRidgeInit();
                        });
                        return;
                    }
                    PrintDebug($"[TryValidateWordPressSecret] Secret validated");
                    Sync();
                });
                return;
            }
            PrintError($"[TryCreateReservedGroup] Failed to create reserved player group.");
            timer.Once(5f, () =>
            {
                WPBRidgeInit();
            });
        }
        #endregion

        #region Sync
        void Sync()
        {
            WPBServerData.UpdatePlayerCount();
            UpdateWPBPlayers();
            wordPressRequest = new WordPressBridgeRequest(_config.Wordpress_Secret);
            wordPressRequest.SetServerData(WPBServerData);
            float serializedRequestSize = (float)(JsonConvert.SerializeObject(wordPressRequest).Length * 2) / 1024;
            string payloadSizeFormatted = serializedRequestSize.ToString("0.00");
            if (WPBPlayerData != null && WPBPlayerData.Count > 0)
            {
                wordPressRequest.SetPlayerData(WPBPlayerData);
                PrintDebug($"[Sync] Sending {payloadSizeFormatted}kB of statistics for {WPBPlayerData.Count} players.");
            }
            else
            {
                PrintDebug($"[Sync] Sending {payloadSizeFormatted}kB of statistics, (No players on, syncing server data only).");
            }
            stopWatch.Start();
            webRequester.Post(endPointUriSync, wordPressRequest, (code, json) =>
            {
                ClearWPBPlayerStats();
                ClearWPBPlayerLoot();
                if (code != 200)
                {
                    PrintDebug("[Sync] Failed to read to response from WordPress");
                    LoadConfig();
                    PrintDebug(json);
                    return;
                }
                WordPressBridgeResponse wordPressResponse = null;
                try
                {
                    wordPressResponse = JsonConvert.DeserializeObject<WordPressBridgeResponse>(json);
                }
                catch (JsonReaderException jsonException)
                {
                    stopWatch.Stop();
                    PrintDebug($"[Sync] The exchange took {stopWatch.ElapsedMilliseconds} milliseconds but was unsuccessful.");
                    stopWatch.Reset();
                    PrintError("[Sync] [JsonReaderException] Error parsing JSON response!");
                    PrintError(jsonException.Message);
                    PrintError(json);
                }
                if (wordPressResponse != null && wordPressResponse.code == "success")
                {
                    stopWatch.Stop();
                    PrintDebug($"[Sync] The exchange took {stopWatch.ElapsedMilliseconds} milliseconds.");
                    stopWatch.Reset();
                }
                if (WPBPlayersLeftSteamIds != null && WPBPlayersLeftSteamIds.Count > 0)
                {
                    if(WPBPlayerData != null)
                    {
                        WPBPlayerData.RemoveAll(wpbPlayer => { return WPBPlayersLeftSteamIds.Contains(wpbPlayer.SteamID); });
                        WPBPlayersLeftSteamIds.Clear();
                    }
                }
            });
            timer.Once(_config.UpdateInterval, Sync);
        }
        #endregion

        #region Loot
        void WPBPlayerOnLoot(Item item, BasePlayer basePlayer)
        {
            if (item == null || item.info == null || basePlayer == null) return;
            WPBPlayer wpbPlayer = GetWPBPlayer(basePlayer);
            if (wpbPlayer == null) return;
            if (item.info.name.EndsWith(".item"))
            {
                int itemNameLength = item.info.name.Length;
                var itemName = item.info.name.Replace(".item", "");
                if (itemName.Length < itemNameLength)
                {
                    var itemAmount = item.amount;
                    if (wpbPlayer.LootedItems.Count > 0)
                    {
                        var lootItem = wpbPlayer.LootedItems.Where(l => l.Name == itemName).FirstOrDefault();
                        if (lootItem != null)
                        {
                            lootItem.Amount += itemAmount;
                        }
                        else
                        {
                            wpbPlayer.LootedItems.Add(new LootItem(itemName, itemAmount));
                        }
                    }
                    else
                    {
                        wpbPlayer.LootedItems.Add(new LootItem(itemName, itemAmount));
                    }
                }
            }
        }
        #endregion

        #region Players
        /// <summary>
        /// Returns the WPBPlayer that matches SteamID on BasePlayer
        /// </summary>
        /// <param name="basePlayer"></param>
        /// <returns>WPBPlayer or NULL</returns>
        private WPBPlayer GetWPBPlayer(BasePlayer basePlayer)
        {
            if (basePlayer == null || WPBPlayerData == null || WPBPlayerData.Count == 0) return null;
            return WPBPlayerData.FirstOrDefault(bp => bp.SteamID == basePlayer.UserIDString);
        }

        /// <summary>
        /// Returns the WPBPlayer that matches SteamID on IPlayer
        /// </summary>
        /// <param name="iPlayer"></param>
        /// <returns>WPBPlayer or NULL</returns>
        private WPBPlayer GetWPBPlayer(IPlayer iPlayer)
        {
            if (iPlayer == null || WPBPlayerData == null || WPBPlayerData.Count == 0) return null;
            return WPBPlayerData.FirstOrDefault(bp => bp.SteamID == iPlayer.Id);
        }

        /// <summary>
        /// Update all WPBPlayers in WPBPlayers list if the BasePlayer is not reserved from sharing statistics
        /// </summary>
        private void UpdateWPBPlayers()
        {
            var activePlayers = BasePlayer.activePlayerList;
            if (activePlayers.Count > 0)
            {
                if (WPBPlayerData == null) WPBPlayerData = new List<WPBPlayer>();
                activePlayers.ToList().ForEach(p => {
                    if (WPBPlayerIsReserved(p)) return;
                    WPBUpdatePlayer(p);
                });
            }
        }

        private void ClearWPBPlayerStats()
        {
            if (WPBPlayerData != null && WPBPlayerData.Count > 0) WPBPlayerData.ForEach(wpbPlayer => { wpbPlayer.ClearStats(); });
        }

        private void ClearWPBPlayerLoot()
        {
            if (WPBPlayerData != null && WPBPlayerData.Count > 0) WPBPlayerData.ForEach(wpbPlayer => { wpbPlayer.ClearLoot(); });
        }

        /// <summary>
        /// Updates the WPBPlayer position or adding if player doesnt exist 
        /// </summary>
        /// <param name="basePlayer"></param>
        private void WPBUpdatePlayer(BasePlayer basePlayer)
        {
            WPBPlayer wpbPlayer = new WPBPlayer(basePlayer);
            if (WPBPlayerExists(wpbPlayer))
            {
                wpbPlayer = WPBPlayerData.Find(p => p.SteamID == wpbPlayer.SteamID);
                wpbPlayer.SetPosition(basePlayer.GetNetworkPosition());
                return;
            }
            else
            {
                WPBPlayerData.Add(wpbPlayer);
            }
        }

        /// <summary>
        /// Returns true if the WPBPlayers list contain the WPBPlayer. If not returns false.
        /// </summary>
        /// <param name="wpbPlayer">WPBPlayer object.</param>
        /// <returns>true or false.</returns>
        private bool WPBPlayerExists(WPBPlayer wpbPlayer)
        {
            return WPBPlayerData.Find(p => p.SteamID == wpbPlayer.SteamID) != null;
        }

        private WPBPlayer CreateWPBPlayer(IPlayer iPlayer)
        {
            if (iPlayer != null) return new WPBPlayer(iPlayer);
            return null;
        }

        private void InsertWPBPlayer(WPBPlayer wpbPlayer)
        {
            if (WPBPlayerData != null && wpbPlayer != null) WPBPlayerData.Add(wpbPlayer);
        }
        private void InsertWPBPlayer(IPlayer iPlayer)
        {
            if (WPBPlayerData != null && iPlayer != null) WPBPlayerData.Add(new WPBPlayer(iPlayer));
        }

        /// <summary>
        /// Removes the WPBPlayer from the WPBPlayers list if WPBPlayers list contains the WPBPlayer
        /// </summary>
        /// <param name="wpbPlayer"></param>
        private void RemoveWPBPlayer(WPBPlayer wpbPlayer)
        {
            if (wpbPlayer != null && WPBPlayerData.Contains(wpbPlayer)) WPBPlayerData.Remove(wpbPlayer);
        }
        private void RemoveWPBPlayer(BasePlayer basePlayer)
        {
            if(basePlayer != null)
            {
                WPBPlayer wpbPlayer = GetWPBPlayer(basePlayer);
                if (wpbPlayer != null) WPBPlayerData.Remove(wpbPlayer);
            }
        }
        #endregion

        #endregion

        #region Rust Hooks

        #region Localization
        protected override void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                {"Endpoint connection established", "Endpoint connection established"},
                {"Could not communicate with WordPress Rest API", "Couldn't communicate with WordPress Rest API using endpoint"},
                {"Could not authenticate with WPBridge for Rust", "Couldn't authenticate with WPBridge for Rust. Is the plugin installed and activated?"},
                {"TypeWIPHelp", "Type /wip.help to see a list of commands"},
                {"You are currently", "You are currently"},
                {"sharing your statistics", "sharing your statistics. You can always toggle this on/off using chatcommand /wip.reserve"},
                {"player looted", "Player looted"},
                {"which currently is not tracked", "which currently is not tracked."},
                {"Available commands", "Available commands"},
                {"Toggles share statistics.", "Toggles share statistics."},
                {"share statistics", "share statistics"},
                {"sharing statistics", "sharing statistics."},
                {"Check if you are sharing your statistics", "Check if you are sharing your statistics."},
                {"Your statistics are not shared", "Reserved. Your statistics are not shared."},
                {"Your statistics are shared", "Reservation removed. Your statistics are shared."},
                {"DEFAULT", "DEFAULT"},
                {"not", "not"},
            }, this);
        }
        #endregion

        #region Server Hooks
        void Init()
        {
            _instance = GetInstance();
            InitConfig((bool isConfigured, string error) =>
            {
                if (!isConfigured)
                {
                    PrintDebug($"[CONFIG] {error}");
                    timer.Once(5, () =>
                     {
                         Init();
                     });
                    return;
                }
                WordPressSiteIsUp((err,json) => {
                    if (err)
                    {
                        PrintDebug($"[INIT] {GetMsg("Could not communicate with WordPress Rest API")}: {_config.Wordpress_Site_URL}wp-json");
                        timer.Once(5, () =>
                        {
                            Init();
                        });
                        return;
                    }
                    var wpJson = JsonConvert.DeserializeObject<WordPressJson>(json);
                    if(!WordPressPluginInstalled(wpJson))
                    {
                        PrintDebug($"[WordPress] {GetMsg("Could not authenticate with WPBridge for Rust")}");
                        timer.Once(5, () =>
                        {
                            Init();
                        });
                        return;
                    }
                    WPBServerData = new WPBServer(_config.External_IP,ConVar.Server.port,ConVar.Server.level,ConVar.Server.identity,ConVar.Server.seed,ConVar.Server.worldsize,ConVar.Server.maxplayers,ConVar.Server.hostname,ConVar.Server.description);
                    _isConfiguredAndReady = true;
                    endPointUriSecret = $"{_config.Wordpress_Site_URL}index.php/wp-json/wpbridge/secret";
                    endPointUriSync = $"{_config.Wordpress_Site_URL}index.php/wp-json/wpbridge/player-stats";
                    PrintDebug(GetMsg("Endpoint connection established"));
                });
            });
        }
        void OnServerInitialized(bool initial)
        {
            if(!_isConfiguredAndReady)
            {

                timer.Once(2f, () =>
                {
                    OnServerInitialized(false);
                });
                return;
            }
            WPBRidgeInit();
        }

        #endregion

        #region Player Hooks
        #region Connect / Disconnect / Respawn
        void OnPlayerConnected(BasePlayer basePlayer)
        {
            if (basePlayer == null) return;
            if (basePlayer.HasPlayerFlag(BasePlayer.PlayerFlags.ReceivingSnapshot))
            {
                timer.Once(2f, () => OnPlayerConnected(basePlayer));
                return;
            }
            //Tell the player that stats are stored unless command is used
            string isReservedString;
            if (WPBPlayerIsReserved(basePlayer))
            {
                isReservedString = GetMsg("not") + " ";
                WPBPlayer wpbPlayer = GetWPBPlayer(basePlayer);
                if (wpbPlayer != null) RemoveWPBPlayer(basePlayer);
            }
            else
            {
                isReservedString = "";
            }
            basePlayer.ChatMessage($"[WIP] {GetMsg("TypeWIPHelp")}");
            basePlayer.ChatMessage($"[WIP] {GetMsg("You are currently")} {isReservedString}{GetMsg("sharing your statistics")}");
        }
        void OnUserConnected(IPlayer iPlayer)
        {
            if (iPlayer == null) return;
            if (WPBPlayerIsReserved(iPlayer)) return; // Player is reserved and statistics should not be shared
            WPBPlayer wpbPlayer = GetWPBPlayer(iPlayer);
            if (wpbPlayer == null)
            {
                wpbPlayer = CreateWPBPlayer(iPlayer);
                if(wpbPlayer != null) InsertWPBPlayer(wpbPlayer);
            }
            wpbPlayer.Stats.Joins++;
        }
        void OnPlayerDisconnected(BasePlayer basePlayer)
        {
            WPBPlayer wpbPlayer = GetWPBPlayer(basePlayer);
            if (wpbPlayer != null)
            {
                wpbPlayer.Stats.Leaves++;
                WPBPlayersLeftSteamIds.Add(wpbPlayer.SteamID);
            }
        }
        void OnPlayerRespawned(BasePlayer basePlayer)
        {
            WPBPlayer wpbPlayer = GetWPBPlayer(basePlayer);
            if (wpbPlayer != null) wpbPlayer.Stats.Respawns++;
        }
        #endregion

        object OnUserChat(IPlayer iPlayer)
        {
            WPBPlayer wpbPlayer = GetWPBPlayer(iPlayer);
            if (wpbPlayer != null) wpbPlayer.Stats.Chats++;
            return null;
        }
        void OnPlayerRecovered(BasePlayer basePlayer)
        {
            WPBPlayer wpbPlayer = GetWPBPlayer(basePlayer);
            if (wpbPlayer != null) wpbPlayer.Stats.Recoveries++;
        }
        object OnPlayerWound(BasePlayer basePlayer)
        {
            WPBPlayer wpbPlayer = GetWPBPlayer(basePlayer);
            if (wpbPlayer != null) wpbPlayer.Stats.Wounded++;
            return null;
        }

        #region Death, NPC Kills, Killed by NPC, Suicide
        object OnPlayerDeath(BasePlayer basePlayer, HitInfo hitInfo)
        {
            if (basePlayer == null) return null;
            BasePlayer attackingBasePlayer;
            if (basePlayer.IsNpc && hitInfo != null && hitInfo.Initiator != null)
            {
                attackingBasePlayer = hitInfo.Initiator as BasePlayer;
                if(attackingBasePlayer != null)
                {
                    WPBPlayer attackingWPBPlayer = GetWPBPlayer(attackingBasePlayer);
                    if(attackingWPBPlayer != null)
                    {
                        attackingWPBPlayer.Stats.NPCKills++;
                        return null;
                    }
                }
            }

            WPBPlayer deadPlayer = GetWPBPlayer(basePlayer);
            if (deadPlayer == null) return null;
            if (hitInfo != null && hitInfo.damageTypes != null && hitInfo.damageTypes.GetMajorityDamageType() == DamageType.Suicide)
            {
                deadPlayer.Stats.Suicides++;
                return null;
            } else
            {
                deadPlayer.Stats.Deaths++;
            }

            if(hitInfo != null && hitInfo.Initiator != null)
            {
                attackingBasePlayer = hitInfo.Initiator as BasePlayer;
                if (attackingBasePlayer != null)
                {
                    if(attackingBasePlayer.IsNpc)
                    {
                        deadPlayer.Stats.KilledByNPC++;
                        return null;
                    }
                    WPBPlayer attackingWPBPlayer = GetWPBPlayer(attackingBasePlayer);
                    if (attackingWPBPlayer == null) return null;
                    attackingWPBPlayer.Stats.Kills++;
                }
            }
            return null;
        }
        #endregion

        object OnPlayerVoice(BasePlayer basePlayer, byte[] data)
        {
            WPBPlayer wpbPlayer = GetWPBPlayer(basePlayer);
            if (wpbPlayer != null) wpbPlayer.Stats.VoiceBytes++;
            return null;
        }
        void OnMeleeAttack(BasePlayer basePlayer, HitInfo info)
        {
            if (basePlayer != null && info != null)
            {
                if (info.HitEntity != null && info.HitEntity.ToPlayer() != null)
                {
                    WPBPlayer wpbPlayer = GetWPBPlayer(basePlayer);
                    if (wpbPlayer != null) wpbPlayer.Stats.MeleeAttacks++;
                }
            }
        }
        void OnMapMarkerAdded(BasePlayer basePlayer)
        {
            WPBPlayer wpbPlayer = GetWPBPlayer(basePlayer);
            if (wpbPlayer != null) wpbPlayer.Stats.MapMarkers++;
        }
        object OnPlayerViolation(BasePlayer basePlayer, AntiHackType type, float amount)
        {
            WPBPlayer wpbPlayer = GetWPBPlayer(basePlayer);
            if (wpbPlayer != null) wpbPlayer.Stats.AntiHackViolations++;
            return null;
        }
        void OnNpcConversationEnded(NPCTalking npcTalking, BasePlayer basePlayer)
        {
            WPBPlayer wpbPlayer = GetWPBPlayer(basePlayer);
            if (wpbPlayer != null) wpbPlayer.Stats.NPCSpeaks++;
        }
        private void OnLootEntityEnd(BasePlayer basePlayer, BaseEntity baseEntity)
        {
            if (basePlayer == null || !baseEntity.IsValid()) return;

            WPBPlayer wpbPlayer = GetWPBPlayer(basePlayer);
            if (wpbPlayer == null) return;

            var lootContainerName = baseEntity.GetType().Name.ToLower();
            if (lootContainerName == null || lootContainerName == "") return;
            switch (lootContainerName)
            {
                case "lootcontainer":
                    wpbPlayer.Stats.LootContainer++;
                    break;
                case "freeablelootcontainer":
                    wpbPlayer.Stats.LootContainerUnderWater++;
                    break;
                case "lockedbyentcrate":
                    wpbPlayer.Stats.LootBradHeli++;
                    break;
                case "hackablelockedcrate":
                    wpbPlayer.Stats.LootHackable++;
                    break;
                default:
                    PrintDebug($"[OnLootEntity] {GetMsg("player looted")} \"{lootContainerName}\" {GetMsg("which currently is not tracked")}");
                    break;
            }
        }
        
        #endregion

        #region Entity Hooks
        object OnEntityTakeDamage(BaseCombatEntity baseCombatEntity, HitInfo hitInfo)
        {
            if (hitInfo?.InitiatorPlayer == null || !hitInfo.isHeadshot) return null;
            WPBPlayer wpbPlayer = GetWPBPlayer(hitInfo.InitiatorPlayer);
            if (wpbPlayer != null) wpbPlayer.Stats.Headshots++;
            return null;
        }
        #endregion

        #region Item Hooks
        object OnItemPickup(Item item, BasePlayer basePlayer)
        {
            if (item == null || item.info == null || item.info.name == null || basePlayer == null) return null;
            if (item.info.name.EndsWith(".item")) WPBPlayerOnLoot(item, basePlayer);
            return null;
        }
        void OnItemCraftFinished(ItemCraftTask itemCraftTask, Item item)
        {
            WPBPlayer wpbPlayer = GetWPBPlayer(itemCraftTask.owner);
            if (wpbPlayer != null) wpbPlayer.Stats.CraftedItems++;
        }
        object OnItemRepair(BasePlayer basePlayer, Item item)
        {
            if (item == null) return null;
            WPBPlayer wpbPlayer = GetWPBPlayer(basePlayer);
            if (wpbPlayer != null) wpbPlayer.Stats.RepairedItems++;
            return null;
        }
        void OnItemResearch(ResearchTable researchTable, Item item, BasePlayer basePlayer)
        {
            WPBPlayer wpbPlayer = GetWPBPlayer(basePlayer);
            if (wpbPlayer != null) wpbPlayer.Stats.ResearchedItems++;
        }
        #endregion

        #region Weapon Hooks
        void OnExplosiveThrown(BasePlayer basePlayer)
        {
            WPBPlayer wpbPlayer = GetWPBPlayer(basePlayer);
            if (wpbPlayer != null) wpbPlayer.Stats.ExplosivesThrown++;
        }
        object OnReloadWeapon(BasePlayer basePlayer)
        {
            WPBPlayer wpbPlayer = GetWPBPlayer(basePlayer);
            if (wpbPlayer != null) wpbPlayer.Stats.Reloads++;
            return null;
        }
        void OnWeaponFired(BaseProjectile baseProjectile, BasePlayer basePlayer)
        {
            WPBPlayer wpbPlayer = GetWPBPlayer(basePlayer);
            if (wpbPlayer != null) wpbPlayer.Stats.Shots++;
        }
        void OnRocketLaunched(BasePlayer basePlayer)
        {
            WPBPlayer wpbPlayer = GetWPBPlayer(basePlayer);
            if (wpbPlayer != null) wpbPlayer.Stats.RocketsLaunched++;
        }
        #endregion

        #region Structure Hooks
        object OnHammerHit(BasePlayer basePlayer, HitInfo info)
        {
            if (info == null) return null;
            WPBPlayer wpbPlayer = GetWPBPlayer(basePlayer);
            if (wpbPlayer != null) wpbPlayer.Stats.HammerHits++;
            return null;
        }
        #endregion

        #region Resource Hooks
        object OnDispenserGather(ResourceDispenser resourceDispenser, BaseEntity baseEntity, Item item)
        {
            if (baseEntity.ToPlayer() == null) return null;
            WPBPlayer wpbPlayer = GetWPBPlayer(baseEntity.ToPlayer());
            if (wpbPlayer == null) return null;
            if (item == null || item.info == null || item.info.name == null) return null;
            if (item.info.name.EndsWith(".item")) WPBPlayerOnLoot(item, baseEntity.ToPlayer());
            return null;
        }
        object OnDispenserBonus(ResourceDispenser resourceDispenser, BaseEntity baseEntity, Item item)
        {
            if (!baseEntity.ToPlayer()) return null;
            WPBPlayer wpbPlayer = GetWPBPlayer(baseEntity.ToPlayer());
            if (wpbPlayer == null) return null;
            if (item == null || item.info == null || item.info.name == null) return null;
            if (item.info.name.EndsWith(".item")) WPBPlayerOnLoot(item, baseEntity.ToPlayer());
            return null;
        }
        object OnCollectiblePickup(Item item, BasePlayer basePlayer)
        {
            if (item == null || item.info == null || basePlayer == null) return null;
            WPBPlayer wpbPlayer = GetWPBPlayer(basePlayer);
            if (wpbPlayer == null) return null;
            if (item.info.name.EndsWith(".item")) WPBPlayerOnLoot(item, basePlayer);
            return null;
        }
        object OnGrowableGather(GrowableEntity growableEntity, Item item, BasePlayer basePlayer)
        {
            WPBPlayer wpbPlayer = GetWPBPlayer(basePlayer);
            if (wpbPlayer != null) wpbPlayer.Stats.GrowablesGathered++;
            return null;
        }
        #endregion
        #endregion

        #region Permission Group
        /// <summary>
        /// Returns true if the group already exists or if successfully created. If creating group fails returns false.
        /// </summary>
        /// <returns>true or false</returns>
        private bool TryCreateReservedGroup()
        {
            if (permission.GroupExists(_reservedPlayerGroupName)) return true;
            return permission.CreateGroup(_reservedPlayerGroupName, "Hide my stats", 0);
        }

        /// <summary>
        /// Returns true if the reserved player group contains BasePlayer.UserIDString, if not returns false.
        /// </summary>
        /// <param name="basePlayer">BasePlayer object.</param>
        /// <returns>true or false.</returns>
        private bool WPBPlayerIsReserved(BasePlayer basePlayer)
        {
            return permission.UserHasGroup(basePlayer.UserIDString, _reservedPlayerGroupName);
        }

        /// <summary>
        /// Returns true if the reserved player group contains IPlayer.UserIDString, if not returns false.
        /// </summary>
        /// <param name="iPlayer">IPlayer object.</param>
        /// <returns>true or false.</returns>
        private bool WPBPlayerIsReserved(IPlayer iPlayer)
        {
            return permission.UserHasGroup(iPlayer.Id, _reservedPlayerGroupName);
        }
        #endregion

        #region Classes

        #region Configuration
        private class Configuration
        {
            [JsonProperty(PropertyName = "External_IP")]
            public string External_IP = "PASTE_EXTERNAL_IP_HERE";
            [JsonProperty(PropertyName = "Wordpress_Site_URL")]
            public string Wordpress_Site_URL = "PASTE_WORDPRESS_SITE_URL_HERE";
            [JsonProperty(PropertyName = "Wordpress_Secret")]
            public string Wordpress_Secret = "PASTE_WPBRIDGE_UNIQUE_SECRET_HERE";
            [JsonProperty(PropertyName = "Player_Data_Update_Interval")]
            public int UpdateInterval = 30;
            [JsonProperty(PropertyName = "Print_Debug_To_Console")]
            public bool Debug = true;
        }
        #endregion

        #region Server
        internal class WPBServer
        {
            public WPBServer(string ip, int port, string level, string identity, int seed, int worldsize, int maxPlayers, string hostName, string description)
            {
                IP = ip;
                Port = port;
                Level = level;
                Identity = identity;
                Seed = seed;
                WorldSize = worldsize;
                MaxPlayers = maxPlayers;
                HostName = hostName;
                Description = description;
                PlayerCount = BasePlayer.activePlayerList.Count;
            }

            public void UpdatePlayerCount()
            {
                PlayerCount = BasePlayer.activePlayerList.Count;
            }

            public string IP { get; set; }
            public int Port { get; set; }
            public string Level { get; set; }
            public string Identity { get; set; }
            public int Seed { get; set; }
            public int WorldSize { get; set; }
            public int MaxPlayers { get; set; }
            public string HostName { get; set; }
            public string Description { get; set; }
            public int PlayerCount { get; set; }
        }
        #endregion

        #region Loot
        internal class LootItem
        {
            public string Name;
            public int Amount;

            public LootItem(string name, int amount)
            {
                Name = name;
                Amount = amount;
            }
        }
        #endregion

        #region Player
        internal class WPBPlayer
        {
            private string _steamID;
            private string _displayName;
            private Vector3 _position;
            private WPBPlayerStats _stats;
            private List<LootItem> _lootedItems;

            public string SteamID { get { return this._steamID; } }
            public string DisplayName { get { return this._displayName; } }
            public Vector3 Position { get { return this._position; } }
            public WPBPlayerStats Stats { get { return this._stats; } set { _stats = value; } }
            public List<LootItem> LootedItems { get { return _lootedItems; } set { _lootedItems = value; } }

            public WPBPlayer(string steamID, string displayName)
            {
                this._steamID = steamID;
                this._displayName = displayName;
                this._position = new Vector3();
                this._stats = new WPBPlayerStats();
                this._lootedItems = new List<LootItem>();
            }
            public WPBPlayer(IPlayer iPlayer)
            {
                this._steamID = iPlayer.Id;
                this._displayName = iPlayer.Name;
                this._position = Vector3.zero;
                this._stats = new WPBPlayerStats();
                this._lootedItems = new List<LootItem>();
            }
            public WPBPlayer(BasePlayer p)
            {
                this._steamID = p.UserIDString;
                this._displayName = p.displayName;
                this._position = p.GetNetworkPosition();
                this._stats = new WPBPlayerStats();
                this._lootedItems = new List<LootItem>();
            }

            internal void SetPosition(int x, int y, int z)
            {
                this._position = new Vector3(x, y, z);
            }   
            internal void SetPosition(Vector3 vector3)
            {
                this._position = vector3;
            }

            internal void ClearStats()
            {
                this.Stats.Clear();
            }
            internal void ClearLoot()
            {
                this.LootedItems.Clear();
            }
        }
        internal class WPBPlayerStats
        {
            public int Joins { get; internal set; }
            public int Leaves { get; internal set; }
            public int Deaths { get; internal set; }
            public int Suicides { get; internal set; }
            public int Kills { get; internal set; }
            public int Headshots { get; internal set; }
            public int Wounded { get; internal set; }
            public int Recoveries { get; internal set; }
            public int CraftedItems { get; internal set; }
            public int RepairedItems { get; internal set; }
            public int ExplosivesThrown { get; internal set; }
            public int VoiceBytes { get; internal set; }
            public int HammerHits { get; internal set; }
            public int Reloads { get; internal set; }
            public int Shots { get; internal set; }
            public int CollectiblesPickedUp { get; internal set; }
            public int GrowablesGathered { get; internal set; }
            public int Chats { get; internal set; }
            public int NPCKills { get; internal set; }
            public int MeleeAttacks { get; internal set; }
            public int MapMarkers { get; internal set; }
            public int Respawns { get; internal set; }
            public int RocketsLaunched { get; internal set; }
            public int AntiHackViolations { get; internal set; }
            public int NPCSpeaks { get; internal set; }
            public int ResearchedItems { get; internal set; }
            public int KilledByNPC { get; internal set; }
            public int LootContainer { get; internal set; }
            public int LootBradHeli { get; internal set; }
            public int LootHackable { get; internal set; }
            public int LootContainerUnderWater { get; internal set; }

            public void Clear()
            {
                Joins = 0;
                Leaves = 0;
                Deaths = 0;
                Suicides = 0;
                Kills = 0;
                Headshots = 0;
                Wounded = 0;
                Recoveries = 0;
                CraftedItems = 0;
                RepairedItems = 0;
                ExplosivesThrown = 0;
                VoiceBytes = 0;
                HammerHits = 0;
                Reloads = 0;
                Shots = 0;
                CollectiblesPickedUp = 0;
                GrowablesGathered = 0;
                Chats = 0;
                NPCKills = 0;
                MeleeAttacks = 0;
                MapMarkers = 0;
                Respawns = 0;
                RocketsLaunched = 0;
                AntiHackViolations = 0;
                NPCSpeaks = 0;
                ResearchedItems = 0;
                KilledByNPC = 0;
                LootContainer = 0;
                LootBradHeli = 0;
                LootHackable = 0;
                LootContainerUnderWater = 0;
            }
        }
        #endregion

        #region Web Requests
        public class WebRequester
        {
            static Dictionary<string, string> _headers = new Dictionary<string, string>()
            {
                { "Content-Type", "application/json" }
            };
            public void Post(string url, object data, Action<int,string> response)
            {
                string serializedRequest;
                if (data == null)
                {
                    serializedRequest = "";
                } else
                {
                    serializedRequest = JsonConvert.SerializeObject(data);
                }
                _instance.webrequest.Enqueue(url,serializedRequest, (responseCode, responseString) => {
                    response(responseCode, responseString);
                    return;
                }, _instance, Core.Libraries.RequestMethod.POST,_headers);
            }

            internal void Get(string url, object data, Action<int, string> response)
            {
                string serializedRequest;
                if (data == null)
                {
                    serializedRequest = "";
                }
                else
                {
                    serializedRequest = JsonConvert.SerializeObject(data);
                }
                _instance.webrequest.Enqueue(url, serializedRequest, (responseCode, responseString) => {
                    response(responseCode, responseString);
                    return;
                }, _instance, Core.Libraries.RequestMethod.GET, _headers, 10000f);
            }
        }
        public class WordPressBridgeResponse
        {
            public string code;
            public string message;
            public object data;
        }
        public class WordPressBridgeRequest
        {
            public WordPressBridgeRequest(string secret)
            {
                Secret = secret;
                PlayerData = new List<WPBPlayer>();
            }
            public void SetPlayerData(List<WPBPlayer> playerData)
            {
                PlayerData = playerData;
            }
            public void SetServerData(WPBServer serverData)
            {
                ServerData = serverData;
            }

            string _secret;
            List<WPBPlayer> _playerData;
            WPBServer _serverData;

            [JsonProperty(PropertyName = "Secret")]
            string Secret { get { return _secret; } set { _secret = value; } }
            [JsonProperty(PropertyName = "PlayerData")]
            List<WPBPlayer> PlayerData { get { return _playerData; } set { _playerData = value; } }
            [JsonProperty(PropertyName = "ServerData")]
            WPBServer ServerData { get { return _serverData; } set { _serverData = value; } }

        }
        #endregion

        #region WordPress Specific
        class WordPressJson
        {
            public string name { get; set; }
            public string description { get; set; }
            public string url { get; set; }
            public string home { get; set; }
            public WordPressJsonRoutes routes { get; set; }
        }
        class WordPressJsonRoutes
        {
            [JsonProperty("/wpbridge")]
            public WordPressJsonRouteWPBridge Wpbridge { get; set; }
        }
        class WordPressJsonRouteWPBridge
        {
            public List<string> methods { get; set; }
        }
        #endregion

        #endregion

        #region Commands

        #region General commands

        [ChatCommand("wip.help")]
        void HelpCommand(BasePlayer basePlayer, string command, string[] args)
        {
            if (basePlayer == null) return;
            basePlayer.ChatMessage($"[WIP] " +
                $"{GetMsg("Available commands")}:\n\n" +
                $"/wip.reserve\n{GetMsg("Toggles share statistics")}\n{GetMsg("DEFAULT")}: {GetMsg("share statistics")}.\n\n" +
                $"/wip.isreserved\n{GetMsg("Check if you are sharing your statistics")}");
        }

        #endregion

        #region Debug commands

        [ConsoleCommand("wip.debug")]
        void ToggleDebug(ConsoleSystem.Arg arg)
        {
            BasePlayer basePlayer = arg.Player();
            if(basePlayer != null && basePlayer.IsAdmin)
            {
                _config.Debug = !_config.Debug;
                SaveConfig();
            } else
            {
                _config.Debug = !_config.Debug;
                SaveConfig();
            }
        }

        #endregion

        #region Reservation commands

        [ChatCommand("wip.isreserved")]
        void IsReserved(BasePlayer basePlayer, string command, string[] args)
        {
            string isReservedString = WPBPlayerIsReserved(basePlayer) ? GetMsg("not") + " " : "";
            basePlayer.ChatMessage($"[WIP] {GetMsg("You are currently")} {isReservedString}{GetMsg("sharing statistics")}.");
        }

        [ChatCommand("wip.reserve")]
        void ReserveCommand(BasePlayer basePlayer, string command, string[] args)
        {
            if (basePlayer == null) return;
            if (!WPBPlayerIsReserved(basePlayer))
            {
                var existingPlayer = GetWPBPlayer(basePlayer);
                if (existingPlayer != null) RemoveWPBPlayer(basePlayer);
                permission.AddUserGroup(basePlayer.UserIDString, _reservedPlayerGroupName);
                basePlayer.ChatMessage($"[WIP] {GetMsg("Your statistics are not shared")}");
            }
            else
            {
                var existingPlayer = GetWPBPlayer(basePlayer);
                permission.RemoveUserGroup(basePlayer.UserIDString, _reservedPlayerGroupName);
                if (existingPlayer == null) InsertWPBPlayer(new WPBPlayer(basePlayer));
                basePlayer.ChatMessage($"[WIP] {GetMsg("Your statistics are shared")}");
            }
        }

        #endregion

        #endregion

        #region Debug
        private void PrintDebug(string stringToPrint)
        {
            if (_config.Debug) PrintWarning($"[DEBUG] {stringToPrint}");
        }
        private void PrintDebug(int intToPrint)
        {
            if (_config.Debug) PrintWarning($"[DEBUG] {intToPrint.ToString()}");
        }
        private void PrintDebug(bool boolToPrint)
        {
            if (_config.Debug) PrintWarning($"[DEBUG] {boolToPrint.ToString()}");
        }
        private void PrintDebug(Type typeToPrint)
        {
            if (_config.Debug) PrintWarning($"[DEBUG] {typeToPrint.ToString()}");
        }
        #endregion

        #region Helper Methods
        private string GetMsg(string key) => lang.GetMessage(key, this);
        public static bool ValidHttpURL(string s)
        {
            Uri uriResult;
            return Uri.TryCreate(s, UriKind.Absolute, out uriResult)
            && (uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps);
        }
        public bool ValidIPv4(string ipString)
        {
            if (String.IsNullOrWhiteSpace(ipString))
            {
                return false;
            }

            string[] splitValues = ipString.Split('.');
            if (splitValues.Length != 4)
            {
                return false;
            }

            byte tempForParsing;

            return splitValues.All(r => byte.TryParse(r, out tempForParsing));
        }
        #endregion
    }
}


// --- End of file: WPBridge.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/warcopter ---
// --- Original File Path: W/WarCopter/WarCopter.cs ---

using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using ProtoBuf;
using UnityEngine;
using WebSocketSharp;
using Physics = UnityEngine.Physics;
using Time = UnityEngine.Time;

namespace Oxide.Plugins
{
    [Info("War Copter", "Ryz0r", "1.5.1")]
    [Description("Allows a user with permission to spawn a Minicopter that has a viewable CCTV, or a turret attached.")]
    public class WarCopter : RustPlugin
    {
        // CREDITS
        // Pho3niX90 for help with Search Light Method
        // END CREDITS
        
        //Changed Switch Location
        ///warcopter startup
        //Prevented search light from being moved
        //Code cleanup
        
        #region Config/Localization

        private const string AutoTurretPrefab = "assets/prefabs/npc/autoturret/autoturret_deployed.prefab";
        private const string CctvPrefab = "assets/prefabs/deployable/cctvcamera/cctv.static.prefab";
        private const string BoxPrefab = "assets/prefabs/deployable/woodenbox/woodbox_deployed.prefab";

        private const string LightPrefab =
            "assets/prefabs/deployable/playerioents/lights/flasherlight/electric.flasherlight.deployed.prefab";

        private const string MinicopterPrefab = "assets/content/vehicles/minicopter/minicopter.entity.prefab";
        private const string SearchLightPrefab = "assets/prefabs/deployable/search light/searchlight.deployed.prefab";
        private const string SwitchPrefab = "assets/prefabs/deployable/playerioents/simpleswitch/switch.prefab";
        private const string SpherePrefab = "assets/prefabs/visualization/sphere.prefab";

        private static readonly int GlobalLayerMask = LayerMask.GetMask("Construction", "Default", "Deployed",
            "Resource", "Terrain", "Water", "World");

        private const string DronePerm = "warcopter.drone";
        private const string FighterPerm = "warcopter.fighter";
        private const string SpawnPerm = "warcopter.spawn";
        private const string CooldownPerm = "warcopter.cooldown";

        private List<ulong> _entityList = new List<ulong>();
        private Dictionary<string, float> _cooldownList = new Dictionary<string, float>();
        private Dictionary<ulong, string> _camList = new Dictionary<ulong, string>();

        protected override void SaveConfig() => Config.WriteObject(_config);
        private Configuration _config;

        private class Configuration
        {
            [JsonProperty(PropertyName = "Add Back Light")]
            public bool AddBackLight = true;

            [JsonProperty(PropertyName = "Add Search Light")]
            public bool AddSearchLight = true;
            
            [JsonProperty(PropertyName = "Add Storage Box")]
            public bool AddStorageBox = true;

            [JsonProperty(PropertyName = "Cool Down Time")]
            public float CoolDownTime = 30f;
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            try
            {
                _config = Config.ReadObject<Configuration>();
                if (_config == null) throw new Exception();
                SaveConfig();
            }
            catch
            {
                PrintError("Your configuration file contains an error. Using default configuration values.");
                LoadDefaultConfig();
            }
        }

        protected override void LoadDefaultConfig()
        {
            PrintWarning("A new configuration file is being generated.");
            _config = new Configuration();
        }

        private void Init()
        {
            permission.RegisterPermission(SpawnPerm, this);
            permission.RegisterPermission(FighterPerm, this);
            permission.RegisterPermission(DronePerm, this);
            permission.RegisterPermission(CooldownPerm, this);

            _cooldownList.Clear();
            _entityList.Clear();
        }

        protected override void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["BuildingBlockMsg"] = "You are building blocked and may not spawn a Warcopter here!",
                ["NoPerms"] = "You do not have permission to use this command.",
                ["Wrong1"] = "You are using the command wrong! Try: /warcopter {fighter/drone}!",
                ["Wrong2"] = "You are using the command wrong! Try: /warcopter {drone} {camera name}!",
                ["InvalidOption"] = "This is not a valid Warcopter option. Try: /warcopter {fighter/drone}",
                ["CooldownMsg"] = "Sorry, you are on a cooldown for {0} seconds and may not spawn another!",
                ["CooldownOver"] = "Your Warcopter cool down is over. You may spawn another one now.",
                ["Exists"] = "This Warcopter camera identifier exists already. Try again!",
                ["NotYours"] = "This Warcopter does not belong to you. You can't destroy this.",
                ["NoTarget"] = "A valid target could not be located. Try again.",
            }, this);
        }

        #endregion
        #region Commands

        [ChatCommand("warcopter")]
        private void WarcopterCommand(BasePlayer player, string command, string[] args)
        {
            if (player.IsBuildingBlocked())
            {
                player.ChatMessage(lang.GetMessage("BuildingBlockMsg", this, player.UserIDString));
                return;
            }

            if (permission.UserHasPermission(player.UserIDString, CooldownPerm))
            {
                if (_cooldownList.ContainsKey(player.UserIDString))
                {
                    var diff = (_cooldownList[player.UserIDString] + _config.CoolDownTime) - UnityEngine.Time.time;
                    var fDiff = Mathf.Round(diff);

                    player.ChatMessage(string.Format(lang.GetMessage(("CooldownMsg"), this, player.UserIDString), fDiff));
                    return;
                }
            }

            if (!permission.UserHasPermission(player.UserIDString, SpawnPerm))
            {
                player.ChatMessage(lang.GetMessage("NoPerms", this, player.UserIDString));
                return;
            }

            if (args.Length < 1)
            {
                player.ChatMessage(lang.GetMessage("Wrong1", this, player.UserIDString));
                return;
            }

            switch (args[0].ToLower())
            {
                case "drone":
                    if (args.Length < 2)
                    {
                        player.ChatMessage(lang.GetMessage("Wrong2", this, player.UserIDString));
                        return;
                    }

                    if (!permission.UserHasPermission(player.UserIDString, DronePerm))
                    {
                        player.ChatMessage(lang.GetMessage("NoPerms", this, player.UserIDString));
                        return;
                    }

                    SpawnDrone(player, args[1]);
                    StartCooldown(player);
                    break;

                case "fighter":

                    if (!permission.UserHasPermission(player.UserIDString, FighterPerm))
                    {
                        player.ChatMessage(lang.GetMessage("NoPerms", this, player.UserIDString));
                        return;
                    }
                    
                    SpawnFighter(player);
                    StartCooldown(player);
                    break;
                
                case "startup":

                    var mountedMini = player.GetMountedVehicle();
                    var mountedTurret = mountedMini.GetComponentInChildren<AutoTurret>();
                    var mountedSwitch = mountedTurret.GetComponentInChildren<ElectricSwitch>();

                    if (mountedTurret.IsOn())
                    {
                        ChangeTurretState(mountedTurret, 0);
                        mountedSwitch.SetSwitch(false);
                    }
                    else
                    {
                        ChangeTurretState(mountedTurret, 1);
                        mountedSwitch.SetSwitch(true);
                    }

                    break;
                
                case "destroy":
                    
                    IdentifyAndDestroy(player);
                    break;

                default:
                    player.ChatMessage(lang.GetMessage("InvalidOption", this, player.UserIDString));
                    break;
            }
        }

        #endregion
        #region Hooks/Methods

        private void StartCooldown(BasePlayer player)
        {
            if (!permission.UserHasPermission(player.UserIDString, CooldownPerm)) return;

            _cooldownList.Add(player.UserIDString, Time.time);

            timer.Once(_config.CoolDownTime, () =>
            {
                _cooldownList.Remove(player.UserIDString);
                Player.Message(player, lang.GetMessage("CooldownOver", this, player.UserIDString));
            });
        }

        private void OnEntityKill(BaseNetworkable entity)
        {
            if (!_entityList.Contains(entity.net.ID.Value)) return;
            
            _entityList.Remove(entity.net.ID.Value);
            _camList.Remove(entity.net.ID.Value);

            var ent = BaseNetworkable.serverEntities.Find(entity.net.ID) as StorageContainer;
            if (ent == null) return;
            ent.DropItems();
        }

        private void SpawnDrone(BasePlayer player, string dName)
        {
            RaycastHit hit;
            if (!Physics.Raycast(player.eyes.HeadRay(), out hit, Mathf.Infinity, GlobalLayerMask)) return;
            
            if (_camList.ContainsValue(dName))
            {
                player.ChatMessage(lang.GetMessage("Exists", this, player.UserIDString));
                return;
            }

            var position = hit.point + Vector3.up * 2f;
            var miniEntity = (BaseVehicle) GameManager.server.CreateEntity(MinicopterPrefab, position);
            if (miniEntity == null) return;
            miniEntity.OwnerID = player.userID;
            miniEntity.Spawn();

            var camEntity = GameManager.server.CreateEntity(CctvPrefab, miniEntity.transform.position) as PoweredRemoteControlEntity;
            if (camEntity == null) return;
            camEntity.rcIdentifier = dName;
            camEntity.SetParent(miniEntity);
            camEntity.transform.localPosition = new Vector3(0f, 0.5f, 2f);
            RemoveColliderProtection(camEntity);
            camEntity.Spawn();
            _entityList.Add(camEntity.net.ID.Value);
            _camList.Add(camEntity.net.ID.Value, dName);

            if (_config.AddSearchLight) AddSearchLight(miniEntity);
            if (_config.AddBackLight) AddBackLight(miniEntity);
            if (_config.AddStorageBox) AddBackBox(miniEntity);
        }

        private void SpawnFighter(BasePlayer player)
        {
            RaycastHit hit;
            if (!Physics.Raycast(player.eyes.HeadRay(), out hit, Mathf.Infinity, GlobalLayerMask)) return;
            
            var position = hit.point + Vector3.up * 2f;
            var miniEntity = (BaseVehicle) GameManager.server.CreateEntity(MinicopterPrefab, position);
            if (miniEntity == null) return;
            miniEntity.OwnerID = player.userID;
            miniEntity.Spawn();

            AddTurretAndSwitch(miniEntity, player);
            if (_config.AddBackLight) AddBackLight(miniEntity);
            if (_config.AddStorageBox) AddBackBox(miniEntity);
        }

        private object OnEntityGroundMissing(BaseNetworkable entity)
        {
            if (_entityList.Contains(entity.net.ID.Value)) return false;
            return null;
        }

        private void AddSearchLight(BaseVehicle mini)
        {
            SphereEntity mySphere = (SphereEntity) GameManager.server.CreateEntity(SpherePrefab, mini.transform.position, new Quaternion(0, 0, 0, 0), true);
            RemoveColliderProtection(mySphere);
            mySphere.Spawn();
            mySphere.SetParent(mini);
            mySphere.transform.localPosition = new Vector3(0, -100, 0);

            SearchLight searchLight = GameManager.server.CreateEntity(SearchLightPrefab, mySphere.transform.position) as SearchLight;
            if (searchLight == null) return;

            RemoveColliderProtection(searchLight);
            searchLight.Spawn();
            searchLight.GetComponent<StorageContainer>().isLootable = false;
            searchLight.SetFlag(BaseEntity.Flags.On, true);
            searchLight.SetParent(mySphere);
            
            searchLight.transform.localPosition = new Vector3(0, 0, 0);
            searchLight.transform.localRotation = Quaternion.Euler(new Vector3(20, 0, 180));
            searchLight.transform.localRotation = Quaternion.Euler(new Vector3(20, 0, 0));
            searchLight.transform.localRotation = Quaternion.Euler(new Vector3(20, 0, 180));
            
            searchLight._maxHealth = 99999999f;
            searchLight._health = 99999999f;
            searchLight.pickup.enabled = false;
            searchLight.SendNetworkUpdateImmediate();
            mySphere.transform.localScale += new Vector3(0.9f, 0, 0);
            mySphere.LerpRadiusTo(0.1f, 10f);
            timer.Once(3f, () => { mySphere.transform.localPosition = new Vector3(0, 0.24f, 2.35f); });

            _entityList.Add(searchLight.net.ID.Value);

            mySphere.SendNetworkUpdateImmediate();
        }

        private void AddBackLight(BaseVehicle mini)
        {
            var backLights = GameManager.server.CreateEntity(LightPrefab, mini.transform.position) as FlasherLight;
            if (backLights == null) return;

            backLights.Spawn();
            backLights.SetFlag(BaseEntity.Flags.On, true);
            backLights.SetParent(mini);
            backLights.transform.localPosition = new Vector3(0, 1.2f, -2.0f);
            backLights.transform.localRotation = Quaternion.Euler(new Vector3(33, 180, 0));
            backLights.UpdateHasPower(10, 1);

            backLights.SendNetworkUpdateImmediate();

            _entityList.Add(backLights.net.ID.Value);
        }

        private void AddBackBox(BaseVehicle mini)
        {
            var backBox = GameManager.server.CreateEntity(BoxPrefab, mini.transform.position) as StorageContainer;
            if (backBox == null) return;
            
            backBox.Spawn();
            backBox.transform.localPosition = new Vector3(0f, 0.8f, -1.1f);
            backBox.SetParent(mini);
            backBox.DropItems();
            backBox.SendNetworkUpdateImmediate();
            
            _entityList.Add(backBox.net.ID.Value);

        }

        private void AddTurretAndSwitch(BaseVehicle mini, BasePlayer player)
        {
            var miniTurret = GameManager.server.CreateEntity(AutoTurretPrefab, mini.transform.position) as AutoTurret;
            if (miniTurret == null) return;
                
            miniTurret.SetFlag(BaseEntity.Flags.Reserved8, true);
            miniTurret.SetParent(mini);
            miniTurret.allowedContents = ItemContainer.ContentsType.Generic;
            miniTurret.pickup.enabled = false;
            miniTurret.transform.localPosition = new Vector3(0f, 0.2f, 2.5f);
            RemoveColliderProtection(miniTurret);
            
            var playerId = new PlayerNameID {userid = player.userID, username = player.displayName};
            miniTurret.authorizedPlayers.Add(playerId);
                
            miniTurret.Spawn();
            _entityList.Add(miniTurret.net.ID.Value);
            
            var backTurretSwitch = GameManager.server.CreateEntity(SwitchPrefab, miniTurret.transform.localPosition)?.GetComponent<ElectricSwitch>();
            if (backTurretSwitch == null) return;
            
            backTurretSwitch.transform.localPosition = new Vector3(0f, -0.60f, -0.3f);
            backTurretSwitch.transform.localRotation = Quaternion.Euler(new Vector3(0, 180, 0));
            backTurretSwitch.pickup.enabled = false;
            backTurretSwitch._limitedNetworking = false;
            backTurretSwitch.SetParent(miniTurret);
            RemoveColliderProtection(backTurretSwitch);
                
            backTurretSwitch.Spawn();
            _entityList.Add(backTurretSwitch.net.ID.Value);
        }

        private object OnSwitchToggle(ElectricSwitch s, BasePlayer player)
        {
            var parent = s.GetParentEntity();
            if (parent == null || !parent.PrefabName.Equals(AutoTurretPrefab)) return null;
            var turret = parent as AutoTurret;
            if (turret == null) return null;

            ChangeTurretState(turret, !s.IsOn() ? 1 : 0);
            return null;
        }

        private static void ChangeTurretState(AutoTurret turret, int turretState)
        {
            switch (turretState)
            {
                case 0:
                    turret.SetFlag(BaseEntity.Flags.Reserved8, false);
                    turret.InitiateShutdown();
                    break;
                
                case 1:
                    turret.SetFlag(BaseEntity.Flags.Reserved8, true);
                    turret.InitiateStartup();
                    break;
            }
        }
        
        private static void RemoveColliderProtection(BaseEntity colliderEntity) {
            
            foreach (var meshCollider in colliderEntity.GetComponentsInChildren<MeshCollider>()) {
                UnityEngine.Object.DestroyImmediate(meshCollider);
            }
            
            UnityEngine.Object.DestroyImmediate(colliderEntity.GetComponent<GroundWatch>());
        }

        private void IdentifyAndDestroy(BasePlayer player)
        {
            RaycastHit raycastHit;
            if(Physics.Raycast(player.eyes.HeadRay(), out raycastHit))
            {
                var target = raycastHit.GetEntity();
				
                if (!target)
                {
                    player.ChatMessage(lang.GetMessage("NoTarget", this, player.UserIDString));
                    return;
                }

                if (target.OwnerID != player.userID)
                {
                    player.ChatMessage(lang.GetMessage("NotYours", this, player.UserIDString));
                    return;
                }

                if (!(target.GetComponent<BaseVehicle>() is Minicopter)) return;
                
                target.Kill(BaseNetworkable.DestroyMode.Gib);
            }
            else
            {
                player.ChatMessage(lang.GetMessage("NoTarget", this, player.UserIDString));
            }
        }

        #endregion
    }
}

// --- End of file: WarCopter.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/welcome-tp ---
// --- Original File Path: W/WelcomeTP/WelcomeTP.cs ---

﻿using System.Collections.Generic;
using Oxide.Core;
using Oxide.Core.Libraries.Covalence;

namespace Oxide.Plugins
{
    [Info("Welcome TP", "Ryan", "1.1.1")]
    [Description("Teleports players to a position if they're new")]
    public class WelcomeTP : CovalencePlugin
    {
        private string Lang(string key, string id = null, params object[] args) => string.Format(lang.GetMessage(key, this, id), args);

        private List<GenericPosition> Positions = new List<GenericPosition>();
        private System.Random random = new System.Random();

        private const string UsedPerm = "welcometp.used";
        private const string SetPerm = "welcometp.set";

        #region Lang

        private new void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["Welcome"] = "Welcome to {0}, {1}! You've been teleported to our hub",
                ["PositionSet"] = "You've successfully added your current position to the data file",
                ["Permission"] = "You don't have permission to use that command"
            }, this);
        }

        #endregion

        #region Hooks

        private void Init()
        {
            permission.RegisterPermission(UsedPerm, this);
            permission.RegisterPermission(SetPerm, this);
            Positions = Interface.Oxide.DataFileSystem.ReadObject<List<GenericPosition>>(Name);
        }

        private void OnServerSave() => Interface.Oxide.DataFileSystem.WriteObject(Name, Positions);

        private void OnUserConnected(IPlayer player)
        {
            if (!player.HasPermission(UsedPerm))
            {
                if (Positions.Count < 1) return;
                player.Teleport(Positions[random.Next(Positions.Count)]);
                permission.GrantUserPermission(player.Id, UsedPerm, this);
                timer.Once(2f, () =>
                {
                    player.Reply(Lang("Welcome", player.Id, server.Name, player.Name));
                });
            }
        }

        #endregion

        #region Commands

        [Command("tpset")]
        private void SetCommand(IPlayer player, string command, string[] args)
        {
            if (!player.HasPermission(SetPerm))
            {
                player.Reply(Lang("Permission", player.Id));
                return;
            }
            if(!Positions.Contains(player.Position()))
                Positions.Add(player.Position());
            player.Reply(Lang("PositionSet", player.Id));
        }

        #endregion
    }
}


// --- End of file: WelcomeTP.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/wounded-drop ---
// --- Original File Path: W/WoundedDrop/WoundedDrop.cs ---

namespace Oxide.Plugins
{
    [Info("Wounded Drop", "birthdates", "1.0.0")]
    [Description("Players who are wounded are no longer able to drop items in their hotbar.")]
    public class WoundedDrop : RustPlugin
    {
        #region Hooks
        object OnItemAction(Item item, string action, BasePlayer player)
        {
            if (player.IsWounded()) return false;
            return null;
        }
        #endregion
    }
}
//Generated with birthdates' Plugin Maker


// --- End of file: WoundedDrop.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/wake-up ---
// --- Original File Path: W/WakeUp/WakeUp.cs ---

namespace Oxide.Plugins
{
    [Info("Wake Up", "Orange", "1.0.2")]
    [Description("Automatically wakes players up from sleep")]
    public class WakeUp : RustPlugin
    {
        private const string permUse = "wakeup.use";

        private void Init()
        {
            permission.RegisterPermission(permUse, this);
        }
        
        private void OnPlayerConnected(BasePlayer player)
        {
            OnPlayerSleep(player);
        }
        
        private void OnPlayerSleep(BasePlayer player)
        {
            if (permission.UserHasPermission(player.UserIDString, permUse) == true)
            {
                Wakeup(player);
            }
        }

        private void Wakeup(BasePlayer player)
        {
            if (player.IsConnected == false)
            {
                return;
            }
            
            if (player.IsReceivingSnapshot == true)
            {
                timer.Once(1f, () => Wakeup(player));
                return;
            }
            
            player.EndSleeping();
        }
    }
}

// --- End of file: WakeUp.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/wipe-protection ---
// --- Original File Path: W/WipeProtection/WipeProtection.cs ---

using Oxide.Core;
using System;
using System.Collections.Generic;
using System.Text;
using Rust;
using Oxide.Core.Plugins;
using Oxide.Core.Libraries.Covalence;
using UnityEngine;
using Newtonsoft.Json;

namespace Oxide.Plugins
{
    [Info("WipeProtection", "FastBurst", "2.1.6")]
    [Description("Blocks raiding after wipe for so many hours")]
    class WipeProtection : RustPlugin
    {
        [PluginReference] Plugin HeliSupport;
        #region Vars
        private List<BasePlayer> cooldown = new List<BasePlayer>();
        private float wipeprotecctime;
        private bool refund, broadcastend, msgadmin;
        private const string permUse = "wipeprotection.use";
        private static WipeProtection Instance { get; set; }
        private StoredData storedData;

        private Dictionary<string, string> raidtools = new Dictionary<string, string>
        {
            {"ammo.rocket.fire", "rocket_fire" },
            {"ammo.rocket.hv", "rocket_hv" },
            {"ammo.rocket.basic", "rocket_basic" },
            {"explosive.timed", "explosive.timed.deployed" },
            {"surveycharge", "survey_charge.deployed" },
            {"explosive.satchel", "explosive.satchel.deployed" },
            {"grenade.beancan", "grenade.beancan.deployed" },
            {"grenade.f1", "grenade.f1.deployed" },
            {"ammo.grenadelauncher.he", "40mm_grenade_he"},
            {"ammo.rifle", "riflebullet" },
            {"ammo.rifle.explosive", "riflebullet_explosive" },
            {"ammo.rifle.incendiary", "riflebullet_fire" },
            {"ammo.pistol", "pistolbullet" },
            {"ammo.pistol.fire", "pistolbullet_fire" },
            {"ammo.shotgun", "shotgunbullet" },
            {"ammo.shotgun.fire", "shotgunbullet_fire" },
            {"ammo.shotgun.slug", "shotgunslug" },
            {"arrow.fire", "arrow_fire" }
        };
        #endregion

        #region Oxide Hooks
        private void Unload() => SaveFile();

        private void Init()
        {
            permission.RegisterPermission(permUse, this);
            lang.RegisterMessages(Messages, this);
            Instance = this;
            storedData = Interface.Oxide.DataFileSystem.ReadObject<StoredData>(this.Name);
            CheckTime();
        }

        private void CheckTime()
        {
            timer.Every(30f, () => {
                if (!storedData.wipeprotection)
                    return;

                if (DateTime.Now >= Convert.ToDateTime(storedData.RaidStartTime))
                {
                    if (configData.Settings.broadcastend)
                        SendChatMessage("raidprotection_ended");

                    storedData.wipeprotection = false;
                    SaveFile();
                    return;
                }
            });
        }

        private void OnNewSave(string filename)
        {
            DateTime now = DateTime.Now;
            DateTime rs = now.AddHours(configData.Settings.wipeprotecctime);
            storedData.wipeprotection = true;
            storedData.lastwipe = SaveRestore.SaveCreatedTime.ToString();
            storedData.RaidStartTime = rs.ToString();
            SaveFile();
            PrintWarning(msg("console_auto"), now, rs);
        }

        private void OnPlayerConnected(BasePlayer player)
        {
            if (!player.IsAdmin || !configData.Settings.msgadmin || !storedData.wipeprotection)
                return;

            string remaining = Convert.ToDateTime(storedData.RaidStartTime).Subtract(DateTime.Now).ToShortString();
            SendReply(player, msg("adminmsg"), "<color=orange>[WipeProtection]</color>", storedData.RaidStartTime, remaining);
        }

        private object CanHelicopterTarget(PatrolHelicopterAI heli, BaseEntity entity)
        {
            object successAFD = Instance.HeliSupport?.Call("IsHeliSupport", heli as PatrolHelicopterAI);
            if (successAFD is bool && (bool)successAFD)
            {
                return true;
            }
            return true;
        }

        private object OnEntityTakeDamage(BaseCombatEntity entity, HitInfo hitinfo)
        {
            if (hitinfo == null || entity == null || entity.OwnerID == hitinfo?.InitiatorPlayer?.userID || entity?.OwnerID == 0 || hitinfo?.WeaponPrefab?.ShortPrefabName == null)
                return null;

            if (!(entity is BuildingBlock || entity is Door || entity.PrefabName.Contains("deployable")))
                return null;

            BasePlayer attacker = hitinfo.InitiatorPlayer;

            string name = null;

            if (hitinfo?.WeaponPrefab?.ShortPrefabName == "rocket_fire"
            || hitinfo?.WeaponPrefab?.ShortPrefabName == "rocket_hv"
            || hitinfo?.WeaponPrefab?.ShortPrefabName == "rocket_basic"
            || hitinfo?.WeaponPrefab?.ShortPrefabName == "explosive.timed.deployed"
            || hitinfo?.WeaponPrefab?.ShortPrefabName == "survey_charge.deployed"
            || hitinfo?.WeaponPrefab?.ShortPrefabName == "explosive.satchel.deployed"
            || hitinfo?.WeaponPrefab?.ShortPrefabName == "grenade.beancan.deployed"
            || hitinfo?.WeaponPrefab?.ShortPrefabName == "grenade.f1.deployed"
            || hitinfo?.WeaponPrefab?.ShortPrefabName == "40mm_grenade_he"
            || hitinfo?.WeaponPrefab?.ShortPrefabName == "ammo.rifle"
            || hitinfo?.WeaponPrefab?.ShortPrefabName == "ammo.rifle.explosive"
            || hitinfo?.WeaponPrefab?.ShortPrefabName == "ammo.rifle.incendiary"
            || hitinfo?.WeaponPrefab?.ShortPrefabName == "arrow.fire"
            || hitinfo?.WeaponPrefab?.ShortPrefabName == "ammo.pistol"
            || hitinfo?.WeaponPrefab?.ShortPrefabName == "ammo.pistol.fire"
            || hitinfo?.WeaponPrefab?.ShortPrefabName == "ammo.rifle.explosive"
            )
            {
                name = hitinfo?.WeaponPrefab?.ShortPrefabName;
            }
            else
            {
                name = hitinfo?.ProjectilePrefab?.name.ToString();
            }

            if (cooldown.Contains(attacker))
            {
                RemoveCD(attacker);
                if (WipeProtected())
                {
                    hitinfo.damageTypes = new DamageTypeList();
                    hitinfo.DoHitEffects = false;
                    hitinfo.HitMaterial = 0;
                    return true;
                }
                return null;
            }

            cooldown.Add(attacker);
            RemoveCD(attacker);

            if (WipeProtected())
            {
                //Puts(name.ToString());
                hitinfo.damageTypes = new DamageTypeList();
                hitinfo.DoHitEffects = false;
                hitinfo.HitMaterial = 0;
                msgPlayer(attacker, entity);
                Refund(attacker, name, entity);
                return true;
            }

            return null;
        }
        #endregion

        #region Functions
        private void RemoveCD(BasePlayer player)
        {
            if (player == null)
                return;

            timer.In(0.1f, () => {
                if (cooldown.Contains(player)) cooldown.Remove(player);
            });
        }

        bool WipeProtected()
        {
            if (!storedData.wipeprotection)
                return false;

            if (DateTime.Now < (Convert.ToDateTime(storedData.RaidStartTime)))
                return true;

            return false;
        }

        private void msgPlayer(BasePlayer player, BaseEntity entity)
        {
            if (WipeProtected())
            {
                SendReply(player, msg("wipe_blocked"));
                return;
            }
        }

        private void Refund(BasePlayer player, string name, BaseEntity ent)
        {
            if (configData.Settings.Refunds.RefundAmmo)
            {
                foreach (var entry in raidtools)
                {
                    if (name == entry.Value)
                    {
                        Item item = ItemManager.CreateByName(entry.Key, 1);
                        player.GiveItem(item);
                        if (configData.Settings.Refunds.NotifyRefund)
                            SendReply(player, msg("refunded"), item.info.displayName.english);
                    }
                }
            }
            else
            {
                if (configData.Settings.Refunds.NotifyRefundNo)
                    SendReply(player, msg("refundedNot"));
            }
        }

        private void SaveFile() => Interface.Oxide.DataFileSystem.WriteObject(this.Name, storedData);
        #endregion

        #region Commands
        [ConsoleCommand("wp")]
        private void wipeCmd(ConsoleSystem.Arg arg)
        {
            if (arg.Connection != null)
                return;

            var player = arg.Player();

            if (arg.Args == null || arg.Args.Length == 0)
            {
                Puts("Wipe Protection by:: FastBurst");
                Puts("wp start - Manually start wipe protection");
                Puts("wp stop - Manually stop wipe protection");
                return;
            }

            if (arg.IsAdmin == true)
            {
                switch (arg.Args[0].ToLower())
                {
                    case "start":
                        DateTime now = DateTime.Now;
                        DateTime rs = now.AddHours(configData.Settings.wipeprotecctime);
                        storedData.wipeprotection = true;
                        storedData.lastwipe = SaveRestore.SaveCreatedTime.ToString();
                        storedData.RaidStartTime = rs.ToString();
                        SaveFile();

                        Puts(msg("console_manual"), now, rs);
                        return;
                    case "stop":
                        storedData.wipeprotection = false;
                        SaveFile();
                        Puts(msg("console_stopped"));
                        return;
                    default:
                        break;
                }
            }
            else
            {
                if (permission.UserHasPermission(player.UserIDString, permUse) == false)
                {
                    SendReply(arg, msg("permission"));
                    return;
                }
            }
        }

        [ChatCommand("wp")]
        private void wipeCmd2(BasePlayer player, string command, string[] args)
        {
            if (permission.UserHasPermission(player.UserIDString, permUse) == false)
            {
                SendReply(player, msg("permission"));
                return;
            }

            if (args.Length == 0)
            {
                var helpmsg = new StringBuilder();
                helpmsg.Append("<size=22><color=green>Wipe Protection</color></size> by: FastBurst\n");
                helpmsg.Append("<color=orange>/wp start</color> - Manually start wipe protection\n");
                helpmsg.Append("<color=orange>/wp stop</color> - Manually stop wipe protection\n");
                SendReply(player, helpmsg.ToString().TrimEnd());
                return;
            }

            switch (args[0].ToLower())
            {
                case "start":
                    DateTime now = DateTime.Now;
                    DateTime rs = now.AddHours(configData.Settings.wipeprotecctime);
                    storedData.wipeprotection = true;
                    storedData.lastwipe = SaveRestore.SaveCreatedTime.ToString();
                    storedData.RaidStartTime = rs.ToString();
                    SaveFile();

                    SendReply(player, msg("console_manual"), now, rs);
                    return;
                case "stop":
                    storedData.wipeprotection = false;
                    SaveFile();
                    SendReply(player, msg("console_stopped"));
                    return;
                default:
                    player.ChatMessage("Invalid syntax!");
                    break;
            }
        }
        #endregion

        #region Config		
        private static ConfigData configData;
        private class ConfigData
        {
            [JsonProperty(PropertyName = "Settings")]
            public SettingOptions Settings { get; set; }

            public class SettingOptions
            {
                [JsonProperty(PropertyName = "Broadcast to chat when raid block has ended")]
                public bool broadcastend { get; set; }
                [JsonProperty(PropertyName = "Message admins on connection with info on when the raid block is ending")]
                public bool msgadmin { get; set; }
                [JsonProperty(PropertyName = "Wipe protection time (hours)")]
                public float wipeprotecctime { get; set; }
                [JsonProperty(PropertyName = "Refunding Options")]
                public RefundSettings Refunds { get; set; }

                public class RefundSettings
                {
                    [JsonProperty(PropertyName = "Allow Refunding of Explosives & Rockets")]
                    public bool RefundAmmo { get; set; }
                    [JsonProperty(PropertyName = "Enable notifican on refunding of ammo types")]
                    public bool NotifyRefund { get; set; }
                    [JsonProperty(PropertyName = "Enable notifican on denial of refunding of ammo types")]
                    public bool NotifyRefundNo { get; set; }
                }
            }

            public Oxide.Core.VersionNumber Version { get; set; }
        }

        protected override void LoadConfig()
        {
            base.LoadConfig();
            configData = Config.ReadObject<ConfigData>();

            if (configData.Version < Version)
                UpdateConfigValues();

            Config.WriteObject(configData, true);
        }

        protected override void LoadDefaultConfig() => configData = GetBaseConfig();

        private ConfigData GetBaseConfig()
        {
            return new ConfigData
            {
                Settings = new ConfigData.SettingOptions
                {
                    broadcastend = true,
                    msgadmin = true,
                    wipeprotecctime = 24f,
                    Refunds = new ConfigData.SettingOptions.RefundSettings
                    {
                        RefundAmmo = true,
                        NotifyRefund = true,
                        NotifyRefundNo = true
                    }
                },
                Version = Version
            };
        }

        protected override void SaveConfig() => Config.WriteObject(configData, true);

        private void UpdateConfigValues()
        {
            PrintWarning("Config update detected! Updating config values...");

            ConfigData baseConfig = GetBaseConfig();

            if (configData.Version < new Core.VersionNumber(2, 0, 0))
                configData = baseConfig;

            if (configData.Version < new Core.VersionNumber(2, 0, 3))
                configData.Settings.Refunds = baseConfig.Settings.Refunds;

            configData.Version = Version;
            PrintWarning("Config update completed!");
        }

        private T GetConfig<T>(string name, T defaultValue)
        {
            if (Config[name] == null) return defaultValue;
            return (T)Convert.ChangeType(Config[name], typeof(T));
        }
        #endregion

        #region DataFile
        private class StoredData
        {
            public bool wipeprotection;
            public string lastwipe;
            public string RaidStartTime;

            public StoredData()
            {

            }
        }
        #endregion

        #region Lang
        private static void SendChatMessage(string key, params object[] args)
        {
            for (int i = 0; i < BasePlayer.activePlayerList.Count; i++)
            {
                BasePlayer player = BasePlayer.activePlayerList[i];
                player.ChatMessage(args != null ? string.Format(msg(key, player.UserIDString), args) : msg(key, player.UserIDString));
            }
        }

        private static string msg(string key, string playerId = null) => Instance.lang.GetMessage(key, Instance, playerId);

        private Dictionary<string, string> Messages = new Dictionary<string, string>
        {
            ["adminmsg"] = "Wipe protection ending at <color=orange>{0} ({1})</color>",
            ["console_manual"] = "Manually setting {0} as wipe time and {1} as time after which raiding is possible",
            ["console_auto"] = "Detected wipe, setting {0} as wipe time and {1} as time after which raiding is possible",
            ["console_stopped"] = "Everything is now raidable",
            ["raidprotection_ended"] = "<size=20>Wipe protection is now over.</size>",
            ["dataFileWiped"] = "Data file successfully wiped",
            ["permission"] = "<color=#ff0000>You don't have permission to use that!</color>",
            ["refunded"] = "Your '{0}' was refunded.",
            ["refundedNot"] = "Your Ammo or Explosives are <color=red>not being refunded</color> and has been lost due to trying to raid before the time allowed.",
            ["wipe_blocked"] = "This entity cannot be destroyed because all raiding is currently blocked."
        };
        #endregion		
    }
}

// --- End of file: WipeProtection.cs ---
// --- Next file ---

// --- Source Plugin URL: https://umod.org/plugins/online-players ---
// --- Original File Path: O/OnlinePlayers/OnlinePlayers.cs ---

﻿using System;
using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using UnityEngine;

namespace Oxide.Plugins
{
	[Info("Online Players", "MACHIN3", "1.1.8")]
	[Description("Shows list of online players and sleepers in separate UIs")]
	public class OnlinePlayers : RustPlugin
	{
        #region Update Log

        /*****************************************************
			【 𝓜𝓐𝓒𝓗𝓘𝓝𝓔 】
		     ---------------
		Website: https://www.rustlevels.com/
        Discord: http://discord.rustlevels.com/
		
		---------------------
		✯ update 1.1.8
		---------------------
		✯ Fixed player list errors
        
		/*****************************************************/
        #region Previous Releases
        /*****************************************************
		---------------------
		✯ update 1.1.7
		---------------------
		✯ Updated support for latest XPerience version with new UIs
		✯ Added chat command to turn OnlineHUD on/off
		✯ Added option to show player level on HUD & Player List UIs (requires XPerience)
		✯ Adjusted HUD layout for better control of location and display
		✯ Fixed refresh issues for some players
		✯ Fixed HUD showing sleeper list
		---------------------
		✯ update 1.1.5
		---------------------
		✯ Fixed XPerience, NTeleportation, and KillRecords icons not showing when enabled
		✯ Fixed player/sleeper count including admins when hide admin option is true
		---------------------
		✯ update 1.1.4
		---------------------
		✯ Fixed Online HUD showing when disabled in config
		✯ Fixed layout issues in player/sleeper UIs
		---------------------
		✯ update 1.1.3
		---------------------
		✯ Added option to show Online HUD
		✯ Added option to show player avatars (requirer ImageLibrary)

		✯ HUD Options:
			* Location from left, bottom
			* HUD width, height
			* HUD transparency
			* Max number of players to show on HUD
			* HUD refresh rate in seconds
			* Font size for player names

		NOTES: Player avatars require ImageLibrary plugin and in the ImageLibrary config you must set ("Avatars - Store player avatars": true,)
		---------------------
		✯ update 1.1.2
		---------------------
		✯ Added support for DiscordReport plugin
		✯ Option to show report player icon in Online Player list
		---------------------
		✯ update 1.1.1
		---------------------
		✯ Fixed issues where players couldn't close UIs
		---------------------
		✯ update 1.1.0
		---------------------
		✯ Added option to show Ranks from XPerience
		✯ Fixed XPerience profile icon links
		---------------------
		✯ update 1.0.9
		---------------------
		✯ Updated profile links for XPerience
		---------------------
		✯ update 1.0.8
		---------------------
		✯ Fixed errors when sleeper count is disabled
		---------------------
		✯ update 1.0.7
		---------------------
		✯ Added button to switch between Online/Offline UIs
		---------------------
		✯ update 1.0.6
		---------------------
		✯ Added option to set custom chat commands of UIs
		---------------------
		✯ update 1.0.5
		---------------------
		✯ Added UI location adjustments Options
		---------------------
		✯ update 1.0.4
		---------------------
		✯ Added refresh button to UIs
		✯ Added NTeleportation support for TPR to players online
		---------------------
		✯ update 1.0.3
		---------------------
		✯ Fixed UIs not updating lists when new players join
		✯ Added options to show Online/Sleeper count
		---------------------
		✯ update 1.0.2
		---------------------
		✯ Added option to hide admins from lists
		---------------------
		✯ update 1.0.1
		---------------------
		✯ Reduced UI structure
		✯ Organized UI structure
		✯ Cleaned/Removed unused coding
		*****************************************************/
        #endregion
        #endregion

        #region Refrences
        [PluginReference]
		private readonly Plugin KillRecords, XPerience, NTeleportation, DiscordReport, ImageLibrary;		
		#endregion

		#region Fields	
		private Configuration config;
        private Timer _playerdata;
        private const string OnlinePlayersUI = "OnlinePlayersUI";
		private const string OnlinePlayersUIInner = "OnlinePlayersUIInner";
		private const string OnlinePlayersUIPages = "OnlinePlayersUIPages";
		private const string SleeperPlayersUI = "SleeperPlayersUI";
		private const string SleeperPlayersUIInner = "SleeperPlayersUIInner";
		private const string SleeperPlayersUIPages = "SleeperPlayersUIPages";
		private const string OnlinePlayersHUD = "OnlinePlayersHUD";
		private readonly Hash<ulong, int> _onlineUIPage = new Hash<ulong, int>();
		private readonly Hash<ulong, string> onlinePlayers = new Hash<ulong, string>();
		private readonly Hash<ulong, int> _sleeperPlayersUIPage = new Hash<ulong, int>();
		private readonly Hash<ulong, string> sleeperPlayers = new Hash<ulong, string>();
		#endregion

        #region Config
        private class Configuration
		{
			[JsonProperty("Hide Admins")]
			public bool HideAdmins = false;
			[JsonProperty("Show Online Player Count")]
			public bool ShowOnlineCount = true;
			[JsonProperty("Show Sleeper Count")]
			public bool ShowSleeperCount = true;
            [JsonProperty("Show Player Avatars (requires ImageLibrary and Store player avatars = true)")]
            public bool playeravatars = false;
            [JsonProperty("Show KillRecords Icon (Requires Kill Records Plugin)")]
			public bool ShowK